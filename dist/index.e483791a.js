// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rAXy":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"gqUfj":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "1b377d1be483791a";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"b1CQh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "program", ()=>program
);
parcelHelpers.export(exports, "resources", ()=>resources
);
var _reactFsJs = require("./.fable/Fable.Elmish.React.3.0.1/react.fs.js");
var _commonFsJs = require("./.fable/Fable.Elmish.HMR.4.1.0/common.fs.js");
var _programFsJs = require("./.fable/Fable.Elmish.3.1.0/program.fs.js");
var _stateFsJs = require("./State.fs.js");
var _viewFsJs = require("./View.fs.js");
var _debuggerFsJs = require("./.fable/Fable.Elmish.Debugger.3.3.0/debugger.fs.js");
var _listJs = require("./.fable/fable-library.3.2.10/List.js");
var _guidJs = require("./.fable/fable-library.3.2.10/Guid.js");
var _mapJs = require("./.fable/fable-library.3.2.10/Map.js");
var _encodeFsJs = require("./.fable/Thoth.Json.6.0.0/Encode.fs.js");
var _decodeFsJs = require("./.fable/Thoth.Json.6.0.0/Decode.fs.js");
var _extraFsJs = require("./.fable/Thoth.Json.6.0.0/Extra.fs.js");
var _typesFsJs = require("./.fable/Thoth.Json.6.0.0/Types.fs.js");
var _domainFsJs = require("./Domain.fs.js");
var _utilJs = require("./.fable/fable-library.3.2.10/Util.js");
var _reflectionJs = require("./.fable/fable-library.3.2.10/Reflection.js");
var _stringJs = require("./.fable/fable-library.3.2.10/String.js");
var _fableImportRemoteDevFsJs = require("./.fable/Fable.Elmish.Debugger.3.3.0/Fable.Import.RemoteDev.fs.js");
var _remotedev = require("remotedev");
var _translationsJson = require("./translations.json");
var _promiseFsJs = require("./.fable/Fable.Promise.2.2.2/Promise.fs.js");
var _promiseImplFsJs = require("./.fable/Fable.Promise.2.2.2/PromiseImpl.fs.js");
var _fableI18NextFsJs = require("../Fable.I18Next/Fable.I18Next.fs.js");
var _hmrFsJs = require("./.fable/Fable.Elmish.HMR.4.1.0/hmr.fs.js");
var _optionJs = require("./.fable/fable-library.3.2.10/Option.js");
var _cmdFsJs = require("./.fable/Fable.Elmish.3.1.0/cmd.fs.js");
const program = (()=>{
    let copyOfStruct, copyOfStruct_1, copyOfStruct_2, opt, makeMsgObj, fallback, inputRecord_1, inputRecord_2;
    const program_5 = _reactFsJs.Program_Internal_withReactBatchedUsing((equal, view, state, dispatch_1)=>_commonFsJs.lazyView2With(equal, view, state, dispatch_1)
    , "elmish-app", _programFsJs.ProgramModule_withConsoleTrace(_programFsJs.ProgramModule_mkProgram(_stateFsJs.init, (msg, currentModel)=>_stateFsJs.update(msg, currentModel)
    , (model, dispatch)=>_viewFsJs.view(model, dispatch)
    )));
    try {
        let patternInput;
        try {
            let coders;
            let extra_6;
            const extra_3 = new _typesFsJs.ExtraCoders((copyOfStruct = _guidJs.newGuid(), copyOfStruct), _mapJs.add("System.Decimal", [
                (value)=>_encodeFsJs.decimal(value)
                ,
                (path)=>(value_1)=>_decodeFsJs.decimal(path, value_1)
            ], _extraFsJs.empty.Coders));
            extra_6 = new _typesFsJs.ExtraCoders((copyOfStruct_1 = _guidJs.newGuid(), copyOfStruct_1), _mapJs.add("System.Int64", [
                (value_3)=>_encodeFsJs.int64(value_3)
                , _decodeFsJs.int64], extra_3.Coders));
            coders = new _typesFsJs.ExtraCoders((copyOfStruct_2 = _guidJs.newGuid(), copyOfStruct_2), _mapJs.add("System.UInt64", [
                (value_5)=>_encodeFsJs.uint64(value_5)
                , _decodeFsJs.uint64], extra_6.Coders));
            const encoder_3 = _encodeFsJs.Auto_generateBoxedEncoder_Z20B7B430(_domainFsJs.Model$reflection(), void 0, coders, void 0);
            const decoder_3 = _decodeFsJs.Auto_generateBoxedDecoder_79988AEF(_domainFsJs.Model$reflection(), void 0, coders);
            patternInput = [
                (x)=>{
                    try {
                        return encoder_3(x);
                    } catch (er) {
                        _debuggerFsJs.Debugger_showWarning(_listJs.singleton(er.message));
                        return x;
                    }
                },
                (x_1)=>{
                    const matchValue = _decodeFsJs.fromValue("$", _utilJs.uncurry(2, decoder_3), x_1);
                    if (matchValue.tag === 1) throw new Error(matchValue.fields[0]);
                    else return matchValue.fields[0];
                }
            ];
        } catch (er_2) {
            _debuggerFsJs.Debugger_showWarning(_listJs.singleton(er_2.message));
            patternInput = [
                (value_7)=>value_7
                ,
                (_arg1)=>{
                    throw new Error("Cannot inflate model");
                }
            ];
        }
        return _debuggerFsJs.Program_withDebuggerUsing(patternInput[0], patternInput[1], (opt = new _debuggerFsJs.Debugger_ConnectionOptions(0), (makeMsgObj = (tupledArg)=>({
                type: tupledArg[0],
                msg: tupledArg[1]
            })
        , (fallback = new _fableImportRemoteDevFsJs.Options$1(true, 443, "remotedev.io", true, (arg00)=>{
            const x_3 = arg00;
            if (_reflectionJs.isUnion(x_3)) {
                const getCaseName = (acc_mut, x_4_mut)=>{
                    getCaseName: while(true){
                        const acc = acc_mut, x_4 = x_4_mut;
                        const acc_1 = _listJs.cons(_reflectionJs.getCaseName(x_4), acc);
                        const fields_1 = _reflectionJs.getCaseFields(x_4);
                        if (fields_1.length === 1 ? _reflectionJs.isUnion(fields_1[0]) : false) {
                            acc_mut = acc_1;
                            x_4_mut = fields_1[0];
                            continue getCaseName;
                        } else return makeMsgObj([
                            _stringJs.join("/", acc_1),
                            fields_1
                        ]);
                        break;
                    }
                };
                return getCaseName(_listJs.empty(), x_3);
            } else return makeMsgObj([
                "NOT-AN-F#-UNION",
                x_3
            ]);
        }), _remotedev.connectViaExtension(opt.tag === 1 ? (inputRecord_1 = fallback, new _fableImportRemoteDevFsJs.Options$1(inputRecord_1.remote, opt.fields[1], opt.fields[0], false, inputRecord_1.getActionType)) : opt.tag === 2 ? (inputRecord_2 = fallback, new _fableImportRemoteDevFsJs.Options$1(inputRecord_2.remote, opt.fields[1], opt.fields[0], inputRecord_2.secure, inputRecord_2.getActionType)) : new _fableImportRemoteDevFsJs.Options$1(false, 8000, "localhost", false, fallback.getActionType))))), program_5);
    } catch (ex) {
        _debuggerFsJs.Debugger_showError(_listJs.ofArray([
            "Unable to connect to the monitor, continuing w/o debugger",
            ex.message
        ]));
        return program_5;
    }
})();
const resources = _translationsJson;
(function() {
    const pr = _promiseFsJs.PromiseBuilder__Run_212F1D4B(_promiseImplFsJs.promise, _promiseFsJs.PromiseBuilder__Delay_62FBFDE1(_promiseImplFsJs.promise, ()=>_fableI18NextFsJs.I18n_Init_Z6861C5C0(resources, "de").then(()=>{
            let hmrState = null;
            const hot = module.hot;
            if (!(hot == null)) {
                window.Elmish_HMR_Count = window.Elmish_HMR_Count == null ? 0 : window.Elmish_HMR_Count + 1;
                const value = hot.accept();
                const matchValue = _hmrFsJs.Internal_tryRestoreState(hot);
                if (matchValue == null) ;
                else {
                    const previousState = _optionJs.value(matchValue);
                    hmrState = previousState;
                }
            }
            const map = (tupledArg)=>[
                    tupledArg[0],
                    _cmdFsJs.Cmd_map((arg0)=>new _hmrFsJs.Msg$1(0, arg0)
                    , tupledArg[1])
                ]
            ;
            _programFsJs.ProgramModule_runWith(void 0, _programFsJs.ProgramModule_map(_utilJs.uncurry(2, (init)=>{
                if (hmrState == null) return (arg_2)=>{
                    const tupledArg_1 = map(init(arg_2));
                    return [
                        new _hmrFsJs.Model$1(1, tupledArg_1[0]),
                        tupledArg_1[1]
                    ];
                };
                else return (_arg1_1)=>[
                        hmrState,
                        _cmdFsJs.Cmd_none()
                    ]
                ;
            }), (update, msg, model_1)=>{
                let patternInput;
                const patternInput_1 = map(msg.tag === 1 ? [
                    new _hmrFsJs.Model$1(0),
                    _cmdFsJs.Cmd_none()
                ] : model_1.tag === 1 ? (patternInput = update(msg.fields[0], model_1.fields[0]), [
                    new _hmrFsJs.Model$1(1, patternInput[0]),
                    patternInput[1]
                ]) : [
                    model_1,
                    _cmdFsJs.Cmd_none()
                ]);
                const newModel_1 = patternInput_1[0];
                hmrState = newModel_1;
                return [
                    newModel_1,
                    patternInput_1[1]
                ];
            }, (view, model_5, dispatch_2)=>{
                if (model_5.tag === 1) return view(model_5.fields[0], (arg_4)=>dispatch_2(new _hmrFsJs.Msg$1(0, arg_4))
                );
                else throw new Error("\nYour are using HMR and this Elmish application has been marked as inactive.\n\nYou should not see this message\n                    ");
            }, (setState, model_3, dispatch)=>{
                if (model_3.tag === 1) setState(model_3.fields[0], (arg_3)=>dispatch(new _hmrFsJs.Msg$1(0, arg_3))
                );
            }, (subscribe, model_4)=>{
                if (model_4.tag === 1) return _cmdFsJs.Cmd_batch(_listJs.ofArray([
                    _cmdFsJs.Cmd_map((arg0_2)=>new _hmrFsJs.Msg$1(0, arg0_2)
                    , subscribe(model_4.fields[0])),
                    _listJs.singleton((dispatch_1)=>{
                        if (!(hot == null)) hot.dispose((data)=>{
                            _hmrFsJs.Internal_saveState(data, hmrState);
                            return dispatch_1(new _hmrFsJs.Msg$1(1));
                        });
                    })
                ]));
                else return _cmdFsJs.Cmd_none();
            }, program));
            return Promise.resolve();
        })
    ));
    pr.then();
})();

},{"./.fable/Fable.Elmish.React.3.0.1/react.fs.js":"cvBxJ","./.fable/Fable.Elmish.HMR.4.1.0/common.fs.js":"7djJV","./.fable/Fable.Elmish.3.1.0/program.fs.js":"2PYJR","./State.fs.js":"eVTNj","./View.fs.js":"lp09b","./.fable/Fable.Elmish.Debugger.3.3.0/debugger.fs.js":"gbXar","./.fable/fable-library.3.2.10/List.js":"3UB49","./.fable/fable-library.3.2.10/Guid.js":"29AE1","./.fable/fable-library.3.2.10/Map.js":"8mQPo","./.fable/Thoth.Json.6.0.0/Encode.fs.js":"hMwl6","./.fable/Thoth.Json.6.0.0/Decode.fs.js":"cIuXj","./.fable/Thoth.Json.6.0.0/Extra.fs.js":"4rlC6","./.fable/Thoth.Json.6.0.0/Types.fs.js":"1K9qR","./Domain.fs.js":"1rMO5","./.fable/fable-library.3.2.10/Util.js":"e4VZ7","./.fable/fable-library.3.2.10/Reflection.js":"c0YT4","./.fable/fable-library.3.2.10/String.js":"baXBU","./.fable/Fable.Elmish.Debugger.3.3.0/Fable.Import.RemoteDev.fs.js":"jEftg","remotedev":"Ma6EQ","./translations.json":"3nIsZ","./.fable/Fable.Promise.2.2.2/Promise.fs.js":"1ebQI","./.fable/Fable.Promise.2.2.2/PromiseImpl.fs.js":"lGgFU","../Fable.I18Next/Fable.I18Next.fs.js":"8uy8s","./.fable/Fable.Elmish.HMR.4.1.0/hmr.fs.js":"jOrcr","./.fable/fable-library.3.2.10/Option.js":"gHWVf","./.fable/Fable.Elmish.3.1.0/cmd.fs.js":"bqyYR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cvBxJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Program_Internal_withReactBatchedUsing", ()=>Program_Internal_withReactBatchedUsing
);
parcelHelpers.export(exports, "Program_Internal_withReactSynchronousUsing", ()=>Program_Internal_withReactSynchronousUsing
);
parcelHelpers.export(exports, "Program_Internal_withReactHydrateUsing", ()=>Program_Internal_withReactHydrateUsing
);
parcelHelpers.export(exports, "Program_withReactBatched", ()=>Program_withReactBatched
);
parcelHelpers.export(exports, "Program_withReactSynchronous", ()=>Program_withReactSynchronous
);
parcelHelpers.export(exports, "Program_withReact", ()=>Program_withReact
);
parcelHelpers.export(exports, "Program_withReactUnoptimized", ()=>Program_withReactUnoptimized
);
parcelHelpers.export(exports, "Program_withReactHydrate", ()=>Program_withReactHydrate
);
var _programFsJs = require("../Fable.Elmish.3.1.0/program.fs.js");
var _reactDom = require("react-dom");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _commonFsJs = require("./common.fs.js");
function Program_Internal_withReactBatchedUsing(lazyView2With, placeholderId, program) {
    let lastRequest = void 0;
    return _programFsJs.ProgramModule_withSetState((model, dispatch)=>{
        if (lastRequest != null) window.cancelAnimationFrame(lastRequest);
        lastRequest = window.requestAnimationFrame((_arg1)=>{
            _reactDom.render(lazyView2With((x, y)=>x === y
            , _utilJs.uncurry(2, _programFsJs.ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));
        });
    }, program);
}
_c = Program_Internal_withReactBatchedUsing;
function Program_Internal_withReactSynchronousUsing(lazyView2With, placeholderId, program) {
    return _programFsJs.ProgramModule_withSetState((model, dispatch)=>{
        _reactDom.render(lazyView2With((x, y)=>x === y
        , _utilJs.uncurry(2, _programFsJs.ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));
    }, program);
}
_c1 = Program_Internal_withReactSynchronousUsing;
function Program_Internal_withReactHydrateUsing(lazyView2With, placeholderId, program) {
    return _programFsJs.ProgramModule_withSetState((model, dispatch)=>{
        _reactDom.hydrate(lazyView2With((x, y)=>x === y
        , _utilJs.uncurry(2, _programFsJs.ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));
    }, program);
}
_c2 = Program_Internal_withReactHydrateUsing;
function Program_withReactBatched(placeholderId, program) {
    return Program_Internal_withReactBatchedUsing((equal, view, state, dispatch)=>_commonFsJs.Common_lazyView2With(equal, view, state, dispatch)
    , placeholderId, program);
}
_c3 = Program_withReactBatched;
function Program_withReactSynchronous(placeholderId, program) {
    return Program_Internal_withReactSynchronousUsing((equal, view, state, dispatch)=>_commonFsJs.Common_lazyView2With(equal, view, state, dispatch)
    , placeholderId, program);
}
_c4 = Program_withReactSynchronous;
function Program_withReact(placeholderId, program) {
    return Program_Internal_withReactBatchedUsing((equal, view, state, dispatch)=>_commonFsJs.Common_lazyView2With(equal, view, state, dispatch)
    , placeholderId, program);
}
_c5 = Program_withReact;
function Program_withReactUnoptimized(placeholderId, program) {
    return Program_Internal_withReactSynchronousUsing((equal, view, state, dispatch)=>_commonFsJs.Common_lazyView2With(equal, view, state, dispatch)
    , placeholderId, program);
}
_c6 = Program_withReactUnoptimized;
function Program_withReactHydrate(placeholderId, program) {
    return Program_Internal_withReactHydrateUsing((equal, view, state, dispatch)=>_commonFsJs.Common_lazyView2With(equal, view, state, dispatch)
    , placeholderId, program);
}
_c7 = Program_withReactHydrate;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;
$RefreshReg$(_c, "Program_Internal_withReactBatchedUsing");
$RefreshReg$(_c1, "Program_Internal_withReactSynchronousUsing");
$RefreshReg$(_c2, "Program_Internal_withReactHydrateUsing");
$RefreshReg$(_c3, "Program_withReactBatched");
$RefreshReg$(_c4, "Program_withReactSynchronous");
$RefreshReg$(_c5, "Program_withReact");
$RefreshReg$(_c6, "Program_withReactUnoptimized");
$RefreshReg$(_c7, "Program_withReactHydrate");

},{"../Fable.Elmish.3.1.0/program.fs.js":"2PYJR","react-dom":"gkWJK","../fable-library.3.2.10/Util.js":"e4VZ7","./common.fs.js":"4cRys","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2PYJR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Program$4", ()=>Program$4
);
parcelHelpers.export(exports, "Program$4$reflection", ()=>Program$4$reflection
);
parcelHelpers.export(exports, "ProgramModule_mkProgram", ()=>ProgramModule_mkProgram
);
parcelHelpers.export(exports, "ProgramModule_mkSimple", ()=>ProgramModule_mkSimple
);
parcelHelpers.export(exports, "ProgramModule_withSubscription", ()=>ProgramModule_withSubscription
);
parcelHelpers.export(exports, "ProgramModule_withConsoleTrace", ()=>ProgramModule_withConsoleTrace
);
parcelHelpers.export(exports, "ProgramModule_withTrace", ()=>ProgramModule_withTrace
);
parcelHelpers.export(exports, "ProgramModule_withErrorHandler", ()=>ProgramModule_withErrorHandler
);
parcelHelpers.export(exports, "ProgramModule_mapErrorHandler", ()=>ProgramModule_mapErrorHandler
);
parcelHelpers.export(exports, "ProgramModule_onError", ()=>ProgramModule_onError
);
parcelHelpers.export(exports, "ProgramModule_withSetState", ()=>ProgramModule_withSetState
);
parcelHelpers.export(exports, "ProgramModule_setState", ()=>ProgramModule_setState
);
parcelHelpers.export(exports, "ProgramModule_view", ()=>ProgramModule_view
);
parcelHelpers.export(exports, "ProgramModule_withSyncDispatch", ()=>ProgramModule_withSyncDispatch
);
parcelHelpers.export(exports, "ProgramModule_map", ()=>ProgramModule_map
);
parcelHelpers.export(exports, "ProgramModule_runWith", ()=>ProgramModule_runWith
);
parcelHelpers.export(exports, "ProgramModule_run", ()=>ProgramModule_run
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _cmdFsJs = require("./cmd.fs.js");
var _preludeFsJs = require("./prelude.fs.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _listJs = require("../fable-library.3.2.10/List.js");
var _ringFsJs = require("./ring.fs.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _stringJs = require("../fable-library.3.2.10/String.js");
class Program$4 extends _typesJs.Record {
    constructor(init, update, subscribe, view, setState, onError, syncDispatch1){
        super();
        this.init = init;
        this.update = update;
        this.subscribe = subscribe;
        this.view = view;
        this.setState = setState;
        this.onError = onError;
        this.syncDispatch = syncDispatch1;
    }
}
function Program$4$reflection(gen0, gen1, gen2, gen3) {
    return _reflectionJs.record_type("Elmish.Program`4", [
        gen0,
        gen1,
        gen2,
        gen3
    ], Program$4, ()=>[
            [
                "init",
                _reflectionJs.lambda_type(gen0, _reflectionJs.tuple_type(gen1, _reflectionJs.list_type(_reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), _reflectionJs.unit_type))))
            ],
            [
                "update",
                _reflectionJs.lambda_type(gen2, _reflectionJs.lambda_type(gen1, _reflectionJs.tuple_type(gen1, _reflectionJs.list_type(_reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), _reflectionJs.unit_type)))))
            ],
            [
                "subscribe",
                _reflectionJs.lambda_type(gen1, _reflectionJs.list_type(_reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), _reflectionJs.unit_type)))
            ],
            [
                "view",
                _reflectionJs.lambda_type(gen1, _reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), gen3))
            ],
            [
                "setState",
                _reflectionJs.lambda_type(gen1, _reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), _reflectionJs.unit_type))
            ],
            [
                "onError",
                _reflectionJs.lambda_type(_reflectionJs.tuple_type(_reflectionJs.string_type, _reflectionJs.class_type("System.Exception")), _reflectionJs.unit_type)
            ],
            [
                "syncDispatch",
                _reflectionJs.lambda_type(_reflectionJs.lambda_type(gen2, _reflectionJs.unit_type), _reflectionJs.lambda_type(gen2, _reflectionJs.unit_type))
            ]
        ]
    );
}
_c = Program$4$reflection;
function ProgramModule_mkProgram(init1, update1, view1) {
    return new Program$4(init1, update1, (_arg1)=>_cmdFsJs.Cmd_none()
    , view1, (model, arg)=>{
        view1(model, arg);
    }, (tupledArg)=>{
        _preludeFsJs.Log_onError(tupledArg[0], tupledArg[1]);
    }, _utilJs.uncurry(2, (x)=>x
    ));
}
_c1 = ProgramModule_mkProgram;
function ProgramModule_mkSimple(init1, update1, view1) {
    return new Program$4((arg)=>[
            init1(arg),
            _cmdFsJs.Cmd_none()
        ]
    , (msg, arg_1)=>[
            update1(msg, arg_1),
            _cmdFsJs.Cmd_none()
        ]
    , (_arg1)=>_cmdFsJs.Cmd_none()
    , view1, (model, arg_2)=>{
        view1(model, arg_2);
    }, (tupledArg)=>{
        _preludeFsJs.Log_onError(tupledArg[0], tupledArg[1]);
    }, _utilJs.uncurry(2, (x)=>x
    ));
}
_c2 = ProgramModule_mkSimple;
function ProgramModule_withSubscription(subscribe1, program) {
    return new Program$4(program.init, program.update, (model)=>_cmdFsJs.Cmd_batch(_listJs.ofArray([
            program.subscribe(model),
            subscribe1(model)
        ]))
    , program.view, program.setState, program.onError, program.syncDispatch);
}
_c3 = ProgramModule_withSubscription;
function ProgramModule_withConsoleTrace(program) {
    return new Program$4((arg)=>{
        const patternInput = program.init(arg);
        const initModel = patternInput[0];
        _preludeFsJs.Log_toConsole("Initial state:", initModel);
        return [
            initModel,
            patternInput[1]
        ];
    }, (msg, model)=>{
        _preludeFsJs.Log_toConsole("New message:", msg);
        const patternInput_1 = program.update(msg, model);
        const newModel = patternInput_1[0];
        _preludeFsJs.Log_toConsole("Updated state:", newModel);
        return [
            newModel,
            patternInput_1[1]
        ];
    }, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);
}
_c4 = ProgramModule_withConsoleTrace;
function ProgramModule_withTrace(trace, program) {
    return new Program$4(program.init, (msg, model)=>{
        const patternInput = program.update(msg, model);
        const state = patternInput[0];
        trace(msg, state);
        return [
            state,
            patternInput[1]
        ];
    }, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);
}
_c5 = ProgramModule_withTrace;
function ProgramModule_withErrorHandler(onError1, program) {
    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, onError1, program.syncDispatch);
}
_c6 = ProgramModule_withErrorHandler;
function ProgramModule_mapErrorHandler(map, program) {
    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, _utilJs.partialApply(1, map, [
        program.onError
    ]), program.syncDispatch);
}
_c7 = ProgramModule_mapErrorHandler;
function ProgramModule_onError(program) {
    return program.onError;
}
_c8 = ProgramModule_onError;
function ProgramModule_withSetState(setState1, program) {
    return new Program$4(program.init, program.update, program.subscribe, program.view, setState1, program.onError, program.syncDispatch);
}
_c9 = ProgramModule_withSetState;
function ProgramModule_setState(program) {
    return _utilJs.curry(2, program.setState);
}
_c10 = ProgramModule_setState;
function ProgramModule_view(program) {
    return _utilJs.curry(2, program.view);
}
_c11 = ProgramModule_view;
function ProgramModule_withSyncDispatch(syncDispatch1, program) {
    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, program.onError, syncDispatch1);
}
_c12 = ProgramModule_withSyncDispatch;
function ProgramModule_map(mapInit, mapUpdate, mapView, mapSetState, mapSubscribe, program) {
    const init1 = _utilJs.partialApply(1, mapInit, [
        program.init
    ]);
    const update1 = _utilJs.partialApply(2, mapUpdate, [
        program.update
    ]);
    const view1 = _utilJs.partialApply(2, mapView, [
        program.view
    ]);
    const setState1 = _utilJs.partialApply(2, mapSetState, [
        program.setState
    ]);
    return new Program$4(init1, _utilJs.uncurry(2, update1), _utilJs.partialApply(1, mapSubscribe, [
        program.subscribe
    ]), _utilJs.uncurry(2, view1), _utilJs.uncurry(2, setState1), program.onError, _utilJs.uncurry(2, (x)=>x
    ));
}
_c13 = ProgramModule_map;
function ProgramModule_runWith(arg, program) {
    const patternInput = program.init(arg);
    const model = patternInput[0];
    const rb = _ringFsJs.RingBuffer$1_$ctor_Z524259A4(10);
    let reentered = false;
    let state = model;
    const dispatch = (msg)=>{
        if (reentered) _ringFsJs.RingBuffer$1__Push_2B595(rb, msg);
        else {
            reentered = true;
            let nextMsg = _optionJs.some(msg);
            while(nextMsg != null){
                const msg_1 = _optionJs.value(nextMsg);
                try {
                    const patternInput_1 = program.update(msg_1, state);
                    const model$0027 = patternInput_1[0];
                    program.setState(model$0027, syncDispatch2);
                    _cmdFsJs.Cmd_exec((ex)=>{
                        program.onError([
                            _stringJs.toText(_stringJs.printf("Error in command while handling: %A"))(msg_1),
                            ex
                        ]);
                    }, syncDispatch2, patternInput_1[1]);
                    state = model$0027;
                } catch (ex_1) {
                    program.onError([
                        _stringJs.toText(_stringJs.printf("Unable to process the message: %A"))(msg_1),
                        ex_1
                    ]);
                }
                nextMsg = _ringFsJs.RingBuffer$1__Pop(rb);
            }
            reentered = false;
        }
    };
    const syncDispatch2 = _utilJs.partialApply(1, program.syncDispatch, [
        dispatch
    ]);
    program.setState(model, syncDispatch2);
    _cmdFsJs.Cmd_exec((ex_3)=>{
        program.onError([
            "Error intitializing:",
            ex_3
        ]);
    }, syncDispatch2, _cmdFsJs.Cmd_batch(_listJs.ofArray([
        (()=>{
            try {
                return program.subscribe(model);
            } catch (ex_2) {
                program.onError([
                    "Unable to subscribe:",
                    ex_2
                ]);
                return _cmdFsJs.Cmd_none();
            }
        })(),
        patternInput[1]
    ])));
}
_c14 = ProgramModule_runWith;
function ProgramModule_run(program) {
    ProgramModule_runWith(void 0, program);
}
_c15 = ProgramModule_run;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;
$RefreshReg$(_c, "Program$4$reflection");
$RefreshReg$(_c1, "ProgramModule_mkProgram");
$RefreshReg$(_c2, "ProgramModule_mkSimple");
$RefreshReg$(_c3, "ProgramModule_withSubscription");
$RefreshReg$(_c4, "ProgramModule_withConsoleTrace");
$RefreshReg$(_c5, "ProgramModule_withTrace");
$RefreshReg$(_c6, "ProgramModule_withErrorHandler");
$RefreshReg$(_c7, "ProgramModule_mapErrorHandler");
$RefreshReg$(_c8, "ProgramModule_onError");
$RefreshReg$(_c9, "ProgramModule_withSetState");
$RefreshReg$(_c10, "ProgramModule_setState");
$RefreshReg$(_c11, "ProgramModule_view");
$RefreshReg$(_c12, "ProgramModule_withSyncDispatch");
$RefreshReg$(_c13, "ProgramModule_map");
$RefreshReg$(_c14, "ProgramModule_runWith");
$RefreshReg$(_c15, "ProgramModule_run");

},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","./cmd.fs.js":"bqyYR","./prelude.fs.js":"6Vq58","../fable-library.3.2.10/Util.js":"e4VZ7","../fable-library.3.2.10/List.js":"3UB49","./ring.fs.js":"5en8f","../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7IOW0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "seqToString", ()=>seqToString
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "unionToString", ()=>unionToString
);
parcelHelpers.export(exports, "Union", ()=>Union
);
parcelHelpers.export(exports, "Record", ()=>Record
);
parcelHelpers.export(exports, "FSharpRef", ()=>FSharpRef
);
// EXCEPTIONS
// Exception is intentionally not derived from Error, for performance reasons (see #2160)
parcelHelpers.export(exports, "Exception", ()=>Exception
);
parcelHelpers.export(exports, "isException", ()=>isException
);
parcelHelpers.export(exports, "FSharpException", ()=>FSharpException
);
parcelHelpers.export(exports, "MatchFailureException", ()=>MatchFailureException
);
parcelHelpers.export(exports, "Attribute", ()=>Attribute
);
var _utilJs = require("./Util.js");
function seqToString(self) {
    let count = 0;
    let str = "[";
    for (const x of self){
        if (count === 0) str += toString(x);
        else if (count === 100) {
            str += "; ...";
            break;
        } else str += "; " + toString(x);
        count++;
    }
    return str + "]";
}
function toString(x, callStack = 0) {
    if (x != null && typeof x === "object") {
        if (typeof x.toString === "function") return x.toString();
        else if (Symbol.iterator in x) return seqToString(x);
        else {
            const cons = Object.getPrototypeOf(x).constructor;
            return cons === Object && callStack < 10 ? "{ " + Object.entries(x).map(([k, v])=>k + " = " + toString(v, callStack + 1)
            ).join("\n  ") + " }" : cons.name;
        }
    }
    return String(x);
}
function unionToString(name, fields) {
    if (fields.length === 0) return name;
    else {
        let fieldStr = "";
        let withParens = true;
        if (fields.length === 1) {
            fieldStr = toString(fields[0]);
            withParens = fieldStr.indexOf(" ") >= 0;
        } else fieldStr = fields.map((x)=>toString(x)
        ).join(", ");
        return name + (withParens ? " (" : " ") + fieldStr + (withParens ? ")" : "");
    }
}
class Union {
    get name() {
        return this.cases()[this.tag];
    }
    toJSON() {
        return this.fields.length === 0 ? this.name : [
            this.name
        ].concat(this.fields);
    }
    toString() {
        return unionToString(this.name, this.fields);
    }
    GetHashCode() {
        const hashes = this.fields.map((x)=>_utilJs.structuralHash(x)
        );
        hashes.splice(0, 0, _utilJs.numberHash(this.tag));
        return _utilJs.combineHashCodes(hashes);
    }
    Equals(other) {
        if (this === other) return true;
        else if (!_utilJs.sameConstructor(this, other)) return false;
        else if (this.tag === other.tag) return _utilJs.equalArrays(this.fields, other.fields);
        else return false;
    }
    CompareTo(other) {
        if (this === other) return 0;
        else if (!_utilJs.sameConstructor(this, other)) return -1;
        else if (this.tag === other.tag) return _utilJs.compareArrays(this.fields, other.fields);
        else return this.tag < other.tag ? -1 : 1;
    }
}
function recordToJSON(self) {
    const o = {
    };
    const keys = Object.keys(self);
    for(let i = 0; i < keys.length; i++)o[keys[i]] = self[keys[i]];
    return o;
}
function recordToString(self) {
    return "{ " + Object.entries(self).map(([k, v])=>k + " = " + toString(v)
    ).join("\n  ") + " }";
}
function recordGetHashCode(self) {
    const hashes = Object.values(self).map((v)=>_utilJs.structuralHash(v)
    );
    return _utilJs.combineHashCodes(hashes);
}
function recordEquals(self, other) {
    if (self === other) return true;
    else if (!_utilJs.sameConstructor(self, other)) return false;
    else {
        const thisNames = Object.keys(self);
        for(let i = 0; i < thisNames.length; i++){
            if (!_utilJs.equals(self[thisNames[i]], other[thisNames[i]])) return false;
        }
        return true;
    }
}
function recordCompareTo(self, other) {
    if (self === other) return 0;
    else if (!_utilJs.sameConstructor(self, other)) return -1;
    else {
        const thisNames = Object.keys(self);
        for(let i = 0; i < thisNames.length; i++){
            const result = _utilJs.compare(self[thisNames[i]], other[thisNames[i]]);
            if (result !== 0) return result;
        }
        return 0;
    }
}
class Record {
    toJSON() {
        return recordToJSON(this);
    }
    toString() {
        return recordToString(this);
    }
    GetHashCode() {
        return recordGetHashCode(this);
    }
    Equals(other) {
        return recordEquals(this, other);
    }
    CompareTo(other) {
        return recordCompareTo(this, other);
    }
}
class FSharpRef {
    constructor(contentsOrGetter, setter){
        if (typeof setter === "function") {
            this.getter = contentsOrGetter;
            this.setter = setter;
        } else {
            this.getter = ()=>contentsOrGetter
            ;
            this.setter = (v)=>{
                contentsOrGetter = v;
            };
        }
    }
    get contents() {
        return this.getter();
    }
    set contents(v) {
        this.setter(v);
    }
}
class Exception {
    constructor(message){
        this.message = message;
    }
}
function isException(x) {
    return x instanceof Exception || x instanceof Error;
}
class FSharpException extends Exception {
    toJSON() {
        return recordToJSON(this);
    }
    toString() {
        return recordToString(this);
    }
    GetHashCode() {
        return recordGetHashCode(this);
    }
    Equals(other) {
        return recordEquals(this, other);
    }
    CompareTo(other) {
        return recordCompareTo(this, other);
    }
}
class MatchFailureException extends FSharpException {
    constructor(arg1, arg2, arg3){
        super();
        this.arg1 = arg1;
        this.arg2 = arg2 | 0;
        this.arg3 = arg3 | 0;
        this.message = "The match cases were incomplete";
    }
}
class Attribute {
}

},{"./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e4VZ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tslint:disable:ban-types
parcelHelpers.export(exports, "isIterable", ()=>isIterable
);
parcelHelpers.export(exports, "isArrayLike", ()=>isArrayLike
);
parcelHelpers.export(exports, "isDisposable", ()=>isDisposable
);
parcelHelpers.export(exports, "sameConstructor", ()=>sameConstructor
);
parcelHelpers.export(exports, "Enumerator", ()=>Enumerator
);
parcelHelpers.export(exports, "getEnumerator", ()=>getEnumerator
);
parcelHelpers.export(exports, "toIterator", ()=>toIterator
);
parcelHelpers.export(exports, "Comparer", ()=>Comparer
);
parcelHelpers.export(exports, "comparerFromEqualityComparer", ()=>comparerFromEqualityComparer
);
parcelHelpers.export(exports, "assertEqual", ()=>assertEqual
);
parcelHelpers.export(exports, "assertNotEqual", ()=>assertNotEqual
);
parcelHelpers.export(exports, "Lazy", ()=>Lazy
);
parcelHelpers.export(exports, "lazyFromValue", ()=>lazyFromValue
);
parcelHelpers.export(exports, "padWithZeros", ()=>padWithZeros
);
parcelHelpers.export(exports, "padLeftAndRightWithZeros", ()=>padLeftAndRightWithZeros
);
parcelHelpers.export(exports, "dateOffset", ()=>dateOffset
);
parcelHelpers.export(exports, "int16ToString", ()=>int16ToString
);
parcelHelpers.export(exports, "int32ToString", ()=>int32ToString
);
parcelHelpers.export(exports, "ObjectRef", ()=>ObjectRef
);
parcelHelpers.export(exports, "stringHash", ()=>stringHash
);
parcelHelpers.export(exports, "numberHash", ()=>numberHash
);
// From https://stackoverflow.com/a/37449594
parcelHelpers.export(exports, "combineHashCodes", ()=>combineHashCodes
);
parcelHelpers.export(exports, "physicalHash", ()=>physicalHash
);
parcelHelpers.export(exports, "identityHash", ()=>identityHash
);
parcelHelpers.export(exports, "dateHash", ()=>dateHash
);
parcelHelpers.export(exports, "arrayHash", ()=>arrayHash
);
parcelHelpers.export(exports, "structuralHash", ()=>structuralHash
);
// Intended for custom numeric types, like long or decimal
parcelHelpers.export(exports, "fastStructuralHash", ()=>fastStructuralHash
);
// Intended for declared types that may or may not implement GetHashCode
parcelHelpers.export(exports, "safeHash", ()=>safeHash
);
parcelHelpers.export(exports, "equalArraysWith", ()=>equalArraysWith
);
parcelHelpers.export(exports, "equalArrays", ()=>equalArrays
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "compareDates", ()=>compareDates
);
parcelHelpers.export(exports, "comparePrimitives", ()=>comparePrimitives
);
parcelHelpers.export(exports, "compareArraysWith", ()=>compareArraysWith
);
parcelHelpers.export(exports, "compareArrays", ()=>compareArrays
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "clamp", ()=>clamp
);
parcelHelpers.export(exports, "createAtom", ()=>createAtom
);
parcelHelpers.export(exports, "createObj", ()=>createObj
);
parcelHelpers.export(exports, "jsOptions", ()=>jsOptions
);
parcelHelpers.export(exports, "round", ()=>round
);
parcelHelpers.export(exports, "sign", ()=>sign
);
parcelHelpers.export(exports, "randomNext", ()=>randomNext
);
parcelHelpers.export(exports, "randomBytes", ()=>randomBytes
);
parcelHelpers.export(exports, "unescapeDataString", ()=>unescapeDataString
);
parcelHelpers.export(exports, "escapeDataString", ()=>escapeDataString
);
parcelHelpers.export(exports, "escapeUriString", ()=>escapeUriString
);
// ICollection.Clear and Count members can be called on Arrays
// or Dictionaries so we need a runtime check (see #1120)
parcelHelpers.export(exports, "count", ()=>count
);
parcelHelpers.export(exports, "clear", ()=>clear
);
parcelHelpers.export(exports, "uncurry", ()=>uncurry
);
parcelHelpers.export(exports, "curry", ()=>curry
);
parcelHelpers.export(exports, "checkArity", ()=>checkArity
);
parcelHelpers.export(exports, "partialApply", ()=>partialApply
);
parcelHelpers.export(exports, "mapCurriedArgs", ()=>mapCurriedArgs
);
function isIterable(x) {
    return x != null && typeof x === "object" && Symbol.iterator in x;
}
function isArrayLike(x) {
    return Array.isArray(x) || ArrayBuffer.isView(x);
}
function isComparer(x) {
    return typeof x.Compare === "function";
}
function isComparable(x) {
    return typeof x.CompareTo === "function";
}
function isEquatable(x) {
    return typeof x.Equals === "function";
}
function isHashable(x) {
    return typeof x.GetHashCode === "function";
}
function isDisposable(x) {
    return x != null && typeof x.Dispose === "function";
}
function sameConstructor(x, y) {
    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;
}
class Enumerator {
    constructor(iter){
        this.iter = iter;
    }
    ["System.Collections.Generic.IEnumerator`1.get_Current"]() {
        return this.current;
    }
    ["System.Collections.IEnumerator.get_Current"]() {
        return this.current;
    }
    ["System.Collections.IEnumerator.MoveNext"]() {
        const cur = this.iter.next();
        this.current = cur.value;
        return !cur.done;
    }
    ["System.Collections.IEnumerator.Reset"]() {
        throw new Error("JS iterators cannot be reset");
    }
    Dispose() {
        return;
    }
}
function getEnumerator(o) {
    return typeof o.GetEnumerator === "function" ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());
}
function toIterator(en) {
    return {
        [Symbol.iterator] () {
            return this;
        },
        next () {
            const hasNext = en["System.Collections.IEnumerator.MoveNext"]();
            const current = hasNext ? en["System.Collections.IEnumerator.get_Current"]() : undefined;
            return {
                done: !hasNext,
                value: current
            };
        }
    };
}
class Comparer {
    constructor(f){
        this.Compare = f || compare;
    }
}
function comparerFromEqualityComparer(comparer) {
    // Sometimes IEqualityComparer also implements IComparer
    if (isComparer(comparer)) return new Comparer(comparer.Compare);
    else return new Comparer((x, y)=>{
        const xhash = comparer.GetHashCode(x);
        const yhash = comparer.GetHashCode(y);
        if (xhash === yhash) return comparer.Equals(x, y) ? 0 : -1;
        else return xhash < yhash ? -1 : 1;
    });
}
function assertEqual(actual, expected, msg) {
    if (!equals(actual, expected)) throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {
        actual,
        expected
    });
}
function assertNotEqual(actual, expected, msg) {
    if (equals(actual, expected)) throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {
        actual,
        expected
    });
}
class Lazy {
    constructor(factory){
        this.factory = factory;
        this.isValueCreated = false;
    }
    get Value() {
        if (!this.isValueCreated) {
            this.createdValue = this.factory();
            this.isValueCreated = true;
        }
        return this.createdValue;
    }
    get IsValueCreated() {
        return this.isValueCreated;
    }
}
function lazyFromValue(v) {
    return new Lazy(()=>v
    );
}
function padWithZeros(i, length) {
    let str = i.toString(10);
    while(str.length < length)str = "0" + str;
    return str;
}
function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {
    let str = i.toString(10);
    while(str.length < lengthLeft)str = "0" + str;
    while(str.length < lengthRight)str = str + "0";
    return str;
}
function dateOffset(date) {
    const date1 = date;
    return typeof date1.offset === "number" ? date1.offset : date.kind === 1 /* UTC */  ? 0 : date.getTimezoneOffset() * -60000;
}
function int16ToString(i, radix) {
    i = i < 0 && radix != null && radix !== 10 ? 65535 + i + 1 : i;
    return i.toString(radix);
}
function int32ToString(i, radix) {
    i = i < 0 && radix != null && radix !== 10 ? 4294967295 + i + 1 : i;
    return i.toString(radix);
}
class ObjectRef {
    static id(o) {
        if (!ObjectRef.idMap.has(o)) ObjectRef.idMap.set(o, ++ObjectRef.count);
        return ObjectRef.idMap.get(o);
    }
}
ObjectRef.idMap = new WeakMap();
ObjectRef.count = 0;
function stringHash(s) {
    let i = 0;
    let h = 5381;
    const len = s.length;
    while(i < len)h = h * 33 ^ s.charCodeAt(i++);
    return h;
}
function numberHash(x) {
    return x * 2654435761 | 0;
}
function combineHashCodes(hashes) {
    if (hashes.length === 0) return 0;
    return hashes.reduce((h1, h2)=>{
        return (h1 << 5) + h1 ^ h2;
    });
}
function physicalHash(x) {
    if (x == null) return 0;
    switch(typeof x){
        case "boolean":
            return x ? 1 : 0;
        case "number":
            return numberHash(x);
        case "string":
            return stringHash(x);
        default:
            return numberHash(ObjectRef.id(x));
    }
}
function identityHash(x) {
    if (x == null) return 0;
    else if (isHashable(x)) return x.GetHashCode();
    else return physicalHash(x);
}
function dateHash(x) {
    return x.getTime();
}
function arrayHash(x) {
    const len = x.length;
    const hashes = new Array(len);
    for(let i = 0; i < len; i++)hashes[i] = structuralHash(x[i]);
    return combineHashCodes(hashes);
}
function structuralHash(x) {
    if (x == null) return 0;
    switch(typeof x){
        case "boolean":
            return x ? 1 : 0;
        case "number":
            return numberHash(x);
        case "string":
            return stringHash(x);
        default:
            if (isHashable(x)) return x.GetHashCode();
            else if (isArrayLike(x)) return arrayHash(x);
            else if (x instanceof Date) return dateHash(x);
            else if (Object.getPrototypeOf(x).constructor === Object) {
                // TODO: check call-stack to prevent cyclic objects?
                const hashes = Object.values(x).map((v)=>structuralHash(v)
                );
                return combineHashCodes(hashes);
            } else // Classes don't implement GetHashCode by default, but must use identity hashing
            return numberHash(ObjectRef.id(x));
    }
}
function fastStructuralHash(x) {
    return stringHash(String(x));
}
function safeHash(x) {
    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));
}
function equalArraysWith(x, y, eq) {
    if (x == null) return y == null;
    if (y == null) return false;
    if (x.length !== y.length) return false;
    for(let i = 0; i < x.length; i++){
        if (!eq(x[i], y[i])) return false;
    }
    return true;
}
function equalArrays(x, y) {
    return equalArraysWith(x, y, equals);
}
function equalObjects(x, y) {
    const xKeys = Object.keys(x);
    const yKeys = Object.keys(y);
    if (xKeys.length !== yKeys.length) return false;
    xKeys.sort();
    yKeys.sort();
    for(let i = 0; i < xKeys.length; i++){
        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) return false;
    }
    return true;
}
function equals(x, y) {
    if (x === y) return true;
    else if (x == null) return y == null;
    else if (y == null) return false;
    else if (typeof x !== "object") return false;
    else if (isEquatable(x)) return x.Equals(y);
    else if (isArrayLike(x)) return isArrayLike(y) && equalArrays(x, y);
    else if (x instanceof Date) return y instanceof Date && compareDates(x, y) === 0;
    else return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);
}
function compareDates(x, y) {
    let xtime;
    let ytime;
    // DateTimeOffset and DateTime deals with equality differently.
    if ("offset" in x && "offset" in y) {
        xtime = x.getTime();
        ytime = y.getTime();
    } else {
        xtime = x.getTime() + dateOffset(x);
        ytime = y.getTime() + dateOffset(y);
    }
    return xtime === ytime ? 0 : xtime < ytime ? -1 : 1;
}
function comparePrimitives(x, y) {
    return x === y ? 0 : x < y ? -1 : 1;
}
function compareArraysWith(x, y, comp) {
    if (x == null) return y == null ? 0 : 1;
    if (y == null) return -1;
    if (x.length !== y.length) return x.length < y.length ? -1 : 1;
    for(let i = 0, j = 0; i < x.length; i++){
        j = comp(x[i], y[i]);
        if (j !== 0) return j;
    }
    return 0;
}
function compareArrays(x, y) {
    return compareArraysWith(x, y, compare);
}
function compareObjects(x, y) {
    const xKeys = Object.keys(x);
    const yKeys = Object.keys(y);
    if (xKeys.length !== yKeys.length) return xKeys.length < yKeys.length ? -1 : 1;
    xKeys.sort();
    yKeys.sort();
    for(let i = 0, j = 0; i < xKeys.length; i++){
        const key = xKeys[i];
        if (key !== yKeys[i]) return key < yKeys[i] ? -1 : 1;
        else {
            j = compare(x[key], y[key]);
            if (j !== 0) return j;
        }
    }
    return 0;
}
function compare(x, y) {
    if (x === y) return 0;
    else if (x == null) return y == null ? 0 : -1;
    else if (y == null) return 1;
    else if (typeof x !== "object") return x < y ? -1 : 1;
    else if (isComparable(x)) return x.CompareTo(y);
    else if (isArrayLike(x)) return isArrayLike(y) ? compareArrays(x, y) : -1;
    else if (x instanceof Date) return y instanceof Date ? compareDates(x, y) : -1;
    else return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;
}
function min(comparer, x, y) {
    return comparer(x, y) < 0 ? x : y;
}
function max(comparer, x, y) {
    return comparer(x, y) > 0 ? x : y;
}
function clamp(comparer, value, min1, max1) {
    return comparer(value, min1) < 0 ? min1 : comparer(value, max1) > 0 ? max1 : value;
}
function createAtom(value) {
    let atom = value;
    return (value1, isSetter)=>{
        if (!isSetter) return atom;
        else {
            atom = value1;
            return void 0;
        }
    };
}
function createObj(fields) {
    const obj = {
    };
    for (const kv of fields)obj[kv[0]] = kv[1];
    return obj;
}
function jsOptions(mutator) {
    const opts = {
    };
    mutator(opts);
    return opts;
}
function round(value, digits = 0) {
    const m = Math.pow(10, digits);
    const n = +(digits ? value * m : value).toFixed(8);
    const i = Math.floor(n);
    const f1 = n - i;
    const e = 0.00000001;
    const r = f1 > 0.5 - e && f1 < 0.5 + e ? i % 2 === 0 ? i : i + 1 : Math.round(n);
    return digits ? r / m : r;
}
function sign(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
}
function randomNext(min1, max1) {
    return Math.floor(Math.random() * (max1 - min1)) + min1;
}
function randomBytes(buffer) {
    if (buffer == null) throw new Error("Buffer cannot be null");
    for(let i = 0; i < buffer.length; i += 6){
        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.
        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.
        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.
        for(let j = 0; j < 6 && i + j < buffer.length; j++){
            if (j === 3) r = rhi;
            buffer[i + j] = r & 255;
            r >>>= 8;
        }
    }
}
function unescapeDataString(s) {
    // https://stackoverflow.com/a/4458580/524236
    return decodeURIComponent(s.replace(/\+/g, "%20"));
}
function escapeDataString(s) {
    return encodeURIComponent(s).replace(/!/g, "%21").replace(/'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
}
function escapeUriString(s) {
    return encodeURI(s);
}
function count(col) {
    if (isArrayLike(col)) return col.length;
    else {
        let count1 = 0;
        for (const _ of col)count1++;
        return count1;
    }
}
function clear(col) {
    if (isArrayLike(col)) col.splice(0);
    else col.clear();
}
const CURRIED_KEY = "__CURRIED__";
function uncurry(arity, f1) {
    // f may be a function option with None value
    if (f1 == null || f1.length > 1) return f1;
    let uncurriedFn;
    switch(arity){
        case 2:
            uncurriedFn = (a1, a2)=>f1(a1)(a2)
            ;
            break;
        case 3:
            uncurriedFn = (a1, a2, a3)=>f1(a1)(a2)(a3)
            ;
            break;
        case 4:
            uncurriedFn = (a1, a2, a3, a4)=>f1(a1)(a2)(a3)(a4)
            ;
            break;
        case 5:
            uncurriedFn = (a1, a2, a3, a4, a5)=>f1(a1)(a2)(a3)(a4)(a5)
            ;
            break;
        case 6:
            uncurriedFn = (a1, a2, a3, a4, a5, a6)=>f1(a1)(a2)(a3)(a4)(a5)(a6)
            ;
            break;
        case 7:
            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7)=>f1(a1)(a2)(a3)(a4)(a5)(a6)(a7)
            ;
            break;
        case 8:
            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8)=>f1(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)
            ;
            break;
        default:
            throw new Error("Uncurrying to more than 8-arity is not supported: " + arity);
    }
    uncurriedFn[CURRIED_KEY] = f1;
    return uncurriedFn;
}
function curry(arity, f1) {
    if (f1 == null || f1.length === 1) return f1;
    if (CURRIED_KEY in f1) return f1[CURRIED_KEY];
    switch(arity){
        case 2:
            return (a1)=>(a2)=>f1(a1, a2)
            ;
        case 3:
            return (a1)=>(a2)=>(a3)=>f1(a1, a2, a3)
            ;
        case 4:
            return (a1)=>(a2)=>(a3)=>(a4)=>f1(a1, a2, a3, a4)
            ;
        case 5:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>f1(a1, a2, a3, a4, a5)
            ;
        case 6:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>f1(a1, a2, a3, a4, a5, a6)
            ;
        case 7:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>(a7)=>f1(a1, a2, a3, a4, a5, a6, a7)
            ;
        case 8:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>(a7)=>(a8)=>f1(a1, a2, a3, a4, a5, a6, a7, a8)
            ;
        default:
            throw new Error("Currying to more than 8-arity is not supported: " + arity);
    }
}
function checkArity(arity, f1) {
    return f1.length > arity ? (...args1)=>(...args2)=>f1.apply(undefined, args1.concat(args2))
     : f1;
}
function partialApply(arity, f1, args) {
    if (f1 == null) return undefined;
    else if (CURRIED_KEY in f1) {
        f1 = f1[CURRIED_KEY];
        for(let i = 0; i < args.length; i++)f1 = f1(args[i]);
        return f1;
    } else switch(arity){
        case 1:
            // Wrap arguments to make sure .concat doesn't destruct arrays. Example
            // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails
            // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok
            return (a1)=>f1.apply(undefined, args.concat([
                    a1
                ]))
            ;
        case 2:
            return (a1)=>(a2)=>f1.apply(undefined, args.concat([
                        a1,
                        a2
                    ]))
            ;
        case 3:
            return (a1)=>(a2)=>(a3)=>f1.apply(undefined, args.concat([
                            a1,
                            a2,
                            a3
                        ]))
            ;
        case 4:
            return (a1)=>(a2)=>(a3)=>(a4)=>f1.apply(undefined, args.concat([
                                a1,
                                a2,
                                a3,
                                a4
                            ]))
            ;
        case 5:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>f1.apply(undefined, args.concat([
                                    a1,
                                    a2,
                                    a3,
                                    a4,
                                    a5
                                ]))
            ;
        case 6:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>f1.apply(undefined, args.concat([
                                        a1,
                                        a2,
                                        a3,
                                        a4,
                                        a5,
                                        a6
                                    ]))
            ;
        case 7:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>(a7)=>f1.apply(undefined, args.concat([
                                            a1,
                                            a2,
                                            a3,
                                            a4,
                                            a5,
                                            a6,
                                            a7
                                        ]))
            ;
        case 8:
            return (a1)=>(a2)=>(a3)=>(a4)=>(a5)=>(a6)=>(a7)=>(a8)=>f1.apply(undefined, args.concat([
                                                a1,
                                                a2,
                                                a3,
                                                a4,
                                                a5,
                                                a6,
                                                a7,
                                                a8
                                            ]))
            ;
        default:
            throw new Error("Partially applying to more than 8-arity is not supported: " + arity);
    }
}
function mapCurriedArgs(fn, mappings) {
    function mapArg(fn1, arg, mappings1, idx) {
        const mapping = mappings1[idx];
        if (mapping !== 0) {
            const expectedArity = mapping[0];
            const actualArity = mapping[1];
            if (expectedArity > 1) arg = curry(expectedArity, arg);
            if (actualArity > 1) arg = uncurry(actualArity, arg);
        }
        const res = fn1(arg);
        if (idx + 1 === mappings1.length) return res;
        else return (arg1)=>mapArg(res, arg1, mappings1, idx + 1)
        ;
    }
    return (arg)=>mapArg(fn, arg, mappings, 0)
    ;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"c0YT4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CaseInfo", ()=>CaseInfo
);
parcelHelpers.export(exports, "TypeInfo", ()=>TypeInfo
);
parcelHelpers.export(exports, "getGenerics", ()=>getGenerics
);
parcelHelpers.export(exports, "getHashCode", ()=>getHashCode
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "class_type", ()=>class_type
);
parcelHelpers.export(exports, "record_type", ()=>record_type
);
parcelHelpers.export(exports, "anonRecord_type", ()=>anonRecord_type
);
parcelHelpers.export(exports, "union_type", ()=>union_type
);
parcelHelpers.export(exports, "tuple_type", ()=>tuple_type
);
parcelHelpers.export(exports, "delegate_type", ()=>delegate_type
);
parcelHelpers.export(exports, "lambda_type", ()=>lambda_type
);
parcelHelpers.export(exports, "option_type", ()=>option_type
);
parcelHelpers.export(exports, "list_type", ()=>list_type
);
parcelHelpers.export(exports, "array_type", ()=>array_type
);
parcelHelpers.export(exports, "enum_type", ()=>enum_type
);
parcelHelpers.export(exports, "obj_type", ()=>obj_type
);
parcelHelpers.export(exports, "unit_type", ()=>unit_type
);
parcelHelpers.export(exports, "char_type", ()=>char_type
);
parcelHelpers.export(exports, "string_type", ()=>string_type
);
parcelHelpers.export(exports, "bool_type", ()=>bool_type
);
parcelHelpers.export(exports, "int8_type", ()=>int8_type
);
parcelHelpers.export(exports, "uint8_type", ()=>uint8_type
);
parcelHelpers.export(exports, "int16_type", ()=>int16_type
);
parcelHelpers.export(exports, "uint16_type", ()=>uint16_type
);
parcelHelpers.export(exports, "int32_type", ()=>int32_type
);
parcelHelpers.export(exports, "uint32_type", ()=>uint32_type
);
parcelHelpers.export(exports, "float32_type", ()=>float32_type
);
parcelHelpers.export(exports, "float64_type", ()=>float64_type
);
parcelHelpers.export(exports, "decimal_type", ()=>decimal_type
);
parcelHelpers.export(exports, "name", ()=>name1
);
parcelHelpers.export(exports, "fullName", ()=>fullName
);
parcelHelpers.export(exports, "namespace", ()=>namespace
);
parcelHelpers.export(exports, "isArray", ()=>isArray
);
parcelHelpers.export(exports, "getElementType", ()=>getElementType
);
parcelHelpers.export(exports, "isGenericType", ()=>isGenericType
);
parcelHelpers.export(exports, "isEnum", ()=>isEnum
);
parcelHelpers.export(exports, "isSubclassOf", ()=>isSubclassOf
);
/**
 * This doesn't replace types for fields (records) or cases (unions)
 * but it should be enough for type comparison purposes
 */ parcelHelpers.export(exports, "getGenericTypeDefinition", ()=>getGenericTypeDefinition
);
parcelHelpers.export(exports, "getEnumUnderlyingType", ()=>getEnumUnderlyingType
);
parcelHelpers.export(exports, "getEnumValues", ()=>getEnumValues
);
parcelHelpers.export(exports, "getEnumNames", ()=>getEnumNames
);
parcelHelpers.export(exports, "parseEnum", ()=>parseEnum
);
parcelHelpers.export(exports, "tryParseEnum", ()=>tryParseEnum
);
parcelHelpers.export(exports, "getEnumName", ()=>getEnumName
);
parcelHelpers.export(exports, "isEnumDefined", ()=>isEnumDefined
);
// FSharpType
parcelHelpers.export(exports, "getUnionCases", ()=>getUnionCases
);
parcelHelpers.export(exports, "getRecordElements", ()=>getRecordElements
);
parcelHelpers.export(exports, "getTupleElements", ()=>getTupleElements
);
parcelHelpers.export(exports, "getFunctionElements", ()=>getFunctionElements
);
parcelHelpers.export(exports, "isUnion", ()=>isUnion
);
parcelHelpers.export(exports, "isRecord", ()=>isRecord
);
parcelHelpers.export(exports, "isTuple", ()=>isTuple
);
// In .NET this is false for delegates
parcelHelpers.export(exports, "isFunction", ()=>isFunction
);
// FSharpValue
parcelHelpers.export(exports, "getUnionFields", ()=>getUnionFields
);
parcelHelpers.export(exports, "getUnionCaseFields", ()=>getUnionCaseFields
);
// This is used as replacement of `FSharpValue.GetRecordFields`
// For `FSharpTypes.GetRecordFields` see `getRecordElements`
// Object.keys returns keys in the order they were added to the object
parcelHelpers.export(exports, "getRecordFields", ()=>getRecordFields
);
parcelHelpers.export(exports, "getRecordField", ()=>getRecordField
);
parcelHelpers.export(exports, "getTupleFields", ()=>getTupleFields
);
parcelHelpers.export(exports, "getTupleField", ()=>getTupleField
);
parcelHelpers.export(exports, "makeUnion", ()=>makeUnion
);
parcelHelpers.export(exports, "makeRecord", ()=>makeRecord
);
parcelHelpers.export(exports, "makeTuple", ()=>makeTuple
);
parcelHelpers.export(exports, "makeGenericType", ()=>makeGenericType
);
parcelHelpers.export(exports, "createInstance", ()=>createInstance
);
parcelHelpers.export(exports, "getValue", ()=>getValue
);
parcelHelpers.export(exports, "getCaseTag", ()=>getCaseTag
);
parcelHelpers.export(exports, "getCaseName", ()=>getCaseName
);
parcelHelpers.export(exports, "getCaseFields", ()=>getCaseFields
);
var _typesJs = require("./Types.js");
var _utilJs = require("./Util.js");
class CaseInfo {
    constructor(declaringType, tag, name, fields){
        this.declaringType = declaringType;
        this.tag = tag;
        this.name = name;
        this.fields = fields;
    }
}
class TypeInfo {
    constructor(fullname, generics, construct, parent, fields1, cases, enumCases){
        this.fullname = fullname;
        this.generics = generics;
        this.construct = construct;
        this.parent = parent;
        this.fields = fields1;
        this.cases = cases;
        this.enumCases = enumCases;
    }
    toString() {
        return fullName(this);
    }
    GetHashCode() {
        return getHashCode(this);
    }
    Equals(other) {
        return equals(this, other);
    }
}
function getGenerics(t) {
    return t.generics != null ? t.generics : [];
}
function getHashCode(t) {
    const fullnameHash = _utilJs.stringHash(t.fullname);
    const genHashes = getGenerics(t).map(getHashCode);
    return _utilJs.combineHashCodes([
        fullnameHash,
        ...genHashes
    ]);
}
function equals(t1, t2) {
    if (t1.fullname === "") return t2.fullname === "" && _utilJs.equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2])=>k1 === k2 && equals(v1, v2)
    );
    else return t1.fullname === t2.fullname && _utilJs.equalArraysWith(getGenerics(t1), getGenerics(t2), equals);
}
function class_type(fullname1, generics1, construct1, parent1) {
    return new TypeInfo(fullname1, generics1, construct1, parent1);
}
function record_type(fullname1, generics1, construct1, fields2) {
    return new TypeInfo(fullname1, generics1, construct1, undefined, fields2);
}
function anonRecord_type(...fields2) {
    return new TypeInfo("", undefined, undefined, undefined, ()=>fields2
    );
}
function union_type(fullname1, generics1, construct1, cases1) {
    const t = new TypeInfo(fullname1, generics1, construct1, undefined, undefined, ()=>{
        const caseNames = construct1.prototype.cases();
        return cases1().map((fields2, i)=>new CaseInfo(t, i, caseNames[i], fields2)
        );
    });
    return t;
}
function tuple_type(...generics1) {
    return new TypeInfo("System.Tuple`" + generics1.length, generics1);
}
function delegate_type(...generics1) {
    return new TypeInfo("System.Func`" + generics1.length, generics1);
}
function lambda_type(argType, returnType) {
    return new TypeInfo("Microsoft.FSharp.Core.FSharpFunc`2", [
        argType,
        returnType
    ]);
}
function option_type(generic) {
    return new TypeInfo("Microsoft.FSharp.Core.FSharpOption`1", [
        generic
    ]);
}
function list_type(generic) {
    return new TypeInfo("Microsoft.FSharp.Collections.FSharpList`1", [
        generic
    ]);
}
function array_type(generic) {
    return new TypeInfo(generic.fullname + "[]", [
        generic
    ]);
}
function enum_type(fullname1, underlyingType, enumCases1) {
    return new TypeInfo(fullname1, [
        underlyingType
    ], undefined, undefined, undefined, undefined, enumCases1);
}
const obj_type = new TypeInfo("System.Object");
const unit_type = new TypeInfo("Microsoft.FSharp.Core.Unit");
const char_type = new TypeInfo("System.Char");
const string_type = new TypeInfo("System.String");
const bool_type = new TypeInfo("System.Boolean");
const int8_type = new TypeInfo("System.SByte");
const uint8_type = new TypeInfo("System.Byte");
const int16_type = new TypeInfo("System.Int16");
const uint16_type = new TypeInfo("System.UInt16");
const int32_type = new TypeInfo("System.Int32");
const uint32_type = new TypeInfo("System.UInt32");
const float32_type = new TypeInfo("System.Single");
const float64_type = new TypeInfo("System.Double");
const decimal_type = new TypeInfo("System.Decimal");
function name1(info) {
    if (Array.isArray(info)) return info[0];
    else if (info instanceof CaseInfo) return info.name;
    else {
        const i = info.fullname.lastIndexOf(".");
        return i === -1 ? info.fullname : info.fullname.substr(i + 1);
    }
}
function fullName(t) {
    const gen = t.generics != null && !isArray(t) ? t.generics : [];
    if (gen.length > 0) return t.fullname + "[" + gen.map((x)=>fullName(x)
    ).join(",") + "]";
    else return t.fullname;
}
function namespace(t) {
    const i = t.fullname.lastIndexOf(".");
    return i === -1 ? "" : t.fullname.substr(0, i);
}
function isArray(t) {
    return t.fullname.endsWith("[]");
}
function getElementType(t) {
    var _a;
    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;
}
function isGenericType(t) {
    return t.generics != null && t.generics.length > 0;
}
function isEnum(t) {
    return t.enumCases != null && t.enumCases.length > 0;
}
function isSubclassOf(t1, t2) {
    var _a, _b;
    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;
}
function getGenericTypeDefinition(t) {
    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(()=>obj_type
    ));
}
function getEnumUnderlyingType(t) {
    var _a;
    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];
}
function getEnumValues(t) {
    if (isEnum(t) && t.enumCases != null) return t.enumCases.map((kv)=>kv[1]
    );
    else throw new Error(`${t.fullname} is not an enum type`);
}
function getEnumNames(t) {
    if (isEnum(t) && t.enumCases != null) return t.enumCases.map((kv)=>kv[0]
    );
    else throw new Error(`${t.fullname} is not an enum type`);
}
function getEnumCase(t, v) {
    if (t.enumCases != null) {
        if (typeof v === "string") {
            for (const kv of t.enumCases){
                if (kv[0] === v) return kv;
            }
            throw new Error(`'${v}' was not found in ${t.fullname}`);
        } else {
            for (const kv of t.enumCases){
                if (kv[1] === v) return kv;
            }
            // .NET returns the number even if it doesn't match any of the cases
            return [
                "",
                v
            ];
        }
    } else throw new Error(`${t.fullname} is not an enum type`);
}
function parseEnum(t, str) {
    // TODO: better int parsing here, parseInt ceils floats: "4.8" -> 4
    const value = parseInt(str, 10);
    return getEnumCase(t, isNaN(value) ? str : value)[1];
}
function tryParseEnum(t, str, defValue) {
    try {
        defValue.contents = parseEnum(t, str);
        return true;
    } catch (_a) {
        return false;
    }
}
function getEnumName(t, v) {
    return getEnumCase(t, v)[0];
}
function isEnumDefined(t, v) {
    try {
        const kv = getEnumCase(t, v);
        return kv[0] != null && kv[0] !== "";
    } catch (_a) {
    // supress error
    }
    return false;
}
function getUnionCases(t) {
    if (t.cases != null) return t.cases();
    else throw new Error(`${t.fullname} is not an F# union type`);
}
function getRecordElements(t) {
    if (t.fields != null) return t.fields();
    else throw new Error(`${t.fullname} is not an F# record type`);
}
function getTupleElements(t) {
    if (isTuple(t) && t.generics != null) return t.generics;
    else throw new Error(`${t.fullname} is not a tuple type`);
}
function getFunctionElements(t) {
    if (isFunction(t) && t.generics != null) {
        const gen = t.generics;
        return [
            gen[0],
            gen[1]
        ];
    } else throw new Error(`${t.fullname} is not an F# function type`);
}
function isUnion(t) {
    return t instanceof TypeInfo ? t.cases != null : t instanceof _typesJs.Union;
}
function isRecord(t) {
    return t instanceof TypeInfo ? t.fields != null : t instanceof _typesJs.Record;
}
function isTuple(t) {
    return t.fullname.startsWith("System.Tuple") && !isArray(t);
}
function isFunction(t) {
    return t.fullname === "Microsoft.FSharp.Core.FSharpFunc`2";
}
function getUnionFields(v, t) {
    const cases1 = getUnionCases(t);
    const case_ = cases1[v.tag];
    if (case_ == null) throw new Error(`Cannot find case ${v.name} in union type`);
    return [
        case_,
        v.fields
    ];
}
function getUnionCaseFields(uci) {
    return uci.fields == null ? [] : uci.fields;
}
function getRecordFields(v) {
    return Object.keys(v).map((k)=>v[k]
    );
}
function getRecordField(v, field) {
    return v[field[0]];
}
function getTupleFields(v) {
    return v;
}
function getTupleField(v, i) {
    return v[i];
}
function makeUnion(uci, values) {
    const expectedLength = (uci.fields || []).length;
    if (values.length !== expectedLength) throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);
    return uci.declaringType.construct != null ? new uci.declaringType.construct(uci.tag, ...values) : {
    };
}
function makeRecord(t, values) {
    const fields2 = getRecordElements(t);
    if (fields2.length !== values.length) throw new Error(`Expected an array of length ${fields2.length} but got ${values.length}`);
    return t.construct != null ? new t.construct(...values) : fields2.reduce((obj, [key, _t], i)=>{
        obj[key] = values[i];
        return obj;
    }, {
    });
}
function makeTuple(values, _t) {
    return values;
}
function makeGenericType(t, generics1) {
    return new TypeInfo(t.fullname, generics1, t.construct, t.parent, t.fields, t.cases);
}
function createInstance(t, consArgs) {
    // TODO: Check if consArgs length is same as t.construct?
    // (Arg types can still be different)
    if (typeof t.construct === "function") return new t.construct(...consArgs !== null && consArgs !== void 0 ? consArgs : []);
    else throw new Error(`Cannot access constructor of ${t.fullname}`);
}
function getValue(propertyInfo, v) {
    return v[propertyInfo[0]];
}
// Fable.Core.Reflection
function assertUnion(x) {
    if (!(x instanceof _typesJs.Union)) throw new Error(`Value is not an F# union type`);
}
function getCaseTag(x) {
    assertUnion(x);
    return x.tag;
}
function getCaseName(x) {
    assertUnion(x);
    return x.cases()[x.tag];
}
function getCaseFields(x) {
    assertUnion(x);
    return x.fields;
}

},{"./Types.js":"7IOW0","./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bqyYR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cmd_exec", ()=>Cmd_exec
);
parcelHelpers.export(exports, "Cmd_none", ()=>Cmd_none
);
parcelHelpers.export(exports, "Cmd_map", ()=>Cmd_map
);
parcelHelpers.export(exports, "Cmd_batch", ()=>Cmd_batch
);
parcelHelpers.export(exports, "Cmd_ofSub", ()=>Cmd_ofSub
);
parcelHelpers.export(exports, "Cmd_OfFunc_either", ()=>Cmd_OfFunc_either
);
parcelHelpers.export(exports, "Cmd_OfFunc_perform", ()=>Cmd_OfFunc_perform
);
parcelHelpers.export(exports, "Cmd_OfFunc_attempt", ()=>Cmd_OfFunc_attempt
);
parcelHelpers.export(exports, "Cmd_OfFunc_result", ()=>Cmd_OfFunc_result
);
parcelHelpers.export(exports, "Cmd_OfAsyncWith_either", ()=>Cmd_OfAsyncWith_either
);
parcelHelpers.export(exports, "Cmd_OfAsyncWith_perform", ()=>Cmd_OfAsyncWith_perform
);
parcelHelpers.export(exports, "Cmd_OfAsyncWith_attempt", ()=>Cmd_OfAsyncWith_attempt
);
parcelHelpers.export(exports, "Cmd_OfAsyncWith_result", ()=>Cmd_OfAsyncWith_result
);
parcelHelpers.export(exports, "Cmd_OfAsync_start", ()=>Cmd_OfAsync_start
);
parcelHelpers.export(exports, "Cmd_OfPromise_either", ()=>Cmd_OfPromise_either
);
parcelHelpers.export(exports, "Cmd_OfPromise_perform", ()=>Cmd_OfPromise_perform
);
parcelHelpers.export(exports, "Cmd_OfPromise_attempt", ()=>Cmd_OfPromise_attempt
);
parcelHelpers.export(exports, "Cmd_OfPromise_result", ()=>Cmd_OfPromise_result
);
parcelHelpers.export(exports, "Cmd_attemptFunc", ()=>Cmd_attemptFunc
);
var _listJs = require("../fable-library.3.2.10/List.js");
var _asyncBuilderJs = require("../fable-library.3.2.10/AsyncBuilder.js");
var _asyncJs = require("../fable-library.3.2.10/Async.js");
var _preludeFsJs = require("./prelude.fs.js");
function Cmd_exec(onError, dispatch, cmd) {
    _listJs.iterate((call)=>{
        try {
            call(dispatch);
        } catch (ex) {
            onError(ex);
        }
    }, cmd);
}
_c = Cmd_exec;
function Cmd_none() {
    return _listJs.empty();
}
_c1 = Cmd_none;
function Cmd_map(f, cmd) {
    return _listJs.map((g)=>(arg_1)=>{
            g((arg)=>{
                arg_1(f(arg));
            });
        }
    , cmd);
}
_c2 = Cmd_map;
function Cmd_batch(cmds) {
    return _listJs.concat(cmds);
}
_c3 = Cmd_batch;
function Cmd_ofSub(sub) {
    return _listJs.singleton(sub);
}
_c4 = Cmd_ofSub;
function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {
    return _listJs.singleton((dispatch)=>{
        try {
            return dispatch(ofSuccess(task(arg)));
        } catch (x) {
            return dispatch(ofError(x));
        }
    });
}
_c5 = Cmd_OfFunc_either;
function Cmd_OfFunc_perform(task, arg, ofSuccess) {
    return _listJs.singleton((dispatch)=>{
        try {
            dispatch(ofSuccess(task(arg)));
        } catch (x) {
        }
    });
}
_c6 = Cmd_OfFunc_perform;
function Cmd_OfFunc_attempt(task, arg, ofError) {
    return _listJs.singleton((dispatch)=>{
        try {
            task(arg);
        } catch (x) {
            dispatch(ofError(x));
        }
    });
}
_c7 = Cmd_OfFunc_attempt;
function Cmd_OfFunc_result(msg) {
    return _listJs.singleton((dispatch)=>{
        dispatch(msg);
    });
}
_c8 = Cmd_OfFunc_result;
function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {
    return _listJs.singleton((arg_1)=>{
        start(_asyncBuilderJs.singleton.Delay(()=>_asyncBuilderJs.singleton.Bind(_asyncJs.catchAsync(task(arg)), (_arg1)=>{
                const r = _arg1;
                arg_1(r.tag === 1 ? ofError(r.fields[0]) : ofSuccess(r.fields[0]));
                return _asyncBuilderJs.singleton.Zero();
            })
        ));
    });
}
_c9 = Cmd_OfAsyncWith_either;
function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {
    return _listJs.singleton((arg_1)=>{
        start(_asyncBuilderJs.singleton.Delay(()=>_asyncBuilderJs.singleton.Bind(_asyncJs.catchAsync(task(arg)), (_arg1)=>{
                const r = _arg1;
                if (r.tag === 0) {
                    arg_1(ofSuccess(r.fields[0]));
                    return _asyncBuilderJs.singleton.Zero();
                } else return _asyncBuilderJs.singleton.Zero();
            })
        ));
    });
}
_c10 = Cmd_OfAsyncWith_perform;
function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {
    return _listJs.singleton((arg_1)=>{
        start(_asyncBuilderJs.singleton.Delay(()=>_asyncBuilderJs.singleton.Bind(_asyncJs.catchAsync(task(arg)), (_arg1)=>{
                const r = _arg1;
                if (r.tag === 1) {
                    arg_1(ofError(r.fields[0]));
                    return _asyncBuilderJs.singleton.Zero();
                } else return _asyncBuilderJs.singleton.Zero();
            })
        ));
    });
}
_c11 = Cmd_OfAsyncWith_attempt;
function Cmd_OfAsyncWith_result(start, task) {
    return _listJs.singleton((arg)=>{
        start(_asyncBuilderJs.singleton.Delay(()=>_asyncBuilderJs.singleton.Bind(task, (_arg1)=>{
                arg(_arg1);
                return _asyncBuilderJs.singleton.Zero();
            })
        ));
    });
}
_c12 = Cmd_OfAsyncWith_result;
function Cmd_OfAsync_start(x) {
    _preludeFsJs.Timer_delay(0, (_arg1)=>{
        _asyncJs.startImmediate(x);
    });
}
_c13 = Cmd_OfAsync_start;
function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {
    return _listJs.singleton((dispatch)=>{
        task(arg).then((arg_1)=>dispatch(ofSuccess(arg_1))
        ).catch((arg_3)=>dispatch(ofError(arg_3))
        );
    });
}
_c14 = Cmd_OfPromise_either;
function Cmd_OfPromise_perform(task, arg, ofSuccess) {
    return _listJs.singleton((dispatch)=>{
        task(arg).then((arg_1)=>dispatch(ofSuccess(arg_1))
        );
    });
}
_c15 = Cmd_OfPromise_perform;
function Cmd_OfPromise_attempt(task, arg, ofError) {
    return _listJs.singleton((dispatch)=>{
        task(arg).catch((arg_2)=>{
            dispatch(ofError(arg_2));
        });
    });
}
_c16 = Cmd_OfPromise_attempt;
function Cmd_OfPromise_result(task) {
    return _listJs.singleton((dispatch)=>{
        task.then(dispatch);
    });
}
_c17 = Cmd_OfPromise_result;
function Cmd_attemptFunc(task, arg, ofError) {
    return Cmd_OfFunc_attempt(task, arg, ofError);
}
_c18 = Cmd_attemptFunc;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;
$RefreshReg$(_c, "Cmd_exec");
$RefreshReg$(_c1, "Cmd_none");
$RefreshReg$(_c2, "Cmd_map");
$RefreshReg$(_c3, "Cmd_batch");
$RefreshReg$(_c4, "Cmd_ofSub");
$RefreshReg$(_c5, "Cmd_OfFunc_either");
$RefreshReg$(_c6, "Cmd_OfFunc_perform");
$RefreshReg$(_c7, "Cmd_OfFunc_attempt");
$RefreshReg$(_c8, "Cmd_OfFunc_result");
$RefreshReg$(_c9, "Cmd_OfAsyncWith_either");
$RefreshReg$(_c10, "Cmd_OfAsyncWith_perform");
$RefreshReg$(_c11, "Cmd_OfAsyncWith_attempt");
$RefreshReg$(_c12, "Cmd_OfAsyncWith_result");
$RefreshReg$(_c13, "Cmd_OfAsync_start");
$RefreshReg$(_c14, "Cmd_OfPromise_either");
$RefreshReg$(_c15, "Cmd_OfPromise_perform");
$RefreshReg$(_c16, "Cmd_OfPromise_attempt");
$RefreshReg$(_c17, "Cmd_OfPromise_result");
$RefreshReg$(_c18, "Cmd_attemptFunc");

},{"../fable-library.3.2.10/List.js":"3UB49","../fable-library.3.2.10/AsyncBuilder.js":"7Heoc","../fable-library.3.2.10/Async.js":"iuOII","./prelude.fs.js":"6Vq58","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3UB49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SR_indexOutOfBounds", ()=>SR_indexOutOfBounds
);
parcelHelpers.export(exports, "SR_inputListWasEmpty", ()=>SR_inputListWasEmpty
);
parcelHelpers.export(exports, "SR_inputMustBeNonNegative", ()=>SR_inputMustBeNonNegative
);
parcelHelpers.export(exports, "SR_inputSequenceEmpty", ()=>SR_inputSequenceEmpty
);
parcelHelpers.export(exports, "SR_inputSequenceTooLong", ()=>SR_inputSequenceTooLong
);
parcelHelpers.export(exports, "SR_keyNotFoundAlt", ()=>SR_keyNotFoundAlt
);
parcelHelpers.export(exports, "SR_listsHadDifferentLengths", ()=>SR_listsHadDifferentLengths
);
parcelHelpers.export(exports, "SR_notEnoughElements", ()=>SR_notEnoughElements
);
parcelHelpers.export(exports, "FSharpList", ()=>FSharpList
);
parcelHelpers.export(exports, "FSharpList$reflection", ()=>FSharpList$reflection
);
parcelHelpers.export(exports, "ListEnumerator$1", ()=>ListEnumerator$1
);
parcelHelpers.export(exports, "ListEnumerator$1$reflection", ()=>ListEnumerator$1$reflection
);
parcelHelpers.export(exports, "ListEnumerator$1_$ctor_3002E699", ()=>ListEnumerator$1_$ctor_3002E699
);
parcelHelpers.export(exports, "FSharpList_get_Empty", ()=>FSharpList_get_Empty
);
parcelHelpers.export(exports, "FSharpList_Cons_305B8EAC", ()=>FSharpList_Cons_305B8EAC
);
parcelHelpers.export(exports, "FSharpList__get_IsEmpty", ()=>FSharpList__get_IsEmpty
);
parcelHelpers.export(exports, "FSharpList__get_Length", ()=>FSharpList__get_Length
);
parcelHelpers.export(exports, "FSharpList__get_Head", ()=>FSharpList__get_Head
);
parcelHelpers.export(exports, "FSharpList__get_Tail", ()=>FSharpList__get_Tail
);
parcelHelpers.export(exports, "FSharpList__get_Item_Z524259A4", ()=>FSharpList__get_Item_Z524259A4
);
parcelHelpers.export(exports, "empty", ()=>empty
);
parcelHelpers.export(exports, "cons", ()=>cons
);
parcelHelpers.export(exports, "singleton", ()=>singleton
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "length", ()=>length
);
parcelHelpers.export(exports, "head", ()=>head1
);
parcelHelpers.export(exports, "tryHead", ()=>tryHead
);
parcelHelpers.export(exports, "tail", ()=>tail1
);
parcelHelpers.export(exports, "tryLast", ()=>tryLast
);
parcelHelpers.export(exports, "last", ()=>last
);
parcelHelpers.export(exports, "compareWith", ()=>compareWith
);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
parcelHelpers.export(exports, "fold", ()=>fold
);
parcelHelpers.export(exports, "reverse", ()=>reverse
);
parcelHelpers.export(exports, "foldBack", ()=>foldBack
);
parcelHelpers.export(exports, "foldIndexed", ()=>foldIndexed
);
parcelHelpers.export(exports, "fold2", ()=>fold2
);
parcelHelpers.export(exports, "foldBack2", ()=>foldBack2
);
parcelHelpers.export(exports, "unfold", ()=>unfold
);
parcelHelpers.export(exports, "iterate", ()=>iterate
);
parcelHelpers.export(exports, "iterate2", ()=>iterate2
);
parcelHelpers.export(exports, "iterateIndexed", ()=>iterateIndexed
);
parcelHelpers.export(exports, "iterateIndexed2", ()=>iterateIndexed2
);
parcelHelpers.export(exports, "toSeq", ()=>toSeq
);
parcelHelpers.export(exports, "ofArrayWithTail", ()=>ofArrayWithTail
);
parcelHelpers.export(exports, "ofArray", ()=>ofArray
);
parcelHelpers.export(exports, "ofSeq", ()=>ofSeq
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "scan", ()=>scan
);
parcelHelpers.export(exports, "scanBack", ()=>scanBack
);
parcelHelpers.export(exports, "append", ()=>append
);
parcelHelpers.export(exports, "collect", ()=>collect
);
parcelHelpers.export(exports, "mapIndexed", ()=>mapIndexed
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "indexed", ()=>indexed
);
parcelHelpers.export(exports, "map2", ()=>map2
);
parcelHelpers.export(exports, "mapIndexed2", ()=>mapIndexed2
);
parcelHelpers.export(exports, "map3", ()=>map3
);
parcelHelpers.export(exports, "mapFold", ()=>mapFold
);
parcelHelpers.export(exports, "mapFoldBack", ()=>mapFoldBack
);
parcelHelpers.export(exports, "tryPick", ()=>tryPick
);
parcelHelpers.export(exports, "pick", ()=>pick
);
parcelHelpers.export(exports, "tryFind", ()=>tryFind
);
parcelHelpers.export(exports, "find", ()=>find
);
parcelHelpers.export(exports, "tryFindBack", ()=>tryFindBack
);
parcelHelpers.export(exports, "findBack", ()=>findBack
);
parcelHelpers.export(exports, "tryFindIndex", ()=>tryFindIndex
);
parcelHelpers.export(exports, "findIndex", ()=>findIndex
);
parcelHelpers.export(exports, "tryFindIndexBack", ()=>tryFindIndexBack
);
parcelHelpers.export(exports, "findIndexBack", ()=>findIndexBack
);
parcelHelpers.export(exports, "tryItem", ()=>tryItem
);
parcelHelpers.export(exports, "item", ()=>item
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "choose", ()=>choose
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "initialize", ()=>initialize
);
parcelHelpers.export(exports, "replicate", ()=>replicate
);
parcelHelpers.export(exports, "reduce", ()=>reduce
);
parcelHelpers.export(exports, "reduceBack", ()=>reduceBack
);
parcelHelpers.export(exports, "forAll", ()=>forAll
);
parcelHelpers.export(exports, "forAll2", ()=>forAll2
);
parcelHelpers.export(exports, "exists", ()=>exists
);
parcelHelpers.export(exports, "exists2", ()=>exists2
);
parcelHelpers.export(exports, "unzip", ()=>unzip
);
parcelHelpers.export(exports, "unzip3", ()=>unzip3
);
parcelHelpers.export(exports, "zip", ()=>zip
);
parcelHelpers.export(exports, "zip3", ()=>zip3
);
parcelHelpers.export(exports, "sortWith", ()=>sortWith
);
parcelHelpers.export(exports, "sort", ()=>sort
);
parcelHelpers.export(exports, "sortBy", ()=>sortBy
);
parcelHelpers.export(exports, "sortDescending", ()=>sortDescending
);
parcelHelpers.export(exports, "sortByDescending", ()=>sortByDescending
);
parcelHelpers.export(exports, "sum", ()=>sum
);
parcelHelpers.export(exports, "sumBy", ()=>sumBy
);
parcelHelpers.export(exports, "maxBy", ()=>maxBy
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "minBy", ()=>minBy
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "average", ()=>average
);
parcelHelpers.export(exports, "averageBy", ()=>averageBy
);
parcelHelpers.export(exports, "permute", ()=>permute
);
parcelHelpers.export(exports, "chunkBySize", ()=>chunkBySize
);
parcelHelpers.export(exports, "allPairs", ()=>allPairs
);
parcelHelpers.export(exports, "skip", ()=>skip
);
parcelHelpers.export(exports, "skipWhile", ()=>skipWhile
);
parcelHelpers.export(exports, "take", ()=>take
);
parcelHelpers.export(exports, "takeWhile", ()=>takeWhile
);
parcelHelpers.export(exports, "truncate", ()=>truncate
);
parcelHelpers.export(exports, "getSlice", ()=>getSlice
);
parcelHelpers.export(exports, "splitAt", ()=>splitAt
);
parcelHelpers.export(exports, "exactlyOne", ()=>exactlyOne
);
parcelHelpers.export(exports, "tryExactlyOne", ()=>tryExactlyOne
);
parcelHelpers.export(exports, "where", ()=>where
);
parcelHelpers.export(exports, "pairwise", ()=>pairwise
);
parcelHelpers.export(exports, "windowed", ()=>windowed
);
parcelHelpers.export(exports, "splitInto", ()=>splitInto
);
parcelHelpers.export(exports, "transpose", ()=>transpose
);
var _stringJs = require("./String.js");
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
var _reflectionJs = require("./Reflection.js");
var _optionJs = require("./Option.js");
var _arrayJs = require("./Array.js");
const SR_indexOutOfBounds = "The index was outside the range of elements in the list.";
const SR_inputListWasEmpty = "List was empty";
const SR_inputMustBeNonNegative = "The input must be non-negative.";
const SR_inputSequenceEmpty = "The input sequence was empty.";
const SR_inputSequenceTooLong = "The input sequence contains more than one element.";
const SR_keyNotFoundAlt = "An index satisfying the predicate was not found in the collection.";
const SR_listsHadDifferentLengths = "The lists had different lengths.";
const SR_notEnoughElements = "The input sequence has an insufficient number of elements.";
class FSharpList extends _typesJs.Record {
    constructor(head, tail){
        super();
        this.head = head;
        this.tail = tail;
    }
    toString() {
        const xs = this;
        return "[" + _stringJs.join("; ", xs) + "]";
    }
    Equals(other) {
        const xs = this;
        if (xs === other) return true;
        else {
            const loop = (xs_1_mut, ys_1_mut)=>{
                loop: while(true){
                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;
                    const matchValue = [
                        xs_1.tail,
                        ys_1.tail
                    ];
                    if (matchValue[0] != null) {
                        if (matchValue[1] != null) {
                            const xt = matchValue[0];
                            const yt = matchValue[1];
                            if (_utilJs.equals(xs_1.head, ys_1.head)) {
                                xs_1_mut = xt;
                                ys_1_mut = yt;
                                continue loop;
                            } else return false;
                        } else return false;
                    } else if (matchValue[1] != null) return false;
                    else return true;
                    break;
                }
            };
            return loop(xs, other);
        }
    }
    GetHashCode() {
        const xs = this;
        const loop = (i_mut, h_mut, xs_1_mut)=>{
            loop: while(true){
                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;
                const matchValue = xs_1.tail;
                if (matchValue != null) {
                    const t = matchValue;
                    if (i > 18) return h | 0;
                    else {
                        i_mut = i + 1;
                        h_mut = (h << 1) + _utilJs.structuralHash(xs_1.head) + 631 * i;
                        xs_1_mut = t;
                        continue loop;
                    }
                } else return h | 0;
                break;
            }
        };
        return loop(0, 0, xs) | 0;
    }
    toJSON(_key) {
        const this$ = this;
        return Array.from(this$);
    }
    CompareTo(other) {
        const xs = this;
        const loop = (xs_1_mut, ys_1_mut)=>{
            loop: while(true){
                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;
                const matchValue = [
                    xs_1.tail,
                    ys_1.tail
                ];
                if (matchValue[0] != null) {
                    if (matchValue[1] != null) {
                        const xt = matchValue[0];
                        const yt = matchValue[1];
                        const c = _utilJs.compare(xs_1.head, ys_1.head) | 0;
                        if (c === 0) {
                            xs_1_mut = xt;
                            ys_1_mut = yt;
                            continue loop;
                        } else return c | 0;
                    } else return 1;
                } else if (matchValue[1] != null) return -1;
                else return 0;
                break;
            }
        };
        return loop(xs, other) | 0;
    }
    GetEnumerator() {
        const xs = this;
        return ListEnumerator$1_$ctor_3002E699(xs);
    }
    [Symbol.iterator]() {
        return _utilJs.toIterator(this.GetEnumerator());
    }
    ["System.Collections.IEnumerable.GetEnumerator"]() {
        const xs = this;
        return _utilJs.getEnumerator(xs);
    }
}
function FSharpList$reflection(gen0) {
    return _reflectionJs.record_type("ListModule.FSharpList", [
        gen0
    ], FSharpList, ()=>[
            [
                "head",
                gen0
            ],
            [
                "tail",
                _reflectionJs.option_type(FSharpList$reflection(gen0))
            ]
        ]
    );
}
_c = FSharpList$reflection;
class ListEnumerator$1 {
    constructor(xs){
        this.xs = xs;
        this.it = this.xs;
        this.current = null;
    }
    ["System.Collections.Generic.IEnumerator`1.get_Current"]() {
        const __ = this;
        return __.current;
    }
    ["System.Collections.IEnumerator.get_Current"]() {
        const __ = this;
        return __.current;
    }
    ["System.Collections.IEnumerator.MoveNext"]() {
        const __ = this;
        const matchValue = __.it.tail;
        if (matchValue != null) {
            const t = matchValue;
            __.current = __.it.head;
            __.it = t;
            return true;
        } else return false;
    }
    ["System.Collections.IEnumerator.Reset"]() {
        const __ = this;
        __.it = __.xs;
        __.current = null;
    }
    Dispose() {
    }
}
function ListEnumerator$1$reflection(gen0) {
    return _reflectionJs.class_type("ListModule.ListEnumerator`1", [
        gen0
    ], ListEnumerator$1);
}
_c1 = ListEnumerator$1$reflection;
function ListEnumerator$1_$ctor_3002E699(xs1) {
    return new ListEnumerator$1(xs1);
}
_c2 = ListEnumerator$1_$ctor_3002E699;
function FSharpList_get_Empty() {
    return new FSharpList(null, void 0);
}
_c3 = FSharpList_get_Empty;
function FSharpList_Cons_305B8EAC(x, xs1) {
    return new FSharpList(x, xs1);
}
_c4 = FSharpList_Cons_305B8EAC;
function FSharpList__get_IsEmpty(xs1) {
    return xs1.tail == null;
}
_c5 = FSharpList__get_IsEmpty;
function FSharpList__get_Length(xs1) {
    const loop = (i_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, xs_1 = xs_1_mut;
            const matchValue = xs_1.tail;
            if (matchValue != null) {
                i_mut = i + 1;
                xs_1_mut = matchValue;
                continue loop;
            } else return i | 0;
            break;
        }
    };
    return loop(0, xs1) | 0;
}
_c6 = FSharpList__get_Length;
function FSharpList__get_Head(xs1) {
    const matchValue = xs1.tail;
    if (matchValue != null) return xs1.head;
    else throw new Error(SR_inputListWasEmpty + "\\nParameter name: " + "list");
}
_c7 = FSharpList__get_Head;
function FSharpList__get_Tail(xs1) {
    const matchValue = xs1.tail;
    if (matchValue != null) return matchValue;
    else throw new Error(SR_inputListWasEmpty + "\\nParameter name: " + "list");
}
_c8 = FSharpList__get_Tail;
function FSharpList__get_Item_Z524259A4(xs1, index) {
    const loop = (i_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, xs_1 = xs_1_mut;
            const matchValue = xs_1.tail;
            if (matchValue != null) {
                if (i === index) return xs_1.head;
                else {
                    i_mut = i + 1;
                    xs_1_mut = matchValue;
                    continue loop;
                }
            } else throw new Error(SR_indexOutOfBounds + "\\nParameter name: " + "index");
            break;
        }
    };
    return loop(0, xs1);
}
_c9 = FSharpList__get_Item_Z524259A4;
function empty() {
    return FSharpList_get_Empty();
}
function cons(x, xs1) {
    return FSharpList_Cons_305B8EAC(x, xs1);
}
function singleton(x) {
    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());
}
function isEmpty(xs1) {
    return FSharpList__get_IsEmpty(xs1);
}
function length(xs1) {
    return FSharpList__get_Length(xs1);
}
function head1(xs1) {
    return FSharpList__get_Head(xs1);
}
function tryHead(xs1) {
    if (FSharpList__get_IsEmpty(xs1)) return void 0;
    else return _optionJs.some(FSharpList__get_Head(xs1));
}
function tail1(xs1) {
    return FSharpList__get_Tail(xs1);
}
function tryLast(xs_mut) {
    tryLast: while(true){
        const xs1 = xs_mut;
        if (FSharpList__get_IsEmpty(xs1)) return void 0;
        else {
            const t = FSharpList__get_Tail(xs1);
            if (FSharpList__get_IsEmpty(t)) return _optionJs.some(FSharpList__get_Head(xs1));
            else {
                xs_mut = t;
                continue tryLast;
            }
        }
        break;
    }
}
function last(xs1) {
    const matchValue = tryLast(xs1);
    if (matchValue == null) throw new Error(SR_inputListWasEmpty);
    else return _optionJs.value(matchValue);
}
function compareWith(comparer, xs1, ys) {
    const loop = (xs_1_mut, ys_1_mut)=>{
        loop: while(true){
            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;
            const matchValue = [
                FSharpList__get_IsEmpty(xs_1),
                FSharpList__get_IsEmpty(ys_1)
            ];
            if (matchValue[0]) {
                if (matchValue[1]) return 0;
                else return -1;
            } else if (matchValue[1]) return 1;
            else {
                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;
                if (c === 0) {
                    xs_1_mut = FSharpList__get_Tail(xs_1);
                    ys_1_mut = FSharpList__get_Tail(ys_1);
                    continue loop;
                } else return c | 0;
            }
            break;
        }
    };
    return loop(xs1, ys) | 0;
}
function toArray(xs1) {
    const len = FSharpList__get_Length(xs1) | 0;
    const res = _arrayJs.fill(new Array(len), 0, len, null);
    const loop = (i_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, xs_1 = xs_1_mut;
            if (!FSharpList__get_IsEmpty(xs_1)) {
                res[i] = FSharpList__get_Head(xs_1);
                i_mut = i + 1;
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    loop(0, xs1);
    return res;
}
function fold(folder, state, xs1) {
    let acc = state;
    let xs_1 = xs1;
    while(!FSharpList__get_IsEmpty(xs_1)){
        acc = folder(acc, FSharpList__get_Head(xs_1));
        xs_1 = FSharpList__get_Tail(xs_1);
    }
    return acc;
}
function reverse(xs1) {
    return fold((acc, x)=>FSharpList_Cons_305B8EAC(x, acc)
    , FSharpList_get_Empty(), xs1);
}
function foldBack(folder, xs1, state) {
    return _arrayJs.foldBack(folder, toArray(xs1), state);
}
function foldIndexed(folder, state, xs1) {
    const loop = (i_mut, acc_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;
            if (FSharpList__get_IsEmpty(xs_1)) return acc;
            else {
                i_mut = i + 1;
                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    return loop(0, state, xs1);
}
function fold2(folder, state, xs1, ys) {
    let acc = state;
    let xs_1 = xs1;
    let ys_1 = ys;
    while(!FSharpList__get_IsEmpty(xs_1) ? !FSharpList__get_IsEmpty(ys_1) : false){
        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));
        xs_1 = FSharpList__get_Tail(xs_1);
        ys_1 = FSharpList__get_Tail(ys_1);
    }
    return acc;
}
function foldBack2(folder, xs1, ys, state) {
    return _arrayJs.foldBack2(folder, toArray(xs1), toArray(ys), state);
}
function unfold(gen, state) {
    const loop = (acc_mut, node_mut)=>{
        let t;
        loop: while(true){
            const acc = acc_mut, node = node_mut;
            const matchValue = gen(acc);
            if (matchValue != null) {
                acc_mut = matchValue[1];
                node_mut = (t = new FSharpList(matchValue[0], void 0), node.tail = t, t);
                continue loop;
            } else return node;
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node_1 = loop(state, root);
    const t_2 = FSharpList_get_Empty();
    node_1.tail = t_2;
    return FSharpList__get_Tail(root);
}
function iterate(action, xs1) {
    fold((unitVar0, x)=>{
        action(x);
    }, void 0, xs1);
}
function iterate2(action, xs1, ys) {
    fold2((unitVar0, x, y)=>{
        action(x, y);
    }, void 0, xs1, ys);
}
function iterateIndexed(action, xs1) {
    fold((i, x)=>{
        action(i, x);
        return i + 1 | 0;
    }, 0, xs1);
}
function iterateIndexed2(action, xs1, ys) {
    fold2((i, x, y)=>{
        action(i, x, y);
        return i + 1 | 0;
    }, 0, xs1, ys);
}
function toSeq(xs1) {
    return xs1;
}
function ofArrayWithTail(xs1, tail_1) {
    let res = tail_1;
    for(let i = xs1.length - 1; i >= 0; i--)res = FSharpList_Cons_305B8EAC(xs1[i], res);
    return res;
}
function ofArray(xs1) {
    return ofArrayWithTail(xs1, FSharpList_get_Empty());
}
function ofSeq(xs1) {
    let xs_3, t;
    if (_utilJs.isArrayLike(xs1)) return ofArray(xs1);
    else if (xs1 instanceof FSharpList) return xs1;
    else {
        const root = FSharpList_get_Empty();
        let node = root;
        const enumerator = _utilJs.getEnumerator(xs1);
        try {
            while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
                const x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
                node = (xs_3 = node, t = new FSharpList(x, void 0), xs_3.tail = t, t);
            }
        } finally{
            enumerator.Dispose();
        }
        const xs_5 = node;
        const t_2 = FSharpList_get_Empty();
        xs_5.tail = t_2;
        return FSharpList__get_Tail(root);
    }
}
function concat(lists) {
    const root = FSharpList_get_Empty();
    let node = root;
    const action = (xs1)=>{
        node = fold((acc, x)=>{
            const t = new FSharpList(x, void 0);
            acc.tail = t;
            return t;
        }, node, xs1);
    };
    if (_utilJs.isArrayLike(lists)) lists.forEach(action);
    else if (lists instanceof FSharpList) iterate(action, lists);
    else {
        const enumerator = _utilJs.getEnumerator(lists);
        try {
            while(enumerator["System.Collections.IEnumerator.MoveNext"]())action(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());
        } finally{
            enumerator.Dispose();
        }
    }
    const xs_6 = node;
    const t_2 = FSharpList_get_Empty();
    xs_6.tail = t_2;
    return FSharpList__get_Tail(root);
}
function scan(folder, state, xs1) {
    let xs_4, t_2;
    const root = FSharpList_get_Empty();
    let node;
    const t = new FSharpList(state, void 0);
    root.tail = t;
    node = t;
    let acc = state;
    let xs_3 = xs1;
    while(!FSharpList__get_IsEmpty(xs_3)){
        acc = folder(acc, FSharpList__get_Head(xs_3));
        node = (xs_4 = node, t_2 = new FSharpList(acc, void 0), xs_4.tail = t_2, t_2);
        xs_3 = FSharpList__get_Tail(xs_3);
    }
    const xs_6 = node;
    const t_4 = FSharpList_get_Empty();
    xs_6.tail = t_4;
    return FSharpList__get_Tail(root);
}
function scanBack(folder, xs1, state) {
    return ofArray(_arrayJs.scanBack(folder, toArray(xs1), state));
}
function append(xs1, ys) {
    return fold((acc, x)=>FSharpList_Cons_305B8EAC(x, acc)
    , ys, reverse(xs1));
}
function collect(mapping, xs1) {
    let xs_1, t;
    const root = FSharpList_get_Empty();
    let node = root;
    let ys = xs1;
    while(!FSharpList__get_IsEmpty(ys)){
        let zs = mapping(FSharpList__get_Head(ys));
        while(!FSharpList__get_IsEmpty(zs)){
            node = (xs_1 = node, t = new FSharpList(FSharpList__get_Head(zs), void 0), xs_1.tail = t, t);
            zs = FSharpList__get_Tail(zs);
        }
        ys = FSharpList__get_Tail(ys);
    }
    const xs_3 = node;
    const t_2 = FSharpList_get_Empty();
    xs_3.tail = t_2;
    return FSharpList__get_Tail(root);
}
function mapIndexed(mapping, xs1) {
    const root = FSharpList_get_Empty();
    const node = foldIndexed((i, acc, x)=>{
        const t = new FSharpList(mapping(i, x), void 0);
        acc.tail = t;
        return t;
    }, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function map(mapping, xs1) {
    const root = FSharpList_get_Empty();
    const node = fold((acc, x)=>{
        const t = new FSharpList(mapping(x), void 0);
        acc.tail = t;
        return t;
    }, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function indexed(xs1) {
    return mapIndexed((i, x)=>[
            i,
            x
        ]
    , xs1);
}
function map2(mapping, xs1, ys) {
    const root = FSharpList_get_Empty();
    const node = fold2((acc, x, y)=>{
        const t = new FSharpList(mapping(x, y), void 0);
        acc.tail = t;
        return t;
    }, root, xs1, ys);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function mapIndexed2(mapping, xs1, ys) {
    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut)=>{
        let t;
        loop: while(true){
            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;
            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) return acc;
            else {
                i_mut = i + 1;
                acc_mut = (t = new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0), acc.tail = t, t);
                xs_1_mut = FSharpList__get_Tail(xs_1);
                ys_1_mut = FSharpList__get_Tail(ys_1);
                continue loop;
            }
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node_1 = loop(0, root, xs1, ys);
    const t_2 = FSharpList_get_Empty();
    node_1.tail = t_2;
    return FSharpList__get_Tail(root);
}
function map3(mapping, xs1, ys, zs) {
    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut)=>{
        let t;
        loop: while(true){
            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;
            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) return acc;
            else {
                acc_mut = (t = new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0), acc.tail = t, t);
                xs_1_mut = FSharpList__get_Tail(xs_1);
                ys_1_mut = FSharpList__get_Tail(ys_1);
                zs_1_mut = FSharpList__get_Tail(zs_1);
                continue loop;
            }
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node_1 = loop(root, xs1, ys, zs);
    const t_2 = FSharpList_get_Empty();
    node_1.tail = t_2;
    return FSharpList__get_Tail(root);
}
function mapFold(mapping, state, xs1) {
    const root = FSharpList_get_Empty();
    const patternInput_1 = fold((tupledArg, x)=>{
        let t;
        const patternInput = mapping(tupledArg[1], x);
        return [
            (t = new FSharpList(patternInput[0], void 0), (tupledArg[0].tail = t, t)),
            patternInput[1]
        ];
    }, [
        root,
        state
    ], xs1);
    const t_2 = FSharpList_get_Empty();
    patternInput_1[0].tail = t_2;
    return [
        FSharpList__get_Tail(root),
        patternInput_1[1]
    ];
}
function mapFoldBack(mapping, xs1, state) {
    return mapFold((acc, x)=>mapping(x, acc)
    , state, reverse(xs1));
}
function tryPick(f, xs1) {
    const loop = (xs_1_mut)=>{
        loop: while(true){
            const xs_1 = xs_1_mut;
            if (FSharpList__get_IsEmpty(xs_1)) return void 0;
            else {
                const matchValue = f(FSharpList__get_Head(xs_1));
                if (matchValue == null) {
                    xs_1_mut = FSharpList__get_Tail(xs_1);
                    continue loop;
                } else return matchValue;
            }
            break;
        }
    };
    return loop(xs1);
}
function pick(f, xs1) {
    const matchValue = tryPick(f, xs1);
    if (matchValue == null) throw new Error(SR_keyNotFoundAlt);
    else return _optionJs.value(matchValue);
}
function tryFind(f, xs1) {
    return tryPick((x)=>f(x) ? _optionJs.some(x) : void 0
    , xs1);
}
function find(f, xs1) {
    const matchValue = tryFind(f, xs1);
    if (matchValue == null) throw new Error(SR_keyNotFoundAlt);
    else return _optionJs.value(matchValue);
}
function tryFindBack(f, xs1) {
    return _arrayJs.tryFindBack(f, toArray(xs1));
}
function findBack(f, xs1) {
    const matchValue = tryFindBack(f, xs1);
    if (matchValue == null) throw new Error(SR_keyNotFoundAlt);
    else return _optionJs.value(matchValue);
}
function tryFindIndex(f, xs1) {
    const loop = (i_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, xs_1 = xs_1_mut;
            if (FSharpList__get_IsEmpty(xs_1)) return void 0;
            else if (f(FSharpList__get_Head(xs_1))) return i;
            else {
                i_mut = i + 1;
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    return loop(0, xs1);
}
function findIndex(f, xs1) {
    const matchValue = tryFindIndex(f, xs1);
    if (matchValue == null) throw new Error(SR_keyNotFoundAlt);
    else return matchValue | 0;
}
function tryFindIndexBack(f, xs1) {
    return _arrayJs.tryFindIndexBack(f, toArray(xs1));
}
function findIndexBack(f, xs1) {
    const matchValue = tryFindIndexBack(f, xs1);
    if (matchValue == null) throw new Error(SR_keyNotFoundAlt);
    else return matchValue | 0;
}
function tryItem(n, xs1) {
    const loop = (i_mut, xs_1_mut)=>{
        loop: while(true){
            const i = i_mut, xs_1 = xs_1_mut;
            if (FSharpList__get_IsEmpty(xs_1)) return void 0;
            else if (i === n) return _optionJs.some(FSharpList__get_Head(xs_1));
            else {
                i_mut = i + 1;
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    return loop(0, xs1);
}
function item(n, xs1) {
    return FSharpList__get_Item_Z524259A4(xs1, n);
}
function filter(f, xs1) {
    const root = FSharpList_get_Empty();
    const node = fold((acc, x)=>{
        if (f(x)) {
            const t = new FSharpList(x, void 0);
            acc.tail = t;
            return t;
        } else return acc;
    }, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function partition(f, xs1) {
    const patternInput = [
        FSharpList_get_Empty(),
        FSharpList_get_Empty()
    ];
    const root2 = patternInput[1];
    const root1 = patternInput[0];
    const patternInput_1 = fold(_utilJs.uncurry(2, (tupledArg)=>{
        const lacc = tupledArg[0];
        const racc = tupledArg[1];
        return (x)=>{
            let t, t_2;
            return f(x) ? [
                (t = new FSharpList(x, void 0), (lacc.tail = t, t)),
                racc
            ] : [
                lacc,
                (t_2 = new FSharpList(x, void 0), (racc.tail = t_2, t_2))
            ];
        };
    }), [
        root1,
        root2
    ], xs1);
    const t_4 = FSharpList_get_Empty();
    patternInput_1[0].tail = t_4;
    const t_5 = FSharpList_get_Empty();
    patternInput_1[1].tail = t_5;
    return [
        FSharpList__get_Tail(root1),
        FSharpList__get_Tail(root2)
    ];
}
function choose(f, xs1) {
    const root = FSharpList_get_Empty();
    const node = fold((acc, x)=>{
        const matchValue = f(x);
        if (matchValue == null) return acc;
        else {
            const t = new FSharpList(_optionJs.value(matchValue), void 0);
            acc.tail = t;
            return t;
        }
    }, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function contains(value, xs1, eq) {
    return tryFindIndex((v)=>eq.Equals(value, v)
    , xs1) != null;
}
function initialize(n, f) {
    let xs1, t;
    const root = FSharpList_get_Empty();
    let node = root;
    for(let i = 0; i <= n - 1; i++)node = (xs1 = node, t = new FSharpList(f(i), void 0), xs1.tail = t, t);
    const xs_2 = node;
    const t_2 = FSharpList_get_Empty();
    xs_2.tail = t_2;
    return FSharpList__get_Tail(root);
}
function replicate(n, x) {
    return initialize(n, (_arg1)=>x
    );
}
function reduce(f, xs1) {
    if (FSharpList__get_IsEmpty(xs1)) throw new Error(SR_inputListWasEmpty);
    else return fold(f, head1(xs1), tail1(xs1));
}
function reduceBack(f, xs1) {
    if (FSharpList__get_IsEmpty(xs1)) throw new Error(SR_inputListWasEmpty);
    else return foldBack(f, tail1(xs1), head1(xs1));
}
function forAll(f, xs1) {
    return fold((acc, x)=>acc ? f(x) : false
    , true, xs1);
}
function forAll2(f, xs1, ys) {
    return fold2((acc, x, y)=>acc ? f(x, y) : false
    , true, xs1, ys);
}
function exists(f, xs1) {
    return tryFindIndex(f, xs1) != null;
}
function exists2(f_mut, xs_mut, ys_mut) {
    exists2: while(true){
        const f = f_mut, xs1 = xs_mut, ys = ys_mut;
        const matchValue = [
            FSharpList__get_IsEmpty(xs1),
            FSharpList__get_IsEmpty(ys)
        ];
        let pattern_matching_result;
        if (matchValue[0]) {
            if (matchValue[1]) pattern_matching_result = 0;
            else pattern_matching_result = 2;
        } else if (matchValue[1]) pattern_matching_result = 2;
        else pattern_matching_result = 1;
        switch(pattern_matching_result){
            case 0:
                return false;
            case 1:
                if (f(FSharpList__get_Head(xs1), FSharpList__get_Head(ys))) return true;
                else {
                    f_mut = f;
                    xs_mut = FSharpList__get_Tail(xs1);
                    ys_mut = FSharpList__get_Tail(ys);
                    continue exists2;
                }
            case 2:
                throw new Error(SR_listsHadDifferentLengths + "\\nParameter name: " + "list2");
        }
        break;
    }
}
function unzip(xs1) {
    return foldBack((tupledArg, tupledArg_1)=>[
            FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]),
            FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])
        ]
    , xs1, [
        FSharpList_get_Empty(),
        FSharpList_get_Empty()
    ]);
}
function unzip3(xs1) {
    return foldBack((tupledArg, tupledArg_1)=>[
            FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]),
            FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]),
            FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])
        ]
    , xs1, [
        FSharpList_get_Empty(),
        FSharpList_get_Empty(),
        FSharpList_get_Empty()
    ]);
}
function zip(xs1, ys) {
    return map2((x, y)=>[
            x,
            y
        ]
    , xs1, ys);
}
function zip3(xs1, ys, zs) {
    return map3((x, y, z)=>[
            x,
            y,
            z
        ]
    , xs1, ys, zs);
}
function sortWith(comparer, xs1) {
    const arr = toArray(xs1);
    arr.sort(comparer);
    return ofArray(arr);
}
function sort(xs1, comparer) {
    return sortWith((x, y)=>comparer.Compare(x, y)
    , xs1);
}
function sortBy(projection, xs1, comparer) {
    return sortWith((x, y)=>comparer.Compare(projection(x), projection(y))
    , xs1);
}
function sortDescending(xs1, comparer) {
    return sortWith((x, y)=>comparer.Compare(x, y) * -1
    , xs1);
}
function sortByDescending(projection, xs1, comparer) {
    return sortWith((x, y)=>comparer.Compare(projection(x), projection(y)) * -1
    , xs1);
}
function sum(xs1, adder) {
    return fold((acc, x)=>adder.Add(acc, x)
    , adder.GetZero(), xs1);
}
function sumBy(f, xs1, adder) {
    return fold((acc, x)=>adder.Add(acc, f(x))
    , adder.GetZero(), xs1);
}
function maxBy(projection, xs1, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? y : x
    , xs1);
}
function max(xs1, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? y : x
    , xs1);
}
function minBy(projection, xs1, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? x : y
    , xs1);
}
function min(xs1, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? x : y
    , xs1);
}
function average(xs1, averager) {
    let count = 0;
    return averager.DivideByInt(fold((acc, x)=>{
        count = count + 1 | 0;
        return averager.Add(acc, x);
    }, averager.GetZero(), xs1), count);
}
function averageBy(f, xs1, averager) {
    let count = 0;
    return averager.DivideByInt(fold((acc, x)=>{
        count = count + 1 | 0;
        return averager.Add(acc, f(x));
    }, averager.GetZero(), xs1), count);
}
function permute(f, xs1) {
    return ofArray(_arrayJs.permute(f, toArray(xs1)));
}
function chunkBySize(chunkSize, xs1) {
    return ofArray(_arrayJs.map((xs_1)=>ofArray(xs_1)
    , _arrayJs.chunkBySize(chunkSize, toArray(xs1))));
}
function allPairs(xs1, ys) {
    const root = FSharpList_get_Empty();
    let node = root;
    iterate((x)=>{
        iterate((y)=>{
            let xs_1, t;
            node = (xs_1 = node, t = new FSharpList([
                x,
                y
            ], void 0), xs_1.tail = t, t);
        }, ys);
    }, xs1);
    const xs_3 = node;
    const t_2 = FSharpList_get_Empty();
    xs_3.tail = t_2;
    return FSharpList__get_Tail(root);
}
function skip(count_mut, xs_mut) {
    skip: while(true){
        const count = count_mut, xs1 = xs_mut;
        if (count <= 0) return xs1;
        else if (FSharpList__get_IsEmpty(xs1)) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "list");
        else {
            count_mut = count - 1;
            xs_mut = FSharpList__get_Tail(xs1);
            continue skip;
        }
        break;
    }
}
function skipWhile(predicate_mut, xs_mut) {
    skipWhile: while(true){
        const predicate = predicate_mut, xs1 = xs_mut;
        if (FSharpList__get_IsEmpty(xs1)) return xs1;
        else if (!predicate(FSharpList__get_Head(xs1))) return xs1;
        else {
            predicate_mut = predicate;
            xs_mut = FSharpList__get_Tail(xs1);
            continue skipWhile;
        }
        break;
    }
}
function take(count, xs1) {
    if (count < 0) throw new Error(SR_inputMustBeNonNegative + "\\nParameter name: " + "count");
    const loop = (i_mut, acc_mut, xs_1_mut)=>{
        let t;
        loop: while(true){
            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;
            if (i <= 0) return acc;
            else if (FSharpList__get_IsEmpty(xs_1)) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "list");
            else {
                i_mut = i - 1;
                acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), acc.tail = t, t);
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node = loop(count, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function takeWhile(predicate, xs1) {
    const loop = (acc_mut, xs_1_mut)=>{
        let t;
        loop: while(true){
            const acc = acc_mut, xs_1 = xs_1_mut;
            if (FSharpList__get_IsEmpty(xs_1)) return acc;
            else if (!predicate(FSharpList__get_Head(xs_1))) return acc;
            else {
                acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), acc.tail = t, t);
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node = loop(root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function truncate(count, xs1) {
    const loop = (i_mut, acc_mut, xs_1_mut)=>{
        let t;
        loop: while(true){
            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;
            if (i <= 0) return acc;
            else if (FSharpList__get_IsEmpty(xs_1)) return acc;
            else {
                i_mut = i - 1;
                acc_mut = (t = new FSharpList(FSharpList__get_Head(xs_1), void 0), acc.tail = t, t);
                xs_1_mut = FSharpList__get_Tail(xs_1);
                continue loop;
            }
            break;
        }
    };
    const root = FSharpList_get_Empty();
    const node = loop(count, root, xs1);
    const t_2 = FSharpList_get_Empty();
    node.tail = t_2;
    return FSharpList__get_Tail(root);
}
function getSlice(startIndex, endIndex, xs1) {
    const len = length(xs1) | 0;
    const startIndex_1 = _optionJs.defaultArg(startIndex, 0) | 0;
    const endIndex_1 = _optionJs.defaultArg(endIndex, len - 1) | 0;
    if (startIndex_1 < 0) throw new Error(SR_indexOutOfBounds + "\\nParameter name: " + "startIndex");
    else if (endIndex_1 >= len) throw new Error(SR_indexOutOfBounds + "\\nParameter name: " + "endIndex");
    else if (endIndex_1 < startIndex_1) return FSharpList_get_Empty();
    else return take(endIndex_1 - startIndex_1 + 1, skip(startIndex_1, xs1));
}
function splitAt(index, xs1) {
    if (index < 0) throw new Error(SR_inputMustBeNonNegative + "\\nParameter name: " + "index");
    if (index > FSharpList__get_Length(xs1)) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "index");
    return [
        take(index, xs1),
        skip(index, xs1)
    ];
}
function exactlyOne(xs1) {
    if (FSharpList__get_IsEmpty(xs1)) throw new Error(SR_inputSequenceEmpty + "\\nParameter name: " + "list");
    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs1))) return FSharpList__get_Head(xs1);
    else throw new Error(SR_inputSequenceTooLong + "\\nParameter name: " + "list");
}
function tryExactlyOne(xs1) {
    if (!FSharpList__get_IsEmpty(xs1) ? FSharpList__get_IsEmpty(FSharpList__get_Tail(xs1)) : false) return _optionJs.some(FSharpList__get_Head(xs1));
    else return void 0;
}
function where(predicate, xs1) {
    return filter(predicate, xs1);
}
function pairwise(xs1) {
    return ofArray(_arrayJs.pairwise(toArray(xs1)));
}
function windowed(windowSize, xs1) {
    return ofArray(_arrayJs.map((xs_1)=>ofArray(xs_1)
    , _arrayJs.windowed(windowSize, toArray(xs1))));
}
function splitInto(chunks, xs1) {
    return ofArray(_arrayJs.map((xs_1)=>ofArray(xs_1)
    , _arrayJs.splitInto(chunks, toArray(xs1))));
}
function transpose(lists) {
    return ofArray(_arrayJs.map((xs_1)=>ofArray(xs_1)
    , _arrayJs.transpose(_arrayJs.map((xs1)=>toArray(xs1)
    , Array.from(lists)))));
}
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;
$RefreshReg$(_c, "FSharpList$reflection");
$RefreshReg$(_c1, "ListEnumerator$1$reflection");
$RefreshReg$(_c2, "ListEnumerator$1_$ctor_3002E699");
$RefreshReg$(_c3, "FSharpList_get_Empty");
$RefreshReg$(_c4, "FSharpList_Cons_305B8EAC");
$RefreshReg$(_c5, "FSharpList__get_IsEmpty");
$RefreshReg$(_c6, "FSharpList__get_Length");
$RefreshReg$(_c7, "FSharpList__get_Head");
$RefreshReg$(_c8, "FSharpList__get_Tail");
$RefreshReg$(_c9, "FSharpList__get_Item_Z524259A4");

},{"./String.js":"baXBU","./Util.js":"e4VZ7","./Types.js":"7IOW0","./Reflection.js":"c0YT4","./Option.js":"gHWVf","./Array.js":"dl8am","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"baXBU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "compareOrdinal", ()=>compareOrdinal
);
parcelHelpers.export(exports, "compareTo", ()=>compareTo
);
parcelHelpers.export(exports, "startsWith", ()=>startsWith
);
parcelHelpers.export(exports, "indexOfAny", ()=>indexOfAny
);
parcelHelpers.export(exports, "printf", ()=>printf
);
parcelHelpers.export(exports, "interpolate", ()=>interpolate
);
parcelHelpers.export(exports, "toConsole", ()=>toConsole
);
parcelHelpers.export(exports, "toConsoleError", ()=>toConsoleError
);
parcelHelpers.export(exports, "toText", ()=>toText
);
parcelHelpers.export(exports, "toFail", ()=>toFail
);
parcelHelpers.export(exports, "fsFormat", ()=>fsFormat
);
parcelHelpers.export(exports, "format", ()=>format
);
parcelHelpers.export(exports, "endsWith", ()=>endsWith
);
parcelHelpers.export(exports, "initialize", ()=>initialize
);
parcelHelpers.export(exports, "insert", ()=>insert
);
parcelHelpers.export(exports, "isNullOrEmpty", ()=>isNullOrEmpty
);
parcelHelpers.export(exports, "isNullOrWhiteSpace", ()=>isNullOrWhiteSpace
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "join", ()=>join
);
parcelHelpers.export(exports, "joinWithIndices", ()=>joinWithIndices
);
parcelHelpers.export(exports, "toBase64String", ()=>toBase64String
);
parcelHelpers.export(exports, "fromBase64String", ()=>fromBase64String
);
parcelHelpers.export(exports, "padLeft", ()=>padLeft
);
parcelHelpers.export(exports, "padRight", ()=>padRight
);
parcelHelpers.export(exports, "remove", ()=>remove
);
parcelHelpers.export(exports, "replace", ()=>replace
);
parcelHelpers.export(exports, "replicate", ()=>replicate
);
parcelHelpers.export(exports, "getCharAtIndex", ()=>getCharAtIndex
);
parcelHelpers.export(exports, "split", ()=>split
);
parcelHelpers.export(exports, "trim", ()=>trim
);
parcelHelpers.export(exports, "trimStart", ()=>trimStart
);
parcelHelpers.export(exports, "trimEnd", ()=>trimEnd
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "substring", ()=>substring
);
var _dateJs = require("./Date.js");
var _numericJs = require("./Numeric.js");
var _regExpJs = require("./RegExp.js");
var _typesJs = require("./Types.js");
const fsFormatRegExp = /(^|[^%])%([0+\- ]*)(\*|\d+)?(?:\.(\d+))?(\w)/g;
const interpolateRegExp = /(?:(^|[^%])%([0+\- ]*)(\d+)?(?:\.(\d+))?(\w))?%P\(\)/g;
const formatRegExp = /\{(\d+)(,-?\d+)?(?:\:([a-zA-Z])(\d{0,2})|\:(.+?))?\}/g;
function isLessThan(x, y) {
    return _numericJs.compare(x, y) < 0;
}
function cmp(x, y, ic) {
    function isIgnoreCase(i) {
        return i === true || i === 1 /* CurrentCultureIgnoreCase */  || i === 3 /* InvariantCultureIgnoreCase */  || i === 5 /* OrdinalIgnoreCase */ ;
    }
    function isOrdinal(i) {
        return i === 4 /* Ordinal */  || i === 5 /* OrdinalIgnoreCase */ ;
    }
    if (x == null) return y == null ? 0 : -1;
    if (y == null) return 1;
     // everything is bigger than null
    if (isOrdinal(ic)) {
        if (isIgnoreCase(ic)) {
            x = x.toLowerCase();
            y = y.toLowerCase();
        }
        return x === y ? 0 : x < y ? -1 : 1;
    } else {
        if (isIgnoreCase(ic)) {
            x = x.toLocaleLowerCase();
            y = y.toLocaleLowerCase();
        }
        return x.localeCompare(y);
    }
}
function compare(...args) {
    switch(args.length){
        case 2:
            return cmp(args[0], args[1], false);
        case 3:
            return cmp(args[0], args[1], args[2]);
        case 4:
            return cmp(args[0], args[1], args[2] === true);
        case 5:
            return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);
        case 6:
            return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);
        case 7:
            return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);
        default:
            throw new Error("String.compare: Unsupported number of parameters");
    }
}
function compareOrdinal(x, y) {
    return cmp(x, y, 4 /* Ordinal */ );
}
function compareTo(x, y) {
    return cmp(x, y, 0 /* CurrentCulture */ );
}
function startsWith(str, pattern, ic) {
    if (str.length >= pattern.length) return cmp(str.substr(0, pattern.length), pattern, ic) === 0;
    return false;
}
function indexOfAny(str, anyOf, ...args) {
    if (str == null || str === "") return -1;
    const startIndex = args.length > 0 ? args[0] : 0;
    if (startIndex < 0) throw new Error("Start index cannot be negative");
    const length = args.length > 1 ? args[1] : str.length - startIndex;
    if (length < 0) throw new Error("Length cannot be negative");
    if (length > str.length - startIndex) throw new Error("Invalid startIndex and length");
    str = str.substr(startIndex, length);
    for (const c of anyOf){
        const index = str.indexOf(c);
        if (index > -1) return index + startIndex;
    }
    return -1;
}
function printf(input) {
    return {
        input,
        cont: fsFormat(input)
    };
}
function interpolate(str, values) {
    let valIdx = 0;
    let strIdx = 0;
    let result = "";
    interpolateRegExp.lastIndex = 0;
    let match = interpolateRegExp.exec(str);
    while(match){
        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char
        // Note: we don't use negative lookbehind because some browsers don't support it yet
        const matchIndex = match.index + (match[1] || "").length;
        result += str.substring(strIdx, matchIndex).replace(/%%/g, "%");
        const [, , flags, padLength, precision, format] = match;
        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);
        strIdx = interpolateRegExp.lastIndex;
        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time
        interpolateRegExp.lastIndex -= 1;
        match = interpolateRegExp.exec(str);
    }
    result += str.substring(strIdx).replace(/%%/g, "%");
    return result;
}
function continuePrint(cont, arg) {
    return typeof arg === "string" ? cont(arg) : arg.cont(cont);
}
function toConsole(arg) {
    // Don't remove the lambda here, see #1357
    return continuePrint((x)=>console.log(x)
    , arg);
}
function toConsoleError(arg) {
    return continuePrint((x)=>console.error(x)
    , arg);
}
function toText(arg) {
    return continuePrint((x)=>x
    , arg);
}
function toFail(arg) {
    return continuePrint((x)=>{
        throw new Error(x);
    }, arg);
}
function formatReplacement(rep, flags, padLength, precision, format) {
    let sign = "";
    flags = flags || "";
    format = format || "";
    if (_numericJs.isNumeric(rep)) {
        if (format.toLowerCase() !== "x") {
            if (isLessThan(rep, 0)) {
                rep = _numericJs.multiply(rep, -1);
                sign = "-";
            } else {
                if (flags.indexOf(" ") >= 0) sign = " ";
                else if (flags.indexOf("+") >= 0) sign = "+";
            }
        }
        precision = precision == null ? null : parseInt(precision, 10);
        switch(format){
            case "f":
            case "F":
                precision = precision != null ? precision : 6;
                rep = _numericJs.toFixed(rep, precision);
                break;
            case "g":
            case "G":
                rep = precision != null ? _numericJs.toPrecision(rep, precision) : _numericJs.toPrecision(rep);
                break;
            case "e":
            case "E":
                rep = precision != null ? _numericJs.toExponential(rep, precision) : _numericJs.toExponential(rep);
                break;
            case "x":
                rep = _numericJs.toHex(rep);
                break;
            case "X":
                rep = _numericJs.toHex(rep).toUpperCase();
                break;
            default:
                rep = String(rep);
                break;
        }
    } else if (rep instanceof Date) rep = _dateJs.toString(rep);
    else rep = _typesJs.toString(rep);
    padLength = typeof padLength === "number" ? padLength : parseInt(padLength, 10);
    if (!isNaN(padLength)) {
        const zeroFlag = flags.indexOf("0") >= 0; // Use '0' for left padding
        const minusFlag = flags.indexOf("-") >= 0; // Right padding
        const ch = minusFlag || !zeroFlag ? " " : "0";
        if (ch === "0") {
            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);
            rep = sign + rep;
        } else rep = padLeft(sign + rep, padLength, ch, minusFlag);
    } else rep = sign + rep;
    return rep;
}
function createPrinter(cont, _strParts, _matches, _result = "", padArg = -1) {
    return (...args)=>{
        // Make copies of the values passed by reference because the function can be used multiple times
        let result = _result;
        const strParts = _strParts.slice();
        const matches = _matches.slice();
        for (const arg of args){
            const [, , flags, _padLength, precision, format] = matches[0];
            let padLength = _padLength;
            if (padArg >= 0) {
                padLength = padArg;
                padArg = -1;
            } else if (padLength === "*") {
                if (arg < 0) throw new Error("Non-negative number required");
                padArg = arg;
                continue;
            }
            result += strParts[0];
            result += formatReplacement(arg, flags, padLength, precision, format);
            strParts.splice(0, 1);
            matches.splice(0, 1);
        }
        if (matches.length === 0) {
            result += strParts[0];
            return cont(result);
        } else return createPrinter(cont, strParts, matches, result, padArg);
    };
}
function fsFormat(str) {
    return (cont)=>{
        fsFormatRegExp.lastIndex = 0;
        const strParts = [];
        const matches = [];
        let strIdx = 0;
        let match = fsFormatRegExp.exec(str);
        while(match){
            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char
            // Note: we don't use negative lookbehind because some browsers don't support it yet
            const matchIndex = match.index + (match[1] || "").length;
            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, "%"));
            matches.push(match);
            strIdx = fsFormatRegExp.lastIndex;
            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time
            fsFormatRegExp.lastIndex -= 1;
            match = fsFormatRegExp.exec(str);
        }
        if (strParts.length === 0) return cont(str.replace(/%%/g, "%"));
        else {
            strParts.push(str.substring(strIdx).replace(/%%/g, "%"));
            return createPrinter(cont, strParts, matches);
        }
    };
}
function format(str, ...args) {
    if (typeof str === "object" && args.length > 0) {
        // Called with culture info
        str = args[0];
        args.shift();
    }
    return str.replace(formatRegExp, (_, idx, padLength, format1, precision, pattern)=>{
        let rep = args[idx];
        if (_numericJs.isNumeric(rep)) {
            precision = precision == null ? null : parseInt(precision, 10);
            switch(format1){
                case "f":
                case "F":
                    precision = precision != null ? precision : 2;
                    rep = _numericJs.toFixed(rep, precision);
                    break;
                case "g":
                case "G":
                    rep = precision != null ? _numericJs.toPrecision(rep, precision) : _numericJs.toPrecision(rep);
                    break;
                case "e":
                case "E":
                    rep = precision != null ? _numericJs.toExponential(rep, precision) : _numericJs.toExponential(rep);
                    break;
                case "p":
                case "P":
                    precision = precision != null ? precision : 2;
                    rep = _numericJs.toFixed(_numericJs.multiply(rep, 100), precision) + " %";
                    break;
                case "d":
                case "D":
                    rep = precision != null ? padLeft(String(rep), precision, "0") : String(rep);
                    break;
                case "x":
                case "X":
                    rep = precision != null ? padLeft(_numericJs.toHex(rep), precision, "0") : _numericJs.toHex(rep);
                    if (format1 === "X") rep = rep.toUpperCase();
                    break;
                default:
                    if (pattern) {
                        let sign = "";
                        rep = pattern.replace(/(0+)(\.0+)?/, (_1, intPart, decimalPart)=>{
                            if (isLessThan(rep, 0)) {
                                rep = _numericJs.multiply(rep, -1);
                                sign = "-";
                            }
                            rep = _numericJs.toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);
                            return padLeft(rep, (intPart || "").length - sign.length + (decimalPart != null ? decimalPart.length : 0), "0");
                        });
                        rep = sign + rep;
                    }
            }
        } else if (rep instanceof Date) rep = _dateJs.toString(rep, pattern || format1);
        else rep = _typesJs.toString(rep);
        padLength = parseInt((padLength || " ").substring(1), 10);
        if (!isNaN(padLength)) rep = padLeft(String(rep), Math.abs(padLength), " ", padLength < 0);
        return rep;
    });
}
function endsWith(str, search) {
    const idx = str.lastIndexOf(search);
    return idx >= 0 && idx === str.length - search.length;
}
function initialize(n, f) {
    if (n < 0) throw new Error("String length must be non-negative");
    const xs = new Array(n);
    for(let i = 0; i < n; i++)xs[i] = f(i);
    return xs.join("");
}
function insert(str, startIndex, value) {
    if (startIndex < 0 || startIndex > str.length) throw new Error("startIndex is negative or greater than the length of this instance.");
    return str.substring(0, startIndex) + value + str.substring(startIndex);
}
function isNullOrEmpty(str) {
    return typeof str !== "string" || str.length === 0;
}
function isNullOrWhiteSpace(str) {
    return typeof str !== "string" || /^\s*$/.test(str);
}
function concat(...xs) {
    return xs.map((x)=>String(x)
    ).join("");
}
function join(delimiter, xs) {
    if (Array.isArray(xs)) return xs.join(delimiter);
    else return Array.from(xs).join(delimiter);
}
function joinWithIndices(delimiter, xs, startIndex, count) {
    const endIndexPlusOne = startIndex + count;
    if (endIndexPlusOne > xs.length) throw new Error("Index and count must refer to a location within the buffer.");
    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);
}
function notSupported(name) {
    throw new Error("The environment doesn't support '" + name + "', please use a polyfill.");
}
function toBase64String(inArray) {
    let str = "";
    for(let i = 0; i < inArray.length; i++)str += String.fromCharCode(inArray[i]);
    return typeof btoa === "function" ? btoa(str) : notSupported("btoa");
}
function fromBase64String(b64Encoded) {
    const binary = typeof atob === "function" ? atob(b64Encoded) : notSupported("atob");
    const bytes = new Uint8Array(binary.length);
    for(let i = 0; i < binary.length; i++)bytes[i] = binary.charCodeAt(i);
    return bytes;
}
function padLeft(str, len, ch, isRight) {
    ch = ch || " ";
    len = len - str.length;
    for(let i = 0; i < len; i++)str = isRight ? str + ch : ch + str;
    return str;
}
function padRight(str, len, ch) {
    return padLeft(str, len, ch, true);
}
function remove(str, startIndex, count) {
    if (startIndex >= str.length) throw new Error("startIndex must be less than length of string");
    if (typeof count === "number" && startIndex + count > str.length) throw new Error("Index and count must refer to a location within the string.");
    return str.slice(0, startIndex) + (typeof count === "number" ? str.substr(startIndex + count) : "");
}
function replace(str, search, replace1) {
    return str.replace(new RegExp(_regExpJs.escape(search), "g"), replace1);
}
function replicate(n, x) {
    return initialize(n, ()=>x
    );
}
function getCharAtIndex(input, index) {
    if (index < 0 || index >= input.length) throw new Error("Index was outside the bounds of the array.");
    return input[index];
}
function split(str, splitters, count, removeEmpty) {
    count = typeof count === "number" ? count : undefined;
    removeEmpty = typeof removeEmpty === "number" ? removeEmpty : undefined;
    if (count && count < 0) throw new Error("Count cannot be less than zero");
    if (count === 0) return [];
    if (!Array.isArray(splitters)) {
        if (removeEmpty === 0) return str.split(splitters, count);
        const len = arguments.length;
        splitters = Array(len - 1);
        for(let key = 1; key < len; key++)splitters[key - 1] = arguments[key];
    }
    splitters = splitters.map((x)=>_regExpJs.escape(x)
    );
    splitters = splitters.length > 0 ? splitters : [
        " "
    ];
    let i = 0;
    const splits = [];
    const reg = new RegExp(splitters.join("|"), "g");
    while(count == null || count > 1){
        const m = reg.exec(str);
        if (m === null) break;
        if (!removeEmpty || m.index - i > 0) {
            count = count != null ? count - 1 : count;
            splits.push(str.substring(i, m.index));
        }
        i = reg.lastIndex;
    }
    if (!removeEmpty || str.length - i > 0) splits.push(str.substring(i));
    return splits;
}
function trim(str, ...chars) {
    if (chars.length === 0) return str.trim();
    const pattern = "[" + _regExpJs.escape(chars.join("")) + "]+";
    return str.replace(new RegExp("^" + pattern), "").replace(new RegExp(pattern + "$"), "");
}
function trimStart(str, ...chars) {
    return chars.length === 0 ? str.trimStart() : str.replace(new RegExp("^[" + _regExpJs.escape(chars.join("")) + "]+"), "");
}
function trimEnd(str, ...chars) {
    return chars.length === 0 ? str.trimEnd() : str.replace(new RegExp("[" + _regExpJs.escape(chars.join("")) + "]+$"), "");
}
function filter(pred, x) {
    return x.split("").filter((c)=>pred(c)
    ).join("");
}
function substring(str, startIndex, length) {
    if (startIndex + (length || 0) > str.length) throw new Error("Invalid startIndex and/or length");
    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);
}

},{"./Date.js":"bQWYH","./Numeric.js":"9n2No","./RegExp.js":"1dET7","./Types.js":"7IOW0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bQWYH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "offsetRegex", ()=>offsetRegex
);
parcelHelpers.export(exports, "dateOffsetToString", ()=>dateOffsetToString
);
parcelHelpers.export(exports, "dateToHalfUTCString", ()=>dateToHalfUTCString
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "DateTime", ()=>DateTime
);
parcelHelpers.export(exports, "fromTicks", ()=>fromTicks
);
parcelHelpers.export(exports, "fromDateTimeOffset", ()=>fromDateTimeOffset
);
parcelHelpers.export(exports, "getTicks", ()=>getTicks
);
parcelHelpers.export(exports, "minValue", ()=>minValue
);
parcelHelpers.export(exports, "maxValue", ()=>maxValue
);
parcelHelpers.export(exports, "parseRaw", ()=>parseRaw
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "create", ()=>create
);
parcelHelpers.export(exports, "now", ()=>now
);
parcelHelpers.export(exports, "utcNow", ()=>utcNow
);
parcelHelpers.export(exports, "today", ()=>today
);
parcelHelpers.export(exports, "isLeapYear", ()=>isLeapYear
);
parcelHelpers.export(exports, "daysInMonth", ()=>daysInMonth
);
parcelHelpers.export(exports, "toUniversalTime", ()=>toUniversalTime
);
parcelHelpers.export(exports, "toLocalTime", ()=>toLocalTime
);
parcelHelpers.export(exports, "specifyKind", ()=>specifyKind
);
parcelHelpers.export(exports, "timeOfDay", ()=>timeOfDay
);
parcelHelpers.export(exports, "date", ()=>date
);
parcelHelpers.export(exports, "day", ()=>day
);
parcelHelpers.export(exports, "hour", ()=>hour
);
parcelHelpers.export(exports, "millisecond", ()=>millisecond
);
parcelHelpers.export(exports, "minute", ()=>minute
);
parcelHelpers.export(exports, "month", ()=>month
);
parcelHelpers.export(exports, "second", ()=>second
);
parcelHelpers.export(exports, "year", ()=>year
);
parcelHelpers.export(exports, "dayOfWeek", ()=>dayOfWeek
);
parcelHelpers.export(exports, "dayOfYear", ()=>dayOfYear
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "addDays", ()=>addDays
);
parcelHelpers.export(exports, "addHours", ()=>addHours
);
parcelHelpers.export(exports, "addMinutes", ()=>addMinutes
);
parcelHelpers.export(exports, "addSeconds", ()=>addSeconds
);
parcelHelpers.export(exports, "addMilliseconds", ()=>addMilliseconds
);
parcelHelpers.export(exports, "addYears", ()=>addYears
);
parcelHelpers.export(exports, "addMonths", ()=>addMonths
);
parcelHelpers.export(exports, "subtract", ()=>subtract
);
parcelHelpers.export(exports, "toLongDateString", ()=>toLongDateString
);
parcelHelpers.export(exports, "toShortDateString", ()=>toShortDateString
);
parcelHelpers.export(exports, "toLongTimeString", ()=>toLongTimeString
);
parcelHelpers.export(exports, "toShortTimeString", ()=>toShortTimeString
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "compareTo", ()=>compareTo
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "isDaylightSavingTime", ()=>isDaylightSavingTime
);
/**
 * DateTimeOffset functions.
 *
 * Note: Date instances are always DateObjects in local
 * timezone (because JS dates are all kinds of messed up).
 * A local date returns UTC epoc when `.getTime()` is called.
 *
 * Basically; invariant: date.getTime() always return UTC time.
 */ var _longJs = require("./Long.js");
var _utilJs = require("./Util.js");
const offsetRegex = /(?:Z|[+-](\d+):?([0-5]?\d)?)\s*$/;
function dateOffsetToString(offset) {
    const isMinus = offset < 0;
    offset = Math.abs(offset);
    const hours = ~~(offset / 3600000);
    const minutes = offset % 3600000 / 60000;
    return (isMinus ? "-" : "+") + _utilJs.padWithZeros(hours, 2) + ":" + _utilJs.padWithZeros(minutes, 2);
}
function dateToHalfUTCString(date, half) {
    const str = date.toISOString();
    return half === "first" ? str.substring(0, str.indexOf("T")) : str.substring(str.indexOf("T") + 1, str.length - 1);
}
function dateToISOString(d, utc) {
    if (utc) return d.toISOString();
    else {
        // JS Date is always local
        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */ ;
        return _utilJs.padWithZeros(d.getFullYear(), 4) + "-" + _utilJs.padWithZeros(d.getMonth() + 1, 2) + "-" + _utilJs.padWithZeros(d.getDate(), 2) + "T" + _utilJs.padWithZeros(d.getHours(), 2) + ":" + _utilJs.padWithZeros(d.getMinutes(), 2) + ":" + _utilJs.padWithZeros(d.getSeconds(), 2) + "." + _utilJs.padWithZeros(d.getMilliseconds(), 3) + (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : "");
    }
}
function dateToISOStringWithOffset(dateWithOffset, offset) {
    const str = dateWithOffset.toISOString();
    return str.substring(0, str.length - 1) + dateOffsetToString(offset);
}
function dateToStringWithCustomFormat(date, format, utc) {
    return format.replace(/(\w)\1*/g, (match)=>{
        let rep = Number.NaN;
        switch(match.substring(0, 1)){
            case "y":
                const y = utc ? date.getUTCFullYear() : date.getFullYear();
                rep = match.length < 4 ? y % 100 : y;
                break;
            case "M":
                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;
                break;
            case "d":
                rep = utc ? date.getUTCDate() : date.getDate();
                break;
            case "H":
                rep = utc ? date.getUTCHours() : date.getHours();
                break;
            case "h":
                const h = utc ? date.getUTCHours() : date.getHours();
                rep = h > 12 ? h % 12 : h;
                break;
            case "m":
                rep = utc ? date.getUTCMinutes() : date.getMinutes();
                break;
            case "s":
                rep = utc ? date.getUTCSeconds() : date.getSeconds();
                break;
            case "f":
                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();
                break;
        }
        if (Number.isNaN(rep)) return match;
        else return rep < 10 && match.length > 1 ? "0" + rep : "" + rep;
    });
}
function dateToStringWithOffset(date, format) {
    var _a, _b, _c;
    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));
    if (typeof format !== "string") return d.toISOString().replace(/\.\d+/, "").replace(/[A-Z]|\.\d+/g, " ") + dateOffsetToString((_b = date.offset) !== null && _b !== void 0 ? _b : 0);
    else if (format.length === 1) switch(format){
        case "D":
        case "d":
            return dateToHalfUTCString(d, "first");
        case "T":
        case "t":
            return dateToHalfUTCString(d, "second");
        case "O":
        case "o":
            return dateToISOStringWithOffset(d, (_c = date.offset) !== null && _c !== void 0 ? _c : 0);
        default:
            throw new Error("Unrecognized Date print format");
    }
    else return dateToStringWithCustomFormat(d, format, true);
}
function dateToStringWithKind(date, format) {
    const utc = date.kind === 1 /* UTC */ ;
    if (typeof format !== "string") return utc ? date.toUTCString() : date.toLocaleString();
    else if (format.length === 1) switch(format){
        case "D":
        case "d":
            return utc ? dateToHalfUTCString(date, "first") : date.toLocaleDateString();
        case "T":
        case "t":
            return utc ? dateToHalfUTCString(date, "second") : date.toLocaleTimeString();
        case "O":
        case "o":
            return dateToISOString(date, utc);
        default:
            throw new Error("Unrecognized Date print format");
    }
    else return dateToStringWithCustomFormat(date, format, utc);
}
function toString(date, format, _provider) {
    return date.offset != null ? dateToStringWithOffset(date, format) : dateToStringWithKind(date, format);
}
function DateTime(value, kind) {
    const d = new Date(value);
    d.kind = (kind == null ? 0 /* Unspecified */  : kind) | 0;
    return d;
}
_c = DateTime;
function fromTicks(ticks, kind) {
    ticks = _longJs.fromValue(ticks);
    kind = kind != null ? kind : 0 /* Unspecified */ ;
    let date = DateTime(_longJs.ticksToUnixEpochMilliseconds(ticks), kind);
    // Ticks are local to offset (in this case, either UTC or Local/Unknown).
    // If kind is anything but UTC, that means that the tick number was not
    // in utc, thus getTime() cannot return UTC, and needs to be shifted.
    if (kind !== 1 /* UTC */ ) date = DateTime(date.getTime() - _utilJs.dateOffset(date), kind);
    return date;
}
function fromDateTimeOffset(date, kind) {
    var _a;
    switch(kind){
        case 1 /* UTC */ :
            return DateTime(date.getTime(), 1 /* UTC */ );
        case 2 /* Local */ :
            return DateTime(date.getTime(), 2 /* Local */ );
        default:
            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);
            return DateTime(d.getTime() - _utilJs.dateOffset(d), kind);
    }
}
function getTicks(date) {
    return _longJs.unixEpochMillisecondsToTicks(date.getTime(), _utilJs.dateOffset(date));
}
function minValue() {
    // This is "0001-01-01T00:00:00.000Z", actual JS min value is -8640000000000000
    return DateTime(-62135596800000, 0 /* Unspecified */ );
}
function maxValue() {
    // This is "9999-12-31T23:59:59.999Z", actual JS max value is 8640000000000000
    return DateTime(253402300799999, 0 /* Unspecified */ );
}
function parseRaw(input) {
    if (input === null) throw new Error("Value cannot be null when parsing DateTime");
    if (input.trim() === "") throw new Error("An empty string is not recognized as a valid DateTime");
    let date = new Date(input);
    if (isNaN(date.getTime())) {
        // Try to check strings JS Date cannot parse (see #1045, #1422)
        // tslint:disable-next-line:max-line-length
        const m = /^\s*(\d+[^\w\s:]\d+[^\w\s:]\d+)?\s*(\d+:\d+(?::\d+(?:\.\d+)?)?)?\s*([AaPp][Mm])?\s*([+-]\d+(?::\d+)?)?\s*$/.exec(input);
        if (m != null) {
            let baseDate;
            let timeInSeconds = 0;
            if (m[2] != null) {
                const timeParts = m[2].split(":");
                timeInSeconds = parseInt(timeParts[0], 10) * 3600 + parseInt(timeParts[1] || "0", 10) * 60 + parseFloat(timeParts[2] || "0");
                if (m[3] != null && m[3].toUpperCase() === "PM") timeInSeconds += 720;
            }
            if (m[4] != null) {
                if (m[1] != null) baseDate = new Date(m[1] + " UTC");
                else {
                    const d = new Date();
                    baseDate = new Date(d.getUTCFullYear() + "/" + (d.getUTCMonth() + 1) + "/" + d.getUTCDate());
                }
                const offsetParts = m[4].substr(1).split(":");
                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || "0", 10);
                if (m[4][0] === "+") offsetInMinutes *= -1;
                timeInSeconds += offsetInMinutes * 60;
            } else if (m[1] != null) baseDate = new Date(m[1]);
            else {
                const d = new Date();
                baseDate = new Date(d.getFullYear() + "/" + (d.getMonth() + 1) + "/" + d.getDate());
            }
            date = new Date(baseDate.getTime() + timeInSeconds * 1000);
            // correct for daylight savings time
            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);
        } else throw new Error("The string is not a valid Date.");
    }
    return date;
}
function parse(str, detectUTC = false) {
    const date = parseRaw(str);
    const offset = offsetRegex.exec(str);
    // .NET always parses DateTime as Local if there's offset info (even "Z")
    // Newtonsoft.Json uses UTC if the offset is "Z"
    const kind = offset != null ? detectUTC && offset[0] === "Z" ? 1 /* UTC */  : 2 /* Local */  : 0 /* Unspecified */ ;
    return DateTime(date.getTime(), kind);
}
function tryParse(v, defValue) {
    try {
        defValue.contents = parse(v);
        return true;
    } catch (_err) {
        return false;
    }
}
function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {
    const dateValue = kind === 1 /* UTC */  ? Date.UTC(year, month - 1, day, h, m, s, ms) : new Date(year, month - 1, day, h, m, s, ms).getTime();
    if (isNaN(dateValue)) throw new Error("The parameters describe an unrepresentable Date.");
    const date = DateTime(dateValue, kind);
    if (year <= 99) date.setFullYear(year, month - 1, day);
    return date;
}
function now() {
    return DateTime(Date.now(), 2 /* Local */ );
}
function utcNow() {
    return DateTime(Date.now(), 1 /* UTC */ );
}
function today() {
    return date(now());
}
function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function daysInMonth(year, month) {
    return month === 2 ? isLeapYear(year) ? 29 : 28 : month >= 8 ? month % 2 === 0 ? 31 : 30 : month % 2 === 0 ? 30 : 31;
}
function toUniversalTime(date) {
    return date.kind === 1 /* UTC */  ? date : DateTime(date.getTime(), 1 /* UTC */ );
}
function toLocalTime(date) {
    return date.kind === 2 /* Local */  ? date : DateTime(date.getTime(), 2 /* Local */ );
}
function specifyKind(d, kind) {
    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);
}
function timeOfDay(d) {
    return hour(d) * 3600000 + minute(d) * 60000 + second(d) * 1000 + millisecond(d);
}
function date(d) {
    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);
}
function day(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCDate() : d.getDate();
}
function hour(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCHours() : d.getHours();
}
function millisecond(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCMilliseconds() : d.getMilliseconds();
}
function minute(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCMinutes() : d.getMinutes();
}
function month(d) {
    return (d.kind === 1 /* UTC */  ? d.getUTCMonth() : d.getMonth()) + 1;
}
function second(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCSeconds() : d.getSeconds();
}
function year(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCFullYear() : d.getFullYear();
}
function dayOfWeek(d) {
    return d.kind === 1 /* UTC */  ? d.getUTCDay() : d.getDay();
}
function dayOfYear(d) {
    const _year = year(d);
    const _month = month(d);
    let _day = day(d);
    for(let i = 1; i < _month; i++)_day += daysInMonth(_year, i);
    return _day;
}
function add(d, ts) {
    const newDate = DateTime(d.getTime() + ts, d.kind);
    if (d.kind === 2 /* Local */ ) {
        const oldTzOffset = d.getTimezoneOffset();
        const newTzOffset = newDate.getTimezoneOffset();
        return oldTzOffset !== newTzOffset ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind) : newDate;
    } else return newDate;
}
function addDays(d, v) {
    return add(d, v * 86400000);
}
function addHours(d, v) {
    return add(d, v * 3600000);
}
function addMinutes(d, v) {
    return add(d, v * 60000);
}
function addSeconds(d, v) {
    return add(d, v * 1000);
}
function addMilliseconds(d, v) {
    return add(d, v);
}
function addYears(d, v) {
    const newMonth = month(d);
    const newYear = year(d) + v;
    const _daysInMonth = daysInMonth(newYear, newMonth);
    const newDay = Math.min(_daysInMonth, day(d));
    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);
}
function addMonths(d, v) {
    let newMonth = month(d) + v;
    let newMonth_ = 0;
    let yearOffset = 0;
    if (newMonth > 12) {
        newMonth_ = newMonth % 12;
        yearOffset = Math.floor(newMonth / 12);
        newMonth = newMonth_;
    } else if (newMonth < 1) {
        newMonth_ = 12 + newMonth % 12;
        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);
        newMonth = newMonth_;
    }
    const newYear = year(d) + yearOffset;
    const _daysInMonth = daysInMonth(newYear, newMonth);
    const newDay = Math.min(_daysInMonth, day(d));
    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);
}
function subtract(d, that) {
    return typeof that === "number" ? add(d, -that) : d.getTime() - that.getTime();
}
function toLongDateString(d) {
    return d.toDateString();
}
function toShortDateString(d) {
    return d.toLocaleDateString();
}
function toLongTimeString(d) {
    return d.toLocaleTimeString();
}
function toShortTimeString(d) {
    return d.toLocaleTimeString().replace(/:\d\d(?!:)/, "");
}
function equals(d1, d2) {
    return d1.getTime() === d2.getTime();
}
const compare = _utilJs.compareDates;
const compareTo = _utilJs.compareDates;
function op_Addition(x, y) {
    return add(x, y);
}
function op_Subtraction(x, y) {
    return subtract(x, y);
}
function isDaylightSavingTime(x) {
    const jan = new Date(x.getFullYear(), 0, 1);
    const jul = new Date(x.getFullYear(), 6, 1);
    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());
}
function isDST(janOffset, julOffset, tOffset) {
    return Math.min(janOffset, julOffset) === tOffset;
}
exports.default = DateTime;
var _c;
$RefreshReg$(_c, "DateTime");

},{"./Long.js":"2dOzy","./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2dOzy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "get_Zero", ()=>get_Zero
);
parcelHelpers.export(exports, "get_One", ()=>get_One
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "op_Multiply", ()=>op_Multiply
);
parcelHelpers.export(exports, "op_Division", ()=>op_Division
);
parcelHelpers.export(exports, "op_Modulus", ()=>op_Modulus
);
parcelHelpers.export(exports, "op_UnaryNegation", ()=>op_UnaryNegation
);
parcelHelpers.export(exports, "op_LeftShift", ()=>op_LeftShift
);
parcelHelpers.export(exports, "op_RightShift", ()=>op_RightShift
);
parcelHelpers.export(exports, "op_RightShiftUnsigned", ()=>op_RightShiftUnsigned
);
parcelHelpers.export(exports, "op_BitwiseAnd", ()=>op_BitwiseAnd
);
parcelHelpers.export(exports, "op_BitwiseOr", ()=>op_BitwiseOr
);
parcelHelpers.export(exports, "op_ExclusiveOr", ()=>op_ExclusiveOr
);
parcelHelpers.export(exports, "op_LogicalNot", ()=>op_LogicalNot
);
parcelHelpers.export(exports, "op_LessThan", ()=>op_LessThan
);
parcelHelpers.export(exports, "op_LessThanOrEqual", ()=>op_LessThanOrEqual
);
parcelHelpers.export(exports, "op_GreaterThan", ()=>op_GreaterThan
);
parcelHelpers.export(exports, "op_GreaterThanOrEqual", ()=>op_GreaterThanOrEqual
);
parcelHelpers.export(exports, "op_Equality", ()=>op_Equality
);
parcelHelpers.export(exports, "op_Inequality", ()=>op_Inequality
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "fromInt", ()=>fromInt
);
parcelHelpers.export(exports, "fromBits", ()=>fromBits
);
parcelHelpers.export(exports, "fromBytes", ()=>fromBytes
);
parcelHelpers.export(exports, "fromNumber", ()=>fromNumber
);
parcelHelpers.export(exports, "fromString", ()=>fromString
);
parcelHelpers.export(exports, "fromValue", ()=>fromValue
);
parcelHelpers.export(exports, "toInt", ()=>toInt
);
parcelHelpers.export(exports, "toBytes", ()=>toBytes
);
parcelHelpers.export(exports, "toNumber", ()=>toNumber
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "getLowBits", ()=>getLowBits
);
parcelHelpers.export(exports, "getHighBits", ()=>getHighBits
);
parcelHelpers.export(exports, "getLowBitsUnsigned", ()=>getLowBitsUnsigned
);
parcelHelpers.export(exports, "getHighBitsUnsigned", ()=>getHighBitsUnsigned
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "fromInteger", ()=>fromInteger
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "unixEpochMillisecondsToTicks", ()=>unixEpochMillisecondsToTicks
);
parcelHelpers.export(exports, "ticksToUnixEpochMilliseconds", ()=>ticksToUnixEpochMilliseconds
) // export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {
 //   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);
 //   if (stepComparedWithZero === 0) {
 //     throw new Error("The step of a range cannot be zero");
 //   }
 //   const stepGreaterThanZero = stepComparedWithZero > 0;
 //   return (x: Long) => {
 //     const comparedWithLast = LongLib.compare(x, last);
 //     if ((stepGreaterThanZero && comparedWithLast <= 0)
 //       || (!stepGreaterThanZero && comparedWithLast >= 0)) {
 //       return [x, op_Addition(x, step)];
 //     } else {
 //       return undefined;
 //     }
 //   };
 // }
;
var _int32Js = require("./Int32.js");
var _longJs = require("./lib/long.js");
exports.default = _longJs.Long;
const get_Zero = _longJs.ZERO;
const get_One = _longJs.ONE;
const op_Addition = _longJs.add;
const op_Subtraction = _longJs.subtract;
const op_Multiply = _longJs.multiply;
const op_Division = _longJs.divide;
const op_Modulus = _longJs.modulo;
const op_UnaryNegation = _longJs.negate;
const op_LeftShift = _longJs.shiftLeft;
const op_RightShift = _longJs.shiftRight;
const op_RightShiftUnsigned = _longJs.shiftRightUnsigned;
const op_BitwiseAnd = _longJs.and;
const op_BitwiseOr = _longJs.or;
const op_ExclusiveOr = _longJs.xor;
const op_LogicalNot = _longJs.not;
const op_LessThan = _longJs.lessThan;
const op_LessThanOrEqual = _longJs.lessThanOrEqual;
const op_GreaterThan = _longJs.greaterThan;
const op_GreaterThanOrEqual = _longJs.greaterThanOrEqual;
const op_Equality = _longJs.equals;
const op_Inequality = _longJs.notEquals;
const equals = _longJs.equals;
const compare = _longJs.compare;
const fromInt = _longJs.fromInt;
const fromBits = _longJs.fromBits;
const fromBytes = _longJs.fromBytes;
const fromNumber = _longJs.fromNumber;
const fromString = _longJs.fromString;
const fromValue = _longJs.fromValue;
const toInt = _longJs.toInt;
const toBytes = _longJs.toBytes;
const toNumber = _longJs.toNumber;
const toString = _longJs.toString;
const getLowBits = _longJs.getLowBits;
const getHighBits = _longJs.getHighBits;
const getLowBitsUnsigned = _longJs.getLowBitsUnsigned;
const getHighBitsUnsigned = _longJs.getHighBitsUnsigned;
function getMaxValue(unsigned, radix, isNegative) {
    switch(radix){
        case 2:
            return unsigned ? "1111111111111111111111111111111111111111111111111111111111111111" : isNegative ? "1000000000000000000000000000000000000000000000000000000000000000" : "111111111111111111111111111111111111111111111111111111111111111";
        case 8:
            return unsigned ? "1777777777777777777777" : isNegative ? "1000000000000000000000" : "777777777777777777777";
        case 10:
            return unsigned ? "18446744073709551615" : isNegative ? "9223372036854775808" : "9223372036854775807";
        case 16:
            return unsigned ? "FFFFFFFFFFFFFFFF" : isNegative ? "8000000000000000" : "7FFFFFFFFFFFFFFF";
        default:
            throw new Error("Invalid radix.");
    }
}
function abs(x) {
    if (!x.unsigned && _longJs.isNegative(x)) return op_UnaryNegation(x);
    else return x;
}
function fromInteger(value, unsigned, kind) {
    let x = value;
    let xh = 0;
    switch(kind){
        case 0:
            x = value << 24 >> 24;
            xh = x;
            break;
        case 4:
            x = value << 24 >>> 24;
            break;
        case 1:
            x = value << 16 >> 16;
            xh = x;
            break;
        case 5:
            x = value << 16 >>> 16;
            break;
        case 2:
            x = value >> 0;
            xh = x;
            break;
        case 6:
            x = value >>> 0;
            break;
    }
    return _longJs.fromBits(x, xh >> 31, unsigned);
}
function parse(str, style, unsigned, _bitsize, radix) {
    const res = _int32Js.isValid(str, style, radix);
    if (res != null) {
        const lessOrEqual = (x, y)=>{
            const len = Math.max(x.length, y.length);
            return x.padStart(len, "0") <= y.padStart(len, "0");
        };
        const isNegative = res.sign === "-";
        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);
        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {
            str = isNegative ? res.sign + res.digits : res.digits;
            return _longJs.fromString(str, unsigned, res.radix);
        }
    }
    throw new Error("Input string was not in a correct format.");
}
function tryParse(str, style, unsigned, bitsize, defValue) {
    try {
        defValue.contents = parse(str, style, unsigned, bitsize);
        return true;
    } catch (_a) {
        return false;
    }
}
function unixEpochMillisecondsToTicks(ms, offset) {
    return op_Multiply(op_Addition(op_Addition(_longJs.fromNumber(ms), 62135596800000), offset), 10000);
}
function ticksToUnixEpochMilliseconds(ticks) {
    return _longJs.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));
}

},{"./Int32.js":"bPtbl","./lib/long.js":"kkur2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bPtbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NumberStyles", ()=>NumberStyles
);
parcelHelpers.export(exports, "isValid", ()=>isValid
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "op_UnaryNegation_Int8", ()=>op_UnaryNegation_Int8
);
parcelHelpers.export(exports, "op_UnaryNegation_Int16", ()=>op_UnaryNegation_Int16
);
parcelHelpers.export(exports, "op_UnaryNegation_Int32", ()=>op_UnaryNegation_Int32
);
var NumberStyles;
(function(NumberStyles1) {
    // None = 0x00000000,
    // AllowLeadingWhite = 0x00000001,
    // AllowTrailingWhite = 0x00000002,
    // AllowLeadingSign = 0x00000004,
    // AllowTrailingSign = 0x00000008,
    // AllowParentheses = 0x00000010,
    // AllowDecimalPoint = 0x00000020,
    // AllowThousands = 0x00000040,
    // AllowExponent = 0x00000080,
    // AllowCurrencySymbol = 0x00000100,
    NumberStyles1[NumberStyles1["AllowHexSpecifier"] = 512] = "AllowHexSpecifier";
// Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,
// HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,
// Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |
//          AllowTrailingSign | AllowDecimalPoint | AllowThousands,
// Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |
//         AllowDecimalPoint | AllowExponent,
// Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |
//            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,
// Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |
//       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,
})(NumberStyles || (NumberStyles = {
}));
function validResponse(regexMatch, radix) {
    const [, sign, prefix, digits] = regexMatch;
    return {
        sign: sign || "",
        prefix: prefix || "",
        digits,
        radix
    };
}
function getRange(unsigned, bitsize) {
    switch(bitsize){
        case 8:
            return unsigned ? [
                0,
                255
            ] : [
                -128,
                127
            ];
        case 16:
            return unsigned ? [
                0,
                65535
            ] : [
                -32768,
                32767
            ];
        case 32:
            return unsigned ? [
                0,
                4294967295
            ] : [
                -2147483648,
                2147483647
            ];
        default:
            throw new Error("Invalid bit size.");
    }
}
function getInvalidDigits(radix) {
    switch(radix){
        case 2:
            return /[^0-1]/;
        case 8:
            return /[^0-7]/;
        case 10:
            return /[^0-9]/;
        case 16:
            return /[^0-9a-fA-F]/;
        default:
            throw new Error("Invalid Base.");
    }
}
function getRadix(prefix, style) {
    if (style & NumberStyles.AllowHexSpecifier) return 16;
    else switch(prefix){
        case "0b":
        case "0B":
            return 2;
        case "0o":
        case "0O":
            return 8;
        case "0x":
        case "0X":
            return 16;
        default:
            return 10;
    }
}
function isValid(str, style, radix) {
    const integerRegex = /^\s*([\+\-])?(0[xXoObB])?([0-9a-fA-F]+)\s*$/;
    const res = integerRegex.exec(str.replace(/_/g, ""));
    if (res != null) {
        const [, , prefix, digits] = res;
        radix = radix || getRadix(prefix, style);
        const invalidDigits = getInvalidDigits(radix);
        if (!invalidDigits.test(digits)) return validResponse(res, radix);
    }
    return null;
}
function parse(str, style, unsigned, bitsize, radix) {
    const res = isValid(str, style, radix);
    if (res != null) {
        let v = Number.parseInt(res.sign + res.digits, res.radix);
        if (!Number.isNaN(v)) {
            const [umin, umax] = getRange(true, bitsize);
            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) v = v << 32 - bitsize >> 32 - bitsize;
            const [min, max] = getRange(unsigned, bitsize);
            if (v >= min && v <= max) return v;
        }
    }
    throw new Error("Input string was not in a correct format.");
}
function tryParse(str, style, unsigned, bitsize, defValue) {
    try {
        defValue.contents = parse(str, style, unsigned, bitsize);
        return true;
    } catch (_a) {
        return false;
    }
}
function op_UnaryNegation_Int8(x) {
    return x === -128 ? x : -x;
}
function op_UnaryNegation_Int16(x) {
    return x === -32768 ? x : -x;
}
function op_UnaryNegation_Int32(x) {
    return x === -2147483648 ? x : -x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kkur2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */ parcelHelpers.export(exports, "Long", ()=>Long
);
/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */ parcelHelpers.export(exports, "isLong", ()=>isLong
);
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ parcelHelpers.export(exports, "fromInt", ()=>fromInt
);
/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ // Long.fromInt = fromInt;
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ parcelHelpers.export(exports, "fromNumber", ()=>fromNumber
);
/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ // Long.fromNumber = fromNumber;
/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ parcelHelpers.export(exports, "fromBits", ()=>fromBits
);
/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */ parcelHelpers.export(exports, "fromString", ()=>fromString
);
/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */ // Long.fromString = fromString;
/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */ parcelHelpers.export(exports, "fromValue", ()=>fromValue
);
parcelHelpers.export(exports, "ZERO", ()=>ZERO
);
parcelHelpers.export(exports, "UZERO", ()=>UZERO
);
parcelHelpers.export(exports, "ONE", ()=>ONE
);
parcelHelpers.export(exports, "UONE", ()=>UONE
);
parcelHelpers.export(exports, "NEG_ONE", ()=>NEG_ONE
);
parcelHelpers.export(exports, "MAX_VALUE", ()=>MAX_VALUE
);
parcelHelpers.export(exports, "MAX_UNSIGNED_VALUE", ()=>MAX_UNSIGNED_VALUE
);
parcelHelpers.export(exports, "MIN_VALUE", ()=>MIN_VALUE
);
/**
 * Minimum signed value.
 * @type {!Long}
 */ // Long.MIN_VALUE = MIN_VALUE;
/**
 * @alias Long.prototype
 * @inner
 */ // var LongPrototype = Long.prototype;
/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @this {!Long}
 * @returns {number}
 */ parcelHelpers.export(exports, "toInt", ()=>toInt
);
/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @this {!Long}
 * @returns {number}
 */ parcelHelpers.export(exports, "toNumber", ()=>toNumber
);
/**
 * Converts the Long to a string written in the specified radix.
 * @this {!Long}
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */ parcelHelpers.export(exports, "toString", ()=>toString
);
/**
 * Gets the high 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed high bits
 */ parcelHelpers.export(exports, "getHighBits", ()=>getHighBits
);
/**
 * Gets the high 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned high bits
 */ parcelHelpers.export(exports, "getHighBitsUnsigned", ()=>getHighBitsUnsigned
);
/**
 * Gets the low 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed low bits
 */ parcelHelpers.export(exports, "getLowBits", ()=>getLowBits
);
/**
 * Gets the low 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned low bits
 */ parcelHelpers.export(exports, "getLowBitsUnsigned", ()=>getLowBitsUnsigned
);
/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @this {!Long}
 * @returns {number}
 */ parcelHelpers.export(exports, "getNumBitsAbs", ()=>getNumBitsAbs
);
/**
 * Tests if this Long's value equals zero.
 * @this {!Long}
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isZero", ()=>isZero
);
/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */ // LongPrototype.eqz = LongPrototype.isZero;
/**
 * Tests if this Long's value is negative.
 * @this {!Long}
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isNegative", ()=>isNegative
);
/**
 * Tests if this Long's value is positive.
 * @this {!Long}
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isPositive", ()=>isPositive
);
/**
 * Tests if this Long's value is odd.
 * @this {!Long}
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isOdd", ()=>isOdd
);
/**
 * Tests if this Long's value is even.
 * @this {!Long}
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isEven", ()=>isEven
);
/**
 * Tests if this Long's value equals the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "equals", ()=>equals
);
/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.eq = LongPrototype.equals;
/**
 * Tests if this Long's value differs from the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "notEquals", ()=>notEquals
);
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.neq = LongPrototype.notEquals;
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.ne = LongPrototype.notEquals;
/**
 * Tests if this Long's value is less than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "lessThan", ()=>lessThan
);
/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.lt = LongPrototype.lessThan;
/**
 * Tests if this Long's value is less than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "lessThanOrEqual", ()=>lessThanOrEqual
);
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.lte = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.le = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is greater than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "greaterThan", ()=>greaterThan
);
/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.gt = LongPrototype.greaterThan;
/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ parcelHelpers.export(exports, "greaterThanOrEqual", ()=>greaterThanOrEqual
);
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.gte = LongPrototype.greaterThanOrEqual;
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */ // LongPrototype.ge = LongPrototype.greaterThanOrEqual;
/**
 * Compares this Long's value with the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ parcelHelpers.export(exports, "compare", ()=>compare
);
/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */ // LongPrototype.comp = LongPrototype.compare;
/**
 * Negates this Long's value.
 * @this {!Long}
 * @returns {!Long} Negated Long
 */ parcelHelpers.export(exports, "negate", ()=>negate
);
/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */ // LongPrototype.neg = LongPrototype.negate;
/**
 * Returns the sum of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */ parcelHelpers.export(exports, "add", ()=>add
);
/**
 * Returns the difference of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ parcelHelpers.export(exports, "subtract", ()=>subtract
);
/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */ // LongPrototype.sub = LongPrototype.subtract;
/**
 * Returns the product of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ parcelHelpers.export(exports, "multiply", ()=>multiply
);
/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */ // LongPrototype.mul = LongPrototype.multiply;
/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ parcelHelpers.export(exports, "divide", ()=>divide
);
/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */ // LongPrototype.div = LongPrototype.divide;
/**
 * Returns this Long modulo the specified.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ parcelHelpers.export(exports, "modulo", ()=>modulo
);
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ // LongPrototype.mod = LongPrototype.modulo;
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */ // LongPrototype.rem = LongPrototype.modulo;
/**
 * Returns the bitwise NOT of this Long.
 * @this {!Long}
 * @returns {!Long}
 */ parcelHelpers.export(exports, "not", ()=>not
);
/**
 * Returns the bitwise AND of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ parcelHelpers.export(exports, "and", ()=>and
);
/**
 * Returns the bitwise OR of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ parcelHelpers.export(exports, "or", ()=>or
);
/**
 * Returns the bitwise XOR of this Long and the given one.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */ parcelHelpers.export(exports, "xor", ()=>xor
);
/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ parcelHelpers.export(exports, "shiftLeft", ()=>shiftLeft
);
/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ // LongPrototype.shl = LongPrototype.shiftLeft;
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ parcelHelpers.export(exports, "shiftRight", ()=>shiftRight
);
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ // LongPrototype.shr = LongPrototype.shiftRight;
/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */ parcelHelpers.export(exports, "shiftRightUnsigned", ()=>shiftRightUnsigned
);
parcelHelpers.export(exports, "rotateLeft", ()=>rotateLeft
);
parcelHelpers.export(exports, "rotateRight", ()=>rotateRight
);
/**
 * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */ // LongPrototype.rotr = LongPrototype.rotateRight;
/**
 * Converts this Long to signed.
 * @this {!Long}
 * @returns {!Long} Signed long
 */ parcelHelpers.export(exports, "toSigned", ()=>toSigned
);
/**
 * Converts this Long to unsigned.
 * @this {!Long}
 * @returns {!Long} Unsigned long
 */ parcelHelpers.export(exports, "toUnsigned", ()=>toUnsigned
);
/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @this {!Long}
 * @returns {!Array.<number>} Byte representation
 */ parcelHelpers.export(exports, "toBytes", ()=>toBytes
);
/**
 * Converts this Long to its little endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Little endian byte representation
 */ parcelHelpers.export(exports, "toBytesLE", ()=>toBytesLE
);
/**
 * Converts this Long to its big endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Big endian byte representation
 */ parcelHelpers.export(exports, "toBytesBE", ()=>toBytesBE
);
/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */ parcelHelpers.export(exports, "fromBytes", ()=>fromBytes
);
/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ parcelHelpers.export(exports, "fromBytesLE", ()=>fromBytesLE
);
/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */ parcelHelpers.export(exports, "fromBytesBE", ()=>fromBytesBE
);
// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js
// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE
/* tslint:disable */ var _numericJs = require("../Numeric.js");
/**
 * wasm optimizations, to do native i64 multiplication and divide
 */ var wasm = null;
try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
    ])), {
    }).exports;
} catch (e) {
// no wasm support :(
}
function Long(low, high, unsigned) {
    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */ this.low = low | 0;
    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */ this.high = high | 0;
    /**
     * Whether unsigned or not.
     * @type {boolean}
     */ this.unsigned = !!unsigned;
}
_c = Long;
Long.prototype.GetHashCode = function() {
    let h1 = this.unsigned ? 1 : 0;
    h1 = (h1 << 5) + h1 ^ this.high;
    h1 = (h1 << 5) + h1 ^ this.low;
    return h1;
};
Long.prototype.Equals = function(x) {
    return equals(this, x);
};
Long.prototype.CompareTo = function(x) {
    return compare(this, x);
};
Long.prototype.toString = function(radix) {
    return toString(this, radix);
};
Long.prototype.toJSON = function() {
    return toString(this);
};
Long.prototype[_numericJs.symbol] = function() {
    const x = this;
    return {
        multiply: (y)=>multiply(x, y)
        ,
        toPrecision: (sd)=>String(x) + 0..toPrecision(sd).substr(1)
        ,
        toExponential: (dp)=>String(x) + 0..toExponential(dp).substr(1)
        ,
        toFixed: (dp)=>String(x) + 0..toFixed(dp).substr(1)
        ,
        toHex: ()=>toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16)
    };
};
// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.
/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */ Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", {
    value: true
});
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}
/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */ // Long.isLong = isLong;
/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */ var INT_CACHE = {
};
/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */ var UINT_CACHE = {
};
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache) UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache) INT_CACHE[value] = obj;
        return obj;
    }
}
function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0) return UZERO;
        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    }
    if (value < 0) return negate(fromNumber(-value, unsigned));
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}
/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */ // Long.fromBits = fromBits;
/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */ var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;
    if (typeof unsigned === 'number') // For goog.math.long compatibility
    radix = unsigned, unsigned = false;
    else unsigned = !!unsigned;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    var p = str.indexOf('-');
    if (p > 0) throw Error('interior hyphen');
    else if (p === 0) return negate(fromString(str.substring(1), unsigned, radix));
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO;
    for(var i = 0; i < str.length; i += 8){
        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = add(multiply(result, power), fromNumber(value));
        } else {
            result = multiply(result, radixToPower);
            result = add(result, fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}
function fromValue(val, unsigned) {
    if (typeof val === 'number') return fromNumber(val, unsigned);
    if (typeof val === 'string') return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}
/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */ // Long.fromValue = fromValue;
// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_16_DBL = 65536;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_24_DBL = 16777216;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/**
 * @type {!Long}
 * @const
 * @inner
 */ var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
_c1 = TWO_PWR_24;
var ZERO = fromInt(0);
var UZERO = fromInt(0, true);
var ONE = fromInt(1);
var UONE = fromInt(1, true);
var NEG_ONE = fromInt(-1);
var MAX_VALUE = fromBits(-1, 2147483647, false);
var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
var MIN_VALUE = fromBits(0, -2147483648, false);
function toInt($this) {
    return $this.unsigned ? $this.low >>> 0 : $this.low;
}
function toNumber($this) {
    if ($this.unsigned) return ($this.high >>> 0) * TWO_PWR_32_DBL + ($this.low >>> 0);
    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);
}
function toString($this, radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    if (isZero($this)) return '0';
    if (isNegative($this)) {
        if (equals($this, MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);
            return toString(div, radix) + toInt(rem1).toString(radix);
        } else return '-' + toString(negate($this), radix);
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;
    var result = '';
    while(true){
        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);
        rem = remDiv;
        if (isZero(rem)) return digits + result;
        else {
            while(digits.length < 6)digits = '0' + digits;
            result = '' + digits + result;
        }
    }
}
function getHighBits($this) {
    return $this.high;
}
function getHighBitsUnsigned($this) {
    return $this.high >>> 0;
}
function getLowBits($this) {
    return $this.low;
}
function getLowBitsUnsigned($this) {
    return $this.low >>> 0;
}
function getNumBitsAbs($this) {
    if (isNegative($this)) return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));
    var val = $this.high != 0 ? $this.high : $this.low;
    for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;
    return $this.high != 0 ? bit + 33 : bit + 1;
}
function isZero($this) {
    return $this.high === 0 && $this.low === 0;
}
function isNegative($this) {
    return !$this.unsigned && $this.high < 0;
}
function isPositive($this) {
    return $this.unsigned || $this.high >= 0;
}
function isOdd($this) {
    return ($this.low & 1) === 1;
}
function isEven($this) {
    return ($this.low & 1) === 0;
}
function equals($this, other) {
    if (!isLong(other)) other = fromValue(other);
    if ($this.unsigned !== other.unsigned && $this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return $this.high === other.high && $this.low === other.low;
}
function notEquals($this, other) {
    return !equals($this, /* validates */ other);
}
function lessThan($this, other) {
    return compare($this, /* validates */ other) < 0;
}
function lessThanOrEqual($this, other) {
    return compare($this, /* validates */ other) <= 0;
}
function greaterThan($this, other) {
    return compare($this, /* validates */ other) > 0;
}
function greaterThanOrEqual($this, other) {
    return compare($this, /* validates */ other) >= 0;
}
function compare($this, other) {
    if (!isLong(other)) other = fromValue(other);
    if (equals($this, other)) return 0;
    var thisNeg = isNegative($this), otherNeg = isNegative(other);
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1;
    // At this point the sign bits are the same
    if (!$this.unsigned) return isNegative(subtract($this, other)) ? -1 : 1;
    // Both are positive if at least one is unsigned
    return other.high >>> 0 > $this.high >>> 0 || other.high === $this.high && other.low >>> 0 > $this.low >>> 0 ? -1 : 1;
}
function negate($this) {
    if (!$this.unsigned && equals($this, MIN_VALUE)) return MIN_VALUE;
    return add(not($this), ONE);
}
function add($this, addend) {
    if (!isLong(addend)) addend = fromValue(addend);
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = $this.high >>> 16;
    var a32 = $this.high & 65535;
    var a16 = $this.low >>> 16;
    var a00 = $this.low & 65535;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 65535;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 + b48;
    c48 &= 65535;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);
}
function subtract($this, subtrahend) {
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return add($this, negate(subtrahend));
}
function multiply($this, multiplier) {
    if (isZero($this)) return $this.unsigned ? UZERO : ZERO;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier);
    // use wasm support if present
    if (wasm) {
        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);
        return fromBits(low, wasm.get_high(), $this.unsigned);
    }
    if (isZero(multiplier)) return $this.unsigned ? UZERO : ZERO;
    if (equals($this, MIN_VALUE)) return isOdd(multiplier) ? MIN_VALUE : ZERO;
    if (equals(multiplier, MIN_VALUE)) return isOdd($this) ? MIN_VALUE : ZERO;
    if (isNegative($this)) {
        if (isNegative(multiplier)) return multiply(negate($this), negate(multiplier));
        else return negate(multiply(negate($this), multiplier));
    } else if (isNegative(multiplier)) return negate(multiply($this, negate(multiplier)));
    // If both longs are small, use float multiplication
    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24)) return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = $this.high >>> 16;
    var a32 = $this.high & 65535;
    var a16 = $this.low >>> 16;
    var a00 = $this.low & 65535;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 65535;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 65535;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);
}
function divide($this, divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (isZero(divisor)) throw Error('division by zero');
    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!$this.unsigned && $this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) // be consistent with non-wasm code path
        return $this;
        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), $this.unsigned);
    }
    if (isZero($this)) return $this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!$this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (equals($this, MIN_VALUE)) {
            if (equals(divisor, ONE) || equals(divisor, NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
            else if (equals(divisor, MIN_VALUE)) return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = shiftRight($this, 1);
                approx = shiftLeft(divide(halfThis, divisor), 1);
                if (equals(approx, ZERO)) return isNegative(divisor) ? ONE : NEG_ONE;
                else {
                    rem = subtract($this, multiply(divisor, approx));
                    res = add(approx, divide(rem, divisor));
                    return res;
                }
            }
        } else if (equals(divisor, MIN_VALUE)) return $this.unsigned ? UZERO : ZERO;
        if (isNegative($this)) {
            if (isNegative(divisor)) return divide(negate($this), negate(divisor));
            return negate(divide(negate($this), divisor));
        } else if (isNegative(divisor)) return negate(divide($this, negate(divisor)));
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned) divisor = toUnsigned(divisor);
        if (greaterThan(divisor, $this)) return UZERO;
        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) return UONE;
        res = UZERO;
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = $this;
    while(greaterThanOrEqual(rem, divisor)){
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));
        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);
        while(isNegative(approxRem) || greaterThan(approxRem, rem)){
            approx -= delta;
            approxRes = fromNumber(approx, $this.unsigned);
            approxRem = multiply(approxRes, divisor);
        }
        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (isZero(approxRes)) approxRes = ONE;
        res = add(res, approxRes);
        rem = subtract(rem, approxRem);
    }
    return res;
}
function modulo($this, divisor) {
    if (!isLong(divisor)) divisor = fromValue(divisor);
    // use wasm support if present
    if (wasm) {
        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);
        return fromBits(low, wasm.get_high(), $this.unsigned);
    }
    return subtract($this, multiply(divide($this, divisor), divisor));
}
function not($this) {
    return fromBits(~$this.low, ~$this.high, $this.unsigned);
}
function and($this, other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);
}
function or($this, other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);
}
function xor($this, other) {
    if (!isLong(other)) other = fromValue(other);
    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);
}
function shiftLeft($this, numBits) {
    if (isLong(numBits)) numBits = toInt(numBits);
    if ((numBits &= 63) === 0) return $this;
    else if (numBits < 32) return fromBits($this.low << numBits, $this.high << numBits | $this.low >>> 32 - numBits, $this.unsigned);
    else return fromBits(0, $this.low << numBits - 32, $this.unsigned);
}
function shiftRight($this, numBits) {
    if (isLong(numBits)) numBits = toInt(numBits);
    if ((numBits &= 63) === 0) return $this;
    else if (numBits < 32) return fromBits($this.low >>> numBits | $this.high << 32 - numBits, $this.high >> numBits, $this.unsigned);
    else return fromBits($this.high >> numBits - 32, $this.high >= 0 ? 0 : -1, $this.unsigned);
}
function shiftRightUnsigned($this, numBits) {
    if (isLong(numBits)) numBits = toInt(numBits);
    numBits &= 63;
    if (numBits === 0) return $this;
    else {
        var high = $this.high;
        if (numBits < 32) {
            var low = $this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, $this.unsigned);
        } else if (numBits === 32) return fromBits(high, 0, $this.unsigned);
        else return fromBits(high >>> numBits - 32, 0, $this.unsigned);
    }
}
const rotateLeft = function rotateLeft1(numBits) {
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
    if (numBits < 32) {
        b = 32 - numBits;
        return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
    }
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
};
const rotateRight = function rotateRight1(numBits) {
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
    if (numBits < 32) {
        b = 32 - numBits;
        return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
    }
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
};
function toSigned($this) {
    if (!$this.unsigned) return $this;
    return fromBits($this.low, $this.high, false);
}
function toUnsigned($this) {
    if ($this.unsigned) return $this;
    return fromBits($this.low, $this.high, true);
}
function toBytes($this, le) {
    return le ? toBytesLE($this) : toBytesBE($this);
}
function toBytesLE($this) {
    var hi = $this.high, lo = $this.low;
    return [
        lo & 255,
        lo >>> 8 & 255,
        lo >>> 16 & 255,
        lo >>> 24,
        hi & 255,
        hi >>> 8 & 255,
        hi >>> 16 & 255,
        hi >>> 24
    ];
}
function toBytesBE($this) {
    var hi = $this.high, lo = $this.low;
    return [
        hi >>> 24,
        hi >>> 16 & 255,
        hi >>> 8 & 255,
        hi & 255,
        lo >>> 24,
        lo >>> 16 & 255,
        lo >>> 8 & 255,
        lo & 255
    ];
}
function fromBytes(bytes, unsigned, le) {
    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);
}
function fromBytesLE(bytes, unsigned) {
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
}
function fromBytesBE(bytes, unsigned) {
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
}
var _c, _c1;
$RefreshReg$(_c, "Long");
$RefreshReg$(_c1, "TWO_PWR_24");

},{"../Numeric.js":"9n2No","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9n2No":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symbol", ()=>symbol
);
parcelHelpers.export(exports, "isNumeric", ()=>isNumeric
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "multiply", ()=>multiply
);
parcelHelpers.export(exports, "toFixed", ()=>toFixed
);
parcelHelpers.export(exports, "toPrecision", ()=>toPrecision
);
parcelHelpers.export(exports, "toExponential", ()=>toExponential
);
parcelHelpers.export(exports, "toHex", ()=>toHex
);
const symbol = Symbol("numeric");
function isNumeric(x) {
    return typeof x === "number" || (x === null || x === void 0 ? void 0 : x[symbol]);
}
function compare(x, y) {
    if (typeof x === "number") return x < y ? -1 : x > y ? 1 : 0;
    else return x.CompareTo(y);
}
function multiply(x, y) {
    if (typeof x === "number") return x * y;
    else return x[symbol]().multiply(y);
}
function toFixed(x, dp) {
    if (typeof x === "number") return x.toFixed(dp);
    else return x[symbol]().toFixed(dp);
}
function toPrecision(x, sd) {
    if (typeof x === "number") return x.toPrecision(sd);
    else return x[symbol]().toPrecision(sd);
}
function toExponential(x, dp) {
    if (typeof x === "number") return x.toExponential(dp);
    else return x[symbol]().toExponential(dp);
}
function toHex(x) {
    if (typeof x === "number") return (Number(x) >>> 0).toString(16);
    else return x[symbol]().toHex();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1dET7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>create
);
// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
parcelHelpers.export(exports, "escape", ()=>escape
);
parcelHelpers.export(exports, "unescape", ()=>unescape
);
parcelHelpers.export(exports, "isMatch", ()=>isMatch
);
parcelHelpers.export(exports, "match", ()=>match
);
parcelHelpers.export(exports, "matches", ()=>matches
);
parcelHelpers.export(exports, "options", ()=>options
);
parcelHelpers.export(exports, "replace", ()=>replace
);
parcelHelpers.export(exports, "split", ()=>split
);
function create(pattern, options = 0) {
    // Supported RegexOptions
    // * IgnoreCase:  0x0001
    // * Multiline:   0x0002
    // * Singleline:  0x0010
    // * ECMAScript:  0x0100 (ignored)
    if ((options & -276) !== 0) throw new Error("RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript");
    let flags = "g";
    flags += options & 1 ? "i" : ""; // 0x0001 RegexOptions.IgnoreCase
    flags += options & 2 ? "m" : "";
    flags += options & 16 ? "s" : "";
    return new RegExp(pattern, flags);
}
function escape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
function unescape(str) {
    return str.replace(/\\([\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|])/g, "$1");
}
function isMatch(str, pattern, options = 0) {
    let reg;
    reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);
    return reg.test(str);
}
function match(str, pattern, options = 0) {
    let reg;
    reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);
    return reg.exec(str);
}
function matches(str, pattern, options = 0) {
    let reg;
    reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);
    if (!reg.global) throw new Error("Non-global RegExp"); // Prevent infinite loop
    let m = reg.exec(str);
    const matches1 = [];
    while(m !== null){
        matches1.push(m);
        m = reg.exec(str);
    }
    return matches1;
}
function options(reg) {
    let options1 = 256; // ECMAScript
    options1 |= reg.ignoreCase ? 1 : 0;
    options1 |= reg.multiline ? 2 : 0;
    return options1;
}
function replace(reg, input, replacement, limit, offset = 0) {
    function replacer() {
        let res = arguments[0];
        if (limit) {
            limit--;
            const match1 = [];
            const len = arguments.length;
            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter
            // * match: matched substring
            // * p1, p2, ...: nth capture group string
            // * offset: offset of matched substring
            // * string: whole string examined
            // * groups: named capturing groups
            //           ONLY if regex contains a named capture group AND browser supports named groups
            // -> last element can be groups OR input string
            // -> check if last element is string
            const withGroups = typeof arguments[len - 1] !== "string";
            let pLast = withGroups ? len - 3 : len - 2;
            for(let i = 0; i < pLast; i++)match1.push(arguments[i]);
            match1.index = arguments[pLast++];
            match1.input = arguments[pLast++];
            if (withGroups) match1.groups = arguments[pLast];
            res = replacement(match1);
        }
        return res;
    }
    if (typeof reg === "string") {
        const tmp = reg;
        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);
        input = tmp;
        limit = undefined;
    }
    if (typeof replacement === "function") {
        limit = limit == null ? -1 : limit;
        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);
    } else {
        replacement = replacement// $0 doesn't work with JS regex, see #1155
        .replace(/\$0/g, (_s)=>"$&"
        )// named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)
        .replace(/\${([^}]+)}/g, "\$<$1>");
        if (limit != null) {
            let m;
            const sub1 = input.substring(offset);
            const _matches = matches(reg, sub1);
            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;
            return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);
        } else return input.replace(reg, replacement);
    }
}
function split(reg, input, limit, offset = 0) {
    if (typeof reg === "string") {
        const tmp = reg;
        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);
        input = tmp;
        limit = undefined;
    }
    input = input.substring(offset);
    return input.split(reg, limit);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gHWVf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Using a class here for better compatibility with TS files importing Some
parcelHelpers.export(exports, "Some", ()=>Some
);
parcelHelpers.export(exports, "some", ()=>some
);
parcelHelpers.export(exports, "value", ()=>value1
);
parcelHelpers.export(exports, "ofNullable", ()=>ofNullable
);
parcelHelpers.export(exports, "toNullable", ()=>toNullable
);
parcelHelpers.export(exports, "flatten", ()=>flatten
);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
parcelHelpers.export(exports, "defaultArg", ()=>defaultArg
);
parcelHelpers.export(exports, "defaultArgWith", ()=>defaultArgWith
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "map2", ()=>map2
);
parcelHelpers.export(exports, "map3", ()=>map3
);
parcelHelpers.export(exports, "bind", ()=>bind
);
parcelHelpers.export(exports, "tryOp", ()=>tryOp
);
var _utilJs = require("./Util.js");
class Some {
    constructor(value){
        this.value = value;
    }
    toJSON() {
        return this.value;
    }
    // Don't add "Some" for consistency with erased options
    toString() {
        return String(this.value);
    }
    GetHashCode() {
        return _utilJs.structuralHash(this.value);
    }
    Equals(other) {
        if (other == null) return false;
        else return _utilJs.equals(this.value, other instanceof Some ? other.value : other);
    }
    CompareTo(other) {
        if (other == null) return 1;
        else return _utilJs.compare(this.value, other instanceof Some ? other.value : other);
    }
}
function some(x) {
    return x == null || x instanceof Some ? new Some(x) : x;
}
function value1(x) {
    if (x == null) throw new Error("Option has no value");
    else return x instanceof Some ? x.value : x;
}
function ofNullable(x) {
    // This will fail with unit probably, an alternative would be:
    // return x === null ? undefined : (x === undefined ? new Some(x) : x);
    return x == null ? undefined : x;
}
function toNullable(x) {
    return x == null ? null : value1(x);
}
function flatten(x) {
    return x == null ? undefined : value1(x);
}
function toArray(opt) {
    return opt == null ? [] : [
        value1(opt)
    ];
}
function defaultArg(opt, defaultValue) {
    return opt != null ? value1(opt) : defaultValue;
}
function defaultArgWith(opt, defThunk) {
    return opt != null ? value1(opt) : defThunk();
}
function filter(predicate, opt) {
    return opt != null ? predicate(value1(opt)) ? opt : undefined : opt;
}
function map(mapping, opt) {
    return opt != null ? some(mapping(value1(opt))) : undefined;
}
function map2(mapping, opt1, opt2) {
    return opt1 != null && opt2 != null ? mapping(value1(opt1), value1(opt2)) : undefined;
}
function map3(mapping, opt1, opt2, opt3) {
    return opt1 != null && opt2 != null && opt3 != null ? mapping(value1(opt1), value1(opt2), value1(opt3)) : undefined;
}
function bind(binder, opt) {
    return opt != null ? binder(value1(opt)) : undefined;
}
function tryOp(op, arg) {
    try {
        return some(op(arg));
    } catch (_a) {
        return undefined;
    }
}

},{"./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dl8am":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Helpers_allocateArrayFromCons", ()=>Helpers_allocateArrayFromCons
);
parcelHelpers.export(exports, "append", ()=>append
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "fill", ()=>fill
);
parcelHelpers.export(exports, "getSubArray", ()=>getSubArray
);
parcelHelpers.export(exports, "last", ()=>last
);
parcelHelpers.export(exports, "tryLast", ()=>tryLast
);
parcelHelpers.export(exports, "mapIndexed", ()=>mapIndexed
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "mapIndexed2", ()=>mapIndexed2
);
parcelHelpers.export(exports, "map2", ()=>map2
);
parcelHelpers.export(exports, "mapIndexed3", ()=>mapIndexed3
);
parcelHelpers.export(exports, "map3", ()=>map3
);
parcelHelpers.export(exports, "mapFold", ()=>mapFold
);
parcelHelpers.export(exports, "mapFoldBack", ()=>mapFoldBack
);
parcelHelpers.export(exports, "indexed", ()=>indexed
);
parcelHelpers.export(exports, "truncate", ()=>truncate
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "collect", ()=>collect
);
parcelHelpers.export(exports, "where", ()=>where
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "empty", ()=>empty
);
parcelHelpers.export(exports, "singleton", ()=>singleton
);
parcelHelpers.export(exports, "initialize", ()=>initialize
);
parcelHelpers.export(exports, "pairwise", ()=>pairwise
);
parcelHelpers.export(exports, "replicate", ()=>replicate
);
parcelHelpers.export(exports, "copy", ()=>copy
);
parcelHelpers.export(exports, "reverse", ()=>reverse
);
parcelHelpers.export(exports, "scan", ()=>scan
);
parcelHelpers.export(exports, "scanBack", ()=>scanBack
);
parcelHelpers.export(exports, "skip", ()=>skip
);
parcelHelpers.export(exports, "skipWhile", ()=>skipWhile
);
parcelHelpers.export(exports, "take", ()=>take
);
parcelHelpers.export(exports, "takeWhile", ()=>takeWhile
);
parcelHelpers.export(exports, "addInPlace", ()=>addInPlace
);
parcelHelpers.export(exports, "addRangeInPlace", ()=>addRangeInPlace
);
parcelHelpers.export(exports, "insertRangeInPlace", ()=>insertRangeInPlace
);
parcelHelpers.export(exports, "removeInPlace", ()=>removeInPlace
);
parcelHelpers.export(exports, "removeAllInPlace", ()=>removeAllInPlace
);
parcelHelpers.export(exports, "copyTo", ()=>copyTo
);
parcelHelpers.export(exports, "copyToTypedArray", ()=>copyToTypedArray
);
parcelHelpers.export(exports, "indexOf", ()=>indexOf
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "find", ()=>find
);
parcelHelpers.export(exports, "tryFind", ()=>tryFind
);
parcelHelpers.export(exports, "findIndex", ()=>findIndex
);
parcelHelpers.export(exports, "tryFindIndex", ()=>tryFindIndex
);
parcelHelpers.export(exports, "pick", ()=>pick
);
parcelHelpers.export(exports, "tryPick", ()=>tryPick
);
parcelHelpers.export(exports, "findBack", ()=>findBack
);
parcelHelpers.export(exports, "tryFindBack", ()=>tryFindBack
);
parcelHelpers.export(exports, "findLastIndex", ()=>findLastIndex
);
parcelHelpers.export(exports, "findIndexBack", ()=>findIndexBack
);
parcelHelpers.export(exports, "tryFindIndexBack", ()=>tryFindIndexBack
);
parcelHelpers.export(exports, "choose", ()=>choose
);
parcelHelpers.export(exports, "foldIndexed", ()=>foldIndexed
);
parcelHelpers.export(exports, "fold", ()=>fold
);
parcelHelpers.export(exports, "iterate", ()=>iterate
);
parcelHelpers.export(exports, "iterateIndexed", ()=>iterateIndexed
);
parcelHelpers.export(exports, "iterate2", ()=>iterate2
);
parcelHelpers.export(exports, "iterateIndexed2", ()=>iterateIndexed2
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "forAll", ()=>forAll
);
parcelHelpers.export(exports, "permute", ()=>permute
);
parcelHelpers.export(exports, "setSlice", ()=>setSlice
);
parcelHelpers.export(exports, "sortInPlaceBy", ()=>sortInPlaceBy
);
parcelHelpers.export(exports, "sortInPlace", ()=>sortInPlace
);
parcelHelpers.export(exports, "sort", ()=>sort
);
parcelHelpers.export(exports, "sortBy", ()=>sortBy
);
parcelHelpers.export(exports, "sortDescending", ()=>sortDescending
);
parcelHelpers.export(exports, "sortByDescending", ()=>sortByDescending
);
parcelHelpers.export(exports, "sortWith", ()=>sortWith
);
parcelHelpers.export(exports, "allPairs", ()=>allPairs
);
parcelHelpers.export(exports, "unfold", ()=>unfold
);
parcelHelpers.export(exports, "unzip", ()=>unzip
);
parcelHelpers.export(exports, "unzip3", ()=>unzip3
);
parcelHelpers.export(exports, "zip", ()=>zip
);
parcelHelpers.export(exports, "zip3", ()=>zip3
);
parcelHelpers.export(exports, "chunkBySize", ()=>chunkBySize
);
parcelHelpers.export(exports, "splitAt", ()=>splitAt
);
parcelHelpers.export(exports, "compareWith", ()=>compareWith
);
parcelHelpers.export(exports, "equalsWith", ()=>equalsWith
);
parcelHelpers.export(exports, "exactlyOne", ()=>exactlyOne
);
parcelHelpers.export(exports, "tryExactlyOne", ()=>tryExactlyOne
);
parcelHelpers.export(exports, "head", ()=>head
);
parcelHelpers.export(exports, "tryHead", ()=>tryHead
);
parcelHelpers.export(exports, "tail", ()=>tail
);
parcelHelpers.export(exports, "item", ()=>item
);
parcelHelpers.export(exports, "tryItem", ()=>tryItem
);
parcelHelpers.export(exports, "foldBackIndexed", ()=>foldBackIndexed
);
parcelHelpers.export(exports, "foldBack", ()=>foldBack
);
parcelHelpers.export(exports, "foldIndexed2", ()=>foldIndexed2
);
parcelHelpers.export(exports, "fold2", ()=>fold2
);
parcelHelpers.export(exports, "foldBackIndexed2", ()=>foldBackIndexed2
);
parcelHelpers.export(exports, "foldBack2", ()=>foldBack2
);
parcelHelpers.export(exports, "reduce", ()=>reduce
);
parcelHelpers.export(exports, "reduceBack", ()=>reduceBack
);
parcelHelpers.export(exports, "forAll2", ()=>forAll2
);
parcelHelpers.export(exports, "existsOffset", ()=>existsOffset
);
parcelHelpers.export(exports, "exists", ()=>exists
);
parcelHelpers.export(exports, "existsOffset2", ()=>existsOffset2
);
parcelHelpers.export(exports, "exists2", ()=>exists2
);
parcelHelpers.export(exports, "sum", ()=>sum
);
parcelHelpers.export(exports, "sumBy", ()=>sumBy
);
parcelHelpers.export(exports, "maxBy", ()=>maxBy
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "minBy", ()=>minBy
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "average", ()=>average
);
parcelHelpers.export(exports, "averageBy", ()=>averageBy
);
parcelHelpers.export(exports, "windowed", ()=>windowed
);
parcelHelpers.export(exports, "splitInto", ()=>splitInto
);
parcelHelpers.export(exports, "transpose", ()=>transpose
);
var _optionJs = require("./Option.js");
var _utilJs = require("./Util.js");
function Helpers_allocateArrayFromCons(cons, len) {
    if (typeof cons === "function") return new cons(len);
    else return new Array(len);
}
_c = Helpers_allocateArrayFromCons;
function indexNotFound() {
    throw new Error("An index satisfying the predicate was not found in the collection.");
}
function differentLengths() {
    throw new Error("Arrays had different lengths");
}
function append(array1, array2, cons) {
    const len1 = array1.length | 0;
    const len2 = array2.length | 0;
    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);
    for(let i = 0; i <= len1 - 1; i++)newArray[i] = array1[i];
    for(let i_1 = 0; i_1 <= len2 - 1; i_1++)newArray[i_1 + len1] = array2[i_1];
    return newArray;
}
function filter(predicate, array) {
    return array.filter(predicate);
}
function fill(target, targetIndex, count, value) {
    const start = targetIndex | 0;
    return target.fill(value, start, start + count);
}
function getSubArray(array, start, count) {
    const start_1 = start | 0;
    return array.slice(start_1, start_1 + count);
}
function last(array) {
    if (array.length === 0) throw new Error("The input array was empty\\nParameter name: array");
    return array[array.length - 1];
}
function tryLast(array) {
    if (array.length === 0) return void 0;
    else return _optionJs.some(array[array.length - 1]);
}
function mapIndexed(f, source, cons) {
    const len = source.length | 0;
    const target = Helpers_allocateArrayFromCons(cons, len);
    for(let i = 0; i <= len - 1; i++)target[i] = f(i, source[i]);
    return target;
}
function map(f, source, cons) {
    const len = source.length | 0;
    const target = Helpers_allocateArrayFromCons(cons, len);
    for(let i = 0; i <= len - 1; i++)target[i] = f(source[i]);
    return target;
}
function mapIndexed2(f, source1, source2, cons) {
    if (source1.length !== source2.length) throw new Error("Arrays had different lengths");
    const result = Helpers_allocateArrayFromCons(cons, source1.length);
    for(let i = 0; i <= source1.length - 1; i++)result[i] = f(i, source1[i], source2[i]);
    return result;
}
function map2(f, source1, source2, cons) {
    if (source1.length !== source2.length) throw new Error("Arrays had different lengths");
    const result = Helpers_allocateArrayFromCons(cons, source1.length);
    for(let i = 0; i <= source1.length - 1; i++)result[i] = f(source1[i], source2[i]);
    return result;
}
function mapIndexed3(f, source1, source2, source3, cons) {
    if (source1.length !== source2.length ? true : source2.length !== source3.length) throw new Error("Arrays had different lengths");
    const result = Helpers_allocateArrayFromCons(cons, source1.length);
    for(let i = 0; i <= source1.length - 1; i++)result[i] = f(i, source1[i], source2[i], source3[i]);
    return result;
}
function map3(f, source1, source2, source3, cons) {
    if (source1.length !== source2.length ? true : source2.length !== source3.length) throw new Error("Arrays had different lengths");
    const result = Helpers_allocateArrayFromCons(cons, source1.length);
    for(let i = 0; i <= source1.length - 1; i++)result[i] = f(source1[i], source2[i], source3[i]);
    return result;
}
function mapFold(mapping, state, array, cons) {
    const matchValue = array.length | 0;
    if (matchValue === 0) return [
        [],
        state
    ];
    else {
        let acc = state;
        const res = Helpers_allocateArrayFromCons(cons, matchValue);
        for(let i = 0; i <= array.length - 1; i++){
            const patternInput = mapping(acc, array[i]);
            res[i] = patternInput[0];
            acc = patternInput[1];
        }
        return [
            res,
            acc
        ];
    }
}
function mapFoldBack(mapping, array, state, cons) {
    const matchValue = array.length | 0;
    if (matchValue === 0) return [
        [],
        state
    ];
    else {
        let acc = state;
        const res = Helpers_allocateArrayFromCons(cons, matchValue);
        for(let i = array.length - 1; i >= 0; i--){
            const patternInput = mapping(array[i], acc);
            res[i] = patternInput[0];
            acc = patternInput[1];
        }
        return [
            res,
            acc
        ];
    }
}
function indexed(source) {
    const len = source.length | 0;
    const target = new Array(len);
    for(let i = 0; i <= len - 1; i++)target[i] = [
        i,
        source[i]
    ];
    return target;
}
function truncate(count, array) {
    const count_1 = _utilJs.max((x, y)=>_utilJs.comparePrimitives(x, y)
    , 0, count) | 0;
    const start = 0;
    return array.slice(start, start + count_1);
}
function concat(arrays, cons) {
    const arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);
    const matchValue = arrays_1.length | 0;
    switch(matchValue){
        case 0:
            return Helpers_allocateArrayFromCons(cons, 0);
        case 1:
            return arrays_1[0];
        default:
            {
                let totalIdx = 0;
                let totalLength = 0;
                for(let idx = 0; idx <= arrays_1.length - 1; idx++){
                    const arr_1 = arrays_1[idx];
                    totalLength = totalLength + arr_1.length | 0;
                }
                const result = Helpers_allocateArrayFromCons(cons, totalLength);
                for(let idx_1 = 0; idx_1 <= arrays_1.length - 1; idx_1++){
                    const arr_2 = arrays_1[idx_1];
                    for(let j = 0; j <= arr_2.length - 1; j++){
                        result[totalIdx] = arr_2[j];
                        totalIdx = totalIdx + 1 | 0;
                    }
                }
                return result;
            }
    }
}
function collect(mapping, array, cons) {
    return concat(map(mapping, array, null), cons);
}
function where(predicate, array) {
    return array.filter(predicate);
}
function contains(value, array, eq) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i >= array.length) return false;
            else if (eq.Equals(value, array[i])) return true;
            else {
                i_mut = i + 1;
                continue loop;
            }
            break;
        }
    };
    return loop(0);
}
function empty(cons) {
    return Helpers_allocateArrayFromCons(cons, 0);
}
function singleton(value, cons) {
    const ar = Helpers_allocateArrayFromCons(cons, 1);
    ar[0] = value;
    return ar;
}
function initialize(count, initializer, cons) {
    if (count < 0) throw new Error("The input must be non-negative\\nParameter name: count");
    const result = Helpers_allocateArrayFromCons(cons, count);
    for(let i = 0; i <= count - 1; i++)result[i] = initializer(i);
    return result;
}
function pairwise(array) {
    if (array.length < 2) return [];
    else {
        const count = array.length - 1 | 0;
        const result = new Array(count);
        for(let i = 0; i <= count - 1; i++)result[i] = [
            array[i],
            array[i + 1]
        ];
        return result;
    }
}
function replicate(count, initial, cons) {
    if (count < 0) throw new Error("The input must be non-negative\\nParameter name: count");
    const result = Helpers_allocateArrayFromCons(cons, count);
    for(let i = 0; i <= result.length - 1; i++)result[i] = initial;
    return result;
}
function copy(array) {
    return array.slice();
}
function reverse(array) {
    const array_2 = array.slice();
    return array_2.reverse();
}
function scan(folder, state, array, cons) {
    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);
    res[0] = state;
    for(let i = 0; i <= array.length - 1; i++)res[i + 1] = folder(res[i], array[i]);
    return res;
}
function scanBack(folder, array, state, cons) {
    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);
    res[array.length] = state;
    for(let i = array.length - 1; i >= 0; i--)res[i] = folder(array[i], res[i + 1]);
    return res;
}
function skip(count, array, cons) {
    if (count > array.length) throw new Error("count is greater than array length\\nParameter name: count");
    if (count === array.length) return Helpers_allocateArrayFromCons(cons, 0);
    else {
        const count_1 = (count < 0 ? 0 : count) | 0;
        return array.slice(count_1);
    }
}
function skipWhile(predicate, array, cons) {
    let count = 0;
    while(count < array.length ? predicate(array[count]) : false)count = count + 1 | 0;
    if (count === array.length) return Helpers_allocateArrayFromCons(cons, 0);
    else {
        const count_1 = count | 0;
        return array.slice(count_1);
    }
}
function take(count, array, cons) {
    if (count < 0) throw new Error("The input must be non-negative\\nParameter name: count");
    if (count > array.length) throw new Error("count is greater than array length\\nParameter name: count");
    if (count === 0) return Helpers_allocateArrayFromCons(cons, 0);
    else {
        const start = 0;
        return array.slice(start, start + count);
    }
}
function takeWhile(predicate, array, cons) {
    let count = 0;
    while(count < array.length ? predicate(array[count]) : false)count = count + 1 | 0;
    if (count === 0) return Helpers_allocateArrayFromCons(cons, 0);
    else {
        const start = 0;
        const count_1 = count | 0;
        return array.slice(start, start + count_1);
    }
}
function addInPlace(x, array) {
    array.push(x);
}
function addRangeInPlace(range, array) {
    const enumerator = _utilJs.getEnumerator(range);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]())addInPlace(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"](), array);
    } finally{
        enumerator.Dispose();
    }
}
function insertRangeInPlace(index, range, array) {
    let index_1;
    let i = index;
    const enumerator = _utilJs.getEnumerator(range);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            index_1 = i | 0, array.splice(index_1, 0, x);
            i = i + 1 | 0;
        }
    } finally{
        enumerator.Dispose();
    }
}
function removeInPlace(item_1, array) {
    const i = array.indexOf(item_1, 0);
    if (i > -1) {
        array.splice(i, 1);
        return true;
    } else return false;
}
function removeAllInPlace(predicate, array) {
    const countRemoveAll = (count)=>{
        const i = array.findIndex(predicate);
        if (i > -1) {
            array.splice(i, 1);
            return countRemoveAll(count) + 1 | 0;
        } else return count | 0;
    };
    return countRemoveAll(0) | 0;
}
function copyTo(source, sourceIndex, target, targetIndex, count) {
    const diff = targetIndex - sourceIndex | 0;
    for(let i = sourceIndex; i <= sourceIndex + count - 1; i++)target[i + diff] = source[i];
}
function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {
    try {
        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);
    } catch (matchValue) {
        copyTo(source, sourceIndex, target, targetIndex, count);
    }
}
function indexOf(array, item_1, start, count) {
    const start_1 = _optionJs.defaultArg(start, 0) | 0;
    const i = array.indexOf(item_1, start_1);
    if (count != null ? i >= start_1 + _optionJs.value(count) : false) return -1;
    else return i | 0;
}
function partition(f, source, cons) {
    const len = source.length | 0;
    const res1 = Helpers_allocateArrayFromCons(cons, len);
    const res2 = Helpers_allocateArrayFromCons(cons, len);
    let iTrue = 0;
    let iFalse = 0;
    for(let i = 0; i <= len - 1; i++)if (f(source[i])) {
        res1[iTrue] = source[i];
        iTrue = iTrue + 1 | 0;
    } else {
        res2[iFalse] = source[i];
        iFalse = iFalse + 1 | 0;
    }
    return [
        truncate(iTrue, res1),
        truncate(iFalse, res2)
    ];
}
function find(predicate, array) {
    const matchValue = array.find(predicate);
    if (matchValue == null) return indexNotFound();
    else return _optionJs.value(matchValue);
}
function tryFind(predicate, array) {
    return array.find(predicate);
}
function findIndex(predicate, array) {
    const matchValue = array.findIndex(predicate);
    if (matchValue > -1) return matchValue | 0;
    else return indexNotFound() | 0;
}
function tryFindIndex(predicate, array) {
    const matchValue = array.findIndex(predicate);
    if (matchValue > -1) return matchValue;
    else return void 0;
}
function pick(chooser, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i >= array.length) return indexNotFound();
            else {
                const matchValue = chooser(array[i]);
                if (matchValue != null) return _optionJs.value(matchValue);
                else {
                    i_mut = i + 1;
                    continue loop;
                }
            }
            break;
        }
    };
    return loop(0);
}
function tryPick(chooser, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i >= array.length) return void 0;
            else {
                const matchValue = chooser(array[i]);
                if (matchValue == null) {
                    i_mut = i + 1;
                    continue loop;
                } else return matchValue;
            }
            break;
        }
    };
    return loop(0);
}
function findBack(predicate, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i < 0) return indexNotFound();
            else if (predicate(array[i])) return array[i];
            else {
                i_mut = i - 1;
                continue loop;
            }
            break;
        }
    };
    return loop(array.length - 1);
}
function tryFindBack(predicate, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i < 0) return void 0;
            else if (predicate(array[i])) return _optionJs.some(array[i]);
            else {
                i_mut = i - 1;
                continue loop;
            }
            break;
        }
    };
    return loop(array.length - 1);
}
function findLastIndex(predicate, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i < 0) return -1;
            else if (predicate(array[i])) return i | 0;
            else {
                i_mut = i - 1;
                continue loop;
            }
            break;
        }
    };
    return loop(array.length - 1) | 0;
}
function findIndexBack(predicate, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i < 0) return indexNotFound() | 0;
            else if (predicate(array[i])) return i | 0;
            else {
                i_mut = i - 1;
                continue loop;
            }
            break;
        }
    };
    return loop(array.length - 1) | 0;
}
function tryFindIndexBack(predicate, array) {
    const loop = (i_mut)=>{
        loop: while(true){
            const i = i_mut;
            if (i < 0) return void 0;
            else if (predicate(array[i])) return i;
            else {
                i_mut = i - 1;
                continue loop;
            }
            break;
        }
    };
    return loop(array.length - 1);
}
function choose(chooser, array, cons) {
    const res = [];
    for(let i = 0; i <= array.length - 1; i++){
        const matchValue = chooser(array[i]);
        if (matchValue != null) {
            const y = _optionJs.value(matchValue);
            res.push(y);
        }
    }
    if (typeof cons === "function") return map((x)=>x
    , res, cons);
    else return res;
}
function foldIndexed(folder, state, array) {
    return array.reduce((delegateArg0, delegateArg1, delegateArg2)=>folder(delegateArg2, delegateArg0, delegateArg1)
    , state);
}
function fold(folder, state, array) {
    return array.reduce((delegateArg0, delegateArg1)=>folder(delegateArg0, delegateArg1)
    , state);
}
function iterate(action, array) {
    for(let i = 0; i <= array.length - 1; i++)action(array[i]);
}
function iterateIndexed(action, array) {
    for(let i = 0; i <= array.length - 1; i++)action(i, array[i]);
}
function iterate2(action, array1, array2) {
    if (array1.length !== array2.length) differentLengths();
    for(let i = 0; i <= array1.length - 1; i++)action(array1[i], array2[i]);
}
function iterateIndexed2(action, array1, array2) {
    if (array1.length !== array2.length) differentLengths();
    for(let i = 0; i <= array1.length - 1; i++)action(i, array1[i], array2[i]);
}
function isEmpty(array) {
    return array.length === 0;
}
function forAll(predicate, array) {
    return array.every(predicate);
}
function permute(f, array) {
    const size = array.length | 0;
    const res = array.slice();
    const checkFlags = new Array(size);
    iterateIndexed((i, x)=>{
        const j = f(i) | 0;
        if (j < 0 ? true : j >= size) throw new Error("Not a valid permutation");
        res[j] = x;
        checkFlags[j] = 1;
    }, array);
    if (!checkFlags.every((y)=>1 === y
    )) throw new Error("Not a valid permutation");
    return res;
}
function setSlice(target, lower, upper, source) {
    const lower_1 = _optionJs.defaultArg(lower, 0) | 0;
    const upper_1 = _optionJs.defaultArg(upper, 0) | 0;
    const length = (upper_1 > 0 ? upper_1 : target.length - 1) - lower_1 | 0;
    for(let i = 0; i <= length; i++)target[i + lower_1] = source[i];
}
function sortInPlaceBy(projection, xs, comparer) {
    xs.sort((x, y)=>comparer.Compare(projection(x), projection(y))
    );
}
function sortInPlace(xs, comparer) {
    xs.sort((x, y)=>comparer.Compare(x, y)
    );
}
function sort(xs, comparer) {
    const xs_1 = xs.slice();
    xs_1.sort((x, y)=>comparer.Compare(x, y)
    );
    return xs_1;
}
function sortBy(projection, xs, comparer) {
    const xs_1 = xs.slice();
    xs_1.sort((x, y)=>comparer.Compare(projection(x), projection(y))
    );
    return xs_1;
}
function sortDescending(xs, comparer) {
    const xs_1 = xs.slice();
    xs_1.sort((x, y)=>comparer.Compare(x, y) * -1
    );
    return xs_1;
}
function sortByDescending(projection, xs, comparer) {
    const xs_1 = xs.slice();
    xs_1.sort((x, y)=>comparer.Compare(projection(x), projection(y)) * -1
    );
    return xs_1;
}
function sortWith(comparer, xs) {
    const comparer_1 = comparer;
    const xs_1 = xs.slice();
    xs_1.sort(comparer_1);
    return xs_1;
}
function allPairs(xs, ys) {
    const len1 = xs.length | 0;
    const len2 = ys.length | 0;
    const res = new Array(len1 * len2);
    for(let i = 0; i <= xs.length - 1; i++)for(let j = 0; j <= ys.length - 1; j++)res[i * len2 + j] = [
        xs[i],
        ys[j]
    ];
    return res;
}
function unfold(generator, state) {
    const res = [];
    const loop = (state_1_mut)=>{
        loop: while(true){
            const state_1 = state_1_mut;
            const matchValue = generator(state_1);
            if (matchValue != null) {
                const x = matchValue[0];
                const s = matchValue[1];
                res.push(x);
                state_1_mut = s;
                continue loop;
            }
            break;
        }
    };
    loop(state);
    return res;
}
function unzip(array) {
    const len = array.length | 0;
    const res1 = new Array(len);
    const res2 = new Array(len);
    iterateIndexed((i, tupledArg)=>{
        res1[i] = tupledArg[0];
        res2[i] = tupledArg[1];
    }, array);
    return [
        res1,
        res2
    ];
}
function unzip3(array) {
    const len = array.length | 0;
    const res1 = new Array(len);
    const res2 = new Array(len);
    const res3 = new Array(len);
    iterateIndexed((i, tupledArg)=>{
        res1[i] = tupledArg[0];
        res2[i] = tupledArg[1];
        res3[i] = tupledArg[2];
    }, array);
    return [
        res1,
        res2,
        res3
    ];
}
function zip(array1, array2) {
    if (array1.length !== array2.length) differentLengths();
    const result = new Array(array1.length);
    for(let i = 0; i <= array1.length - 1; i++)result[i] = [
        array1[i],
        array2[i]
    ];
    return result;
}
function zip3(array1, array2, array3) {
    if (array1.length !== array2.length ? true : array2.length !== array3.length) differentLengths();
    const result = new Array(array1.length);
    for(let i = 0; i <= array1.length - 1; i++)result[i] = [
        array1[i],
        array2[i],
        array3[i]
    ];
    return result;
}
function chunkBySize(chunkSize, array) {
    if (chunkSize < 1) throw new Error("The input must be positive.\\nParameter name: size");
    if (array.length === 0) return [
        []
    ];
    else {
        const result = [];
        for(let x = 0; x <= ~~Math.ceil(array.length / chunkSize) - 1; x++){
            let slice;
            const start_1 = x * chunkSize | 0;
            slice = array.slice(start_1, start_1 + chunkSize);
            result.push(slice);
        }
        return result;
    }
}
function splitAt(index, array) {
    let start;
    if (index < 0) throw new Error("The input must be non-negative\\nParameter name: index");
    if (index > array.length) throw new Error("The input sequence has an insufficient number of elements.\\nParameter name: index");
    return [
        (start = 0, array.slice(start, start + index)),
        array.slice(index)
    ];
}
function compareWith(comparer, array1, array2) {
    if (array1 == null) {
        if (array2 == null) return 0;
        else return -1;
    } else if (array2 == null) return 1;
    else {
        let i = 0;
        let result = 0;
        const length1 = array1.length | 0;
        const length2 = array2.length | 0;
        if (length1 > length2) return 1;
        else if (length1 < length2) return -1;
        else {
            while(i < length1 ? result === 0 : false){
                result = comparer(array1[i], array2[i]) | 0;
                i = i + 1 | 0;
            }
            return result | 0;
        }
    }
}
function equalsWith(comparer, array1, array2) {
    return compareWith((e1, e2)=>_utilJs.compare(e1, e2)
    , array1, array2) === 0;
}
function exactlyOne(array) {
    if (array.length === 1) return array[0];
    else if (array.length === 0) throw new Error("The input sequence was empty\\nParameter name: array");
    else throw new Error("Input array too long\\nParameter name: array");
}
function tryExactlyOne(array) {
    if (array.length === 1) return _optionJs.some(array[0]);
    else return void 0;
}
function head(array) {
    if (array.length === 0) throw new Error("The input array was empty\\nParameter name: array");
    else return array[0];
}
function tryHead(array) {
    if (array.length === 0) return void 0;
    else return _optionJs.some(array[0]);
}
function tail(array) {
    if (array.length === 0) throw new Error("Not enough elements\\nParameter name: array");
    return array.slice(1);
}
function item(index, array) {
    return array[index];
}
function tryItem(index, array) {
    if (index < 0 ? true : index >= array.length) return void 0;
    else return _optionJs.some(array[index]);
}
function foldBackIndexed(folder, array, state) {
    return array.reduceRight((delegateArg0, delegateArg1, delegateArg2)=>folder(delegateArg2, delegateArg1, delegateArg0)
    , state);
}
function foldBack(folder, array, state) {
    return array.reduceRight((delegateArg0, delegateArg1)=>folder(delegateArg1, delegateArg0)
    , state);
}
function foldIndexed2(folder, state, array1, array2) {
    let acc = state;
    if (array1.length !== array2.length) throw new Error("Arrays have different lengths");
    for(let i = 0; i <= array1.length - 1; i++)acc = folder(i, acc, array1[i], array2[i]);
    return acc;
}
function fold2(folder, state, array1, array2) {
    return foldIndexed2((_arg1, acc, x, y)=>folder(acc, x, y)
    , state, array1, array2);
}
function foldBackIndexed2(folder, array1, array2, state) {
    let acc = state;
    if (array1.length !== array2.length) differentLengths();
    const size = array1.length | 0;
    for(let i = 1; i <= size; i++)acc = folder(i - 1, array1[size - i], array2[size - i], acc);
    return acc;
}
function foldBack2(f, array1, array2, state) {
    return foldBackIndexed2((_arg1, x, y, acc)=>f(x, y, acc)
    , array1, array2, state);
}
function reduce(reduction, array) {
    if (array.length === 0) throw new Error("The input array was empty");
    const reduction_1 = reduction;
    return array.reduce(reduction_1);
}
function reduceBack(reduction, array) {
    if (array.length === 0) throw new Error("The input array was empty");
    const reduction_1 = reduction;
    return array.reduceRight(reduction_1);
}
function forAll2(predicate, array1, array2) {
    return fold2((acc, x, y)=>acc ? predicate(x, y) : false
    , true, array1, array2);
}
function existsOffset(predicate_mut, array_mut, index_mut) {
    existsOffset: while(true){
        const predicate = predicate_mut, array = array_mut, index = index_mut;
        if (index === array.length) return false;
        else if (predicate(array[index])) return true;
        else {
            predicate_mut = predicate;
            array_mut = array;
            index_mut = index + 1;
            continue existsOffset;
        }
        break;
    }
}
function exists(predicate, array) {
    return existsOffset(predicate, array, 0);
}
function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {
    existsOffset2: while(true){
        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;
        if (index === array1.length) return false;
        else if (predicate(array1[index], array2[index])) return true;
        else {
            predicate_mut = predicate;
            array1_mut = array1;
            array2_mut = array2;
            index_mut = index + 1;
            continue existsOffset2;
        }
        break;
    }
}
function exists2(predicate, array1, array2) {
    if (array1.length !== array2.length) differentLengths();
    return existsOffset2(predicate, array1, array2, 0);
}
function sum(array, adder) {
    let acc = adder.GetZero();
    for(let i = 0; i <= array.length - 1; i++)acc = adder.Add(acc, array[i]);
    return acc;
}
function sumBy(projection, array, adder) {
    let acc = adder.GetZero();
    for(let i = 0; i <= array.length - 1; i++)acc = adder.Add(acc, projection(array[i]));
    return acc;
}
function maxBy(projection, xs, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? y : x
    , xs);
}
function max(xs, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? y : x
    , xs);
}
function minBy(projection, xs, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? x : y
    , xs);
}
function min(xs, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? x : y
    , xs);
}
function average(array, averager) {
    if (array.length === 0) throw new Error("The input array was empty\\nParameter name: array");
    let total = averager.GetZero();
    for(let i = 0; i <= array.length - 1; i++)total = averager.Add(total, array[i]);
    return averager.DivideByInt(total, array.length);
}
function averageBy(projection, array, averager) {
    if (array.length === 0) throw new Error("The input array was empty\\nParameter name: array");
    let total = averager.GetZero();
    for(let i = 0; i <= array.length - 1; i++)total = averager.Add(total, projection(array[i]));
    return averager.DivideByInt(total, array.length);
}
function windowed(windowSize, source) {
    if (windowSize <= 0) throw new Error("windowSize must be positive");
    let res;
    const len = _utilJs.max((x, y)=>_utilJs.comparePrimitives(x, y)
    , 0, source.length - windowSize) | 0;
    res = new Array(len);
    for(let i = windowSize; i <= source.length; i++)res[i - windowSize] = source.slice(i - windowSize, i - 1 + 1);
    return res;
}
function splitInto(chunks, array) {
    if (chunks < 1) throw new Error("The input must be positive.\\nParameter name: chunks");
    if (array.length === 0) return [
        []
    ];
    else {
        const result = [];
        const chunks_1 = _utilJs.min((x, y)=>_utilJs.comparePrimitives(x, y)
        , chunks, array.length) | 0;
        const minChunkSize = ~~(array.length / chunks_1) | 0;
        const chunksWithExtraItem = array.length % chunks_1 | 0;
        for(let i = 0; i <= chunks_1 - 1; i++){
            const chunkSize = (i < chunksWithExtraItem ? minChunkSize + 1 : minChunkSize) | 0;
            let slice;
            const start_1 = i * minChunkSize + _utilJs.min((x_1, y_1)=>_utilJs.comparePrimitives(x_1, y_1)
            , chunksWithExtraItem, i) | 0;
            slice = array.slice(start_1, start_1 + chunkSize);
            result.push(slice);
        }
        return result;
    }
}
function transpose(arrays, cons) {
    const arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);
    const len = arrays_1.length | 0;
    if (len === 0) return new Array(0);
    else {
        const lenInner = arrays_1[0].length | 0;
        if (!forAll((a)=>a.length === lenInner
        , arrays_1)) differentLengths();
        const result = new Array(lenInner);
        for(let i = 0; i <= lenInner - 1; i++){
            result[i] = Helpers_allocateArrayFromCons(cons, len);
            for(let j = 0; j <= len - 1; j++)result[i][j] = arrays_1[j][i];
        }
        return result;
    }
}
var _c;
$RefreshReg$(_c, "Helpers_allocateArrayFromCons");

},{"./Option.js":"gHWVf","./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Heoc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CancellationToken", ()=>CancellationToken
);
parcelHelpers.export(exports, "OperationCanceledError", ()=>OperationCanceledError
);
parcelHelpers.export(exports, "Trampoline", ()=>Trampoline
);
parcelHelpers.export(exports, "protectedCont", ()=>protectedCont
);
parcelHelpers.export(exports, "protectedBind", ()=>protectedBind
);
parcelHelpers.export(exports, "protectedReturn", ()=>protectedReturn
);
parcelHelpers.export(exports, "AsyncBuilder", ()=>AsyncBuilder
);
parcelHelpers.export(exports, "singleton", ()=>singleton
);
class CancellationToken {
    constructor(cancelled = false){
        this._id = 0;
        this._cancelled = cancelled;
        this._listeners = new Map();
    }
    get isCancelled() {
        return this._cancelled;
    }
    cancel() {
        if (!this._cancelled) {
            this._cancelled = true;
            for (const [, listener] of this._listeners)listener();
        }
    }
    addListener(f) {
        const id = this._id;
        this._listeners.set(this._id++, f);
        return id;
    }
    removeListener(id) {
        return this._listeners.delete(id);
    }
    register(f, state) {
        const $ = this;
        const id = this.addListener(state == null ? f : ()=>f(state)
        );
        return {
            Dispose () {
                $.removeListener(id);
            }
        };
    }
}
class OperationCanceledError extends Error {
    constructor(){
        super("The operation was canceled");
        Object.setPrototypeOf(this, OperationCanceledError.prototype);
    }
}
class Trampoline {
    constructor(){
        this.callCount = 0;
    }
    static get maxTrampolineCallCount() {
        return 2000;
    }
    incrementAndCheck() {
        return (this.callCount++) > Trampoline.maxTrampolineCallCount;
    }
    hijack(f) {
        this.callCount = 0;
        setTimeout(f, 0);
    }
}
function protectedCont(f) {
    return (ctx)=>{
        if (ctx.cancelToken.isCancelled) ctx.onCancel(new OperationCanceledError());
        else if (ctx.trampoline.incrementAndCheck()) ctx.trampoline.hijack(()=>{
            try {
                f(ctx);
            } catch (err) {
                ctx.onError(err);
            }
        });
        else try {
            f(ctx);
        } catch (err) {
            ctx.onError(err);
        }
    };
}
function protectedBind(computation, binder) {
    return protectedCont((ctx)=>{
        computation({
            onSuccess: (x)=>{
                try {
                    binder(x)(ctx);
                } catch (ex) {
                    ctx.onError(ex);
                }
            },
            onError: ctx.onError,
            onCancel: ctx.onCancel,
            cancelToken: ctx.cancelToken,
            trampoline: ctx.trampoline
        });
    });
}
function protectedReturn(value) {
    return protectedCont((ctx)=>ctx.onSuccess(value)
    );
}
class AsyncBuilder {
    Bind(computation, binder) {
        return protectedBind(computation, binder);
    }
    Combine(computation1, computation2) {
        return this.Bind(computation1, ()=>computation2
        );
    }
    Delay(generator) {
        return protectedCont((ctx)=>generator()(ctx)
        );
    }
    For(sequence, body) {
        const iter = sequence[Symbol.iterator]();
        let cur = iter.next();
        return this.While(()=>!cur.done
        , this.Delay(()=>{
            const res = body(cur.value);
            cur = iter.next();
            return res;
        }));
    }
    Return(value) {
        return protectedReturn(value);
    }
    ReturnFrom(computation) {
        return computation;
    }
    TryFinally(computation, compensation) {
        return protectedCont((ctx)=>{
            computation({
                onSuccess: (x)=>{
                    compensation();
                    ctx.onSuccess(x);
                },
                onError: (x)=>{
                    compensation();
                    ctx.onError(x);
                },
                onCancel: (x)=>{
                    compensation();
                    ctx.onCancel(x);
                },
                cancelToken: ctx.cancelToken,
                trampoline: ctx.trampoline
            });
        });
    }
    TryWith(computation, catchHandler) {
        return protectedCont((ctx)=>{
            computation({
                onSuccess: ctx.onSuccess,
                onCancel: ctx.onCancel,
                cancelToken: ctx.cancelToken,
                trampoline: ctx.trampoline,
                onError: (ex)=>{
                    try {
                        catchHandler(ex)(ctx);
                    } catch (ex2) {
                        ctx.onError(ex2);
                    }
                }
            });
        });
    }
    Using(resource, binder) {
        return this.TryFinally(binder(resource), ()=>resource.Dispose()
        );
    }
    While(guard, computation) {
        if (guard()) return this.Bind(computation, ()=>this.While(guard, computation)
        );
        else return this.Return(void 0);
    }
    Zero() {
        return protectedCont((ctx)=>ctx.onSuccess(void 0)
        );
    }
}
const singleton = new AsyncBuilder();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iuOII":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Implemented just for type references
parcelHelpers.export(exports, "Async", ()=>Async
);
// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>
parcelHelpers.export(exports, "makeAsync", ()=>makeAsync
);
// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn
parcelHelpers.export(exports, "invoke", ()=>invoke
);
// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn
parcelHelpers.export(exports, "callThenInvoke", ()=>callThenInvoke
);
// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn
parcelHelpers.export(exports, "bind", ()=>bind
);
parcelHelpers.export(exports, "createCancellationToken", ()=>createCancellationToken
);
parcelHelpers.export(exports, "cancel", ()=>cancel
);
parcelHelpers.export(exports, "cancelAfter", ()=>cancelAfter
);
parcelHelpers.export(exports, "isCancellationRequested", ()=>isCancellationRequested
);
parcelHelpers.export(exports, "throwIfCancellationRequested", ()=>throwIfCancellationRequested
);
parcelHelpers.export(exports, "startChild", ()=>startChild
);
parcelHelpers.export(exports, "awaitPromise", ()=>awaitPromise
);
parcelHelpers.export(exports, "cancellationToken", ()=>cancellationToken
);
parcelHelpers.export(exports, "defaultCancellationToken", ()=>defaultCancellationToken
);
parcelHelpers.export(exports, "catchAsync", ()=>catchAsync
);
parcelHelpers.export(exports, "fromContinuations", ()=>fromContinuations
);
parcelHelpers.export(exports, "ignore", ()=>ignore
);
parcelHelpers.export(exports, "parallel", ()=>parallel
);
parcelHelpers.export(exports, "sleep", ()=>sleep
);
parcelHelpers.export(exports, "start", ()=>start
);
parcelHelpers.export(exports, "startImmediate", ()=>startImmediate
);
parcelHelpers.export(exports, "startWithContinuations", ()=>startWithContinuations
);
parcelHelpers.export(exports, "startAsPromise", ()=>startAsPromise
);
var _asyncBuilderJs = require("./AsyncBuilder.js");
var _choiceJs = require("./Choice.js");
class Async {
}
function emptyContinuation(_x) {
// NOP
}
function makeAsync(body) {
    return body;
}
function invoke(computation, ctx) {
    return computation(ctx);
}
function callThenInvoke(ctx, result1, part2) {
    return part2(result1)(ctx);
}
function bind(ctx, part1, part2) {
    return _asyncBuilderJs.protectedBind(part1, part2)(ctx);
}
function createCancellationToken(arg) {
    const token = new _asyncBuilderJs.CancellationToken(typeof arg === "boolean" ? arg : false);
    if (typeof arg === "number") setTimeout(()=>{
        token.cancel();
    }, arg);
    return token;
}
function cancel(token) {
    token.cancel();
}
function cancelAfter(token, ms) {
    setTimeout(()=>{
        token.cancel();
    }, ms);
}
function isCancellationRequested(token) {
    return token != null && token.isCancelled;
}
function throwIfCancellationRequested(token) {
    if (token != null && token.isCancelled) throw new Error("Operation is cancelled");
}
function startChild(computation) {
    const promise = startAsPromise(computation);
    // JS Promises are hot, computation has already started
    // but we delay returning the result
    return _asyncBuilderJs.protectedCont((ctx)=>_asyncBuilderJs.protectedReturn(awaitPromise(promise))(ctx)
    );
}
function awaitPromise(p) {
    return fromContinuations((conts)=>p.then(conts[0]).catch((err)=>(err instanceof _asyncBuilderJs.OperationCanceledError ? conts[2] : conts[1])(err)
        )
    );
}
function cancellationToken() {
    return _asyncBuilderJs.protectedCont((ctx)=>ctx.onSuccess(ctx.cancelToken)
    );
}
const defaultCancellationToken = new _asyncBuilderJs.CancellationToken();
function catchAsync(work) {
    return _asyncBuilderJs.protectedCont((ctx)=>{
        work({
            onSuccess: (x)=>ctx.onSuccess(_choiceJs.Choice_makeChoice1Of2(x))
            ,
            onError: (ex)=>ctx.onSuccess(_choiceJs.Choice_makeChoice2Of2(ex))
            ,
            onCancel: ctx.onCancel,
            cancelToken: ctx.cancelToken,
            trampoline: ctx.trampoline
        });
    });
}
function fromContinuations(f) {
    return _asyncBuilderJs.protectedCont((ctx)=>f([
            ctx.onSuccess,
            ctx.onError,
            ctx.onCancel
        ])
    );
}
function ignore(computation) {
    return _asyncBuilderJs.protectedBind(computation, (_x)=>_asyncBuilderJs.protectedReturn(void 0)
    );
}
function parallel(computations) {
    return awaitPromise(Promise.all(Array.from(computations, (w)=>startAsPromise(w)
    )));
}
function sleep(millisecondsDueTime) {
    return _asyncBuilderJs.protectedCont((ctx)=>{
        let tokenId;
        const timeoutId = setTimeout(()=>{
            ctx.cancelToken.removeListener(tokenId);
            ctx.onSuccess(void 0);
        }, millisecondsDueTime);
        tokenId = ctx.cancelToken.addListener(()=>{
            clearTimeout(timeoutId);
            ctx.onCancel(new _asyncBuilderJs.OperationCanceledError());
        });
    });
}
function start(computation, cancellationToken1) {
    return startWithContinuations(computation, cancellationToken1);
}
function startImmediate(computation, cancellationToken1) {
    return start(computation, cancellationToken1);
}
function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {
    if (typeof continuation !== "function") {
        cancelToken = continuation;
        continuation = undefined;
    }
    const trampoline = new _asyncBuilderJs.Trampoline();
    computation({
        onSuccess: continuation ? continuation : emptyContinuation,
        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,
        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,
        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,
        trampoline
    });
}
function startAsPromise(computation, cancellationToken1) {
    return new Promise((resolve, reject)=>startWithContinuations(computation, resolve, reject, reject, cancellationToken1 ? cancellationToken1 : defaultCancellationToken)
    );
}
exports.default = Async;

},{"./AsyncBuilder.js":"7Heoc","./Choice.js":"aEC7Y","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aEC7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FSharpResult$2", ()=>FSharpResult$2
);
parcelHelpers.export(exports, "FSharpResult$2$reflection", ()=>FSharpResult$2$reflection
);
parcelHelpers.export(exports, "Result_Map", ()=>Result_Map
);
parcelHelpers.export(exports, "Result_MapError", ()=>Result_MapError
);
parcelHelpers.export(exports, "Result_Bind", ()=>Result_Bind
);
parcelHelpers.export(exports, "FSharpChoice$2", ()=>FSharpChoice$2
);
parcelHelpers.export(exports, "FSharpChoice$2$reflection", ()=>FSharpChoice$2$reflection
);
parcelHelpers.export(exports, "FSharpChoice$3", ()=>FSharpChoice$3
);
parcelHelpers.export(exports, "FSharpChoice$3$reflection", ()=>FSharpChoice$3$reflection
);
parcelHelpers.export(exports, "FSharpChoice$4", ()=>FSharpChoice$4
);
parcelHelpers.export(exports, "FSharpChoice$4$reflection", ()=>FSharpChoice$4$reflection
);
parcelHelpers.export(exports, "FSharpChoice$5", ()=>FSharpChoice$5
);
parcelHelpers.export(exports, "FSharpChoice$5$reflection", ()=>FSharpChoice$5$reflection
);
parcelHelpers.export(exports, "FSharpChoice$6", ()=>FSharpChoice$6
);
parcelHelpers.export(exports, "FSharpChoice$6$reflection", ()=>FSharpChoice$6$reflection
);
parcelHelpers.export(exports, "FSharpChoice$7", ()=>FSharpChoice$7
);
parcelHelpers.export(exports, "FSharpChoice$7$reflection", ()=>FSharpChoice$7$reflection
);
parcelHelpers.export(exports, "Choice_makeChoice1Of2", ()=>Choice_makeChoice1Of2
);
parcelHelpers.export(exports, "Choice_makeChoice2Of2", ()=>Choice_makeChoice2Of2
);
parcelHelpers.export(exports, "Choice_tryValueIfChoice1Of2", ()=>Choice_tryValueIfChoice1Of2
);
parcelHelpers.export(exports, "Choice_tryValueIfChoice2Of2", ()=>Choice_tryValueIfChoice2Of2
);
var _typesJs = require("./Types.js");
var _reflectionJs = require("./Reflection.js");
var _optionJs = require("./Option.js");
class FSharpResult$2 extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "Ok",
            "Error"
        ];
    }
}
function FSharpResult$2$reflection(gen0, gen1) {
    return _reflectionJs.union_type("FSharp.Core.FSharpResult`2", [
        gen0,
        gen1
    ], FSharpResult$2, ()=>[
            [
                [
                    "ResultValue",
                    gen0
                ]
            ],
            [
                [
                    "ErrorValue",
                    gen1
                ]
            ]
        ]
    );
}
_c = FSharpResult$2$reflection;
function Result_Map(mapping, result) {
    if (result.tag === 0) return new FSharpResult$2(0, mapping(result.fields[0]));
    else return new FSharpResult$2(1, result.fields[0]);
}
_c1 = Result_Map;
function Result_MapError(mapping, result) {
    if (result.tag === 0) return new FSharpResult$2(0, result.fields[0]);
    else return new FSharpResult$2(1, mapping(result.fields[0]));
}
_c2 = Result_MapError;
function Result_Bind(binder, result) {
    if (result.tag === 0) return binder(result.fields[0]);
    else return new FSharpResult$2(1, result.fields[0]);
}
_c3 = Result_Bind;
class FSharpChoice$2 extends _typesJs.Union {
    constructor(tag1, ...fields1){
        super();
        this.tag = tag1 | 0;
        this.fields = fields1;
    }
    cases() {
        return [
            "Choice1Of2",
            "Choice2Of2"
        ];
    }
}
function FSharpChoice$2$reflection(gen0, gen1) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`2", [
        gen0,
        gen1
    ], FSharpChoice$2, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ]
        ]
    );
}
_c4 = FSharpChoice$2$reflection;
class FSharpChoice$3 extends _typesJs.Union {
    constructor(tag2, ...fields2){
        super();
        this.tag = tag2 | 0;
        this.fields = fields2;
    }
    cases() {
        return [
            "Choice1Of3",
            "Choice2Of3",
            "Choice3Of3"
        ];
    }
}
function FSharpChoice$3$reflection(gen0, gen1, gen2) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`3", [
        gen0,
        gen1,
        gen2
    ], FSharpChoice$3, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ],
            [
                [
                    "Item",
                    gen2
                ]
            ]
        ]
    );
}
_c5 = FSharpChoice$3$reflection;
class FSharpChoice$4 extends _typesJs.Union {
    constructor(tag3, ...fields3){
        super();
        this.tag = tag3 | 0;
        this.fields = fields3;
    }
    cases() {
        return [
            "Choice1Of4",
            "Choice2Of4",
            "Choice3Of4",
            "Choice4Of4"
        ];
    }
}
function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`4", [
        gen0,
        gen1,
        gen2,
        gen3
    ], FSharpChoice$4, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ],
            [
                [
                    "Item",
                    gen2
                ]
            ],
            [
                [
                    "Item",
                    gen3
                ]
            ]
        ]
    );
}
_c6 = FSharpChoice$4$reflection;
class FSharpChoice$5 extends _typesJs.Union {
    constructor(tag4, ...fields4){
        super();
        this.tag = tag4 | 0;
        this.fields = fields4;
    }
    cases() {
        return [
            "Choice1Of5",
            "Choice2Of5",
            "Choice3Of5",
            "Choice4Of5",
            "Choice5Of5"
        ];
    }
}
function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`5", [
        gen0,
        gen1,
        gen2,
        gen3,
        gen4
    ], FSharpChoice$5, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ],
            [
                [
                    "Item",
                    gen2
                ]
            ],
            [
                [
                    "Item",
                    gen3
                ]
            ],
            [
                [
                    "Item",
                    gen4
                ]
            ]
        ]
    );
}
_c7 = FSharpChoice$5$reflection;
class FSharpChoice$6 extends _typesJs.Union {
    constructor(tag5, ...fields5){
        super();
        this.tag = tag5 | 0;
        this.fields = fields5;
    }
    cases() {
        return [
            "Choice1Of6",
            "Choice2Of6",
            "Choice3Of6",
            "Choice4Of6",
            "Choice5Of6",
            "Choice6Of6"
        ];
    }
}
function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`6", [
        gen0,
        gen1,
        gen2,
        gen3,
        gen4,
        gen5
    ], FSharpChoice$6, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ],
            [
                [
                    "Item",
                    gen2
                ]
            ],
            [
                [
                    "Item",
                    gen3
                ]
            ],
            [
                [
                    "Item",
                    gen4
                ]
            ],
            [
                [
                    "Item",
                    gen5
                ]
            ]
        ]
    );
}
_c8 = FSharpChoice$6$reflection;
class FSharpChoice$7 extends _typesJs.Union {
    constructor(tag6, ...fields6){
        super();
        this.tag = tag6 | 0;
        this.fields = fields6;
    }
    cases() {
        return [
            "Choice1Of7",
            "Choice2Of7",
            "Choice3Of7",
            "Choice4Of7",
            "Choice5Of7",
            "Choice6Of7",
            "Choice7Of7"
        ];
    }
}
function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {
    return _reflectionJs.union_type("FSharp.Core.FSharpChoice`7", [
        gen0,
        gen1,
        gen2,
        gen3,
        gen4,
        gen5,
        gen6
    ], FSharpChoice$7, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            [
                [
                    "Item",
                    gen1
                ]
            ],
            [
                [
                    "Item",
                    gen2
                ]
            ],
            [
                [
                    "Item",
                    gen3
                ]
            ],
            [
                [
                    "Item",
                    gen4
                ]
            ],
            [
                [
                    "Item",
                    gen5
                ]
            ],
            [
                [
                    "Item",
                    gen6
                ]
            ]
        ]
    );
}
_c9 = FSharpChoice$7$reflection;
function Choice_makeChoice1Of2(x) {
    return new FSharpChoice$2(0, x);
}
_c10 = Choice_makeChoice1Of2;
function Choice_makeChoice2Of2(x) {
    return new FSharpChoice$2(1, x);
}
_c11 = Choice_makeChoice2Of2;
function Choice_tryValueIfChoice1Of2(x) {
    if (x.tag === 0) return _optionJs.some(x.fields[0]);
    else return void 0;
}
_c12 = Choice_tryValueIfChoice1Of2;
function Choice_tryValueIfChoice2Of2(x) {
    if (x.tag === 1) return _optionJs.some(x.fields[0]);
    else return void 0;
}
_c13 = Choice_tryValueIfChoice2Of2;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;
$RefreshReg$(_c, "FSharpResult$2$reflection");
$RefreshReg$(_c1, "Result_Map");
$RefreshReg$(_c2, "Result_MapError");
$RefreshReg$(_c3, "Result_Bind");
$RefreshReg$(_c4, "FSharpChoice$2$reflection");
$RefreshReg$(_c5, "FSharpChoice$3$reflection");
$RefreshReg$(_c6, "FSharpChoice$4$reflection");
$RefreshReg$(_c7, "FSharpChoice$5$reflection");
$RefreshReg$(_c8, "FSharpChoice$6$reflection");
$RefreshReg$(_c9, "FSharpChoice$7$reflection");
$RefreshReg$(_c10, "Choice_makeChoice1Of2");
$RefreshReg$(_c11, "Choice_makeChoice2Of2");
$RefreshReg$(_c12, "Choice_tryValueIfChoice1Of2");
$RefreshReg$(_c13, "Choice_tryValueIfChoice2Of2");

},{"./Types.js":"7IOW0","./Reflection.js":"c0YT4","./Option.js":"gHWVf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Vq58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Log_onError", ()=>Log_onError
);
parcelHelpers.export(exports, "Log_toConsole", ()=>Log_toConsole
);
parcelHelpers.export(exports, "Timer_delay", ()=>Timer_delay
);
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _timerJs = require("../fable-library.3.2.10/Timer.js");
var _timerJsDefault = parcelHelpers.interopDefault(_timerJs);
var _observableJs = require("../fable-library.3.2.10/Observable.js");
function Log_onError(text, ex) {
    console.error(_optionJs.some(text), ex);
}
_c = Log_onError;
function Log_toConsole(text, o) {
    console.log(_optionJs.some(text), o);
}
_c1 = Log_toConsole;
function Timer_delay(interval, callback) {
    let t;
    let returnVal = new _timerJsDefault.default(interval);
    returnVal.AutoReset = false;
    t = returnVal;
    _observableJs.add(callback, t.Elapsed());
    t.Enabled = true;
    t.Start();
}
_c2 = Timer_delay;
var _c, _c1, _c2;
$RefreshReg$(_c, "Log_onError");
$RefreshReg$(_c1, "Log_toConsole");
$RefreshReg$(_c2, "Timer_delay");

},{"../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/Timer.js":"j4Ms3","../fable-library.3.2.10/Observable.js":"fn6Ij","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j4Ms3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Timer", ()=>Timer
);
var _eventJs = require("./Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
class Timer {
    constructor(interval){
        this._enabled = false;
        this._isDisposed = false;
        this._intervalId = 0;
        this._timeoutId = 0;
        this.Interval = interval && interval > 0 ? interval : 100;
        this.AutoReset = true;
        this._elapsed = new _eventJsDefault.default();
    }
    Elapsed() {
        return this._elapsed;
    }
    get Enabled() {
        return this._enabled;
    }
    set Enabled(x) {
        if (!this._isDisposed && this._enabled !== x) {
            this._enabled = x;
            if (this._enabled) {
                if (this.AutoReset) this._intervalId = setInterval(()=>{
                    if (!this.AutoReset) this.Enabled = false;
                    this._elapsed.Trigger(new Date());
                }, this.Interval);
                else this._timeoutId = setTimeout(()=>{
                    this.Enabled = false;
                    this._timeoutId = 0;
                    if (this.AutoReset) this.Enabled = true;
                    this._elapsed.Trigger(new Date());
                }, this.Interval);
            } else {
                if (this._timeoutId) {
                    clearTimeout(this._timeoutId);
                    this._timeoutId = 0;
                }
                if (this._intervalId) {
                    clearInterval(this._intervalId);
                    this._intervalId = 0;
                }
            }
        }
    }
    Dispose() {
        this.Enabled = false;
        this._isDisposed = true;
    }
    Close() {
        this.Dispose();
    }
    Start() {
        this.Enabled = true;
    }
    Stop() {
        this.Enabled = false;
    }
}
exports.default = Timer;

},{"./Event.js":"gFWEk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gFWEk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Event", ()=>Event1
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "choose", ()=>choose
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "merge", ()=>merge
);
parcelHelpers.export(exports, "pairwise", ()=>pairwise
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "scan", ()=>scan
);
parcelHelpers.export(exports, "split", ()=>split
);
parcelHelpers.export(exports, "createEvent", ()=>createEvent
);
var _observableJs = require("./Observable.js");
var _optionJs = require("./Option.js");
var _choiceJs = require("./Choice.js");
class Event1 {
    constructor(){
        this.delegates = [];
    }
    Add(f) {
        this._addHandler(f);
    }
    get Publish() {
        return this;
    }
    Trigger(senderOrValue, valueOrUndefined) {
        let sender;
        let value;
        if (valueOrUndefined === undefined) {
            sender = null;
            value = senderOrValue;
        } else {
            sender = senderOrValue;
            value = valueOrUndefined;
        }
        this.delegates.forEach((f)=>f.length === 1 ? f(value) : f(sender, value)
        );
    }
    // IDelegateEvent<T> methods
    AddHandler(handler) {
        this._addHandler(handler);
    }
    RemoveHandler(handler) {
        this._removeHandler(handler);
    }
    // IObservable<T> methods
    Subscribe(arg) {
        const callback = typeof arg === "function" ? arg : arg.OnNext;
        this._addHandler(callback);
        return {
            Dispose: ()=>{
                this._removeHandler(callback);
            }
        };
    }
    _addHandler(f) {
        this.delegates.push(f);
    }
    _removeHandler(f) {
        const index = this.delegates.indexOf(f);
        if (index > -1) this.delegates.splice(index, 1);
    }
}
function add(callback, sourceEvent) {
    if (sourceEvent instanceof Event1) sourceEvent.Add(callback);
    else sourceEvent.Subscribe(new _observableJs.Observer(callback));
}
function choose(chooser, sourceEvent) {
    const ev = new Event1();
    add((t)=>{
        const u = chooser(t);
        if (u != null) ev.Trigger(_optionJs.value(u));
    }, sourceEvent);
    return ev;
}
function filter(predicate, sourceEvent) {
    return choose((x)=>predicate(x) ? _optionJs.some(x) : undefined
    , sourceEvent);
}
function map(mapping, sourceEvent) {
    const ev = new Event1();
    add((t)=>ev.Trigger(mapping(t))
    , sourceEvent);
    return ev;
}
function merge(event1, event2) {
    const ev = new Event1();
    const fn = (x)=>ev.Trigger(x)
    ;
    add(fn, event1);
    add(fn, event2);
    return ev;
}
function pairwise(sourceEvent) {
    const ev = new Event1();
    let last;
    let haveLast = false;
    add((next)=>{
        if (haveLast) ev.Trigger([
            last,
            next
        ]);
        last = next;
        haveLast = true;
    }, sourceEvent);
    return ev;
}
function partition(predicate, sourceEvent) {
    return [
        filter(predicate, sourceEvent),
        filter((x)=>!predicate(x)
        , sourceEvent)
    ];
}
function scan(collector, state, sourceEvent) {
    return map((t)=>state = collector(state, t)
    , sourceEvent);
}
function split(splitter, sourceEvent) {
    return [
        choose((v)=>_choiceJs.Choice_tryValueIfChoice1Of2(splitter(v))
        , sourceEvent),
        choose((v)=>_choiceJs.Choice_tryValueIfChoice2Of2(splitter(v))
        , sourceEvent), 
    ];
}
function createEvent(addHandler, removeHandler) {
    return {
        AddHandler (h) {
            addHandler(h);
        },
        RemoveHandler (h) {
            removeHandler(h);
        },
        Subscribe (r) {
            const h = (_, args)=>r.OnNext(args)
            ;
            addHandler(h);
            return {
                Dispose () {
                    removeHandler(h);
                }
            };
        }
    };
}
exports.default = Event1;

},{"./Observable.js":"fn6Ij","./Option.js":"gHWVf","./Choice.js":"aEC7Y","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fn6Ij":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observer", ()=>Observer
);
parcelHelpers.export(exports, "protect", ()=>protect
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "choose", ()=>choose
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "merge", ()=>merge
);
parcelHelpers.export(exports, "pairwise", ()=>pairwise
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "scan", ()=>scan
);
parcelHelpers.export(exports, "split", ()=>split
);
parcelHelpers.export(exports, "subscribe", ()=>subscribe1
);
var _choiceJs = require("./Choice.js");
var _optionJs = require("./Option.js");
class Observer {
    constructor(onNext, onError, onCompleted){
        this.OnNext = onNext;
        this.OnError = onError || ((_e)=>{
            return;
        });
        this.OnCompleted = onCompleted || (()=>{
            return;
        });
    }
}
class Observable {
    constructor(subscribe){
        this.Subscribe = subscribe;
    }
}
function protect(f, succeed, fail) {
    try {
        return succeed(f());
    } catch (e) {
        fail(e);
    }
}
function add(callback, source) {
    source.Subscribe(new Observer(callback));
}
function choose(chooser, source) {
    return new Observable((observer)=>source.Subscribe(new Observer((t)=>protect(()=>chooser(t)
            , (u)=>{
                if (u != null) observer.OnNext(_optionJs.value(u));
            }, observer.OnError)
        , observer.OnError, observer.OnCompleted))
    );
}
function filter(predicate, source) {
    return choose((x)=>predicate(x) ? x : null
    , source);
}
function map(mapping, source) {
    return new Observable((observer)=>source.Subscribe(new Observer((t)=>{
            protect(()=>mapping(t)
            , observer.OnNext, observer.OnError);
        }, observer.OnError, observer.OnCompleted))
    );
}
function merge(source1, source2) {
    return new Observable((observer)=>{
        let stopped = false;
        let completed1 = false;
        let completed2 = false;
        const h1 = source1.Subscribe(new Observer((v)=>{
            if (!stopped) observer.OnNext(v);
        }, (e)=>{
            if (!stopped) {
                stopped = true;
                observer.OnError(e);
            }
        }, ()=>{
            if (!stopped) {
                completed1 = true;
                if (completed2) {
                    stopped = true;
                    observer.OnCompleted();
                }
            }
        }));
        const h2 = source2.Subscribe(new Observer((v)=>{
            if (!stopped) observer.OnNext(v);
        }, (e)=>{
            if (!stopped) {
                stopped = true;
                observer.OnError(e);
            }
        }, ()=>{
            if (!stopped) {
                completed2 = true;
                if (completed1) {
                    stopped = true;
                    observer.OnCompleted();
                }
            }
        }));
        return {
            Dispose () {
                h1.Dispose();
                h2.Dispose();
            }
        };
    });
}
function pairwise(source) {
    return new Observable((observer)=>{
        let last;
        return source.Subscribe(new Observer((next)=>{
            if (last != null) observer.OnNext([
                last,
                next
            ]);
            last = next;
        }, observer.OnError, observer.OnCompleted));
    });
}
function partition(predicate, source) {
    return [
        filter(predicate, source),
        filter((x)=>!predicate(x)
        , source)
    ];
}
function scan(collector, state, source) {
    return new Observable((observer)=>{
        return source.Subscribe(new Observer((t)=>{
            protect(()=>collector(state, t)
            , (u)=>{
                state = u;
                observer.OnNext(u);
            }, observer.OnError);
        }, observer.OnError, observer.OnCompleted));
    });
}
function split(splitter, source) {
    return [
        choose((v)=>_choiceJs.Choice_tryValueIfChoice1Of2(splitter(v))
        , source),
        choose((v)=>_choiceJs.Choice_tryValueIfChoice2Of2(splitter(v))
        , source)
    ];
}
function subscribe1(callback, source) {
    return source.Subscribe(new Observer(callback));
}

},{"./Choice.js":"aEC7Y","./Option.js":"gHWVf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5en8f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RingState$1", ()=>RingState$1
);
parcelHelpers.export(exports, "RingState$1$reflection", ()=>RingState$1$reflection
);
parcelHelpers.export(exports, "RingBuffer$1", ()=>RingBuffer$1
);
parcelHelpers.export(exports, "RingBuffer$1$reflection", ()=>RingBuffer$1$reflection
);
parcelHelpers.export(exports, "RingBuffer$1_$ctor_Z524259A4", ()=>RingBuffer$1_$ctor_Z524259A4
);
parcelHelpers.export(exports, "RingBuffer$1__Pop", ()=>RingBuffer$1__Pop
);
parcelHelpers.export(exports, "RingBuffer$1__Push_2B595", ()=>RingBuffer$1__Push_2B595
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _seqJs = require("../fable-library.3.2.10/Seq.js");
var _rangeJs = require("../fable-library.3.2.10/Range.js");
class RingState$1 extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "Writable",
            "ReadWritable"
        ];
    }
}
function RingState$1$reflection(gen0) {
    return _reflectionJs.union_type("Elmish.RingState`1", [
        gen0
    ], RingState$1, ()=>[
            [
                [
                    "wx",
                    _reflectionJs.array_type(gen0)
                ],
                [
                    "ix", _reflectionJs.int32_type]
            ],
            [
                [
                    "rw",
                    _reflectionJs.array_type(gen0)
                ],
                [
                    "wix", _reflectionJs.int32_type],
                [
                    "rix", _reflectionJs.int32_type]
            ]
        ]
    );
}
_c = RingState$1$reflection;
class RingBuffer$1 {
    constructor(size){
        this.state = new RingState$1(0, _arrayJs.fill(new Array(_utilJs.max((x, y)=>_utilJs.comparePrimitives(x, y)
        , size, 10)), 0, _utilJs.max((x, y)=>_utilJs.comparePrimitives(x, y)
        , size, 10), null), 0);
    }
}
function RingBuffer$1$reflection(gen0) {
    return _reflectionJs.class_type("Elmish.RingBuffer`1", [
        gen0
    ], RingBuffer$1);
}
_c1 = RingBuffer$1$reflection;
function RingBuffer$1_$ctor_Z524259A4(size1) {
    return new RingBuffer$1(size1);
}
_c2 = RingBuffer$1_$ctor_Z524259A4;
function RingBuffer$1__Pop(__) {
    const matchValue = __.state;
    if (matchValue.tag === 1) {
        const wix = matchValue.fields[1] | 0;
        const rix = matchValue.fields[2] | 0;
        const items = matchValue.fields[0];
        const rix$0027 = (rix + 1) % items.length | 0;
        if (rix$0027 === wix) __.state = new RingState$1(0, items, wix);
        else __.state = new RingState$1(1, items, wix, rix$0027);
        return _optionJs.some(items[rix]);
    } else return void 0;
}
_c3 = RingBuffer$1__Pop;
function RingBuffer$1__Push_2B595(__, item) {
    const matchValue = __.state;
    if (matchValue.tag === 1) {
        const wix_1 = matchValue.fields[1] | 0;
        const rix = matchValue.fields[2] | 0;
        const items_1 = matchValue.fields[0];
        items_1[wix_1] = item;
        const wix$0027 = (wix_1 + 1) % items_1.length | 0;
        if (wix$0027 === rix) __.state = new RingState$1(1, RingBuffer$1__doubleSize(__, rix, items_1), items_1.length, 0);
        else __.state = new RingState$1(1, items_1, wix$0027, rix);
    } else {
        const ix = matchValue.fields[1] | 0;
        const items = matchValue.fields[0];
        items[ix] = item;
        const wix = (ix + 1) % items.length | 0;
        __.state = new RingState$1(1, items, wix, ix);
    }
}
_c4 = RingBuffer$1__Push_2B595;
function RingBuffer$1__doubleSize(this$, ix, items) {
    return Array.from(_seqJs.delay(()=>_seqJs.append(_seqJs.skip(ix, items), _seqJs.delay(()=>_seqJs.append(_seqJs.take(ix, items), _seqJs.delay(()=>_seqJs.collect((matchValue)=>_seqJs.singleton(null)
                , _rangeJs.rangeDouble(0, 1, items.length))
            ))
        ))
    ));
}
_c5 = RingBuffer$1__doubleSize;
var _c, _c1, _c2, _c3, _c4, _c5;
$RefreshReg$(_c, "RingState$1$reflection");
$RefreshReg$(_c1, "RingBuffer$1$reflection");
$RefreshReg$(_c2, "RingBuffer$1_$ctor_Z524259A4");
$RefreshReg$(_c3, "RingBuffer$1__Pop");
$RefreshReg$(_c4, "RingBuffer$1__Push_2B595");
$RefreshReg$(_c5, "RingBuffer$1__doubleSize");

},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Array.js":"dl8am","../fable-library.3.2.10/Util.js":"e4VZ7","../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/Seq.js":"app8U","../fable-library.3.2.10/Range.js":"hd0qz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"app8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SR_enumerationAlreadyFinished", ()=>SR_enumerationAlreadyFinished
);
parcelHelpers.export(exports, "SR_enumerationNotStarted", ()=>SR_enumerationNotStarted
);
parcelHelpers.export(exports, "SR_inputSequenceEmpty", ()=>SR_inputSequenceEmpty
);
parcelHelpers.export(exports, "SR_inputSequenceTooLong", ()=>SR_inputSequenceTooLong
);
parcelHelpers.export(exports, "SR_keyNotFoundAlt", ()=>SR_keyNotFoundAlt
);
parcelHelpers.export(exports, "SR_notEnoughElements", ()=>SR_notEnoughElements
);
parcelHelpers.export(exports, "SR_resetNotSupported", ()=>SR_resetNotSupported
);
parcelHelpers.export(exports, "Enumerator_noReset", ()=>Enumerator_noReset
);
parcelHelpers.export(exports, "Enumerator_notStarted", ()=>Enumerator_notStarted
);
parcelHelpers.export(exports, "Enumerator_alreadyFinished", ()=>Enumerator_alreadyFinished
);
parcelHelpers.export(exports, "Enumerator_Seq", ()=>Enumerator_Seq
);
parcelHelpers.export(exports, "Enumerator_Seq$reflection", ()=>Enumerator_Seq$reflection
);
parcelHelpers.export(exports, "Enumerator_Seq_$ctor_673A07F2", ()=>Enumerator_Seq_$ctor_673A07F2
);
parcelHelpers.export(exports, "Enumerator_FromFunctions$1", ()=>Enumerator_FromFunctions$1
);
parcelHelpers.export(exports, "Enumerator_FromFunctions$1$reflection", ()=>Enumerator_FromFunctions$1$reflection
);
parcelHelpers.export(exports, "Enumerator_FromFunctions$1_$ctor_58C54629", ()=>Enumerator_FromFunctions$1_$ctor_58C54629
);
parcelHelpers.export(exports, "Enumerator_cast", ()=>Enumerator_cast
);
parcelHelpers.export(exports, "Enumerator_concat", ()=>Enumerator_concat
);
parcelHelpers.export(exports, "Enumerator_enumerateThenFinally", ()=>Enumerator_enumerateThenFinally
);
parcelHelpers.export(exports, "Enumerator_generateWhileSome", ()=>Enumerator_generateWhileSome
);
parcelHelpers.export(exports, "Enumerator_unfold", ()=>Enumerator_unfold
);
parcelHelpers.export(exports, "indexNotFound", ()=>indexNotFound
);
parcelHelpers.export(exports, "checkNonNull", ()=>checkNonNull
);
parcelHelpers.export(exports, "mkSeq", ()=>mkSeq
);
parcelHelpers.export(exports, "ofSeq", ()=>ofSeq
);
parcelHelpers.export(exports, "delay", ()=>delay
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "unfold", ()=>unfold
);
parcelHelpers.export(exports, "empty", ()=>empty
);
parcelHelpers.export(exports, "singleton", ()=>singleton
);
parcelHelpers.export(exports, "ofArray", ()=>ofArray
);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
parcelHelpers.export(exports, "ofList", ()=>ofList
);
parcelHelpers.export(exports, "toList", ()=>toList
);
parcelHelpers.export(exports, "generate", ()=>generate
);
parcelHelpers.export(exports, "generateIndexed", ()=>generateIndexed
);
parcelHelpers.export(exports, "append", ()=>append
);
parcelHelpers.export(exports, "cast", ()=>cast
);
parcelHelpers.export(exports, "choose", ()=>choose
);
parcelHelpers.export(exports, "compareWith", ()=>compareWith
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "enumerateFromFunctions", ()=>enumerateFromFunctions
);
parcelHelpers.export(exports, "enumerateThenFinally", ()=>enumerateThenFinally
);
parcelHelpers.export(exports, "enumerateUsing", ()=>enumerateUsing
);
parcelHelpers.export(exports, "enumerateWhile", ()=>enumerateWhile
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "exists", ()=>exists
);
parcelHelpers.export(exports, "exists2", ()=>exists2
);
parcelHelpers.export(exports, "exactlyOne", ()=>exactlyOne
);
parcelHelpers.export(exports, "tryExactlyOne", ()=>tryExactlyOne
);
parcelHelpers.export(exports, "tryFind", ()=>tryFind
);
parcelHelpers.export(exports, "find", ()=>find
);
parcelHelpers.export(exports, "tryFindBack", ()=>tryFindBack
);
parcelHelpers.export(exports, "findBack", ()=>findBack
);
parcelHelpers.export(exports, "tryFindIndex", ()=>tryFindIndex
);
parcelHelpers.export(exports, "findIndex", ()=>findIndex
);
parcelHelpers.export(exports, "tryFindIndexBack", ()=>tryFindIndexBack
);
parcelHelpers.export(exports, "findIndexBack", ()=>findIndexBack
);
parcelHelpers.export(exports, "fold", ()=>fold
);
parcelHelpers.export(exports, "foldBack", ()=>foldBack
);
parcelHelpers.export(exports, "fold2", ()=>fold2
);
parcelHelpers.export(exports, "foldBack2", ()=>foldBack2
);
parcelHelpers.export(exports, "forAll", ()=>forAll
);
parcelHelpers.export(exports, "forAll2", ()=>forAll2
);
parcelHelpers.export(exports, "tryHead", ()=>tryHead
);
parcelHelpers.export(exports, "head", ()=>head
);
parcelHelpers.export(exports, "initialize", ()=>initialize
);
parcelHelpers.export(exports, "initializeInfinite", ()=>initializeInfinite
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "tryItem", ()=>tryItem
);
parcelHelpers.export(exports, "item", ()=>item
);
parcelHelpers.export(exports, "iterate", ()=>iterate
);
parcelHelpers.export(exports, "iterate2", ()=>iterate2
);
parcelHelpers.export(exports, "iterateIndexed", ()=>iterateIndexed
);
parcelHelpers.export(exports, "iterateIndexed2", ()=>iterateIndexed2
);
parcelHelpers.export(exports, "tryLast", ()=>tryLast
);
parcelHelpers.export(exports, "last", ()=>last
);
parcelHelpers.export(exports, "length", ()=>length
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "mapIndexed", ()=>mapIndexed
);
parcelHelpers.export(exports, "indexed", ()=>indexed
);
parcelHelpers.export(exports, "map2", ()=>map2
);
parcelHelpers.export(exports, "mapIndexed2", ()=>mapIndexed2
);
parcelHelpers.export(exports, "map3", ()=>map3
);
parcelHelpers.export(exports, "readOnly", ()=>readOnly
);
parcelHelpers.export(exports, "cache", ()=>cache
);
parcelHelpers.export(exports, "allPairs", ()=>allPairs
);
parcelHelpers.export(exports, "mapFold", ()=>mapFold
);
parcelHelpers.export(exports, "mapFoldBack", ()=>mapFoldBack
);
parcelHelpers.export(exports, "tryPick", ()=>tryPick
);
parcelHelpers.export(exports, "pick", ()=>pick
);
parcelHelpers.export(exports, "reduce", ()=>reduce
);
parcelHelpers.export(exports, "reduceBack", ()=>reduceBack
);
parcelHelpers.export(exports, "replicate", ()=>replicate
);
parcelHelpers.export(exports, "reverse", ()=>reverse
);
parcelHelpers.export(exports, "scan", ()=>scan
);
parcelHelpers.export(exports, "scanBack", ()=>scanBack
);
parcelHelpers.export(exports, "skip", ()=>skip
);
parcelHelpers.export(exports, "skipWhile", ()=>skipWhile
);
parcelHelpers.export(exports, "tail", ()=>tail
);
parcelHelpers.export(exports, "take", ()=>take
);
parcelHelpers.export(exports, "takeWhile", ()=>takeWhile
);
parcelHelpers.export(exports, "truncate", ()=>truncate
);
parcelHelpers.export(exports, "zip", ()=>zip
);
parcelHelpers.export(exports, "zip3", ()=>zip3
);
parcelHelpers.export(exports, "collect", ()=>collect
);
parcelHelpers.export(exports, "where", ()=>where
);
parcelHelpers.export(exports, "pairwise", ()=>pairwise
);
parcelHelpers.export(exports, "splitInto", ()=>splitInto
);
parcelHelpers.export(exports, "windowed", ()=>windowed
);
parcelHelpers.export(exports, "transpose", ()=>transpose
);
parcelHelpers.export(exports, "sortWith", ()=>sortWith
);
parcelHelpers.export(exports, "sort", ()=>sort
);
parcelHelpers.export(exports, "sortBy", ()=>sortBy
);
parcelHelpers.export(exports, "sortDescending", ()=>sortDescending
);
parcelHelpers.export(exports, "sortByDescending", ()=>sortByDescending
);
parcelHelpers.export(exports, "sum", ()=>sum
);
parcelHelpers.export(exports, "sumBy", ()=>sumBy
);
parcelHelpers.export(exports, "maxBy", ()=>maxBy
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "minBy", ()=>minBy
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "average", ()=>average
);
parcelHelpers.export(exports, "averageBy", ()=>averageBy
);
parcelHelpers.export(exports, "permute", ()=>permute
);
parcelHelpers.export(exports, "chunkBySize", ()=>chunkBySize
);
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
var _reflectionJs = require("./Reflection.js");
var _optionJs = require("./Option.js");
var _fsharpCoreJs = require("./FSharp.Core.js");
var _arrayJs = require("./Array.js");
var _listJs = require("./List.js");
const SR_enumerationAlreadyFinished = "Enumeration already finished.";
const SR_enumerationNotStarted = "Enumeration has not started. Call MoveNext.";
const SR_inputSequenceEmpty = "The input sequence was empty.";
const SR_inputSequenceTooLong = "The input sequence contains more than one element.";
const SR_keyNotFoundAlt = "An index satisfying the predicate was not found in the collection.";
const SR_notEnoughElements = "The input sequence has an insufficient number of elements.";
const SR_resetNotSupported = "Reset is not supported on this enumerator.";
function Enumerator_noReset() {
    throw new Error(SR_resetNotSupported);
}
_c = Enumerator_noReset;
function Enumerator_notStarted() {
    throw new Error(SR_enumerationNotStarted);
}
_c1 = Enumerator_notStarted;
function Enumerator_alreadyFinished() {
    throw new Error(SR_enumerationAlreadyFinished);
}
_c2 = Enumerator_alreadyFinished;
class Enumerator_Seq {
    constructor(f){
        this.f = f;
    }
    toString() {
        const xs = this;
        const maxCount = 4;
        let i = 0;
        let str = "seq [";
        const e = _utilJs.getEnumerator(xs);
        try {
            while(i < maxCount ? e["System.Collections.IEnumerator.MoveNext"]() : false){
                if (i > 0) str = str + "; ";
                str = str + _typesJs.toString(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
                i = i + 1 | 0;
            }
            if (i === maxCount) str = str + "; ...";
            return str + "]";
        } finally{
            e.Dispose();
        }
    }
    GetEnumerator() {
        const x = this;
        return x.f();
    }
    [Symbol.iterator]() {
        return _utilJs.toIterator(this.GetEnumerator());
    }
    ["System.Collections.IEnumerable.GetEnumerator"]() {
        const x = this;
        return x.f();
    }
}
function Enumerator_Seq$reflection(gen0) {
    return _reflectionJs.class_type("SeqModule.Enumerator.Seq", [
        gen0
    ], Enumerator_Seq);
}
_c3 = Enumerator_Seq$reflection;
function Enumerator_Seq_$ctor_673A07F2(f1) {
    return new Enumerator_Seq(f1);
}
_c4 = Enumerator_Seq_$ctor_673A07F2;
class Enumerator_FromFunctions$1 {
    constructor(current, next, dispose){
        this.current = current;
        this.next = next;
        this.dispose = dispose;
    }
    ["System.Collections.Generic.IEnumerator`1.get_Current"]() {
        const __ = this;
        return __.current();
    }
    ["System.Collections.IEnumerator.get_Current"]() {
        const __ = this;
        return __.current();
    }
    ["System.Collections.IEnumerator.MoveNext"]() {
        const __ = this;
        return __.next();
    }
    ["System.Collections.IEnumerator.Reset"]() {
        Enumerator_noReset();
    }
    Dispose() {
        const __ = this;
        __.dispose();
    }
}
function Enumerator_FromFunctions$1$reflection(gen0) {
    return _reflectionJs.class_type("SeqModule.Enumerator.FromFunctions`1", [
        gen0
    ], Enumerator_FromFunctions$1);
}
_c5 = Enumerator_FromFunctions$1$reflection;
function Enumerator_FromFunctions$1_$ctor_58C54629(current1, next1, dispose1) {
    return new Enumerator_FromFunctions$1(current1, next1, dispose1);
}
_c6 = Enumerator_FromFunctions$1_$ctor_58C54629;
function Enumerator_cast(e) {
    return Enumerator_FromFunctions$1_$ctor_58C54629(()=>e["System.Collections.IEnumerator.get_Current"]()
    , ()=>e["System.Collections.IEnumerator.MoveNext"]()
    , ()=>{
        if (_utilJs.isDisposable(e)) e.Dispose();
    });
}
_c7 = Enumerator_cast;
function Enumerator_concat(sources) {
    let outerOpt = void 0;
    let innerOpt = void 0;
    let started = false;
    let finished = false;
    let curr = void 0;
    const finish = ()=>{
        finished = true;
        if (innerOpt != null) {
            const inner = innerOpt;
            try {
                inner.Dispose();
            } finally{
                innerOpt = void 0;
            }
        }
        if (outerOpt != null) {
            const outer = outerOpt;
            try {
                outer.Dispose();
            } finally{
                outerOpt = void 0;
            }
        }
    };
    return Enumerator_FromFunctions$1_$ctor_58C54629(()=>{
        if (!started) Enumerator_notStarted();
        else if (finished) Enumerator_alreadyFinished();
        if (curr != null) return _optionJs.value(curr);
        else return Enumerator_alreadyFinished();
    }, ()=>{
        let copyOfStruct;
        if (!started) started = true;
        if (finished) return false;
        else {
            let res = void 0;
            while(res == null){
                const matchValue = [
                    outerOpt,
                    innerOpt
                ];
                if (matchValue[0] != null) {
                    if (matchValue[1] != null) {
                        const inner_1 = matchValue[1];
                        if (inner_1["System.Collections.IEnumerator.MoveNext"]()) {
                            curr = _optionJs.some(inner_1["System.Collections.Generic.IEnumerator`1.get_Current"]());
                            res = true;
                        } else try {
                            inner_1.Dispose();
                        } finally{
                            innerOpt = void 0;
                        }
                    } else {
                        const outer_1 = matchValue[0];
                        if (outer_1["System.Collections.IEnumerator.MoveNext"]()) {
                            const ie = outer_1["System.Collections.Generic.IEnumerator`1.get_Current"]();
                            innerOpt = (copyOfStruct = ie, _utilJs.getEnumerator(copyOfStruct));
                        } else {
                            finish();
                            res = false;
                        }
                    }
                } else outerOpt = _utilJs.getEnumerator(sources);
            }
            return _optionJs.value(res);
        }
    }, ()=>{
        if (!finished) finish();
    });
}
_c8 = Enumerator_concat;
function Enumerator_enumerateThenFinally(f1, e) {
    return Enumerator_FromFunctions$1_$ctor_58C54629(()=>e["System.Collections.Generic.IEnumerator`1.get_Current"]()
    , ()=>e["System.Collections.IEnumerator.MoveNext"]()
    , ()=>{
        try {
            e.Dispose();
        } finally{
            f1();
        }
    });
}
_c9 = Enumerator_enumerateThenFinally;
function Enumerator_generateWhileSome(openf, compute, closef) {
    let started = false;
    let curr = void 0;
    let state = _optionJs.some(openf());
    const dispose1 = ()=>{
        if (state != null) {
            const x_1 = _optionJs.value(state);
            try {
                closef(x_1);
            } finally{
                state = void 0;
            }
        }
    };
    const finish = ()=>{
        try {
            dispose1();
        } finally{
            curr = void 0;
        }
    };
    return Enumerator_FromFunctions$1_$ctor_58C54629(()=>{
        if (!started) Enumerator_notStarted();
        if (curr != null) return _optionJs.value(curr);
        else return Enumerator_alreadyFinished();
    }, ()=>{
        if (!started) started = true;
        if (state != null) {
            const s = _optionJs.value(state);
            let matchValue_1;
            try {
                matchValue_1 = compute(s);
            } catch (matchValue) {
                finish();
                throw matchValue;
            }
            if (matchValue_1 != null) {
                curr = matchValue_1;
                return true;
            } else {
                finish();
                return false;
            }
        } else return false;
    }, dispose1);
}
_c10 = Enumerator_generateWhileSome;
function Enumerator_unfold(f1, state) {
    let curr = void 0;
    let acc = state;
    return Enumerator_FromFunctions$1_$ctor_58C54629(()=>{
        if (curr != null) {
            const x = curr[0];
            const st = curr[1];
            return x;
        } else return Enumerator_notStarted();
    }, ()=>{
        curr = f1(acc);
        if (curr != null) {
            const x_1 = curr[0];
            const st_1 = curr[1];
            acc = st_1;
            return true;
        } else return false;
    }, ()=>{
    });
}
_c11 = Enumerator_unfold;
function indexNotFound() {
    throw new Error(SR_keyNotFoundAlt);
}
function checkNonNull(argName, arg) {
    if (arg == null) _fsharpCoreJs.Operators_NullArg(argName);
}
function mkSeq(f1) {
    return Enumerator_Seq_$ctor_673A07F2(f1);
}
function ofSeq(xs) {
    checkNonNull("source", xs);
    return _utilJs.getEnumerator(xs);
}
function delay(generator) {
    return mkSeq(()=>_utilJs.getEnumerator(generator())
    );
}
function concat(sources) {
    return mkSeq(()=>Enumerator_concat(sources)
    );
}
function unfold(generator, state) {
    return mkSeq(()=>Enumerator_unfold(generator, state)
    );
}
function empty() {
    return delay(()=>new Array(0)
    );
}
function singleton(x) {
    return delay(()=>_arrayJs.singleton(x)
    );
}
function ofArray(arr) {
    return arr;
}
function toArray(xs) {
    if (_utilJs.isArrayLike(xs)) return xs;
    else if (xs instanceof _listJs.FSharpList) return _listJs.toArray(xs);
    else return Array.from(xs);
}
function ofList(xs) {
    return xs;
}
function toList(xs) {
    if (_utilJs.isArrayLike(xs)) return _listJs.ofArray(xs);
    else if (xs instanceof _listJs.FSharpList) return xs;
    else return _listJs.ofSeq(xs);
}
function generate(create, compute, dispose1) {
    return mkSeq(()=>Enumerator_generateWhileSome(create, compute, dispose1)
    );
}
function generateIndexed(create, compute, dispose1) {
    return mkSeq(()=>{
        let i = -1;
        return Enumerator_generateWhileSome(create, (x)=>{
            i = i + 1 | 0;
            return compute(i, x);
        }, dispose1);
    });
}
function append(xs, ys) {
    return concat([
        xs,
        ys
    ]);
}
function cast(xs) {
    return mkSeq(()=>{
        checkNonNull("source", xs);
        return Enumerator_cast(_utilJs.getEnumerator(xs));
    });
}
function choose(chooser, xs) {
    return generate(()=>ofSeq(xs)
    , (e)=>{
        let curr = void 0;
        while(curr == null ? e["System.Collections.IEnumerator.MoveNext"]() : false)curr = chooser(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        return curr;
    }, (e_1)=>{
        e_1.Dispose();
    });
}
function compareWith(comparer, xs, ys) {
    const e1 = ofSeq(xs);
    try {
        const e2 = ofSeq(ys);
        try {
            let c = 0;
            let b1 = e1["System.Collections.IEnumerator.MoveNext"]();
            let b2 = e2["System.Collections.IEnumerator.MoveNext"]();
            while((c === 0 ? b1 : false) ? b2 : false){
                c = comparer(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]()) | 0;
                if (c === 0) {
                    b1 = e1["System.Collections.IEnumerator.MoveNext"]();
                    b2 = e2["System.Collections.IEnumerator.MoveNext"]();
                }
            }
            return (c !== 0 ? c : b1 ? 1 : b2 ? -1 : 0) | 0;
        } finally{
            e2.Dispose();
        }
    } finally{
        e1.Dispose();
    }
}
function contains(value, xs, comparer) {
    const e = ofSeq(xs);
    try {
        let found = false;
        while(!found ? e["System.Collections.IEnumerator.MoveNext"]() : false)found = comparer.Equals(value, e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        return found;
    } finally{
        e.Dispose();
    }
}
function enumerateFromFunctions(create, moveNext, current1) {
    return generate(create, (x)=>moveNext(x) ? _optionJs.some(current1(x)) : void 0
    , (x_1)=>{
        const matchValue = x_1;
        if (_utilJs.isDisposable(matchValue)) matchValue.Dispose();
    });
}
function enumerateThenFinally(source, compensation) {
    const compensation_1 = compensation;
    return mkSeq(()=>{
        try {
            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));
        } catch (matchValue) {
            compensation_1();
            throw matchValue;
        }
    });
}
function enumerateUsing(resource, source) {
    const compensation = ()=>{
        if (_utilJs.equals(resource, null)) ;
        else {
            let copyOfStruct = resource;
            copyOfStruct.Dispose();
        }
    };
    return mkSeq(()=>{
        try {
            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));
        } catch (matchValue_1) {
            compensation();
            throw matchValue_1;
        }
    });
}
function enumerateWhile(guard, xs) {
    return concat(unfold((i)=>guard() ? [
            xs,
            i + 1
        ] : void 0
    , 0));
}
function filter(f1, xs) {
    return choose((x)=>{
        if (f1(x)) return _optionJs.some(x);
        else return void 0;
    }, xs);
}
function exists(predicate, xs) {
    const e = ofSeq(xs);
    try {
        let found = false;
        while(!found ? e["System.Collections.IEnumerator.MoveNext"]() : false)found = predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        return found;
    } finally{
        e.Dispose();
    }
}
function exists2(predicate, xs, ys) {
    const e1 = ofSeq(xs);
    try {
        const e2 = ofSeq(ys);
        try {
            let found = false;
            while((!found ? e1["System.Collections.IEnumerator.MoveNext"]() : false) ? e2["System.Collections.IEnumerator.MoveNext"]() : false)found = predicate(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]());
            return found;
        } finally{
            e2.Dispose();
        }
    } finally{
        e1.Dispose();
    }
}
function exactlyOne(xs) {
    const e = ofSeq(xs);
    try {
        if (e["System.Collections.IEnumerator.MoveNext"]()) {
            const v = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
            if (e["System.Collections.IEnumerator.MoveNext"]()) throw new Error(SR_inputSequenceTooLong + "\\nParameter name: " + "source");
            else return v;
        } else throw new Error(SR_inputSequenceEmpty + "\\nParameter name: " + "source");
    } finally{
        e.Dispose();
    }
}
function tryExactlyOne(xs) {
    const e = ofSeq(xs);
    try {
        if (e["System.Collections.IEnumerator.MoveNext"]()) {
            const v = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
            return e["System.Collections.IEnumerator.MoveNext"]() ? void 0 : _optionJs.some(v);
        } else return void 0;
    } finally{
        e.Dispose();
    }
}
function tryFind(predicate, xs) {
    const e = ofSeq(xs);
    try {
        let res = void 0;
        while(res == null ? e["System.Collections.IEnumerator.MoveNext"]() : false){
            const c = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
            if (predicate(c)) res = _optionJs.some(c);
        }
        return res;
    } finally{
        e.Dispose();
    }
}
function find(predicate, xs) {
    const matchValue = tryFind(predicate, xs);
    if (matchValue == null) return indexNotFound();
    else return _optionJs.value(matchValue);
}
function tryFindBack(predicate, xs) {
    return _arrayJs.tryFindBack(predicate, toArray(xs));
}
function findBack(predicate, xs) {
    const matchValue = tryFindBack(predicate, xs);
    if (matchValue == null) return indexNotFound();
    else return _optionJs.value(matchValue);
}
function tryFindIndex(predicate, xs) {
    const e = ofSeq(xs);
    try {
        const loop = (i_mut)=>{
            loop: while(true){
                const i = i_mut;
                if (e["System.Collections.IEnumerator.MoveNext"]()) {
                    if (predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) return i;
                    else {
                        i_mut = i + 1;
                        continue loop;
                    }
                } else return void 0;
                break;
            }
        };
        return loop(0);
    } finally{
        e.Dispose();
    }
}
function findIndex(predicate, xs) {
    const matchValue = tryFindIndex(predicate, xs);
    if (matchValue == null) return indexNotFound() | 0;
    else return matchValue | 0;
}
function tryFindIndexBack(predicate, xs) {
    return _arrayJs.tryFindIndexBack(predicate, toArray(xs));
}
function findIndexBack(predicate, xs) {
    const matchValue = tryFindIndexBack(predicate, xs);
    if (matchValue == null) return indexNotFound() | 0;
    else return matchValue | 0;
}
function fold(folder, state, xs) {
    const e = ofSeq(xs);
    try {
        let acc = state;
        while(e["System.Collections.IEnumerator.MoveNext"]())acc = folder(acc, e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        return acc;
    } finally{
        e.Dispose();
    }
}
function foldBack(folder, xs, state) {
    return _arrayJs.foldBack(folder, toArray(xs), state);
}
function fold2(folder, state, xs, ys) {
    const e1 = ofSeq(xs);
    try {
        const e2 = ofSeq(ys);
        try {
            let acc = state;
            while(e1["System.Collections.IEnumerator.MoveNext"]() ? e2["System.Collections.IEnumerator.MoveNext"]() : false)acc = folder(acc, e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]());
            return acc;
        } finally{
            e2.Dispose();
        }
    } finally{
        e1.Dispose();
    }
}
function foldBack2(folder, xs, ys, state) {
    return _arrayJs.foldBack2(folder, toArray(xs), toArray(ys), state);
}
function forAll(predicate, xs) {
    return !exists((x)=>!predicate(x)
    , xs);
}
function forAll2(predicate, xs, ys) {
    return !exists2((x, y)=>!predicate(x, y)
    , xs, ys);
}
function tryHead(xs) {
    if (_utilJs.isArrayLike(xs)) return _arrayJs.tryHead(xs);
    else if (xs instanceof _listJs.FSharpList) return _listJs.tryHead(xs);
    else {
        const e = ofSeq(xs);
        try {
            return e["System.Collections.IEnumerator.MoveNext"]() ? _optionJs.some(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0;
        } finally{
            e.Dispose();
        }
    }
}
function head(xs) {
    const matchValue = tryHead(xs);
    if (matchValue == null) throw new Error(SR_inputSequenceEmpty + "\\nParameter name: " + "source");
    else return _optionJs.value(matchValue);
}
function initialize(count, f1) {
    return unfold((i)=>i < count ? [
            f1(i),
            i + 1
        ] : void 0
    , 0);
}
function initializeInfinite(f1) {
    return initialize(2147483647, f1);
}
function isEmpty(xs) {
    if (_utilJs.isArrayLike(xs)) return xs.length === 0;
    else if (xs instanceof _listJs.FSharpList) return _listJs.isEmpty(xs);
    else {
        const e = ofSeq(xs);
        try {
            return !e["System.Collections.IEnumerator.MoveNext"]();
        } finally{
            e.Dispose();
        }
    }
}
function tryItem(index, xs) {
    if (_utilJs.isArrayLike(xs)) return _arrayJs.tryItem(index, xs);
    else if (xs instanceof _listJs.FSharpList) return _listJs.tryItem(index, xs);
    else {
        const e = ofSeq(xs);
        try {
            const loop = (index_1_mut)=>{
                loop: while(true){
                    const index_1 = index_1_mut;
                    if (!e["System.Collections.IEnumerator.MoveNext"]()) return void 0;
                    else if (index_1 === 0) return _optionJs.some(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
                    else {
                        index_1_mut = index_1 - 1;
                        continue loop;
                    }
                    break;
                }
            };
            return loop(index);
        } finally{
            e.Dispose();
        }
    }
}
function item(index, xs) {
    const matchValue = tryItem(index, xs);
    if (matchValue == null) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "index");
    else return _optionJs.value(matchValue);
}
function iterate(action, xs) {
    fold((unitVar0, x)=>{
        action(x);
    }, void 0, xs);
}
function iterate2(action, xs, ys) {
    fold2((unitVar0, x, y)=>{
        action(x, y);
    }, void 0, xs, ys);
}
function iterateIndexed(action, xs) {
    fold((i, x)=>{
        action(i, x);
        return i + 1 | 0;
    }, 0, xs);
}
function iterateIndexed2(action, xs, ys) {
    fold2((i, x, y)=>{
        action(i, x, y);
        return i + 1 | 0;
    }, 0, xs, ys);
}
function tryLast(xs) {
    const e = ofSeq(xs);
    try {
        const loop = (acc_mut)=>{
            loop: while(true){
                const acc = acc_mut;
                if (!e["System.Collections.IEnumerator.MoveNext"]()) return acc;
                else {
                    acc_mut = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
                    continue loop;
                }
                break;
            }
        };
        return e["System.Collections.IEnumerator.MoveNext"]() ? _optionJs.some(loop(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;
    } finally{
        e.Dispose();
    }
}
function last(xs) {
    const matchValue = tryLast(xs);
    if (matchValue == null) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "source");
    else return _optionJs.value(matchValue);
}
function length(xs) {
    if (_utilJs.isArrayLike(xs)) return xs.length | 0;
    else if (xs instanceof _listJs.FSharpList) return _listJs.length(xs) | 0;
    else {
        const e = ofSeq(xs);
        try {
            let count = 0;
            while(e["System.Collections.IEnumerator.MoveNext"]())count = count + 1 | 0;
            return count | 0;
        } finally{
            e.Dispose();
        }
    }
}
function map(mapping, xs) {
    return generate(()=>ofSeq(xs)
    , (e)=>e["System.Collections.IEnumerator.MoveNext"]() ? _optionJs.some(mapping(e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0
    , (e_1)=>{
        e_1.Dispose();
    });
}
function mapIndexed(mapping, xs) {
    return generateIndexed(()=>ofSeq(xs)
    , (i, e)=>e["System.Collections.IEnumerator.MoveNext"]() ? _optionJs.some(mapping(i, e["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0
    , (e_1)=>{
        e_1.Dispose();
    });
}
function indexed(xs) {
    return mapIndexed((i, x)=>[
            i,
            x
        ]
    , xs);
}
function map2(mapping, xs, ys) {
    return generate(()=>[
            ofSeq(xs),
            ofSeq(ys)
        ]
    , (tupledArg)=>{
        const e1 = tupledArg[0];
        const e2 = tupledArg[1];
        return (e1["System.Collections.IEnumerator.MoveNext"]() ? e2["System.Collections.IEnumerator.MoveNext"]() : false) ? _optionJs.some(mapping(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;
    }, (tupledArg_1)=>{
        try {
            tupledArg_1[0].Dispose();
        } finally{
            tupledArg_1[1].Dispose();
        }
    });
}
function mapIndexed2(mapping, xs, ys) {
    return generateIndexed(()=>[
            ofSeq(xs),
            ofSeq(ys)
        ]
    , (i, tupledArg)=>{
        const e1 = tupledArg[0];
        const e2 = tupledArg[1];
        return (e1["System.Collections.IEnumerator.MoveNext"]() ? e2["System.Collections.IEnumerator.MoveNext"]() : false) ? _optionJs.some(mapping(i, e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;
    }, (tupledArg_1)=>{
        try {
            tupledArg_1[0].Dispose();
        } finally{
            tupledArg_1[1].Dispose();
        }
    });
}
function map3(mapping, xs, ys, zs) {
    return generate(()=>[
            ofSeq(xs),
            ofSeq(ys),
            ofSeq(zs)
        ]
    , (tupledArg)=>{
        const e1 = tupledArg[0];
        const e2 = tupledArg[1];
        const e3 = tupledArg[2];
        return ((e1["System.Collections.IEnumerator.MoveNext"]() ? e2["System.Collections.IEnumerator.MoveNext"]() : false) ? e3["System.Collections.IEnumerator.MoveNext"]() : false) ? _optionJs.some(mapping(e1["System.Collections.Generic.IEnumerator`1.get_Current"](), e2["System.Collections.Generic.IEnumerator`1.get_Current"](), e3["System.Collections.Generic.IEnumerator`1.get_Current"]())) : void 0;
    }, (tupledArg_1)=>{
        try {
            tupledArg_1[0].Dispose();
        } finally{
            try {
                tupledArg_1[1].Dispose();
            } finally{
                tupledArg_1[2].Dispose();
            }
        }
    });
}
function readOnly(xs) {
    checkNonNull("source", xs);
    return map((x)=>x
    , xs);
}
function cache(xs) {
    let cached = false;
    const xsCache = [];
    return delay(()=>{
        if (!cached) {
            cached = true;
            return map((x)=>{
                xsCache.push(x);
                return x;
            }, xs);
        } else return xsCache;
    });
}
function allPairs(xs, ys) {
    const ysCache = cache(ys);
    return delay(()=>concat(map((x)=>map((y)=>[
                    x,
                    y
                ]
            , ysCache)
        , xs))
    );
}
function mapFold(mapping, state, xs) {
    const patternInput = _arrayJs.mapFold(mapping, state, toArray(xs));
    return [
        readOnly(patternInput[0]),
        patternInput[1]
    ];
}
function mapFoldBack(mapping, xs, state) {
    const patternInput = _arrayJs.mapFoldBack(mapping, toArray(xs), state);
    return [
        readOnly(patternInput[0]),
        patternInput[1]
    ];
}
function tryPick(chooser, xs) {
    const e = ofSeq(xs);
    try {
        let res = void 0;
        while(res == null ? e["System.Collections.IEnumerator.MoveNext"]() : false)res = chooser(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        return res;
    } finally{
        e.Dispose();
    }
}
function pick(chooser, xs) {
    const matchValue = tryPick(chooser, xs);
    if (matchValue == null) return indexNotFound();
    else return _optionJs.value(matchValue);
}
function reduce(folder, xs) {
    const e = ofSeq(xs);
    try {
        const loop = (acc_mut)=>{
            loop: while(true){
                const acc = acc_mut;
                if (e["System.Collections.IEnumerator.MoveNext"]()) {
                    acc_mut = folder(acc, e["System.Collections.Generic.IEnumerator`1.get_Current"]());
                    continue loop;
                } else return acc;
                break;
            }
        };
        if (e["System.Collections.IEnumerator.MoveNext"]()) return loop(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
        else throw new Error(SR_inputSequenceEmpty);
    } finally{
        e.Dispose();
    }
}
function reduceBack(folder, xs) {
    const arr = toArray(xs);
    if (arr.length > 0) return arr.reduceRight(folder);
    else throw new Error(SR_inputSequenceEmpty);
}
function replicate(n, x) {
    return initialize(n, (_arg1)=>x
    );
}
function reverse(xs) {
    return delay(()=>ofArray(_arrayJs.reverse(toArray(xs)))
    );
}
function scan(folder, state, xs) {
    return delay(()=>{
        let acc = state;
        return concat([
            singleton(state),
            map((x)=>{
                acc = folder(acc, x);
                return acc;
            }, xs)
        ]);
    });
}
function scanBack(folder, xs, state) {
    return delay(()=>ofArray(_arrayJs.scanBack(folder, toArray(xs), state))
    );
}
function skip(count, xs) {
    return mkSeq(()=>{
        const e = ofSeq(xs);
        try {
            for(let i = 1; i <= count; i++){
                if (!e["System.Collections.IEnumerator.MoveNext"]()) throw new Error(SR_notEnoughElements + "\\nParameter name: " + "source");
            }
            return Enumerator_enumerateThenFinally(()=>{
            }, e);
        } catch (matchValue) {
            e.Dispose();
            throw matchValue;
        }
    });
}
function skipWhile(predicate, xs) {
    return delay(()=>{
        let skipped = true;
        return filter((x)=>{
            if (skipped) skipped = predicate(x);
            return !skipped;
        }, xs);
    });
}
function tail(xs) {
    return skip(1, xs);
}
function take(count, xs) {
    return generateIndexed(()=>ofSeq(xs)
    , (i, e)=>{
        if (i < count) {
            if (e["System.Collections.IEnumerator.MoveNext"]()) return _optionJs.some(e["System.Collections.Generic.IEnumerator`1.get_Current"]());
            else throw new Error(SR_notEnoughElements + "\\nParameter name: " + "source");
        } else return void 0;
    }, (e_1)=>{
        e_1.Dispose();
    });
}
function takeWhile(predicate, xs) {
    return generate(()=>ofSeq(xs)
    , (e)=>(e["System.Collections.IEnumerator.MoveNext"]() ? predicate(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : false) ? _optionJs.some(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0
    , (e_1)=>{
        e_1.Dispose();
    });
}
function truncate(count, xs) {
    return generateIndexed(()=>ofSeq(xs)
    , (i, e)=>(i < count ? e["System.Collections.IEnumerator.MoveNext"]() : false) ? _optionJs.some(e["System.Collections.Generic.IEnumerator`1.get_Current"]()) : void 0
    , (e_1)=>{
        e_1.Dispose();
    });
}
function zip(xs, ys) {
    return map2((x, y)=>[
            x,
            y
        ]
    , xs, ys);
}
function zip3(xs, ys, zs) {
    return map3((x, y, z)=>[
            x,
            y,
            z
        ]
    , xs, ys, zs);
}
function collect(mapping, xs) {
    return delay(()=>concat(map(mapping, xs))
    );
}
function where(predicate, xs) {
    return filter(predicate, xs);
}
function pairwise(xs) {
    return delay(()=>ofArray(_arrayJs.pairwise(toArray(xs)))
    );
}
function splitInto(chunks, xs) {
    return delay(()=>ofArray(_arrayJs.map((arr)=>ofArray(arr)
        , _arrayJs.splitInto(chunks, toArray(xs))))
    );
}
function windowed(windowSize, xs) {
    return delay(()=>ofArray(_arrayJs.map((arr)=>ofArray(arr)
        , _arrayJs.windowed(windowSize, toArray(xs))))
    );
}
function transpose(xss) {
    return delay(()=>ofArray(_arrayJs.map((arr)=>ofArray(arr)
        , _arrayJs.transpose(_arrayJs.map((xs_1)=>toArray(xs_1)
        , toArray(xss)))))
    );
}
function sortWith(comparer, xs) {
    return delay(()=>{
        const arr = toArray(xs);
        arr.sort(comparer);
        return ofArray(arr);
    });
}
function sort(xs, comparer) {
    return sortWith((x, y)=>comparer.Compare(x, y)
    , xs);
}
function sortBy(projection, xs, comparer) {
    return sortWith((x, y)=>comparer.Compare(projection(x), projection(y))
    , xs);
}
function sortDescending(xs, comparer) {
    return sortWith((x, y)=>comparer.Compare(x, y) * -1
    , xs);
}
function sortByDescending(projection, xs, comparer) {
    return sortWith((x, y)=>comparer.Compare(projection(x), projection(y)) * -1
    , xs);
}
function sum(xs, adder) {
    return fold((acc, x)=>adder.Add(acc, x)
    , adder.GetZero(), xs);
}
function sumBy(f1, xs, adder) {
    return fold((acc, x)=>adder.Add(acc, f1(x))
    , adder.GetZero(), xs);
}
function maxBy(projection, xs, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? y : x
    , xs);
}
function max(xs, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? y : x
    , xs);
}
function minBy(projection, xs, comparer) {
    return reduce((x, y)=>comparer.Compare(projection(y), projection(x)) > 0 ? x : y
    , xs);
}
function min(xs, comparer) {
    return reduce((x, y)=>comparer.Compare(y, x) > 0 ? x : y
    , xs);
}
function average(xs, averager) {
    let count = 0;
    const total = fold((acc, x)=>{
        count = count + 1 | 0;
        return averager.Add(acc, x);
    }, averager.GetZero(), xs);
    if (count === 0) throw new Error("The input sequence was empty\\nParameter name: xs");
    else return averager.DivideByInt(total, count);
}
function averageBy(f1, xs, averager) {
    let count = 0;
    const total = fold((acc, x)=>{
        count = count + 1 | 0;
        return averager.Add(acc, f1(x));
    }, averager.GetZero(), xs);
    if (count === 0) throw new Error("The input sequence was empty\\nParameter name: xs");
    else return averager.DivideByInt(total, count);
}
function permute(f1, xs) {
    return delay(()=>ofArray(_arrayJs.permute(f1, toArray(xs)))
    );
}
function chunkBySize(chunkSize, xs) {
    return delay(()=>ofArray(_arrayJs.map((arr)=>ofArray(arr)
        , _arrayJs.chunkBySize(chunkSize, toArray(xs))))
    );
}
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;
$RefreshReg$(_c, "Enumerator_noReset");
$RefreshReg$(_c1, "Enumerator_notStarted");
$RefreshReg$(_c2, "Enumerator_alreadyFinished");
$RefreshReg$(_c3, "Enumerator_Seq$reflection");
$RefreshReg$(_c4, "Enumerator_Seq_$ctor_673A07F2");
$RefreshReg$(_c5, "Enumerator_FromFunctions$1$reflection");
$RefreshReg$(_c6, "Enumerator_FromFunctions$1_$ctor_58C54629");
$RefreshReg$(_c7, "Enumerator_cast");
$RefreshReg$(_c8, "Enumerator_concat");
$RefreshReg$(_c9, "Enumerator_enumerateThenFinally");
$RefreshReg$(_c10, "Enumerator_generateWhileSome");
$RefreshReg$(_c11, "Enumerator_unfold");

},{"./Util.js":"e4VZ7","./Types.js":"7IOW0","./Reflection.js":"c0YT4","./Option.js":"gHWVf","./FSharp.Core.js":"mbdRP","./Array.js":"dl8am","./List.js":"3UB49","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mbdRP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LanguagePrimitives_GenericEqualityComparer", ()=>LanguagePrimitives_GenericEqualityComparer
);
parcelHelpers.export(exports, "LanguagePrimitives_GenericEqualityERComparer", ()=>LanguagePrimitives_GenericEqualityERComparer
);
parcelHelpers.export(exports, "LanguagePrimitives_FastGenericComparer", ()=>LanguagePrimitives_FastGenericComparer
);
parcelHelpers.export(exports, "LanguagePrimitives_FastGenericComparerFromTable", ()=>LanguagePrimitives_FastGenericComparerFromTable
);
parcelHelpers.export(exports, "LanguagePrimitives_FastGenericEqualityComparer", ()=>LanguagePrimitives_FastGenericEqualityComparer
);
parcelHelpers.export(exports, "LanguagePrimitives_FastGenericEqualityComparerFromTable", ()=>LanguagePrimitives_FastGenericEqualityComparerFromTable
);
parcelHelpers.export(exports, "Operators_Failure", ()=>Operators_Failure
);
parcelHelpers.export(exports, "Operators_FailurePattern", ()=>Operators_FailurePattern
);
parcelHelpers.export(exports, "Operators_NullArg", ()=>Operators_NullArg
);
parcelHelpers.export(exports, "Operators_Using", ()=>Operators_Using
);
parcelHelpers.export(exports, "Operators_Lock", ()=>Operators_Lock
);
parcelHelpers.export(exports, "ExtraTopLevelOperators_LazyPattern", ()=>ExtraTopLevelOperators_LazyPattern
);
parcelHelpers.export(exports, "PrintfModule_PrintFormatToStringBuilderThen", ()=>PrintfModule_PrintFormatToStringBuilderThen
);
parcelHelpers.export(exports, "PrintfModule_PrintFormatToStringBuilder", ()=>PrintfModule_PrintFormatToStringBuilder
);
var _utilJs = require("./Util.js");
var _fsharpCollectionsJs = require("./FSharp.Collections.js");
var _systemTextJs = require("./System.Text.js");
const LanguagePrimitives_GenericEqualityComparer = {
    ["System.Collections.IEqualityComparer.Equals541DA560"] (x, y) {
        return _utilJs.equals(x, y);
    },
    ["System.Collections.IEqualityComparer.GetHashCode4E60E31B"] (x_1) {
        return _utilJs.structuralHash(x_1);
    }
};
const LanguagePrimitives_GenericEqualityERComparer = {
    ["System.Collections.IEqualityComparer.Equals541DA560"] (x, y) {
        return _utilJs.equals(x, y);
    },
    ["System.Collections.IEqualityComparer.GetHashCode4E60E31B"] (x_1) {
        return _utilJs.structuralHash(x_1);
    }
};
function LanguagePrimitives_FastGenericComparer() {
    return _fsharpCollectionsJs.ComparisonIdentity_Structural();
}
_c = LanguagePrimitives_FastGenericComparer;
function LanguagePrimitives_FastGenericComparerFromTable() {
    return _fsharpCollectionsJs.ComparisonIdentity_Structural();
}
_c1 = LanguagePrimitives_FastGenericComparerFromTable;
function LanguagePrimitives_FastGenericEqualityComparer() {
    return _fsharpCollectionsJs.HashIdentity_Structural();
}
_c2 = LanguagePrimitives_FastGenericEqualityComparer;
function LanguagePrimitives_FastGenericEqualityComparerFromTable() {
    return _fsharpCollectionsJs.HashIdentity_Structural();
}
_c3 = LanguagePrimitives_FastGenericEqualityComparerFromTable;
function Operators_Failure(message) {
    return new Error(message);
}
_c4 = Operators_Failure;
function Operators_FailurePattern(exn) {
    return exn.message;
}
_c5 = Operators_FailurePattern;
function Operators_NullArg(x) {
    throw new Error(x);
}
_c6 = Operators_NullArg;
function Operators_Using(resource, action) {
    try {
        return action(resource);
    } finally{
        if (_utilJs.equals(resource, null)) ;
        else resource.Dispose();
    }
}
_c7 = Operators_Using;
function Operators_Lock(_lockObj, action) {
    return action();
}
_c8 = Operators_Lock;
function ExtraTopLevelOperators_LazyPattern(input) {
    return input.Value;
}
_c9 = ExtraTopLevelOperators_LazyPattern;
function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {
    return format.cont((s)=>{
        _systemTextJs.StringBuilder__Append_Z721C83C5(builder, s);
        return continuation();
    });
}
_c10 = PrintfModule_PrintFormatToStringBuilderThen;
function PrintfModule_PrintFormatToStringBuilder(builder, format) {
    return PrintfModule_PrintFormatToStringBuilderThen(()=>{
    }, builder, format);
}
_c11 = PrintfModule_PrintFormatToStringBuilder;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;
$RefreshReg$(_c, "LanguagePrimitives_FastGenericComparer");
$RefreshReg$(_c1, "LanguagePrimitives_FastGenericComparerFromTable");
$RefreshReg$(_c2, "LanguagePrimitives_FastGenericEqualityComparer");
$RefreshReg$(_c3, "LanguagePrimitives_FastGenericEqualityComparerFromTable");
$RefreshReg$(_c4, "Operators_Failure");
$RefreshReg$(_c5, "Operators_FailurePattern");
$RefreshReg$(_c6, "Operators_NullArg");
$RefreshReg$(_c7, "Operators_Using");
$RefreshReg$(_c8, "Operators_Lock");
$RefreshReg$(_c9, "ExtraTopLevelOperators_LazyPattern");
$RefreshReg$(_c10, "PrintfModule_PrintFormatToStringBuilderThen");
$RefreshReg$(_c11, "PrintfModule_PrintFormatToStringBuilder");

},{"./Util.js":"e4VZ7","./FSharp.Collections.js":"hSWqR","./System.Text.js":"cziaE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hSWqR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HashIdentity_FromFunctions", ()=>HashIdentity_FromFunctions
);
parcelHelpers.export(exports, "HashIdentity_Structural", ()=>HashIdentity_Structural
);
parcelHelpers.export(exports, "HashIdentity_Reference", ()=>HashIdentity_Reference
);
parcelHelpers.export(exports, "ComparisonIdentity_FromFunction", ()=>ComparisonIdentity_FromFunction
);
parcelHelpers.export(exports, "ComparisonIdentity_Structural", ()=>ComparisonIdentity_Structural
);
var _utilJs = require("./Util.js");
function HashIdentity_FromFunctions(hash, eq) {
    return {
        Equals (x, y) {
            return eq(x, y);
        },
        GetHashCode (x_1) {
            return hash(x_1);
        }
    };
}
_c = HashIdentity_FromFunctions;
function HashIdentity_Structural() {
    return HashIdentity_FromFunctions((obj)=>_utilJs.structuralHash(obj)
    , (e1, e2)=>_utilJs.equals(e1, e2)
    );
}
_c1 = HashIdentity_Structural;
function HashIdentity_Reference() {
    return HashIdentity_FromFunctions((obj)=>_utilJs.physicalHash(obj)
    , (e1, e2)=>e1 === e2
    );
}
_c2 = HashIdentity_Reference;
function ComparisonIdentity_FromFunction(comparer) {
    return {
        Compare (x, y) {
            return comparer(x, y);
        }
    };
}
_c3 = ComparisonIdentity_FromFunction;
function ComparisonIdentity_Structural() {
    return ComparisonIdentity_FromFunction((e1, e2)=>_utilJs.compare(e1, e2)
    );
}
_c4 = ComparisonIdentity_Structural;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "HashIdentity_FromFunctions");
$RefreshReg$(_c1, "HashIdentity_Structural");
$RefreshReg$(_c2, "HashIdentity_Reference");
$RefreshReg$(_c3, "ComparisonIdentity_FromFunction");
$RefreshReg$(_c4, "ComparisonIdentity_Structural");

},{"./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cziaE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringBuilder", ()=>StringBuilder
);
parcelHelpers.export(exports, "StringBuilder$reflection", ()=>StringBuilder$reflection
);
parcelHelpers.export(exports, "StringBuilder_$ctor_Z18115A39", ()=>StringBuilder_$ctor_Z18115A39
);
parcelHelpers.export(exports, "StringBuilder_$ctor_Z524259A4", ()=>StringBuilder_$ctor_Z524259A4
);
parcelHelpers.export(exports, "StringBuilder_$ctor_Z721C83C5", ()=>StringBuilder_$ctor_Z721C83C5
);
parcelHelpers.export(exports, "StringBuilder_$ctor", ()=>StringBuilder_$ctor
);
parcelHelpers.export(exports, "StringBuilder__Append_Z721C83C5", ()=>StringBuilder__Append_Z721C83C5
);
parcelHelpers.export(exports, "StringBuilder__Append_244C7CD6", ()=>StringBuilder__Append_244C7CD6
);
parcelHelpers.export(exports, "StringBuilder__Append_Z524259A4", ()=>StringBuilder__Append_Z524259A4
);
parcelHelpers.export(exports, "StringBuilder__Append_5E38073B", ()=>StringBuilder__Append_5E38073B
);
parcelHelpers.export(exports, "StringBuilder__Append_Z1FBCCD16", ()=>StringBuilder__Append_Z1FBCCD16
);
parcelHelpers.export(exports, "StringBuilder__Append_4E60E31B", ()=>StringBuilder__Append_4E60E31B
);
parcelHelpers.export(exports, "StringBuilder__Append_695F1130", ()=>StringBuilder__Append_695F1130
);
parcelHelpers.export(exports, "StringBuilder__Append_43A65C09", ()=>StringBuilder__Append_43A65C09
);
parcelHelpers.export(exports, "StringBuilder__AppendFormat_433E080", ()=>StringBuilder__AppendFormat_433E080
);
parcelHelpers.export(exports, "StringBuilder__AppendLine", ()=>StringBuilder__AppendLine
);
parcelHelpers.export(exports, "StringBuilder__AppendLine_Z721C83C5", ()=>StringBuilder__AppendLine_Z721C83C5
);
parcelHelpers.export(exports, "StringBuilder__get_Length", ()=>StringBuilder__get_Length
);
parcelHelpers.export(exports, "StringBuilder__ToString_Z37302880", ()=>StringBuilder__ToString_Z37302880
);
parcelHelpers.export(exports, "StringBuilder__Clear", ()=>StringBuilder__Clear
);
var _stringJs = require("./String.js");
var _reflectionJs = require("./Reflection.js");
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
class StringBuilder {
    constructor(value, capacity){
        this.buf = [];
        if (!_stringJs.isNullOrEmpty(value)) this.buf.push(value);
    }
    toString() {
        const __ = this;
        return _stringJs.join("", __.buf);
    }
}
function StringBuilder$reflection() {
    return _reflectionJs.class_type("System.Text.StringBuilder", void 0, StringBuilder);
}
_c = StringBuilder$reflection;
function StringBuilder_$ctor_Z18115A39(value1, capacity1) {
    return new StringBuilder(value1, capacity1);
}
_c1 = StringBuilder_$ctor_Z18115A39;
function StringBuilder_$ctor_Z524259A4(capacity1) {
    return StringBuilder_$ctor_Z18115A39("", capacity1);
}
_c2 = StringBuilder_$ctor_Z524259A4;
function StringBuilder_$ctor_Z721C83C5(value1) {
    return StringBuilder_$ctor_Z18115A39(value1, 16);
}
_c3 = StringBuilder_$ctor_Z721C83C5;
function StringBuilder_$ctor() {
    return StringBuilder_$ctor_Z18115A39("", 16);
}
_c4 = StringBuilder_$ctor;
function StringBuilder__Append_Z721C83C5(x, s) {
    x.buf.push(s);
    return x;
}
_c5 = StringBuilder__Append_Z721C83C5;
function StringBuilder__Append_244C7CD6(x, c) {
    x.buf.push(c);
    return x;
}
_c6 = StringBuilder__Append_244C7CD6;
function StringBuilder__Append_Z524259A4(x, o) {
    x.buf.push(_utilJs.int32ToString(o));
    return x;
}
_c7 = StringBuilder__Append_Z524259A4;
function StringBuilder__Append_5E38073B(x, o) {
    x.buf.push(o.toString());
    return x;
}
_c8 = StringBuilder__Append_5E38073B;
function StringBuilder__Append_Z1FBCCD16(x, o) {
    x.buf.push(_typesJs.toString(o));
    return x;
}
_c9 = StringBuilder__Append_Z1FBCCD16;
function StringBuilder__Append_4E60E31B(x, o) {
    x.buf.push(_typesJs.toString(o));
    return x;
}
_c10 = StringBuilder__Append_4E60E31B;
function StringBuilder__Append_695F1130(x, cs) {
    x.buf.push(cs.join(''));
    return x;
}
_c11 = StringBuilder__Append_695F1130;
function StringBuilder__Append_43A65C09(x, s) {
    x.buf.push(_typesJs.toString(s));
    return x;
}
_c12 = StringBuilder__Append_43A65C09;
function StringBuilder__AppendFormat_433E080(x, fmt, o) {
    x.buf.push(_stringJs.format(fmt, o));
    return x;
}
_c13 = StringBuilder__AppendFormat_433E080;
function StringBuilder__AppendLine(x) {
    x.buf.push("\n");
    return x;
}
_c14 = StringBuilder__AppendLine;
function StringBuilder__AppendLine_Z721C83C5(x, s) {
    x.buf.push(s);
    x.buf.push("\n");
    return x;
}
_c15 = StringBuilder__AppendLine_Z721C83C5;
function StringBuilder__get_Length(x) {
    let len = 0;
    for(let i = x.buf.length - 1; i >= 0; i--)len = len + x.buf[i].length | 0;
    return len | 0;
}
_c16 = StringBuilder__get_Length;
function StringBuilder__ToString_Z37302880(x, firstIndex, length) {
    return _stringJs.substring(_typesJs.toString(x), firstIndex, length);
}
_c17 = StringBuilder__ToString_Z37302880;
function StringBuilder__Clear(x) {
    _utilJs.clear(x.buf);
    return x;
}
_c18 = StringBuilder__Clear;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;
$RefreshReg$(_c, "StringBuilder$reflection");
$RefreshReg$(_c1, "StringBuilder_$ctor_Z18115A39");
$RefreshReg$(_c2, "StringBuilder_$ctor_Z524259A4");
$RefreshReg$(_c3, "StringBuilder_$ctor_Z721C83C5");
$RefreshReg$(_c4, "StringBuilder_$ctor");
$RefreshReg$(_c5, "StringBuilder__Append_Z721C83C5");
$RefreshReg$(_c6, "StringBuilder__Append_244C7CD6");
$RefreshReg$(_c7, "StringBuilder__Append_Z524259A4");
$RefreshReg$(_c8, "StringBuilder__Append_5E38073B");
$RefreshReg$(_c9, "StringBuilder__Append_Z1FBCCD16");
$RefreshReg$(_c10, "StringBuilder__Append_4E60E31B");
$RefreshReg$(_c11, "StringBuilder__Append_695F1130");
$RefreshReg$(_c12, "StringBuilder__Append_43A65C09");
$RefreshReg$(_c13, "StringBuilder__AppendFormat_433E080");
$RefreshReg$(_c14, "StringBuilder__AppendLine");
$RefreshReg$(_c15, "StringBuilder__AppendLine_Z721C83C5");
$RefreshReg$(_c16, "StringBuilder__get_Length");
$RefreshReg$(_c17, "StringBuilder__ToString_Z37302880");
$RefreshReg$(_c18, "StringBuilder__Clear");

},{"./String.js":"baXBU","./Reflection.js":"c0YT4","./Util.js":"e4VZ7","./Types.js":"7IOW0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hd0qz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeRangeStepFunction", ()=>makeRangeStepFunction
);
parcelHelpers.export(exports, "integralRangeStep", ()=>integralRangeStep
);
parcelHelpers.export(exports, "rangeBigInt", ()=>rangeBigInt
);
parcelHelpers.export(exports, "rangeDecimal", ()=>rangeDecimal
);
parcelHelpers.export(exports, "rangeDouble", ()=>rangeDouble
);
parcelHelpers.export(exports, "rangeInt64", ()=>rangeInt64
);
parcelHelpers.export(exports, "rangeUInt64", ()=>rangeUInt64
);
parcelHelpers.export(exports, "rangeChar", ()=>rangeChar
);
var _utilJs = require("./Util.js");
var _seqJs = require("./Seq.js");
var _bigIntJs = require("./BigInt.js");
var _decimalJs = require("./Decimal.js");
var _longJs = require("./Long.js");
function makeRangeStepFunction(step, stop, zero, add) {
    const stepComparedWithZero = _utilJs.compare(step, zero) | 0;
    if (stepComparedWithZero === 0) throw new Error("The step of a range cannot be zero");
    const stepGreaterThanZero = stepComparedWithZero > 0;
    return (x)=>{
        const comparedWithLast = _utilJs.compare(x, stop) | 0;
        return ((stepGreaterThanZero ? comparedWithLast <= 0 : false) ? true : !stepGreaterThanZero ? comparedWithLast >= 0 : false) ? [
            x,
            add(x, step)
        ] : void 0;
    };
}
function integralRangeStep(start, step, stop, zero, add) {
    const stepFn = makeRangeStepFunction(step, stop, zero, add);
    return _seqJs.delay(()=>_seqJs.unfold(stepFn, start)
    );
}
function rangeBigInt(start, step, stop) {
    return integralRangeStep(start, step, stop, _bigIntJs.fromZero(), (x, y)=>_bigIntJs.op_Addition(x, y)
    );
}
function rangeDecimal(start, step, stop) {
    return integralRangeStep(start, step, stop, _decimalJs.fromParts(0, 0, 0, false, 0), (x, y)=>_decimalJs.op_Addition(x, y)
    );
}
function rangeDouble(start, step, stop) {
    return integralRangeStep(start, step, stop, 0, (x, y)=>x + y
    );
}
function rangeInt64(start, step, stop) {
    return integralRangeStep(start, step, stop, _longJs.fromBits(0, 0, false), (x, y)=>_longJs.op_Addition(x, y)
    );
}
function rangeUInt64(start, step, stop) {
    return integralRangeStep(start, step, stop, _longJs.fromBits(0, 0, true), (x, y)=>_longJs.op_Addition(x, y)
    );
}
function rangeChar(start, stop) {
    const intStop = stop.charCodeAt(0) | 0;
    return _seqJs.delay(()=>_seqJs.unfold((c)=>{
            if (c <= intStop) return [
                String.fromCharCode(c),
                c + 1
            ];
            else return void 0;
        }, start.charCodeAt(0))
    );
}

},{"./Util.js":"e4VZ7","./Seq.js":"app8U","./BigInt.js":"6rX6Q","./Decimal.js":"dVl3F","./Long.js":"2dOzy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6rX6Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBigInt", ()=>isBigInt
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "divRem", ()=>divRem
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "greatestCommonDivisor", ()=>greatestCommonDivisor
);
parcelHelpers.export(exports, "pow", ()=>pow
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "zero", ()=>zero
);
parcelHelpers.export(exports, "one", ()=>one
);
parcelHelpers.export(exports, "two", ()=>two
);
parcelHelpers.export(exports, "fromString", ()=>fromString
);
parcelHelpers.export(exports, "fromZero", ()=>fromZero
);
parcelHelpers.export(exports, "fromOne", ()=>fromOne
);
parcelHelpers.export(exports, "fromInt64", ()=>fromInt64
);
parcelHelpers.export(exports, "fromInt32", ()=>fromInt32
);
parcelHelpers.export(exports, "toSByte", ()=>toSByte
);
parcelHelpers.export(exports, "toByte", ()=>toByte
);
parcelHelpers.export(exports, "toInt16", ()=>toInt16
);
parcelHelpers.export(exports, "toUInt16", ()=>toUInt16
);
parcelHelpers.export(exports, "toInt32", ()=>toInt32
);
parcelHelpers.export(exports, "toUInt32", ()=>toUInt32
);
parcelHelpers.export(exports, "toInt64", ()=>toInt64
);
parcelHelpers.export(exports, "toUInt64", ()=>toUInt64
);
parcelHelpers.export(exports, "toSingle", ()=>toSingle
);
parcelHelpers.export(exports, "toDouble", ()=>toDouble
);
parcelHelpers.export(exports, "toDecimal", ()=>toDecimal
);
parcelHelpers.export(exports, "sign", ()=>sign
);
parcelHelpers.export(exports, "isZero", ()=>isZero
);
parcelHelpers.export(exports, "isOne", ()=>isOne
);
parcelHelpers.export(exports, "hash", ()=>hash
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "get_Zero", ()=>get_Zero
);
parcelHelpers.export(exports, "get_One", ()=>get_One
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "op_Multiply", ()=>op_Multiply
);
parcelHelpers.export(exports, "op_Division", ()=>op_Division
);
parcelHelpers.export(exports, "op_Modulus", ()=>op_Modulus
);
parcelHelpers.export(exports, "op_UnaryNegation", ()=>op_UnaryNegation
);
parcelHelpers.export(exports, "op_UnaryPlus", ()=>op_UnaryPlus
);
parcelHelpers.export(exports, "op_RightShift", ()=>op_RightShift
);
parcelHelpers.export(exports, "op_LeftShift", ()=>op_LeftShift
);
parcelHelpers.export(exports, "op_BitwiseAnd", ()=>op_BitwiseAnd
);
parcelHelpers.export(exports, "op_BitwiseOr", ()=>op_BitwiseOr
);
parcelHelpers.export(exports, "op_ExclusiveOr", ()=>op_ExclusiveOr
);
parcelHelpers.export(exports, "op_LessThan", ()=>op_LessThan
);
parcelHelpers.export(exports, "op_LessThanOrEqual", ()=>op_LessThanOrEqual
);
parcelHelpers.export(exports, "op_GreaterThan", ()=>op_GreaterThan
);
parcelHelpers.export(exports, "op_GreaterThanOrEqual", ()=>op_GreaterThanOrEqual
);
parcelHelpers.export(exports, "op_Equality", ()=>op_Equality
);
parcelHelpers.export(exports, "op_Inequality", ()=>op_Inequality
);
parcelHelpers.export(exports, "toByteArray", ()=>toByteArray
);
parcelHelpers.export(exports, "fromByteArray", ()=>fromByteArray
);
var _zJs = require("./BigInt/z.js");
var _longJs = require("./Long.js");
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
var _listJs = require("./List.js");
var _arrayJs = require("./Array.js");
function isBigInt(x) {
    return x instanceof _zJs.BigInteger;
}
function tryParse(str, res) {
    try {
        res.contents = _zJs.BigInteger_Parse_Z721C83C5(str);
        return true;
    } catch (matchValue) {
        return false;
    }
}
function divRem(x, y, remainder) {
    const patternInput = _zJs.BigInteger_DivRem_56F059C0(x, y);
    remainder.contents = patternInput[1];
    return patternInput[0];
}
function parse(arg00) {
    return _zJs.BigInteger_Parse_Z721C83C5(arg00);
}
function greatestCommonDivisor(arg00, arg01) {
    return _zJs.BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);
}
function pow(arg00, arg01) {
    return _zJs.BigInteger_Pow_62E082A2(arg00, arg01);
}
function abs(arg00) {
    return _zJs.BigInteger_Abs_Z665282C2(arg00);
}
const zero = _zJs.BigInteger_get_Zero();
const one = _zJs.BigInteger_get_One();
const two = _zJs.BigInteger_get_Two();
function fromString(s) {
    return _zJs.BigInteger_Parse_Z721C83C5(s);
}
function fromZero() {
    return _zJs.BigInteger_get_Zero();
}
function fromOne() {
    return _zJs.BigInteger_get_One();
}
function fromInt64(i) {
    return _zJs.BigInteger_$ctor_Z524259C1(i);
}
function fromInt32(i) {
    if (i > 2147483647) return _zJs.BigInteger_$ctor_Z524259C1(_longJs.fromInteger(i, false, 6));
    else return _zJs.BigInteger_$ctor_Z524259A4(i);
}
function toSByte(x) {
    return _zJs.BigInteger__get_ToSByte(x);
}
function toByte(x) {
    return _zJs.BigInteger__get_ToByte(x);
}
function toInt16(x) {
    return _zJs.BigInteger__get_ToInt16(x);
}
function toUInt16(x) {
    return _zJs.BigInteger__get_ToUInt16(x);
}
function toInt32(x) {
    return _zJs.BigInteger__get_ToInt32(x);
}
function toUInt32(x) {
    return _zJs.BigInteger__get_ToUInt32(x);
}
function toInt64(x) {
    return _zJs.BigInteger__get_ToInt64(x);
}
function toUInt64(x) {
    return _zJs.BigInteger__get_ToUInt64(x);
}
function toSingle(x) {
    return _zJs.BigInteger__get_ToSingle(x);
}
function toDouble(x) {
    return _zJs.BigInteger__get_ToDouble(x);
}
function toDecimal(x) {
    return _zJs.BigInteger__get_ToDecimal(x);
}
function sign(x) {
    return _zJs.BigInteger__get_Sign(x);
}
function isZero(x) {
    return _zJs.BigInteger__get_IsZero(x);
}
function isOne(x) {
    return _zJs.BigInteger__get_IsOne(x);
}
function hash(x) {
    return _utilJs.safeHash(x);
}
function compare(x, y) {
    return x.CompareTo(y);
}
function equals(x, y) {
    return _utilJs.equals(x, y);
}
function toString(x) {
    return _typesJs.toString(x);
}
const get_Zero = _zJs.BigInteger_get_Zero();
const get_One = _zJs.BigInteger_get_One();
function op_Addition(arg00, arg01) {
    return _zJs.BigInteger_op_Addition_56F059C0(arg00, arg01);
}
function op_Subtraction(arg00, arg01) {
    return _zJs.BigInteger_op_Subtraction_56F059C0(arg00, arg01);
}
function op_Multiply(arg00, arg01) {
    return _zJs.BigInteger_op_Multiply_56F059C0(arg00, arg01);
}
function op_Division(arg00, arg01) {
    return _zJs.BigInteger_op_Division_56F059C0(arg00, arg01);
}
function op_Modulus(arg00, arg01) {
    return _zJs.BigInteger_op_Modulus_56F059C0(arg00, arg01);
}
function op_UnaryNegation(arg00) {
    return _zJs.BigInteger_op_UnaryNegation_Z665282C2(arg00);
}
function op_UnaryPlus(arg00) {
    return _zJs.BigInteger_op_UnaryPlus_Z665282C2(arg00);
}
function op_RightShift(arg00, arg01) {
    return _zJs.BigInteger_op_RightShift_62E082A2(arg00, arg01);
}
function op_LeftShift(arg00, arg01) {
    return _zJs.BigInteger_op_LeftShift_62E082A2(arg00, arg01);
}
function op_BitwiseAnd(arg00, arg01) {
    return _zJs.BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);
}
function op_BitwiseOr(arg00, arg01) {
    return _zJs.BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);
}
function op_ExclusiveOr(arg00, arg01) {
    return _zJs.BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);
}
function op_LessThan(arg00, arg01) {
    return _zJs.BigInteger_op_LessThan_56F059C0(arg00, arg01);
}
function op_LessThanOrEqual(arg00, arg01) {
    return _zJs.BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);
}
function op_GreaterThan(arg00, arg01) {
    return _zJs.BigInteger_op_GreaterThan_56F059C0(arg00, arg01);
}
function op_GreaterThanOrEqual(arg00, arg01) {
    return _zJs.BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);
}
function op_Equality(arg00, arg01) {
    return _zJs.BigInteger_op_Equality_56F059C0(arg00, arg01);
}
function op_Inequality(arg00, arg01) {
    return _zJs.BigInteger_op_Inequality_56F059C0(arg00, arg01);
}
function flipTwosComplement(currByte, lowBitFound) {
    const matchValue = [
        currByte,
        lowBitFound
    ];
    if (matchValue[1]) return [
        (currByte ^ 255) & 255,
        true
    ];
    else if (matchValue[0] === 0) return [
        0,
        false
    ];
    else return [
        (currByte ^ 254 << new Int32Array([
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ]).find((i)=>(currByte & 1 << i) > 0
        )) & 255,
        true
    ];
}
function toByteArray(value) {
    if (_utilJs.equals(value, zero)) return new Uint8Array([
        0
    ]);
    else {
        const isPositive = _utilJs.compare(value, zero) > 0;
        const value_1 = isPositive ? value : _zJs.BigInteger_op_Multiply_56F059C0(_zJs.BigInteger_$ctor_Z524259A4(-1), value);
        const mask32 = fromInt64(_longJs.fromInteger(4294967295, false, 6));
        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut)=>{
            let value_6, value_8, value_9, value_10;
            loop: while(true){
                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;
                if (_utilJs.compare(consumeValue, zero) <= 0) {
                    const accumBytes_1 = isPositive ? _listJs.skipWhile((b)=>b === 0
                    , accumBytes) : _listJs.skipWhile((b_1)=>b_1 === 255
                    , accumBytes);
                    const isHighBitOne = (_listJs.head(accumBytes_1) & 128) !== 0;
                    return _arrayJs.reverse(_listJs.toArray((isPositive ? isHighBitOne : false) ? _listJs.cons(0, accumBytes_1) : (!isPositive ? !isHighBitOne : false) ? _listJs.cons(255, accumBytes_1) : accumBytes_1));
                } else {
                    const currValue = toUInt32(_zJs.BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));
                    if (isPositive) {
                        const b0 = currValue & 255;
                        let b1;
                        const value_4 = currValue >>> 8;
                        b1 = value_4 & 255;
                        let b2;
                        const value_5 = currValue >>> 16;
                        b2 = value_5 & 255;
                        accumBytes_mut = _listJs.ofArrayWithTail([
                            (value_6 = currValue >>> 24, value_6 & 255),
                            b2,
                            b1,
                            b0
                        ], accumBytes);
                        consumeValue_mut = _zJs.BigInteger_op_RightShift_62E082A2(consumeValue, 32);
                        lowBitFound_mut = false;
                        continue loop;
                    } else {
                        const patternInput = flipTwosComplement(currValue & 255, lowBitFound);
                        const patternInput_1 = flipTwosComplement((value_8 = currValue >>> 8, value_8 & 255), patternInput[1]);
                        const patternInput_2 = flipTwosComplement((value_9 = currValue >>> 16, value_9 & 255), patternInput_1[1]);
                        const patternInput_3 = flipTwosComplement((value_10 = currValue >>> 24, value_10 & 255), patternInput_2[1]);
                        accumBytes_mut = _listJs.ofArrayWithTail([
                            patternInput_3[0],
                            patternInput_2[0],
                            patternInput_1[0],
                            patternInput[0]
                        ], accumBytes);
                        consumeValue_mut = _zJs.BigInteger_op_RightShift_62E082A2(consumeValue, 32);
                        lowBitFound_mut = patternInput_3[1];
                        continue loop;
                    }
                }
                break;
            }
        };
        return loop(_listJs.empty(), value_1, false);
    }
}
function fromByteArray(bytes) {
    if (bytes == null) throw new Error("bytes");
    if (bytes.length === 0) return zero;
    else {
        const isPositive = (bytes[bytes.length - 1] & 128) === 0;
        const buffer = _arrayJs.fill(new Uint8Array(4), 0, 4, 0);
        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut)=>{
            loop: while(true){
                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;
                if (bytesRemaining === 0) {
                    const value_2 = _listJs.fold((acc, value)=>_zJs.BigInteger_op_Addition_56F059C0(_zJs.BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(_longJs.fromInteger(value, false, 6)))
                    , zero, accumUInt32);
                    if (isPositive) return value_2;
                    else return _zJs.BigInteger_op_Multiply_56F059C0(_zJs.BigInteger_$ctor_Z524259A4(-1), value_2);
                } else {
                    const bytesToProcess = _utilJs.min((x, y)=>_utilJs.comparePrimitives(x, y)
                    , bytesRemaining, 4) | 0;
                    for(let i_1 = 0; i_1 <= bytesToProcess - 1; i_1++)buffer[i_1] = bytes[currIndex + i_1];
                    if (isPositive) {
                        _arrayJs.fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);
                        accumUInt32_mut = _listJs.cons((((buffer[0] | buffer[1] << 8 >>> 0) >>> 0 | buffer[2] << 16 >>> 0) >>> 0 | buffer[3] << 24 >>> 0) >>> 0, accumUInt32);
                        currIndex_mut = currIndex + bytesToProcess;
                        bytesRemaining_mut = bytesRemaining - bytesToProcess;
                        lowBitFound_mut = false;
                        continue loop;
                    } else {
                        _arrayJs.fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);
                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);
                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);
                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);
                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);
                        accumUInt32_mut = _listJs.cons((((patternInput[0] | patternInput_1[0] << 8 >>> 0) >>> 0 | patternInput_2[0] << 16 >>> 0) >>> 0 | patternInput_3[0] << 24 >>> 0) >>> 0, accumUInt32);
                        currIndex_mut = currIndex + bytesToProcess;
                        bytesRemaining_mut = bytesRemaining - bytesToProcess;
                        lowBitFound_mut = patternInput_3[1];
                        continue loop;
                    }
                }
                break;
            }
        };
        return loop(_listJs.empty(), 0, bytes.length, false);
    }
}

},{"./BigInt/z.js":"dkFsH","./Long.js":"2dOzy","./Util.js":"e4VZ7","./Types.js":"7IOW0","./List.js":"3UB49","./Array.js":"dl8am","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dkFsH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BigInteger", ()=>BigInteger
);
parcelHelpers.export(exports, "BigInteger$reflection", ()=>BigInteger$reflection
);
parcelHelpers.export(exports, "BigInteger_$ctor_Z2BE94A1", ()=>BigInteger_$ctor_Z2BE94A1
);
parcelHelpers.export(exports, "BigInteger_nat_Z67CCE57D", ()=>BigInteger_nat_Z67CCE57D
);
parcelHelpers.export(exports, "BigInteger_create_Z2BE94A1", ()=>BigInteger_create_Z2BE94A1
);
parcelHelpers.export(exports, "BigInteger_posn_Z67CCE57D", ()=>BigInteger_posn_Z67CCE57D
);
parcelHelpers.export(exports, "BigInteger_negn_Z67CCE57D", ()=>BigInteger_negn_Z67CCE57D
);
parcelHelpers.export(exports, "BigInteger__get_Sign", ()=>BigInteger__get_Sign
);
parcelHelpers.export(exports, "BigInteger__get_SignInt", ()=>BigInteger__get_SignInt
);
parcelHelpers.export(exports, "BigInteger__get_V", ()=>BigInteger__get_V
);
parcelHelpers.export(exports, "BigInteger_op_Equality_56F059C0", ()=>BigInteger_op_Equality_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_Inequality_56F059C0", ()=>BigInteger_op_Inequality_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_LessThan_56F059C0", ()=>BigInteger_op_LessThan_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_GreaterThan_56F059C0", ()=>BigInteger_op_GreaterThan_56F059C0
);
parcelHelpers.export(exports, "BigInteger_compare_56F059C0", ()=>BigInteger_compare_56F059C0
);
parcelHelpers.export(exports, "BigInteger_hash_Z665282C2", ()=>BigInteger_hash_Z665282C2
);
parcelHelpers.export(exports, "BigInteger__get_StructuredDisplayString", ()=>BigInteger__get_StructuredDisplayString
);
parcelHelpers.export(exports, "BigInteger_$ctor_Z524259A4", ()=>BigInteger_$ctor_Z524259A4
);
parcelHelpers.export(exports, "BigInteger_$ctor_Z524259C1", ()=>BigInteger_$ctor_Z524259C1
);
parcelHelpers.export(exports, "BigInteger_get_One", ()=>BigInteger_get_One
);
parcelHelpers.export(exports, "BigInteger_get_Two", ()=>BigInteger_get_Two
);
parcelHelpers.export(exports, "BigInteger_get_Zero", ()=>BigInteger_get_Zero
);
parcelHelpers.export(exports, "BigInteger_op_UnaryNegation_Z665282C2", ()=>BigInteger_op_UnaryNegation_Z665282C2
);
parcelHelpers.export(exports, "BigInteger_Scale_Z320F31E", ()=>BigInteger_Scale_Z320F31E
);
parcelHelpers.export(exports, "BigInteger_subnn_6A57060", ()=>BigInteger_subnn_6A57060
);
parcelHelpers.export(exports, "BigInteger_addnn_6A57060", ()=>BigInteger_addnn_6A57060
);
parcelHelpers.export(exports, "BigInteger__get_IsZero", ()=>BigInteger__get_IsZero
);
parcelHelpers.export(exports, "BigInteger__get_IsOne", ()=>BigInteger__get_IsOne
);
parcelHelpers.export(exports, "BigInteger_op_Addition_56F059C0", ()=>BigInteger_op_Addition_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_Subtraction_56F059C0", ()=>BigInteger_op_Subtraction_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_Multiply_56F059C0", ()=>BigInteger_op_Multiply_56F059C0
);
parcelHelpers.export(exports, "BigInteger_DivRem_56F059C0", ()=>BigInteger_DivRem_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_Division_56F059C0", ()=>BigInteger_op_Division_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_Modulus_56F059C0", ()=>BigInteger_op_Modulus_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_RightShift_62E082A2", ()=>BigInteger_op_RightShift_62E082A2
);
parcelHelpers.export(exports, "BigInteger_op_LeftShift_62E082A2", ()=>BigInteger_op_LeftShift_62E082A2
);
parcelHelpers.export(exports, "BigInteger_op_BitwiseAnd_56F059C0", ()=>BigInteger_op_BitwiseAnd_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_BitwiseOr_56F059C0", ()=>BigInteger_op_BitwiseOr_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_ExclusiveOr_56F059C0", ()=>BigInteger_op_ExclusiveOr_56F059C0
);
parcelHelpers.export(exports, "BigInteger_GreatestCommonDivisor_56F059C0", ()=>BigInteger_GreatestCommonDivisor_56F059C0
);
parcelHelpers.export(exports, "BigInteger__get_IsNegative", ()=>BigInteger__get_IsNegative
);
parcelHelpers.export(exports, "BigInteger__get_IsPositive", ()=>BigInteger__get_IsPositive
);
parcelHelpers.export(exports, "BigInteger_Abs_Z665282C2", ()=>BigInteger_Abs_Z665282C2
);
parcelHelpers.export(exports, "BigInteger_op_LessThanOrEqual_56F059C0", ()=>BigInteger_op_LessThanOrEqual_56F059C0
);
parcelHelpers.export(exports, "BigInteger_op_GreaterThanOrEqual_56F059C0", ()=>BigInteger_op_GreaterThanOrEqual_56F059C0
);
parcelHelpers.export(exports, "BigInteger_Pow_62E082A2", ()=>BigInteger_Pow_62E082A2
);
parcelHelpers.export(exports, "BigInteger__get_ToInt32", ()=>BigInteger__get_ToInt32
);
parcelHelpers.export(exports, "BigInteger__get_ToUInt32", ()=>BigInteger__get_ToUInt32
);
parcelHelpers.export(exports, "BigInteger__get_ToInt64", ()=>BigInteger__get_ToInt64
);
parcelHelpers.export(exports, "BigInteger__get_ToUInt64", ()=>BigInteger__get_ToUInt64
);
parcelHelpers.export(exports, "BigInteger__get_ToDouble", ()=>BigInteger__get_ToDouble
);
parcelHelpers.export(exports, "BigInteger__get_ToSByte", ()=>BigInteger__get_ToSByte
);
parcelHelpers.export(exports, "BigInteger__get_ToByte", ()=>BigInteger__get_ToByte
);
parcelHelpers.export(exports, "BigInteger__get_ToInt16", ()=>BigInteger__get_ToInt16
);
parcelHelpers.export(exports, "BigInteger__get_ToUInt16", ()=>BigInteger__get_ToUInt16
);
parcelHelpers.export(exports, "BigInteger__get_ToSingle", ()=>BigInteger__get_ToSingle
);
parcelHelpers.export(exports, "BigInteger__get_ToDecimal", ()=>BigInteger__get_ToDecimal
);
parcelHelpers.export(exports, "BigInteger_Parse_Z721C83C5", ()=>BigInteger_Parse_Z721C83C5
);
parcelHelpers.export(exports, "BigInteger__get_IsSmall", ()=>BigInteger__get_IsSmall
);
parcelHelpers.export(exports, "BigInteger_Factorial_Z665282C2", ()=>BigInteger_Factorial_Z665282C2
);
parcelHelpers.export(exports, "BigInteger_op_UnaryPlus_Z665282C2", ()=>BigInteger_op_UnaryPlus_Z665282C2
);
parcelHelpers.export(exports, "BigInteger_FromInt64_Z524259C1", ()=>BigInteger_FromInt64_Z524259C1
);
parcelHelpers.export(exports, "BigInteger_FromInt32_Z524259A4", ()=>BigInteger_FromInt32_Z524259A4
);
var _nJs = require("./n.js");
var _typesJs = require("../Types.js");
var _reflectionJs = require("../Reflection.js");
var _arrayJs = require("../Array.js");
var _longJs = require("../Long.js");
var _int32Js = require("../Int32.js");
var _decimalJs = require("../Decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
class BigInteger extends _typesJs.Record {
    constructor(signInt, v){
        super();
        this.signInt = signInt | 0;
        this.v = v;
    }
    toString() {
        const x = this;
        const matchValue = BigInteger__get_SignInt(x) | 0;
        switch(matchValue){
            case -1:
                return _nJs.BigNatModule_isZero(BigInteger__get_V(x)) ? "0" : "-" + _nJs.BigNatModule_toString(BigInteger__get_V(x));
            case 0:
                return "0";
            case 1:
                return _nJs.BigNatModule_toString(BigInteger__get_V(x));
            default:
                throw new Error("signs should be +/- 1 or 0");
        }
    }
    Equals(obj) {
        const this$ = this;
        return obj instanceof BigInteger ? BigInteger_op_Equality_56F059C0(this$, obj) : false;
    }
    GetHashCode() {
        const x = this;
        return BigInteger_hash_Z665282C2(x) | 0;
    }
    toJSON(_key) {
        const this$ = this;
        return _typesJs.toString(this$);
    }
    CompareTo(obj) {
        const this$ = this;
        if (obj instanceof BigInteger) return BigInteger_compare_56F059C0(this$, obj) | 0;
        else throw new Error("the objects are not comparable\\nParameter name: obj");
    }
}
function BigInteger$reflection() {
    return _reflectionJs.class_type("BigInt.BigInteger", void 0, BigInteger, _reflectionJs.class_type("System.ValueType"));
}
_c = BigInteger$reflection;
function BigInteger_$ctor_Z2BE94A1(signInt1, v1) {
    return new BigInteger(signInt1, v1);
}
_c1 = BigInteger_$ctor_Z2BE94A1;
(()=>{
    BigInteger.smallLim = 4096;
    BigInteger.smallPosTab = _arrayJs.initialize(BigInteger.smallLim, (n)=>_nJs.BigNatModule_ofInt32(n)
    );
    BigInteger.one = BigInteger_$ctor_Z524259A4(1);
    BigInteger.two = BigInteger_$ctor_Z524259A4(2);
    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);
})();
function BigInteger_nat_Z67CCE57D(n) {
    if (_nJs.BigNatModule_isSmall(n) ? _nJs.BigNatModule_getSmall(n) < BigInteger.smallLim : false) return BigInteger.smallPosTab[_nJs.BigNatModule_getSmall(n)];
    else return n;
}
_c2 = BigInteger_nat_Z67CCE57D;
function BigInteger_create_Z2BE94A1(s, n) {
    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));
}
_c3 = BigInteger_create_Z2BE94A1;
function BigInteger_posn_Z67CCE57D(n) {
    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));
}
_c4 = BigInteger_posn_Z67CCE57D;
function BigInteger_negn_Z67CCE57D(n) {
    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));
}
_c5 = BigInteger_negn_Z67CCE57D;
function BigInteger__get_Sign(x) {
    if (BigInteger__get_IsZero(x)) return 0;
    else return x.signInt | 0;
}
_c6 = BigInteger__get_Sign;
function BigInteger__get_SignInt(x) {
    return x.signInt;
}
_c7 = BigInteger__get_SignInt;
function BigInteger__get_V(x) {
    return x.v;
}
_c8 = BigInteger__get_V;
function BigInteger_op_Equality_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    let pattern_matching_result;
    if (matchValue[0] === -1) {
        if (matchValue[1] === -1) pattern_matching_result = 1;
        else if (matchValue[1] === 0) pattern_matching_result = 8;
        else if (matchValue[1] === 1) pattern_matching_result = 3;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 0) {
        if (matchValue[1] === -1) pattern_matching_result = 6;
        else if (matchValue[1] === 0) pattern_matching_result = 4;
        else if (matchValue[1] === 1) pattern_matching_result = 5;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 1) {
        if (matchValue[1] === -1) pattern_matching_result = 2;
        else if (matchValue[1] === 0) pattern_matching_result = 7;
        else if (matchValue[1] === 1) pattern_matching_result = 0;
        else pattern_matching_result = 9;
    } else pattern_matching_result = 9;
    switch(pattern_matching_result){
        case 0:
            return _nJs.BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));
        case 1:
            return _nJs.BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));
        case 2:
            if (_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
            else return false;
        case 3:
            if (_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
            else return false;
        case 4:
            return true;
        case 5:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 6:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 7:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 8:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 9:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c9 = BigInteger_op_Equality_56F059C0;
function BigInteger_op_Inequality_56F059C0(x, y) {
    return !BigInteger_op_Equality_56F059C0(x, y);
}
_c10 = BigInteger_op_Inequality_56F059C0;
function BigInteger_op_LessThan_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    let pattern_matching_result;
    if (matchValue[0] === -1) {
        if (matchValue[1] === -1) pattern_matching_result = 1;
        else if (matchValue[1] === 0) pattern_matching_result = 8;
        else if (matchValue[1] === 1) pattern_matching_result = 3;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 0) {
        if (matchValue[1] === -1) pattern_matching_result = 6;
        else if (matchValue[1] === 0) pattern_matching_result = 4;
        else if (matchValue[1] === 1) pattern_matching_result = 5;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 1) {
        if (matchValue[1] === -1) pattern_matching_result = 2;
        else if (matchValue[1] === 0) pattern_matching_result = 7;
        else if (matchValue[1] === 1) pattern_matching_result = 0;
        else pattern_matching_result = 9;
    } else pattern_matching_result = 9;
    switch(pattern_matching_result){
        case 0:
            return _nJs.BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));
        case 1:
            return _nJs.BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));
        case 2:
            return false;
        case 3:
            if (!_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return true;
            else return !_nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 4:
            return false;
        case 5:
            return !_nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 6:
            return false;
        case 7:
            return false;
        case 8:
            return !_nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 9:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c11 = BigInteger_op_LessThan_56F059C0;
function BigInteger_op_GreaterThan_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    let pattern_matching_result;
    if (matchValue[0] === -1) {
        if (matchValue[1] === -1) pattern_matching_result = 1;
        else if (matchValue[1] === 0) pattern_matching_result = 8;
        else if (matchValue[1] === 1) pattern_matching_result = 3;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 0) {
        if (matchValue[1] === -1) pattern_matching_result = 6;
        else if (matchValue[1] === 0) pattern_matching_result = 4;
        else if (matchValue[1] === 1) pattern_matching_result = 5;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 1) {
        if (matchValue[1] === -1) pattern_matching_result = 2;
        else if (matchValue[1] === 0) pattern_matching_result = 7;
        else if (matchValue[1] === 1) pattern_matching_result = 0;
        else pattern_matching_result = 9;
    } else pattern_matching_result = 9;
    switch(pattern_matching_result){
        case 0:
            return _nJs.BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));
        case 1:
            return _nJs.BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));
        case 2:
            if (!_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return true;
            else return !_nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        case 6:
            return !_nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 7:
            return !_nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 8:
            return false;
        case 9:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c12 = BigInteger_op_GreaterThan_56F059C0;
function BigInteger_compare_56F059C0(n, nn) {
    if (BigInteger_op_LessThan_56F059C0(n, nn)) return -1;
    else if (BigInteger_op_Equality_56F059C0(n, nn)) return 0;
    else return 1;
}
_c13 = BigInteger_compare_56F059C0;
function BigInteger_hash_Z665282C2(z) {
    if (BigInteger__get_SignInt(z) === 0) return 1;
    else return BigInteger__get_SignInt(z) + _nJs.BigNatModule_hash(BigInteger__get_V(z)) | 0;
}
_c14 = BigInteger_hash_Z665282C2;
function BigInteger__get_StructuredDisplayString(x) {
    return _typesJs.toString(x);
}
_c15 = BigInteger__get_StructuredDisplayString;
function BigInteger_$ctor_Z524259A4(n) {
    if (n >= 0) return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_ofInt32(n)));
    else if (n === -2147483648) return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_ofInt64(_longJs.op_UnaryNegation(_longJs.fromInteger(n, false, 2)))));
    else return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_ofInt32(_int32Js.op_UnaryNegation_Int32(n))));
}
_c16 = BigInteger_$ctor_Z524259A4;
function BigInteger_$ctor_Z524259C1(n) {
    if (_longJs.compare(n, _longJs.fromBits(0, 0, false)) >= 0) return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_ofInt64(n)));
    else if (_longJs.equals(n, _longJs.fromBits(0, 2147483648, false))) return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_add(_nJs.BigNatModule_ofInt64(_longJs.fromBits(4294967295, 2147483647, false)), _nJs.BigNatModule_one)));
    else return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(_nJs.BigNatModule_ofInt64(_longJs.op_UnaryNegation(n))));
}
_c17 = BigInteger_$ctor_Z524259C1;
function BigInteger_get_One() {
    return BigInteger.one;
}
_c18 = BigInteger_get_One;
function BigInteger_get_Two() {
    return BigInteger.two;
}
_c19 = BigInteger_get_Two;
function BigInteger_get_Zero() {
    return BigInteger.zero;
}
_c20 = BigInteger_get_Zero;
function BigInteger_op_UnaryNegation_Z665282C2(z) {
    const matchValue = BigInteger__get_SignInt(z) | 0;
    if (matchValue === 0) return BigInteger_get_Zero();
    else return BigInteger_create_Z2BE94A1(_int32Js.op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));
}
_c21 = BigInteger_op_UnaryNegation_Z665282C2;
function BigInteger_Scale_Z320F31E(k, z) {
    if (BigInteger__get_SignInt(z) === 0) return BigInteger_get_Zero();
    else if (k < 0) return BigInteger_create_Z2BE94A1(_int32Js.op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), _nJs.BigNatModule_scale(_int32Js.op_UnaryNegation_Int32(k), BigInteger__get_V(z)));
    else return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), _nJs.BigNatModule_scale(k, BigInteger__get_V(z)));
}
_c22 = BigInteger_Scale_Z320F31E;
function BigInteger_subnn_6A57060(nx, ny) {
    if (_nJs.BigNatModule_gte(nx, ny)) return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_sub(nx, ny));
    else return BigInteger_negn_Z67CCE57D(_nJs.BigNatModule_sub(ny, nx));
}
_c23 = BigInteger_subnn_6A57060;
function BigInteger_addnn_6A57060(nx, ny) {
    return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_add(nx, ny));
}
_c24 = BigInteger_addnn_6A57060;
function BigInteger__get_IsZero(x) {
    if (BigInteger__get_SignInt(x) === 0) return true;
    else return _nJs.BigNatModule_isZero(BigInteger__get_V(x));
}
_c25 = BigInteger__get_IsZero;
function BigInteger__get_IsOne(x) {
    if (BigInteger__get_SignInt(x) === 1) return _nJs.BigNatModule_isOne(BigInteger__get_V(x));
    else return false;
}
_c26 = BigInteger__get_IsOne;
function BigInteger_op_Addition_56F059C0(x, y) {
    if (BigInteger__get_IsZero(y)) return x;
    else if (BigInteger__get_IsZero(x)) return y;
    else {
        const matchValue = [
            BigInteger__get_SignInt(x),
            BigInteger__get_SignInt(y)
        ];
        let pattern_matching_result;
        if (matchValue[0] === -1) {
            if (matchValue[1] === -1) pattern_matching_result = 1;
            else if (matchValue[1] === 1) pattern_matching_result = 3;
            else pattern_matching_result = 4;
        } else if (matchValue[0] === 1) {
            if (matchValue[1] === -1) pattern_matching_result = 2;
            else if (matchValue[1] === 1) pattern_matching_result = 0;
            else pattern_matching_result = 4;
        } else pattern_matching_result = 4;
        switch(pattern_matching_result){
            case 0:
                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));
            case 1:
                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));
            case 2:
                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));
            case 3:
                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));
            case 4:
                throw new Error("signs should be +/- 1\\nParameter name: x");
        }
    }
}
_c27 = BigInteger_op_Addition_56F059C0;
function BigInteger_op_Subtraction_56F059C0(x, y) {
    if (BigInteger__get_IsZero(y)) return x;
    else if (BigInteger__get_IsZero(x)) return BigInteger_op_UnaryNegation_Z665282C2(y);
    else {
        const matchValue = [
            BigInteger__get_SignInt(x),
            BigInteger__get_SignInt(y)
        ];
        let pattern_matching_result;
        if (matchValue[0] === -1) {
            if (matchValue[1] === -1) pattern_matching_result = 1;
            else if (matchValue[1] === 1) pattern_matching_result = 3;
            else pattern_matching_result = 4;
        } else if (matchValue[0] === 1) {
            if (matchValue[1] === -1) pattern_matching_result = 2;
            else if (matchValue[1] === 1) pattern_matching_result = 0;
            else pattern_matching_result = 4;
        } else pattern_matching_result = 4;
        switch(pattern_matching_result){
            case 0:
                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));
            case 1:
                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));
            case 2:
                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));
            case 3:
                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));
            case 4:
                throw new Error("signs should be +/- 1\\nParameter name: x");
        }
    }
}
_c28 = BigInteger_op_Subtraction_56F059C0;
function BigInteger_op_Multiply_56F059C0(x, y) {
    if (BigInteger__get_IsZero(x)) return x;
    else if (BigInteger__get_IsZero(y)) return y;
    else if (BigInteger__get_IsOne(x)) return y;
    else if (BigInteger__get_IsOne(y)) return x;
    else {
        const m = _nJs.BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));
        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);
    }
}
_c29 = BigInteger_op_Multiply_56F059C0;
function BigInteger_DivRem_56F059C0(x, y) {
    if (BigInteger__get_IsZero(y)) throw new Error();
    if (BigInteger__get_IsZero(x)) return [
        BigInteger_get_Zero(),
        BigInteger_get_Zero()
    ];
    else {
        const patternInput = _nJs.BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));
        const r = patternInput[1];
        const d = patternInput[0];
        const matchValue = [
            BigInteger__get_SignInt(x),
            BigInteger__get_SignInt(y)
        ];
        let pattern_matching_result;
        if (matchValue[0] === -1) {
            if (matchValue[1] === -1) pattern_matching_result = 1;
            else if (matchValue[1] === 1) pattern_matching_result = 3;
            else pattern_matching_result = 4;
        } else if (matchValue[0] === 1) {
            if (matchValue[1] === -1) pattern_matching_result = 2;
            else if (matchValue[1] === 1) pattern_matching_result = 0;
            else pattern_matching_result = 4;
        } else pattern_matching_result = 4;
        switch(pattern_matching_result){
            case 0:
                return [
                    BigInteger_posn_Z67CCE57D(d),
                    BigInteger_posn_Z67CCE57D(r)
                ];
            case 1:
                return [
                    BigInteger_posn_Z67CCE57D(d),
                    BigInteger_negn_Z67CCE57D(r)
                ];
            case 2:
                return [
                    BigInteger_negn_Z67CCE57D(d),
                    BigInteger_posn_Z67CCE57D(r)
                ];
            case 3:
                return [
                    BigInteger_negn_Z67CCE57D(d),
                    BigInteger_negn_Z67CCE57D(r)
                ];
            case 4:
                throw new Error("signs should be +/- 1\\nParameter name: x");
        }
    }
}
_c30 = BigInteger_DivRem_56F059C0;
function BigInteger_op_Division_56F059C0(x, y) {
    return BigInteger_DivRem_56F059C0(x, y)[0];
}
_c31 = BigInteger_op_Division_56F059C0;
function BigInteger_op_Modulus_56F059C0(x, y) {
    return BigInteger_DivRem_56F059C0(x, y)[1];
}
_c32 = BigInteger_op_Modulus_56F059C0;
function BigInteger_op_RightShift_62E082A2(x, y) {
    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));
}
_c33 = BigInteger_op_RightShift_62E082A2;
function BigInteger_op_LeftShift_62E082A2(x, y) {
    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));
}
_c34 = BigInteger_op_LeftShift_62E082A2;
function BigInteger_op_BitwiseAnd_56F059C0(x, y) {
    return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));
}
_c35 = BigInteger_op_BitwiseAnd_56F059C0;
function BigInteger_op_BitwiseOr_56F059C0(x, y) {
    return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));
}
_c36 = BigInteger_op_BitwiseOr_56F059C0;
function BigInteger_op_ExclusiveOr_56F059C0(x, y) {
    return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));
}
_c37 = BigInteger_op_ExclusiveOr_56F059C0;
function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    if (matchValue[0] === 0) {
        if (matchValue[1] === 0) return BigInteger_get_Zero();
        else return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));
    } else if (matchValue[1] === 0) return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));
    else return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));
}
_c38 = BigInteger_GreatestCommonDivisor_56F059C0;
function BigInteger__get_IsNegative(x) {
    if (BigInteger__get_SignInt(x) === -1) return !BigInteger__get_IsZero(x);
    else return false;
}
_c39 = BigInteger__get_IsNegative;
function BigInteger__get_IsPositive(x) {
    if (BigInteger__get_SignInt(x) === 1) return !BigInteger__get_IsZero(x);
    else return false;
}
_c40 = BigInteger__get_IsPositive;
function BigInteger_Abs_Z665282C2(x) {
    if (BigInteger__get_SignInt(x) === -1) return BigInteger_op_UnaryNegation_Z665282C2(x);
    else return x;
}
_c41 = BigInteger_Abs_Z665282C2;
function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    let pattern_matching_result;
    if (matchValue[0] === -1) {
        if (matchValue[1] === -1) pattern_matching_result = 1;
        else if (matchValue[1] === 0) pattern_matching_result = 6;
        else if (matchValue[1] === 1) pattern_matching_result = 3;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 0) {
        if (matchValue[1] === -1) pattern_matching_result = 8;
        else if (matchValue[1] === 0) pattern_matching_result = 4;
        else if (matchValue[1] === 1) pattern_matching_result = 7;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 1) {
        if (matchValue[1] === -1) pattern_matching_result = 2;
        else if (matchValue[1] === 0) pattern_matching_result = 5;
        else if (matchValue[1] === 1) pattern_matching_result = 0;
        else pattern_matching_result = 9;
    } else pattern_matching_result = 9;
    switch(pattern_matching_result){
        case 0:
            return _nJs.BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));
        case 1:
            return _nJs.BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));
        case 2:
            if (_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
            else return false;
        case 3:
            return true;
        case 4:
            return true;
        case 5:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 6:
            return true;
        case 7:
            return true;
        case 8:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 9:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c42 = BigInteger_op_LessThanOrEqual_56F059C0;
function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {
    const matchValue = [
        BigInteger__get_SignInt(x),
        BigInteger__get_SignInt(y)
    ];
    let pattern_matching_result;
    if (matchValue[0] === -1) {
        if (matchValue[1] === -1) pattern_matching_result = 1;
        else if (matchValue[1] === 0) pattern_matching_result = 6;
        else if (matchValue[1] === 1) pattern_matching_result = 3;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 0) {
        if (matchValue[1] === -1) pattern_matching_result = 8;
        else if (matchValue[1] === 0) pattern_matching_result = 4;
        else if (matchValue[1] === 1) pattern_matching_result = 7;
        else pattern_matching_result = 9;
    } else if (matchValue[0] === 1) {
        if (matchValue[1] === -1) pattern_matching_result = 2;
        else if (matchValue[1] === 0) pattern_matching_result = 5;
        else if (matchValue[1] === 1) pattern_matching_result = 0;
        else pattern_matching_result = 9;
    } else pattern_matching_result = 9;
    switch(pattern_matching_result){
        case 0:
            return _nJs.BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));
        case 1:
            return _nJs.BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));
        case 2:
            return true;
        case 3:
            if (_nJs.BigNatModule_isZero(BigInteger__get_V(x))) return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
            else return false;
        case 4:
            return true;
        case 5:
            return true;
        case 6:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(x));
        case 7:
            return _nJs.BigNatModule_isZero(BigInteger__get_V(y));
        case 8:
            return true;
        case 9:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c43 = BigInteger_op_GreaterThanOrEqual_56F059C0;
function BigInteger_Pow_62E082A2(x, y) {
    if (y < 0) throw new Error("y");
    const matchValue = [
        BigInteger__get_IsZero(x),
        y
    ];
    if (matchValue[0]) {
        if (matchValue[1] === 0) return BigInteger_get_One();
        else return BigInteger_get_Zero();
    } else {
        const yval = BigInteger_$ctor_Z524259A4(y);
        return BigInteger_create_Z2BE94A1(_nJs.BigNatModule_isZero(_nJs.BigNatModule_rem(BigInteger__get_V(yval), _nJs.BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), _nJs.BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));
    }
}
_c44 = BigInteger_Pow_62E082A2;
function BigInteger__get_ToInt32(x) {
    if (BigInteger__get_IsZero(x)) return 0;
    else {
        const u = _nJs.BigNatModule_toUInt32(BigInteger__get_V(x));
        if (u <= 2147483647) return BigInteger__get_SignInt(x) * ~~u | 0;
        else if (BigInteger__get_SignInt(x) === -1 ? u === 2147483648 : false) return -2147483648;
        else throw new Error();
    }
}
_c45 = BigInteger__get_ToInt32;
function BigInteger__get_ToUInt32(x) {
    if (BigInteger__get_IsZero(x)) return 0;
    else return _nJs.BigNatModule_toUInt32(BigInteger__get_V(x));
}
_c46 = BigInteger__get_ToUInt32;
function BigInteger__get_ToInt64(x) {
    if (BigInteger__get_IsZero(x)) return _longJs.fromBits(0, 0, false);
    else {
        const u = _nJs.BigNatModule_toUInt64(BigInteger__get_V(x));
        if (_longJs.compare(u, _longJs.fromValue(_longJs.fromBits(4294967295, 2147483647, false), true)) <= 0) return _longJs.op_Multiply(_longJs.fromInteger(BigInteger__get_SignInt(x), false, 2), _longJs.fromValue(u, false));
        else if (BigInteger__get_SignInt(x) === -1 ? _longJs.equals(u, _longJs.fromValue(_longJs.op_Addition(_longJs.fromBits(4294967295, 2147483647, false), _longJs.fromBits(1, 0, false)), true)) : false) return _longJs.fromBits(0, 2147483648, false);
        else throw new Error();
    }
}
_c47 = BigInteger__get_ToInt64;
function BigInteger__get_ToUInt64(x) {
    if (BigInteger__get_IsZero(x)) return _longJs.fromBits(0, 0, true);
    else return _nJs.BigNatModule_toUInt64(BigInteger__get_V(x));
}
_c48 = BigInteger__get_ToUInt64;
function BigInteger__get_ToDouble(x) {
    const matchValue = BigInteger__get_SignInt(x) | 0;
    switch(matchValue){
        case -1:
            return -_nJs.BigNatModule_toFloat(BigInteger__get_V(x));
        case 0:
            return 0;
        case 1:
            return _nJs.BigNatModule_toFloat(BigInteger__get_V(x));
        default:
            throw new Error("signs should be +/- 1 or 0\\nParameter name: x");
    }
}
_c49 = BigInteger__get_ToDouble;
function BigInteger__get_ToSByte(x) {
    return (BigInteger__get_ToInt32(x) + 128 & 255) - 128;
}
_c50 = BigInteger__get_ToSByte;
function BigInteger__get_ToByte(x) {
    return BigInteger__get_ToUInt32(x) & 255;
}
_c51 = BigInteger__get_ToByte;
function BigInteger__get_ToInt16(x) {
    return (BigInteger__get_ToInt32(x) + 32768 & 65535) - 32768;
}
_c52 = BigInteger__get_ToInt16;
function BigInteger__get_ToUInt16(x) {
    return BigInteger__get_ToUInt32(x) & 65535;
}
_c53 = BigInteger__get_ToUInt16;
function BigInteger__get_ToSingle(x) {
    return BigInteger__get_ToDouble(x);
}
_c54 = BigInteger__get_ToSingle;
function BigInteger__get_ToDecimal(x) {
    return new _decimalJsDefault.default(BigInteger__get_ToDouble(x));
}
_c55 = BigInteger__get_ToDecimal;
function BigInteger_Parse_Z721C83C5(text) {
    if (text == null) throw new Error("text");
    const text_1 = text.trim();
    const len = text_1.length | 0;
    if (len === 0) throw new Error();
    const matchValue = [
        text_1[0],
        len
    ];
    if (matchValue[0] === "+") {
        if (matchValue[1] === 1) throw new Error();
        else return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_ofString(text_1.slice(1, len - 1 + 1)));
    } else if (matchValue[0] === "-") {
        if (matchValue[1] === 1) throw new Error();
        else return BigInteger_negn_Z67CCE57D(_nJs.BigNatModule_ofString(text_1.slice(1, len - 1 + 1)));
    } else return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_ofString(text_1));
}
_c56 = BigInteger_Parse_Z721C83C5;
function BigInteger__get_IsSmall(x) {
    if (BigInteger__get_IsZero(x)) return true;
    else return _nJs.BigNatModule_isSmall(BigInteger__get_V(x));
}
_c57 = BigInteger__get_IsSmall;
function BigInteger_Factorial_Z665282C2(x) {
    if (BigInteger__get_IsNegative(x)) throw new Error("mustBeNonNegative\\nParameter name: x");
    if (BigInteger__get_IsPositive(x)) return BigInteger_posn_Z67CCE57D(_nJs.BigNatModule_factorial(BigInteger__get_V(x)));
    else return BigInteger_get_One();
}
_c58 = BigInteger_Factorial_Z665282C2;
function BigInteger_op_UnaryPlus_Z665282C2(n1) {
    return n1;
}
_c59 = BigInteger_op_UnaryPlus_Z665282C2;
function BigInteger_FromInt64_Z524259C1(x) {
    return BigInteger_$ctor_Z524259C1(x);
}
_c60 = BigInteger_FromInt64_Z524259C1;
function BigInteger_FromInt32_Z524259A4(x) {
    return BigInteger_$ctor_Z524259A4(x);
}
_c61 = BigInteger_FromInt32_Z524259A4;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61;
$RefreshReg$(_c, "BigInteger$reflection");
$RefreshReg$(_c1, "BigInteger_$ctor_Z2BE94A1");
$RefreshReg$(_c2, "BigInteger_nat_Z67CCE57D");
$RefreshReg$(_c3, "BigInteger_create_Z2BE94A1");
$RefreshReg$(_c4, "BigInteger_posn_Z67CCE57D");
$RefreshReg$(_c5, "BigInteger_negn_Z67CCE57D");
$RefreshReg$(_c6, "BigInteger__get_Sign");
$RefreshReg$(_c7, "BigInteger__get_SignInt");
$RefreshReg$(_c8, "BigInteger__get_V");
$RefreshReg$(_c9, "BigInteger_op_Equality_56F059C0");
$RefreshReg$(_c10, "BigInteger_op_Inequality_56F059C0");
$RefreshReg$(_c11, "BigInteger_op_LessThan_56F059C0");
$RefreshReg$(_c12, "BigInteger_op_GreaterThan_56F059C0");
$RefreshReg$(_c13, "BigInteger_compare_56F059C0");
$RefreshReg$(_c14, "BigInteger_hash_Z665282C2");
$RefreshReg$(_c15, "BigInteger__get_StructuredDisplayString");
$RefreshReg$(_c16, "BigInteger_$ctor_Z524259A4");
$RefreshReg$(_c17, "BigInteger_$ctor_Z524259C1");
$RefreshReg$(_c18, "BigInteger_get_One");
$RefreshReg$(_c19, "BigInteger_get_Two");
$RefreshReg$(_c20, "BigInteger_get_Zero");
$RefreshReg$(_c21, "BigInteger_op_UnaryNegation_Z665282C2");
$RefreshReg$(_c22, "BigInteger_Scale_Z320F31E");
$RefreshReg$(_c23, "BigInteger_subnn_6A57060");
$RefreshReg$(_c24, "BigInteger_addnn_6A57060");
$RefreshReg$(_c25, "BigInteger__get_IsZero");
$RefreshReg$(_c26, "BigInteger__get_IsOne");
$RefreshReg$(_c27, "BigInteger_op_Addition_56F059C0");
$RefreshReg$(_c28, "BigInteger_op_Subtraction_56F059C0");
$RefreshReg$(_c29, "BigInteger_op_Multiply_56F059C0");
$RefreshReg$(_c30, "BigInteger_DivRem_56F059C0");
$RefreshReg$(_c31, "BigInteger_op_Division_56F059C0");
$RefreshReg$(_c32, "BigInteger_op_Modulus_56F059C0");
$RefreshReg$(_c33, "BigInteger_op_RightShift_62E082A2");
$RefreshReg$(_c34, "BigInteger_op_LeftShift_62E082A2");
$RefreshReg$(_c35, "BigInteger_op_BitwiseAnd_56F059C0");
$RefreshReg$(_c36, "BigInteger_op_BitwiseOr_56F059C0");
$RefreshReg$(_c37, "BigInteger_op_ExclusiveOr_56F059C0");
$RefreshReg$(_c38, "BigInteger_GreatestCommonDivisor_56F059C0");
$RefreshReg$(_c39, "BigInteger__get_IsNegative");
$RefreshReg$(_c40, "BigInteger__get_IsPositive");
$RefreshReg$(_c41, "BigInteger_Abs_Z665282C2");
$RefreshReg$(_c42, "BigInteger_op_LessThanOrEqual_56F059C0");
$RefreshReg$(_c43, "BigInteger_op_GreaterThanOrEqual_56F059C0");
$RefreshReg$(_c44, "BigInteger_Pow_62E082A2");
$RefreshReg$(_c45, "BigInteger__get_ToInt32");
$RefreshReg$(_c46, "BigInteger__get_ToUInt32");
$RefreshReg$(_c47, "BigInteger__get_ToInt64");
$RefreshReg$(_c48, "BigInteger__get_ToUInt64");
$RefreshReg$(_c49, "BigInteger__get_ToDouble");
$RefreshReg$(_c50, "BigInteger__get_ToSByte");
$RefreshReg$(_c51, "BigInteger__get_ToByte");
$RefreshReg$(_c52, "BigInteger__get_ToInt16");
$RefreshReg$(_c53, "BigInteger__get_ToUInt16");
$RefreshReg$(_c54, "BigInteger__get_ToSingle");
$RefreshReg$(_c55, "BigInteger__get_ToDecimal");
$RefreshReg$(_c56, "BigInteger_Parse_Z721C83C5");
$RefreshReg$(_c57, "BigInteger__get_IsSmall");
$RefreshReg$(_c58, "BigInteger_Factorial_Z665282C2");
$RefreshReg$(_c59, "BigInteger_op_UnaryPlus_Z665282C2");
$RefreshReg$(_c60, "BigInteger_FromInt64_Z524259C1");
$RefreshReg$(_c61, "BigInteger_FromInt32_Z524259A4");

},{"./n.js":"h7Eti","../Types.js":"7IOW0","../Reflection.js":"c0YT4","../Array.js":"dl8am","../Long.js":"2dOzy","../Int32.js":"bPtbl","../Decimal.js":"dVl3F","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h7Eti":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BigNat", ()=>BigNat
);
parcelHelpers.export(exports, "BigNat$reflection", ()=>BigNat$reflection
);
parcelHelpers.export(exports, "BigNatModule_FFT_pow32", ()=>BigNatModule_FFT_pow32
);
parcelHelpers.export(exports, "BigNatModule_FFT_leastBounding2Power", ()=>BigNatModule_FFT_leastBounding2Power
);
parcelHelpers.export(exports, "BigNatModule_FFT_p", ()=>BigNatModule_FFT_p
);
parcelHelpers.export(exports, "BigNatModule_FFT_w", ()=>BigNatModule_FFT_w
);
parcelHelpers.export(exports, "BigNatModule_FFT_m", ()=>BigNatModule_FFT_m
);
parcelHelpers.export(exports, "BigNatModule_FFT_k", ()=>BigNatModule_FFT_k
);
parcelHelpers.export(exports, "BigNatModule_FFT_g", ()=>BigNatModule_FFT_g
);
parcelHelpers.export(exports, "BigNatModule_FFT_primeP", ()=>BigNatModule_FFT_primeP
);
parcelHelpers.export(exports, "BigNatModule_FFT_maxBitsInsideFp", ()=>BigNatModule_FFT_maxBitsInsideFp
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_p", ()=>BigNatModule_FFT_Fp_p
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_p64", ()=>BigNatModule_FFT_Fp_p64
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_toInt", ()=>BigNatModule_FFT_Fp_toInt
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_ofInt32", ()=>BigNatModule_FFT_Fp_ofInt32
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_mzero", ()=>BigNatModule_FFT_Fp_mzero
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_mone", ()=>BigNatModule_FFT_Fp_mone
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_mtwo", ()=>BigNatModule_FFT_Fp_mtwo
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_mpow", ()=>BigNatModule_FFT_Fp_mpow
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_mpowL", ()=>BigNatModule_FFT_Fp_mpowL
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_m2PowNthRoot", ()=>BigNatModule_FFT_Fp_m2PowNthRoot
);
parcelHelpers.export(exports, "BigNatModule_FFT_Fp_minv", ()=>BigNatModule_FFT_Fp_minv
);
parcelHelpers.export(exports, "BigNatModule_FFT_computeFFT", ()=>BigNatModule_FFT_computeFFT
);
parcelHelpers.export(exports, "BigNatModule_FFT_computFftInPlace", ()=>BigNatModule_FFT_computFftInPlace
);
parcelHelpers.export(exports, "BigNatModule_FFT_computeInverseFftInPlace", ()=>BigNatModule_FFT_computeInverseFftInPlace
);
parcelHelpers.export(exports, "BigNatModule_FFT_maxTwoPower", ()=>BigNatModule_FFT_maxTwoPower
);
parcelHelpers.export(exports, "BigNatModule_FFT_twoPowerTable", ()=>BigNatModule_FFT_twoPowerTable
);
parcelHelpers.export(exports, "BigNatModule_FFT_computeFftPaddedPolynomialProduct", ()=>BigNatModule_FFT_computeFftPaddedPolynomialProduct
);
parcelHelpers.export(exports, "BigNatModule_FFT_padTo", ()=>BigNatModule_FFT_padTo
);
parcelHelpers.export(exports, "BigNatModule_FFT_computeFftPolynomialProduct", ()=>BigNatModule_FFT_computeFftPolynomialProduct
);
parcelHelpers.export(exports, "BigNatModule_FFT_mzero", ()=>BigNatModule_FFT_mzero
);
parcelHelpers.export(exports, "BigNatModule_FFT_mone", ()=>BigNatModule_FFT_mone
);
parcelHelpers.export(exports, "BigNatModule_FFT_maxFp", ()=>BigNatModule_FFT_maxFp
);
parcelHelpers.export(exports, "BigNatModule_bound", ()=>BigNatModule_bound
);
parcelHelpers.export(exports, "BigNatModule_setBound", ()=>BigNatModule_setBound
);
parcelHelpers.export(exports, "BigNatModule_coeff", ()=>BigNatModule_coeff
);
parcelHelpers.export(exports, "BigNatModule_coeff64", ()=>BigNatModule_coeff64
);
parcelHelpers.export(exports, "BigNatModule_setCoeff", ()=>BigNatModule_setCoeff
);
parcelHelpers.export(exports, "BigNatModule_pow64", ()=>BigNatModule_pow64
);
parcelHelpers.export(exports, "BigNatModule_pow32", ()=>BigNatModule_pow32
);
parcelHelpers.export(exports, "BigNatModule_hash", ()=>BigNatModule_hash
);
parcelHelpers.export(exports, "BigNatModule_maxInt", ()=>BigNatModule_maxInt
);
parcelHelpers.export(exports, "BigNatModule_minInt", ()=>BigNatModule_minInt
);
parcelHelpers.export(exports, "BigNatModule_baseBits", ()=>BigNatModule_baseBits
);
parcelHelpers.export(exports, "BigNatModule_baseN", ()=>BigNatModule_baseN
);
parcelHelpers.export(exports, "BigNatModule_baseMask", ()=>BigNatModule_baseMask
);
parcelHelpers.export(exports, "BigNatModule_baseNi64", ()=>BigNatModule_baseNi64
);
parcelHelpers.export(exports, "BigNatModule_baseMaski64", ()=>BigNatModule_baseMaski64
);
parcelHelpers.export(exports, "BigNatModule_baseMaskU", ()=>BigNatModule_baseMaskU
);
parcelHelpers.export(exports, "BigNatModule_baseMask32A", ()=>BigNatModule_baseMask32A
);
parcelHelpers.export(exports, "BigNatModule_baseMask32B", ()=>BigNatModule_baseMask32B
);
parcelHelpers.export(exports, "BigNatModule_baseShift32B", ()=>BigNatModule_baseShift32B
);
parcelHelpers.export(exports, "BigNatModule_baseMask64A", ()=>BigNatModule_baseMask64A
);
parcelHelpers.export(exports, "BigNatModule_baseMask64B", ()=>BigNatModule_baseMask64B
);
parcelHelpers.export(exports, "BigNatModule_baseMask64C", ()=>BigNatModule_baseMask64C
);
parcelHelpers.export(exports, "BigNatModule_baseShift64B", ()=>BigNatModule_baseShift64B
);
parcelHelpers.export(exports, "BigNatModule_baseShift64C", ()=>BigNatModule_baseShift64C
);
parcelHelpers.export(exports, "BigNatModule_divbase", ()=>BigNatModule_divbase
);
parcelHelpers.export(exports, "BigNatModule_modbase", ()=>BigNatModule_modbase
);
parcelHelpers.export(exports, "BigNatModule_createN", ()=>BigNatModule_createN
);
parcelHelpers.export(exports, "BigNatModule_copyN", ()=>BigNatModule_copyN
);
parcelHelpers.export(exports, "BigNatModule_normN", ()=>BigNatModule_normN
);
parcelHelpers.export(exports, "BigNatModule_boundInt", ()=>BigNatModule_boundInt
);
parcelHelpers.export(exports, "BigNatModule_boundInt64", ()=>BigNatModule_boundInt64
);
parcelHelpers.export(exports, "BigNatModule_boundBase", ()=>BigNatModule_boundBase
);
parcelHelpers.export(exports, "BigNatModule_embed", ()=>BigNatModule_embed
);
parcelHelpers.export(exports, "BigNatModule_embed64", ()=>BigNatModule_embed64
);
parcelHelpers.export(exports, "BigNatModule_eval32", ()=>BigNatModule_eval32
);
parcelHelpers.export(exports, "BigNatModule_eval64", ()=>BigNatModule_eval64
);
parcelHelpers.export(exports, "BigNatModule_one", ()=>BigNatModule_one
);
parcelHelpers.export(exports, "BigNatModule_zero", ()=>BigNatModule_zero
);
parcelHelpers.export(exports, "BigNatModule_restrictTo", ()=>BigNatModule_restrictTo
);
parcelHelpers.export(exports, "BigNatModule_shiftUp", ()=>BigNatModule_shiftUp
);
parcelHelpers.export(exports, "BigNatModule_shiftDown", ()=>BigNatModule_shiftDown
);
parcelHelpers.export(exports, "BigNatModule_degree", ()=>BigNatModule_degree
);
parcelHelpers.export(exports, "BigNatModule_addP", ()=>BigNatModule_addP
);
parcelHelpers.export(exports, "BigNatModule_add", ()=>BigNatModule_add
);
parcelHelpers.export(exports, "BigNatModule_subP", ()=>BigNatModule_subP
);
parcelHelpers.export(exports, "BigNatModule_sub", ()=>BigNatModule_sub
);
parcelHelpers.export(exports, "BigNatModule_isZero", ()=>BigNatModule_isZero
);
parcelHelpers.export(exports, "BigNatModule_IsZero", ()=>BigNatModule_IsZero
);
parcelHelpers.export(exports, "BigNatModule_isOne", ()=>BigNatModule_isOne
);
parcelHelpers.export(exports, "BigNatModule_equal", ()=>BigNatModule_equal
);
parcelHelpers.export(exports, "BigNatModule_shiftCompare", ()=>BigNatModule_shiftCompare
);
parcelHelpers.export(exports, "BigNatModule_compare", ()=>BigNatModule_compare
);
parcelHelpers.export(exports, "BigNatModule_lt", ()=>BigNatModule_lt
);
parcelHelpers.export(exports, "BigNatModule_gt", ()=>BigNatModule_gt
);
parcelHelpers.export(exports, "BigNatModule_lte", ()=>BigNatModule_lte
);
parcelHelpers.export(exports, "BigNatModule_gte", ()=>BigNatModule_gte
);
parcelHelpers.export(exports, "BigNatModule_min", ()=>BigNatModule_min
);
parcelHelpers.export(exports, "BigNatModule_max", ()=>BigNatModule_max
);
parcelHelpers.export(exports, "BigNatModule_contributeArr", ()=>BigNatModule_contributeArr
);
parcelHelpers.export(exports, "BigNatModule_scale", ()=>BigNatModule_scale
);
parcelHelpers.export(exports, "BigNatModule_mulSchoolBookBothSmall", ()=>BigNatModule_mulSchoolBookBothSmall
);
parcelHelpers.export(exports, "BigNatModule_mulSchoolBookCarry", ()=>BigNatModule_mulSchoolBookCarry
);
parcelHelpers.export(exports, "BigNatModule_mulSchoolBookOneSmall", ()=>BigNatModule_mulSchoolBookOneSmall
);
parcelHelpers.export(exports, "BigNatModule_mulSchoolBookNeitherSmall", ()=>BigNatModule_mulSchoolBookNeitherSmall
);
parcelHelpers.export(exports, "BigNatModule_mulSchoolBook", ()=>BigNatModule_mulSchoolBook
);
parcelHelpers.export(exports, "BigNatModule_encoding", ()=>BigNatModule_encoding
);
parcelHelpers.export(exports, "BigNatModule_encoding$reflection", ()=>BigNatModule_encoding$reflection
);
parcelHelpers.export(exports, "BigNatModule_mkEncoding", ()=>BigNatModule_mkEncoding
);
parcelHelpers.export(exports, "BigNatModule_table", ()=>BigNatModule_table
);
parcelHelpers.export(exports, "BigNatModule_calculateTableTow", ()=>BigNatModule_calculateTableTow
);
parcelHelpers.export(exports, "BigNatModule_encodingGivenResultBits", ()=>BigNatModule_encodingGivenResultBits
);
parcelHelpers.export(exports, "BigNatModule_bitmask", ()=>BigNatModule_bitmask
);
parcelHelpers.export(exports, "BigNatModule_twopowers", ()=>BigNatModule_twopowers
);
parcelHelpers.export(exports, "BigNatModule_twopowersI64", ()=>BigNatModule_twopowersI64
);
parcelHelpers.export(exports, "BigNatModule_wordBits", ()=>BigNatModule_wordBits
);
parcelHelpers.export(exports, "BigNatModule_bits", ()=>BigNatModule_bits
);
parcelHelpers.export(exports, "BigNatModule_extractBits", ()=>BigNatModule_extractBits
);
parcelHelpers.export(exports, "BigNatModule_encodePoly", ()=>BigNatModule_encodePoly
);
parcelHelpers.export(exports, "BigNatModule_decodeResultBits", ()=>BigNatModule_decodeResultBits
);
parcelHelpers.export(exports, "BigNatModule_decodePoly", ()=>BigNatModule_decodePoly
);
parcelHelpers.export(exports, "BigNatModule_quickMulUsingFft", ()=>BigNatModule_quickMulUsingFft
);
parcelHelpers.export(exports, "BigNatModule_minDigitsKaratsuba", ()=>BigNatModule_minDigitsKaratsuba
);
parcelHelpers.export(exports, "BigNatModule_recMulKaratsuba", ()=>BigNatModule_recMulKaratsuba
);
parcelHelpers.export(exports, "BigNatModule_mulKaratsuba", ()=>BigNatModule_mulKaratsuba
);
parcelHelpers.export(exports, "BigNatModule_productDigitsUpperSchoolBook", ()=>BigNatModule_productDigitsUpperSchoolBook
);
parcelHelpers.export(exports, "BigNatModule_singleDigitForceSchoolBook", ()=>BigNatModule_singleDigitForceSchoolBook
);
parcelHelpers.export(exports, "BigNatModule_productDigitsUpperFft", ()=>BigNatModule_productDigitsUpperFft
);
parcelHelpers.export(exports, "BigNatModule_mul", ()=>BigNatModule_mul
);
parcelHelpers.export(exports, "BigNatModule_scaleSubInPlace", ()=>BigNatModule_scaleSubInPlace
);
parcelHelpers.export(exports, "BigNatModule_scaleSub", ()=>BigNatModule_scaleSub
);
parcelHelpers.export(exports, "BigNatModule_scaleAddInPlace", ()=>BigNatModule_scaleAddInPlace
);
parcelHelpers.export(exports, "BigNatModule_scaleAdd", ()=>BigNatModule_scaleAdd
);
parcelHelpers.export(exports, "BigNatModule_removeFactor", ()=>BigNatModule_removeFactor
);
parcelHelpers.export(exports, "BigNatModule_divmod", ()=>BigNatModule_divmod
);
parcelHelpers.export(exports, "BigNatModule_div", ()=>BigNatModule_div
);
parcelHelpers.export(exports, "BigNatModule_rem", ()=>BigNatModule_rem
);
parcelHelpers.export(exports, "BigNatModule_bitAnd", ()=>BigNatModule_bitAnd
);
parcelHelpers.export(exports, "BigNatModule_bitOr", ()=>BigNatModule_bitOr
);
parcelHelpers.export(exports, "BigNatModule_bitXor", ()=>BigNatModule_bitXor
);
parcelHelpers.export(exports, "BigNatModule_hcf", ()=>BigNatModule_hcf
);
parcelHelpers.export(exports, "BigNatModule_two", ()=>BigNatModule_two
);
parcelHelpers.export(exports, "BigNatModule_powi", ()=>BigNatModule_powi
);
parcelHelpers.export(exports, "BigNatModule_pow", ()=>BigNatModule_pow
);
parcelHelpers.export(exports, "BigNatModule_toFloat", ()=>BigNatModule_toFloat
);
parcelHelpers.export(exports, "BigNatModule_ofInt32", ()=>BigNatModule_ofInt32
);
parcelHelpers.export(exports, "BigNatModule_ofInt64", ()=>BigNatModule_ofInt64
);
parcelHelpers.export(exports, "BigNatModule_toUInt32", ()=>BigNatModule_toUInt32
);
parcelHelpers.export(exports, "BigNatModule_toUInt64", ()=>BigNatModule_toUInt64
);
parcelHelpers.export(exports, "BigNatModule_toString", ()=>BigNatModule_toString
);
parcelHelpers.export(exports, "BigNatModule_ofString", ()=>BigNatModule_ofString
);
parcelHelpers.export(exports, "BigNatModule_isSmall", ()=>BigNatModule_isSmall
);
parcelHelpers.export(exports, "BigNatModule_getSmall", ()=>BigNatModule_getSmall
);
parcelHelpers.export(exports, "BigNatModule_factorial", ()=>BigNatModule_factorial
);
var _typesJs = require("../Types.js");
var _reflectionJs = require("../Reflection.js");
var _longJs = require("../Long.js");
var _arrayJs = require("../Array.js");
var _listJs = require("../List.js");
var _utilJs = require("../Util.js");
var _stringJs = require("../String.js");
class BigNat extends _typesJs.Record {
    constructor(bound, digits){
        super();
        this.bound = bound | 0;
        this.digits = digits;
    }
}
function BigNat$reflection() {
    return _reflectionJs.record_type("BigInt.BigNat", [], BigNat, ()=>[
            [
                "bound", _reflectionJs.int32_type],
            [
                "digits",
                _reflectionJs.array_type(_reflectionJs.int32_type)
            ]
        ]
    );
}
_c = BigNat$reflection;
function BigNatModule_FFT_pow32(x_mut, n_mut) {
    BigNatModule_FFT_pow32: while(true){
        const x = x_mut, n = n_mut;
        if (n === 0) return 1;
        else if (n % 2 === 0) {
            x_mut = x * x;
            n_mut = ~~(n / 2);
            continue BigNatModule_FFT_pow32;
        } else return x * BigNatModule_FFT_pow32(x * x, ~~(n / 2)) | 0;
        break;
    }
}
_c1 = BigNatModule_FFT_pow32;
function BigNatModule_FFT_leastBounding2Power(b) {
    const findBounding2Power = (b_1_mut, tp_mut, i_mut)=>{
        findBounding2Power: while(true){
            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;
            if (b_1 <= tp) return [
                tp,
                i
            ];
            else {
                b_1_mut = b_1;
                tp_mut = tp * 2;
                i_mut = i + 1;
                continue findBounding2Power;
            }
            break;
        }
    };
    return findBounding2Power(b, 1, 0);
}
_c2 = BigNatModule_FFT_leastBounding2Power;
const BigNatModule_FFT_p = _longJs.fromBits(2013265921, 0, false);
const BigNatModule_FFT_patternInput$004075 = [
    27,
    15,
    31,
    440564289
];
const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];
const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];
const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];
const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];
const BigNatModule_FFT_primeP = BigNatModule_FFT_p;
const BigNatModule_FFT_maxBitsInsideFp = 30;
const BigNatModule_FFT_Fp_p = 2013265921;
const BigNatModule_FFT_Fp_p64 = _longJs.fromBits(2013265921, 0, true);
function BigNatModule_FFT_Fp_toInt(x) {
    return ~~x;
}
_c3 = BigNatModule_FFT_Fp_toInt;
function BigNatModule_FFT_Fp_ofInt32(x) {
    return x >>> 0;
}
_c4 = BigNatModule_FFT_Fp_ofInt32;
const BigNatModule_FFT_Fp_mzero = 0;
const BigNatModule_FFT_Fp_mone = 1;
const BigNatModule_FFT_Fp_mtwo = 2;
function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {
    BigNatModule_FFT_Fp_mpow: while(true){
        const x = x_mut, n = n_mut;
        if (n === 0) return BigNatModule_FFT_Fp_mone;
        else if (n % 2 === 0) {
            x_mut = _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
            n_mut = ~~(n / 2);
            continue BigNatModule_FFT_Fp_mpow;
        } else {
            const y_2 = BigNatModule_FFT_Fp_mpow(_longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~~(n / 2));
            return _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
        }
        break;
    }
}
_c5 = BigNatModule_FFT_Fp_mpow;
function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {
    BigNatModule_FFT_Fp_mpowL: while(true){
        const x = x_mut, n = n_mut;
        if (_longJs.equals(n, _longJs.fromBits(0, 0, false))) return BigNatModule_FFT_Fp_mone;
        else if (_longJs.equals(_longJs.op_Modulus(n, _longJs.fromBits(2, 0, false)), _longJs.fromBits(0, 0, false))) {
            x_mut = _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
            n_mut = _longJs.op_Division(n, _longJs.fromBits(2, 0, false));
            continue BigNatModule_FFT_Fp_mpowL;
        } else {
            const y_2 = BigNatModule_FFT_Fp_mpowL(_longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, _longJs.op_Division(n, _longJs.fromBits(2, 0, false)));
            return _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
        }
        break;
    }
}
_c6 = BigNatModule_FFT_Fp_mpowL;
function BigNatModule_FFT_Fp_m2PowNthRoot(n) {
    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));
}
_c7 = BigNatModule_FFT_Fp_m2PowNthRoot;
function BigNatModule_FFT_Fp_minv(x) {
    return BigNatModule_FFT_Fp_mpowL(x, _longJs.op_Subtraction(BigNatModule_FFT_primeP, _longJs.fromBits(2, 0, false)));
}
_c8 = BigNatModule_FFT_Fp_minv;
function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {
    let x_1, x_3, y_5;
    if (n === 1) res[offset] = u[mu];
    else {
        const halfN = ~~(n / 2) | 0;
        const ww = _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(w, true, 6), _longJs.fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
        const offsetHalfN = offset + halfN | 0;
        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);
        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);
        let wj = BigNatModule_FFT_Fp_mone;
        for(let j = 0; j <= halfN - 1; j++){
            const even = res[offset + j];
            const odd = res[offsetHalfN + j];
            res[offset + j] = (even + (x_1 = wj, _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x_1, true, 6), _longJs.fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p;
            res[offsetHalfN + j] = (even + BigNatModule_FFT_Fp_p - (x_3 = wj, _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x_3, true, 6), _longJs.fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p;
            wj = (y_5 = wj, _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(w, true, 6), _longJs.fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);
        }
    }
}
_c9 = BigNatModule_FFT_computeFFT;
function BigNatModule_FFT_computFftInPlace(n, w, u) {
    const res = _arrayJs.fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);
    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);
    return res;
}
_c10 = BigNatModule_FFT_computFftInPlace;
function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {
    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);
    return _arrayJs.map((y)=>_longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(bigKInv, true, 6), _longJs.fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0
    , BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);
}
_c11 = BigNatModule_FFT_computeInverseFftInPlace;
const BigNatModule_FFT_maxTwoPower = 29;
const BigNatModule_FFT_twoPowerTable = _arrayJs.initialize(BigNatModule_FFT_maxTwoPower - 1, (i)=>BigNatModule_FFT_pow32(2, i)
, Int32Array);
function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {
    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);
    const n = bigK | 0;
    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);
    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);
    return BigNatModule_FFT_computeInverseFftInPlace(n, w, _arrayJs.initialize(n, (i)=>{
        const x = uT[i];
        const y = vT[i];
        return _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
    }, Uint32Array));
}
_c12 = BigNatModule_FFT_computeFftPaddedPolynomialProduct;
function BigNatModule_FFT_padTo(n, u) {
    const uBound = u.length | 0;
    return _arrayJs.initialize(n, (i)=>i < uBound ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero
    , Uint32Array);
}
_c13 = BigNatModule_FFT_padTo;
function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {
    const patternInput = BigNatModule_FFT_leastBounding2Power(degu + degv + 1);
    const bigK = patternInput[0] | 0;
    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);
    const u_1 = BigNatModule_FFT_padTo(bigK, u);
    const v_1 = BigNatModule_FFT_padTo(bigK, v);
    const n = bigK | 0;
    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);
    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);
    return _arrayJs.map((x_1)=>BigNatModule_FFT_Fp_toInt(x_1)
    , BigNatModule_FFT_computeInverseFftInPlace(n, w, _arrayJs.initialize(n, (i)=>{
        const x = uT[i];
        const y = vT[i];
        return _longJs.toInt(_longJs.op_Modulus(_longJs.op_Multiply(_longJs.fromInteger(x, true, 6), _longJs.fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;
    }, Uint32Array)), Int32Array);
}
_c14 = BigNatModule_FFT_computeFftPolynomialProduct;
const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;
const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;
const BigNatModule_FFT_maxFp = (BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;
function BigNatModule_bound(n) {
    return n.bound;
}
_c15 = BigNatModule_bound;
function BigNatModule_setBound(n, v) {
    n.bound = v | 0;
}
_c16 = BigNatModule_setBound;
function BigNatModule_coeff(n, i) {
    return n.digits[i];
}
_c17 = BigNatModule_coeff;
function BigNatModule_coeff64(n, i) {
    return _longJs.fromInteger(BigNatModule_coeff(n, i), false, 2);
}
_c18 = BigNatModule_coeff64;
function BigNatModule_setCoeff(n, i, v) {
    n.digits[i] = v | 0;
}
_c19 = BigNatModule_setCoeff;
function BigNatModule_pow64(x_mut, n_mut) {
    BigNatModule_pow64: while(true){
        const x = x_mut, n = n_mut;
        if (n === 0) return _longJs.fromBits(1, 0, false);
        else if (n % 2 === 0) {
            x_mut = _longJs.op_Multiply(x, x);
            n_mut = ~~(n / 2);
            continue BigNatModule_pow64;
        } else return _longJs.op_Multiply(x, BigNatModule_pow64(_longJs.op_Multiply(x, x), ~~(n / 2)));
        break;
    }
}
_c20 = BigNatModule_pow64;
function BigNatModule_pow32(x_mut, n_mut) {
    BigNatModule_pow32: while(true){
        const x = x_mut, n = n_mut;
        if (n === 0) return 1;
        else if (n % 2 === 0) {
            x_mut = x * x;
            n_mut = ~~(n / 2);
            continue BigNatModule_pow32;
        } else return x * BigNatModule_pow32(x * x, ~~(n / 2)) | 0;
        break;
    }
}
_c21 = BigNatModule_pow32;
function BigNatModule_hash(n) {
    let res = 0;
    for(let i = 0; i <= n.bound - 1; i++)res = n.digits[i] + (res << 3) | 0;
    return res | 0;
}
_c22 = BigNatModule_hash;
function BigNatModule_maxInt(a, b) {
    if (a < b) return b | 0;
    else return a | 0;
}
_c23 = BigNatModule_maxInt;
function BigNatModule_minInt(a, b) {
    if (a < b) return a | 0;
    else return b | 0;
}
_c24 = BigNatModule_minInt;
const BigNatModule_baseBits = 24;
const BigNatModule_baseN = 16777216;
const BigNatModule_baseMask = 16777215;
const BigNatModule_baseNi64 = _longJs.fromBits(16777216, 0, false);
const BigNatModule_baseMaski64 = _longJs.fromBits(16777215, 0, false);
const BigNatModule_baseMaskU = _longJs.fromBits(16777215, 0, true);
const BigNatModule_baseMask32A = 16777215;
const BigNatModule_baseMask32B = 255;
const BigNatModule_baseShift32B = 24;
const BigNatModule_baseMask64A = 16777215;
const BigNatModule_baseMask64B = 16777215;
const BigNatModule_baseMask64C = 65535;
const BigNatModule_baseShift64B = 24;
const BigNatModule_baseShift64C = 48;
function BigNatModule_divbase(x) {
    return ~~(x >>> 0 >>> BigNatModule_baseBits);
}
_c25 = BigNatModule_divbase;
function BigNatModule_modbase(x) {
    return x & BigNatModule_baseMask;
}
_c26 = BigNatModule_modbase;
function BigNatModule_createN(b) {
    return new BigNat(b, new Int32Array(b));
}
_c27 = BigNatModule_createN;
function BigNatModule_copyN(x) {
    return new BigNat(x.bound, _arrayJs.copy(x.digits));
}
_c28 = BigNatModule_copyN;
function BigNatModule_normN(n) {
    const findLeastBound = (na_mut, i_mut)=>{
        findLeastBound: while(true){
            const na = na_mut, i = i_mut;
            if (i === -1 ? true : na[i] !== 0) return i + 1 | 0;
            else {
                na_mut = na;
                i_mut = i - 1;
                continue findLeastBound;
            }
            break;
        }
    };
    const bound1 = findLeastBound(n.digits, n.bound - 1) | 0;
    n.bound = bound1 | 0;
    return n;
}
_c29 = BigNatModule_normN;
const BigNatModule_boundInt = 2;
const BigNatModule_boundInt64 = 3;
const BigNatModule_boundBase = 1;
function BigNatModule_embed(x) {
    const x_1 = (x < 0 ? 0 : x) | 0;
    if (x_1 < BigNatModule_baseN) {
        const r = BigNatModule_createN(1);
        r.digits[0] = x_1 | 0;
        return BigNatModule_normN(r);
    } else {
        const r_1 = BigNatModule_createN(BigNatModule_boundInt);
        for(let i = 0; i <= BigNatModule_boundInt - 1; i++)r_1.digits[i] = ~~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)) % BigNatModule_baseN | 0;
        return BigNatModule_normN(r_1);
    }
}
_c30 = BigNatModule_embed;
function BigNatModule_embed64(x) {
    const x_1 = _longJs.compare(x, _longJs.fromBits(0, 0, false)) < 0 ? _longJs.fromBits(0, 0, false) : x;
    const r = BigNatModule_createN(BigNatModule_boundInt64);
    for(let i = 0; i <= BigNatModule_boundInt64 - 1; i++)r.digits[i] = ~~_longJs.toInt(_longJs.op_Modulus(_longJs.op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64)) | 0;
    return BigNatModule_normN(r);
}
_c31 = BigNatModule_embed64;
function BigNatModule_eval32(n) {
    if (n.bound === 1) return n.digits[0] | 0;
    else {
        let acc = 0;
        for(let i = n.bound - 1; i >= 0; i--)acc = n.digits[i] + BigNatModule_baseN * acc | 0;
        return acc | 0;
    }
}
_c32 = BigNatModule_eval32;
function BigNatModule_eval64(n) {
    if (n.bound === 1) return _longJs.fromInteger(n.digits[0], false, 2);
    else {
        let acc = _longJs.fromBits(0, 0, false);
        for(let i = n.bound - 1; i >= 0; i--)acc = _longJs.op_Addition(_longJs.fromInteger(n.digits[i], false, 2), _longJs.op_Multiply(BigNatModule_baseNi64, acc));
        return acc;
    }
}
_c33 = BigNatModule_eval64;
const BigNatModule_one = BigNatModule_embed(1);
const BigNatModule_zero = BigNatModule_embed(0);
function BigNatModule_restrictTo(d, n) {
    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);
}
_c34 = BigNatModule_restrictTo;
function BigNatModule_shiftUp(d, n) {
    const m = BigNatModule_createN(n.bound + d);
    for(let i = 0; i <= n.bound - 1; i++)m.digits[i + d] = n.digits[i] | 0;
    return m;
}
_c35 = BigNatModule_shiftUp;
function BigNatModule_shiftDown(d, n) {
    if (n.bound - d <= 0) return BigNatModule_zero;
    else {
        const m = BigNatModule_createN(n.bound - d);
        for(let i = 0; i <= m.bound - 1; i++)m.digits[i] = n.digits[i + d] | 0;
        return m;
    }
}
_c36 = BigNatModule_shiftDown;
function BigNatModule_degree(n) {
    return n.bound - 1;
}
_c37 = BigNatModule_degree;
function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {
    let z, i_1, z_1, i_2;
    BigNatModule_addP: while(true){
        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;
        if (i < n) {
            const x = (z = p, (i_1 = i | 0, i_1 < z.bound ? z.digits[i_1] : 0)) + (z_1 = q, (i_2 = i | 0, i_2 < z_1.bound ? z_1.digits[i_2] : 0)) + c | 0;
            r.digits[i] = BigNatModule_modbase(x) | 0;
            i_mut = i + 1;
            n_mut = n;
            c_mut = BigNatModule_divbase(x);
            p_mut = p;
            q_mut = q;
            r_mut = r;
            continue BigNatModule_addP;
        }
        break;
    }
}
_c38 = BigNatModule_addP;
function BigNatModule_add(p, q) {
    const rbound = 1 + BigNatModule_maxInt(p.bound, q.bound) | 0;
    const r = BigNatModule_createN(rbound);
    BigNatModule_addP(0, rbound, 0, p, q, r);
    return BigNatModule_normN(r);
}
_c39 = BigNatModule_add;
function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {
    let z, i_1, z_1, i_2;
    BigNatModule_subP: while(true){
        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;
        if (i < n) {
            const x = (z = p, (i_1 = i | 0, i_1 < z.bound ? z.digits[i_1] : 0)) - (z_1 = q, (i_2 = i | 0, i_2 < z_1.bound ? z_1.digits[i_2] : 0)) + c | 0;
            if (x > 0) {
                r.digits[i] = BigNatModule_modbase(x) | 0;
                i_mut = i + 1;
                n_mut = n;
                c_mut = BigNatModule_divbase(x);
                p_mut = p;
                q_mut = q;
                r_mut = r;
                continue BigNatModule_subP;
            } else {
                const x_1 = x + BigNatModule_baseN | 0;
                r.digits[i] = BigNatModule_modbase(x_1) | 0;
                i_mut = i + 1;
                n_mut = n;
                c_mut = BigNatModule_divbase(x_1) - 1;
                p_mut = p;
                q_mut = q;
                r_mut = r;
                continue BigNatModule_subP;
            }
        } else return c !== 0;
        break;
    }
}
_c40 = BigNatModule_subP;
function BigNatModule_sub(p, q) {
    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;
    const r = BigNatModule_createN(rbound);
    if (BigNatModule_subP(0, rbound, 0, p, q, r)) return BigNatModule_embed(0);
    else return BigNatModule_normN(r);
}
_c41 = BigNatModule_sub;
function BigNatModule_isZero(p) {
    return p.bound === 0;
}
_c42 = BigNatModule_isZero;
function BigNatModule_IsZero(p) {
    return BigNatModule_isZero(p);
}
_c43 = BigNatModule_IsZero;
function BigNatModule_isOne(p) {
    if (p.bound === 1) return p.digits[0] === 1;
    else return false;
}
_c44 = BigNatModule_isOne;
function BigNatModule_equal(p, q) {
    if (p.bound === q.bound) {
        const check = (pa_mut, qa_mut, i_mut)=>{
            check: while(true){
                const pa = pa_mut, qa = qa_mut, i = i_mut;
                if (i === -1) return true;
                else if (pa[i] === qa[i]) {
                    pa_mut = pa;
                    qa_mut = qa;
                    i_mut = i - 1;
                    continue check;
                } else return false;
                break;
            }
        };
        return check(p.digits, q.digits, p.bound - 1);
    } else return false;
}
_c45 = BigNatModule_equal;
function BigNatModule_shiftCompare(p, pn, q, qn) {
    if (p.bound + pn < q.bound + qn) return -1;
    else if (p.bound + pn > q.bound + pn) return 1;
    else {
        const check = (pa_mut, qa_mut, i_mut)=>{
            check: while(true){
                const pa = pa_mut, qa = qa_mut, i = i_mut;
                if (i === -1) return 0;
                else {
                    const pai = (i < pn ? 0 : pa[i - pn]) | 0;
                    const qai = (i < qn ? 0 : qa[i - qn]) | 0;
                    if (pai === qai) {
                        pa_mut = pa;
                        qa_mut = qa;
                        i_mut = i - 1;
                        continue check;
                    } else if (pai < qai) return -1;
                    else return 1;
                }
                break;
            }
        };
        return check(p.digits, q.digits, p.bound + pn - 1) | 0;
    }
}
_c46 = BigNatModule_shiftCompare;
function BigNatModule_compare(p, q) {
    if (p.bound < q.bound) return -1;
    else if (p.bound > q.bound) return 1;
    else {
        const check = (pa_mut, qa_mut, i_mut)=>{
            check: while(true){
                const pa = pa_mut, qa = qa_mut, i = i_mut;
                if (i === -1) return 0;
                else if (pa[i] === qa[i]) {
                    pa_mut = pa;
                    qa_mut = qa;
                    i_mut = i - 1;
                    continue check;
                } else if (pa[i] < qa[i]) return -1;
                else return 1;
                break;
            }
        };
        return check(p.digits, q.digits, p.bound - 1) | 0;
    }
}
_c47 = BigNatModule_compare;
function BigNatModule_lt(p, q) {
    return BigNatModule_compare(p, q) === -1;
}
_c48 = BigNatModule_lt;
function BigNatModule_gt(p, q) {
    return BigNatModule_compare(p, q) === 1;
}
_c49 = BigNatModule_gt;
function BigNatModule_lte(p, q) {
    return BigNatModule_compare(p, q) !== 1;
}
_c50 = BigNatModule_lte;
function BigNatModule_gte(p, q) {
    return BigNatModule_compare(p, q) !== -1;
}
_c51 = BigNatModule_gte;
function BigNatModule_min(a, b) {
    if (BigNatModule_lt(a, b)) return a;
    else return b;
}
_c52 = BigNatModule_min;
function BigNatModule_max(a, b) {
    if (BigNatModule_lt(a, b)) return b;
    else return a;
}
_c53 = BigNatModule_max;
function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {
    BigNatModule_contributeArr: while(true){
        const a = a_mut, i = i_mut, c = c_mut;
        const x = _longJs.op_Addition(_longJs.fromInteger(a[i], false, 2), c);
        const c_1 = _longJs.op_Division(x, BigNatModule_baseNi64);
        const x_3 = ~~_longJs.toInt(_longJs.op_BitwiseAnd(x, BigNatModule_baseMaski64)) | 0;
        a[i] = x_3 | 0;
        if (_longJs.compare(c_1, _longJs.fromBits(0, 0, false)) > 0) {
            a_mut = a;
            i_mut = i + 1;
            c_mut = c_1;
            continue BigNatModule_contributeArr;
        }
        break;
    }
}
_c54 = BigNatModule_contributeArr;
function BigNatModule_scale(k, p) {
    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);
    const k_1 = _longJs.fromInteger(k, false, 2);
    for(let i = 0; i <= p.bound - 1; i++)BigNatModule_contributeArr(r.digits, i, _longJs.op_Multiply(k_1, _longJs.fromInteger(p.digits[i], false, 2)));
    return BigNatModule_normN(r);
}
_c55 = BigNatModule_scale;
function BigNatModule_mulSchoolBookBothSmall(p, q) {
    const r = BigNatModule_createN(2);
    const rak = _longJs.op_Multiply(_longJs.fromInteger(p, false, 2), _longJs.fromInteger(q, false, 2));
    BigNatModule_setCoeff(r, 0, ~~_longJs.toInt(_longJs.op_BitwiseAnd(rak, BigNatModule_baseMaski64)));
    BigNatModule_setCoeff(r, 1, ~~_longJs.toInt(_longJs.op_Division(rak, BigNatModule_baseNi64)));
    return BigNatModule_normN(r);
}
_c56 = BigNatModule_mulSchoolBookBothSmall;
function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {
    BigNatModule_mulSchoolBookCarry: while(true){
        const r = r_mut, c = c_mut, k = k_mut;
        if (_longJs.compare(c, _longJs.fromBits(0, 0, false)) > 0) {
            const rak = _longJs.op_Addition(BigNatModule_coeff64(r, k), c);
            BigNatModule_setCoeff(r, k, ~~_longJs.toInt(_longJs.op_BitwiseAnd(rak, BigNatModule_baseMaski64)));
            r_mut = r;
            c_mut = _longJs.op_Division(rak, BigNatModule_baseNi64);
            k_mut = k + 1;
            continue BigNatModule_mulSchoolBookCarry;
        }
        break;
    }
}
_c57 = BigNatModule_mulSchoolBookCarry;
function BigNatModule_mulSchoolBookOneSmall(p, q) {
    const bp = BigNatModule_bound(p) | 0;
    const r = BigNatModule_createN(bp + 1);
    const q_1 = _longJs.fromInteger(q, false, 2);
    let c = _longJs.fromBits(0, 0, false);
    for(let i = 0; i <= bp - 1; i++){
        const rak = _longJs.op_Addition(_longJs.op_Addition(c, BigNatModule_coeff64(r, i)), _longJs.op_Multiply(BigNatModule_coeff64(p, i), q_1));
        BigNatModule_setCoeff(r, i, ~~_longJs.toInt(_longJs.op_BitwiseAnd(rak, BigNatModule_baseMaski64)));
        c = _longJs.op_Division(rak, BigNatModule_baseNi64);
    }
    BigNatModule_mulSchoolBookCarry(r, c, bp);
    return BigNatModule_normN(r);
}
_c58 = BigNatModule_mulSchoolBookOneSmall;
function BigNatModule_mulSchoolBookNeitherSmall(p, q) {
    const r = BigNatModule_createN(p.bound + q.bound);
    const ra = r.digits;
    for(let i = 0; i <= p.bound - 1; i++){
        const pai = _longJs.fromInteger(p.digits[i], false, 2);
        let c = _longJs.fromBits(0, 0, false);
        let k = i;
        for(let j = 0; j <= q.bound - 1; j++){
            const qaj = _longJs.fromInteger(q.digits[j], false, 2);
            const rak = _longJs.op_Addition(_longJs.op_Addition(_longJs.fromInteger(ra[k], false, 2), c), _longJs.op_Multiply(pai, qaj));
            ra[k] = ~~_longJs.toInt(_longJs.op_BitwiseAnd(rak, BigNatModule_baseMaski64)) | 0;
            c = _longJs.op_Division(rak, BigNatModule_baseNi64);
            k = k + 1 | 0;
        }
        BigNatModule_mulSchoolBookCarry(r, c, k);
    }
    return BigNatModule_normN(r);
}
_c59 = BigNatModule_mulSchoolBookNeitherSmall;
function BigNatModule_mulSchoolBook(p, q) {
    const pSmall = BigNatModule_bound(p) === 1;
    const qSmall = BigNatModule_bound(q) === 1;
    if (pSmall ? qSmall : false) return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));
    else if (pSmall) return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));
    else if (qSmall) return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));
    else return BigNatModule_mulSchoolBookNeitherSmall(p, q);
}
_c60 = BigNatModule_mulSchoolBook;
class BigNatModule_encoding extends _typesJs.Record {
    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits){
        super();
        this.bigL = bigL | 0;
        this.twoToBigL = twoToBigL | 0;
        this.k = k | 0;
        this.bigK = bigK | 0;
        this.bigN = bigN | 0;
        this.split = split | 0;
        this.splits = splits;
    }
}
function BigNatModule_encoding$reflection() {
    return _reflectionJs.record_type("BigInt.BigNatModule.encoding", [], BigNatModule_encoding, ()=>[
            [
                "bigL", _reflectionJs.int32_type],
            [
                "twoToBigL", _reflectionJs.int32_type],
            [
                "k", _reflectionJs.int32_type],
            [
                "bigK", _reflectionJs.int32_type],
            [
                "bigN", _reflectionJs.int32_type],
            [
                "split", _reflectionJs.int32_type],
            [
                "splits",
                _reflectionJs.array_type(_reflectionJs.int32_type)
            ]
        ]
    );
}
_c61 = BigNatModule_encoding$reflection;
function BigNatModule_mkEncoding(bigL1, k1, bigK1, bigN1) {
    return new BigNatModule_encoding(bigL1, BigNatModule_pow32(2, bigL1), k1, bigK1, bigN1, ~~(BigNatModule_baseBits / bigL1), _arrayJs.initialize(~~(BigNatModule_baseBits / bigL1), (i)=>BigNatModule_pow32(2, bigL1 * i)
    , Int32Array));
}
_c62 = BigNatModule_mkEncoding;
const BigNatModule_table = [
    BigNatModule_mkEncoding(1, 28, 268435456, 268435456),
    BigNatModule_mkEncoding(2, 26, 67108864, 134217728),
    BigNatModule_mkEncoding(3, 24, 16777216, 50331648),
    BigNatModule_mkEncoding(4, 22, 4194304, 16777216),
    BigNatModule_mkEncoding(5, 20, 1048576, 5242880),
    BigNatModule_mkEncoding(6, 18, 262144, 1572864),
    BigNatModule_mkEncoding(7, 16, 65536, 458752),
    BigNatModule_mkEncoding(8, 14, 16384, 131072),
    BigNatModule_mkEncoding(9, 12, 4096, 36864),
    BigNatModule_mkEncoding(10, 10, 1024, 10240),
    BigNatModule_mkEncoding(11, 8, 256, 2816),
    BigNatModule_mkEncoding(12, 6, 64, 768),
    BigNatModule_mkEncoding(13, 4, 16, 208)
];
function BigNatModule_calculateTableTow(bigL1) {
    const k1 = BigNatModule_FFT_maxBitsInsideFp - 2 * bigL1 | 0;
    const bigK1 = BigNatModule_pow64(_longJs.fromBits(2, 0, false), k1);
    return [
        bigL1,
        k1,
        bigK1,
        _longJs.op_Multiply(bigK1, _longJs.fromInteger(bigL1, false, 2))
    ];
}
_c63 = BigNatModule_calculateTableTow;
function BigNatModule_encodingGivenResultBits(bitsRes) {
    const selectFrom = (i_mut)=>{
        selectFrom: while(true){
            const i = i_mut;
            if (i + 1 < BigNatModule_table.length ? bitsRes < BigNatModule_table[i + 1].bigN : false) {
                i_mut = i + 1;
                continue selectFrom;
            } else return BigNatModule_table[i];
            break;
        }
    };
    if (bitsRes >= BigNatModule_table[0].bigN) throw new Error("Product is huge, around 268435456 bits, beyond quickmul");
    else return selectFrom(0);
}
_c64 = BigNatModule_encodingGivenResultBits;
const BigNatModule_bitmask = _arrayJs.initialize(BigNatModule_baseBits, (i)=>BigNatModule_pow32(2, i) - 1
, Int32Array);
_c65 = BigNatModule_bitmask;
const BigNatModule_twopowers = _arrayJs.initialize(BigNatModule_baseBits, (i)=>BigNatModule_pow32(2, i)
, Int32Array);
_c66 = BigNatModule_twopowers;
const BigNatModule_twopowersI64 = _arrayJs.initialize(BigNatModule_baseBits, (i)=>BigNatModule_pow64(_longJs.fromBits(2, 0, false), i)
);
_c67 = BigNatModule_twopowersI64;
function BigNatModule_wordBits(word) {
    const hi = (k_mut)=>{
        hi: while(true){
            const k1 = k_mut;
            if (k1 === 0) return 0;
            else if ((word & BigNatModule_twopowers[k1 - 1]) !== 0) return k1 | 0;
            else {
                k_mut = k1 - 1;
                continue hi;
            }
            break;
        }
    };
    return hi(BigNatModule_baseBits) | 0;
}
_c68 = BigNatModule_wordBits;
function BigNatModule_bits(u) {
    if (u.bound === 0) return 0;
    else return BigNatModule_degree(u) * BigNatModule_baseBits + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)]) | 0;
}
_c69 = BigNatModule_bits;
function BigNatModule_extractBits(n, enc, bi) {
    let z, i, z_1, i_1, z_2, i_2;
    const biw = ~~(bi / BigNatModule_baseBits) | 0;
    const bjw = ~~((bi + enc.bigL - 1) / BigNatModule_baseBits) | 0;
    if (biw !== bjw) {
        const xbit = bi % BigNatModule_baseBits | 0;
        return ((z = n, i = biw | 0, i < z.bound ? z.digits[i] : 0) >> xbit | (z_1 = n, i_1 = bjw | 0, i_1 < z_1.bound ? z_1.digits[i_1] : 0) << BigNatModule_baseBits - xbit) & BigNatModule_bitmask[enc.bigL] | 0;
    } else return (z_2 = n, i_2 = biw | 0, i_2 < z_2.bound ? z_2.digits[i_2] : 0) >> bi % BigNatModule_baseBits & BigNatModule_bitmask[enc.bigL] | 0;
}
_c70 = BigNatModule_extractBits;
function BigNatModule_encodePoly(enc, n) {
    const poly = _arrayJs.fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));
    const biMax = n.bound * BigNatModule_baseBits | 0;
    const encoder = (i_mut, bi_mut)=>{
        encoder: while(true){
            const i = i_mut, bi = bi_mut;
            if (i === enc.bigK ? true : bi > biMax) ;
            else {
                const pi = BigNatModule_extractBits(n, enc, bi) | 0;
                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);
                i_mut = i + 1;
                bi_mut = bi + enc.bigL;
                continue encoder;
            }
            break;
        }
    };
    encoder(0, 0);
    return poly;
}
_c71 = BigNatModule_encodePoly;
function BigNatModule_decodeResultBits(enc, poly) {
    let n = 0;
    for(let i = 0; i <= poly.length - 1; i++)if (poly[i] !== BigNatModule_FFT_mzero) n = i | 0;
    return BigNatModule_FFT_maxBitsInsideFp + enc.bigL * n + 1 + 1 | 0;
}
_c72 = BigNatModule_decodeResultBits;
function BigNatModule_decodePoly(enc, poly) {
    const rbound = ~~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits) + 1 | 0;
    const r = BigNatModule_createN(rbound);
    const evaluate = (i_mut, j_mut, d_mut)=>{
        evaluate: while(true){
            const i = i_mut, j = j_mut, d = d_mut;
            if (i === enc.bigK) ;
            else {
                if (j >= rbound) ;
                else BigNatModule_contributeArr(r.digits, j, _longJs.op_Multiply(_longJs.fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));
                const d_1 = d + enc.bigL | 0;
                const patternInput = d_1 >= BigNatModule_baseBits ? [
                    j + 1,
                    d_1 - BigNatModule_baseBits
                ] : [
                    j,
                    d_1
                ];
                i_mut = i + 1;
                j_mut = patternInput[0];
                d_mut = patternInput[1];
                continue evaluate;
            }
            break;
        }
    };
    evaluate(0, 0, 0);
    return BigNatModule_normN(r);
}
_c73 = BigNatModule_decodePoly;
function BigNatModule_quickMulUsingFft(u, v) {
    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));
    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));
}
_c74 = BigNatModule_quickMulUsingFft;
const BigNatModule_minDigitsKaratsuba = 16;
function BigNatModule_recMulKaratsuba(mul, p, q) {
    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;
    if (bmax > BigNatModule_minDigitsKaratsuba) {
        const k1 = ~~(bmax / 2) | 0;
        const a0 = BigNatModule_restrictTo(k1, p);
        const a1 = BigNatModule_shiftDown(k1, p);
        const b0 = BigNatModule_restrictTo(k1, q);
        const b1 = BigNatModule_shiftDown(k1, q);
        const q0 = mul(a0, b0);
        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));
        const q2 = mul(a1, b1);
        return BigNatModule_add(q0, BigNatModule_shiftUp(k1, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k1, q2))));
    } else return BigNatModule_mulSchoolBook(p, q);
}
_c75 = BigNatModule_recMulKaratsuba;
function BigNatModule_mulKaratsuba(x, y) {
    return BigNatModule_recMulKaratsuba((x_1, y_1)=>BigNatModule_mulKaratsuba(x_1, y_1)
    , x, y);
}
_c76 = BigNatModule_mulKaratsuba;
const BigNatModule_productDigitsUpperSchoolBook = ~~(64000 / BigNatModule_baseBits);
const BigNatModule_singleDigitForceSchoolBook = ~~(32000 / BigNatModule_baseBits);
const BigNatModule_productDigitsUpperFft = ~~(BigNatModule_table[0].bigN / BigNatModule_baseBits);
function BigNatModule_mul(p, q) {
    return BigNatModule_mulSchoolBook(p, q);
}
_c77 = BigNatModule_mul;
function BigNatModule_scaleSubInPlace(x, f, a, n) {
    const patternInput = [
        x.digits,
        BigNatModule_degree(x)
    ];
    const x_1 = patternInput[0];
    const patternInput_1 = [
        a.digits,
        BigNatModule_degree(a)
    ];
    const ad = patternInput_1[1] | 0;
    const a_1 = patternInput_1[0];
    const f_1 = _longJs.fromInteger(f, false, 2);
    let j = 0;
    let z = _longJs.op_Multiply(f_1, _longJs.fromInteger(a_1[0], false, 2));
    while(_longJs.compare(z, _longJs.fromBits(0, 0, false)) > 0 ? true : j < ad){
        if (j > patternInput[1]) throw new Error("scaleSubInPlace: pre-condition did not apply, result would be -ve");
        let zLo = ~~_longJs.toInt(_longJs.op_BitwiseAnd(z, BigNatModule_baseMaski64));
        let zHi = _longJs.op_Division(z, BigNatModule_baseNi64);
        if (zLo <= x_1[j + n]) x_1[j + n] = x_1[j + n] - zLo | 0;
        else {
            x_1[j + n] = x_1[j + n] + (BigNatModule_baseN - zLo) | 0;
            zHi = _longJs.op_Addition(zHi, _longJs.fromBits(1, 0, false));
        }
        if (j < ad) z = _longJs.op_Addition(zHi, _longJs.op_Multiply(f_1, _longJs.fromInteger(a_1[j + 1], false, 2)));
        else z = zHi;
        j = j + 1 | 0;
    }
    BigNatModule_normN(x);
}
_c78 = BigNatModule_scaleSubInPlace;
function BigNatModule_scaleSub(x, f, a, n) {
    const freshx = BigNatModule_add(x, BigNatModule_zero);
    BigNatModule_scaleSubInPlace(freshx, f, a, n);
    return BigNatModule_normN(freshx);
}
_c79 = BigNatModule_scaleSub;
function BigNatModule_scaleAddInPlace(x, f, a, n) {
    const patternInput = [
        x.digits,
        BigNatModule_degree(x)
    ];
    const x_1 = patternInput[0];
    const patternInput_1 = [
        a.digits,
        BigNatModule_degree(a)
    ];
    const ad = patternInput_1[1] | 0;
    const a_1 = patternInput_1[0];
    const f_1 = _longJs.fromInteger(f, false, 2);
    let j = 0;
    let z = _longJs.op_Multiply(f_1, _longJs.fromInteger(a_1[0], false, 2));
    while(_longJs.compare(z, _longJs.fromBits(0, 0, false)) > 0 ? true : j < ad){
        if (j > patternInput[1]) throw new Error("scaleSubInPlace: pre-condition did not apply, result would be -ve");
        let zLo = ~~_longJs.toInt(_longJs.op_BitwiseAnd(z, BigNatModule_baseMaski64));
        let zHi = _longJs.op_Division(z, BigNatModule_baseNi64);
        if (zLo < BigNatModule_baseN - x_1[j + n]) x_1[j + n] = x_1[j + n] + zLo | 0;
        else {
            x_1[j + n] = zLo - (BigNatModule_baseN - x_1[j + n]) | 0;
            zHi = _longJs.op_Addition(zHi, _longJs.fromBits(1, 0, false));
        }
        if (j < ad) z = _longJs.op_Addition(zHi, _longJs.op_Multiply(f_1, _longJs.fromInteger(a_1[j + 1], false, 2)));
        else z = zHi;
        j = j + 1 | 0;
    }
    BigNatModule_normN(x);
}
_c80 = BigNatModule_scaleAddInPlace;
function BigNatModule_scaleAdd(x, f, a, n) {
    const freshx = BigNatModule_add(x, BigNatModule_zero);
    BigNatModule_scaleAddInPlace(freshx, f, a, n);
    return BigNatModule_normN(freshx);
}
_c81 = BigNatModule_scaleAdd;
function BigNatModule_removeFactor(x, a, n) {
    const patternInput = [
        BigNatModule_degree(a),
        BigNatModule_degree(x)
    ];
    const degx = patternInput[1] | 0;
    const dega = patternInput[0] | 0;
    if (degx < dega + n) return 0;
    else {
        const patternInput_1 = [
            a.digits,
            x.digits
        ];
        const xa = patternInput_1[1];
        const aa = patternInput_1[0];
        const f = (dega === 0 ? degx === n ? ~~(xa[n] / aa[0]) : ~~_longJs.toInt(_longJs.op_Division(_longJs.op_Addition(_longJs.op_Multiply(_longJs.fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), _longJs.fromInteger(xa[degx - 1], false, 2)), _longJs.fromInteger(aa[0], false, 2))) : degx === dega + n ? ~~(xa[degx] / (aa[dega] + 1)) : ~~_longJs.toInt(_longJs.op_Division(_longJs.op_Addition(_longJs.op_Multiply(_longJs.fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), _longJs.fromInteger(xa[degx - 1], false, 2)), _longJs.op_Addition(_longJs.fromInteger(aa[dega], false, 2), _longJs.fromBits(1, 0, false))))) | 0;
        if (f === 0) {
            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) return 1;
            else return 0;
        } else return f | 0;
    }
}
_c82 = BigNatModule_removeFactor;
function BigNatModule_divmod(b, a) {
    if (BigNatModule_isZero(a)) throw new Error();
    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) return [
        BigNatModule_zero,
        b
    ];
    else {
        const x = BigNatModule_copyN(b);
        const d = BigNatModule_createN(BigNatModule_degree(b) - BigNatModule_degree(a) + 1 + 1);
        let p = BigNatModule_degree(b);
        const m = BigNatModule_degree(a) | 0;
        let n = p - m;
        const Invariant = (tupledArg)=>{
        };
        let finished = false;
        while(!finished){
            Invariant([
                d,
                x,
                n,
                p
            ]);
            const f = BigNatModule_removeFactor(x, a, n) | 0;
            if (f > 0) {
                BigNatModule_scaleSubInPlace(x, f, a, n);
                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);
                Invariant([
                    d,
                    x,
                    n,
                    p
                ]);
            } else {
                finished = f === 0 ? n === 0 : false;
                if (!finished) {
                    if (p === m + n) {
                        Invariant([
                            d,
                            x,
                            n - 1,
                            p
                        ]);
                        n = n - 1 | 0;
                    } else {
                        Invariant([
                            d,
                            x,
                            n - 1,
                            p - 1
                        ]);
                        n = n - 1 | 0;
                        p = p - 1 | 0;
                    }
                }
            }
        }
        return [
            BigNatModule_normN(d),
            BigNatModule_normN(x)
        ];
    }
}
_c83 = BigNatModule_divmod;
function BigNatModule_div(b, a) {
    return BigNatModule_divmod(b, a)[0];
}
_c84 = BigNatModule_div;
function BigNatModule_rem(b, a) {
    return BigNatModule_divmod(b, a)[1];
}
_c85 = BigNatModule_rem;
function BigNatModule_bitAnd(a, b) {
    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));
    for(let i = 0; i <= r.bound - 1; i++)r.digits[i] = a.digits[i] & b.digits[i] | 0;
    return BigNatModule_normN(r);
}
_c86 = BigNatModule_bitAnd;
function BigNatModule_bitOr(a, b) {
    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));
    for(let i = 0; i <= a.bound - 1; i++)r.digits[i] = r.digits[i] | a.digits[i] | 0;
    for(let i_1 = 0; i_1 <= b.bound - 1; i_1++)r.digits[i_1] = r.digits[i_1] | b.digits[i_1] | 0;
    return BigNatModule_normN(r);
}
_c87 = BigNatModule_bitOr;
function BigNatModule_bitXor(a, b) {
    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));
    for(let i = 0; i <= a.bound - 1; i++)r.digits[i] = r.digits[i] ^ a.digits[i] | 0;
    for(let i_1 = 0; i_1 <= b.bound - 1; i_1++)r.digits[i_1] = r.digits[i_1] ^ b.digits[i_1] | 0;
    return BigNatModule_normN(r);
}
_c88 = BigNatModule_bitXor;
function BigNatModule_hcf(a, b) {
    const hcfloop = (a_1_mut, b_1_mut)=>{
        hcfloop: while(true){
            const a_1 = a_1_mut, b_1 = b_1_mut;
            if (BigNatModule_equal(BigNatModule_zero, a_1)) return b_1;
            else {
                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];
                b_1_mut = a_1;
                continue hcfloop;
            }
            break;
        }
    };
    if (BigNatModule_lt(a, b)) return hcfloop(a, b);
    else return hcfloop(b, a);
}
_c89 = BigNatModule_hcf;
const BigNatModule_two = BigNatModule_embed(2);
function BigNatModule_powi(x, n) {
    const power = (acc_mut, x_1_mut, n_1_mut)=>{
        power: while(true){
            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;
            if (n_1 === 0) return acc;
            else if (n_1 % 2 === 0) {
                acc_mut = acc;
                x_1_mut = BigNatModule_mul(x_1, x_1);
                n_1_mut = ~~(n_1 / 2);
                continue power;
            } else {
                acc_mut = BigNatModule_mul(x_1, acc);
                x_1_mut = BigNatModule_mul(x_1, x_1);
                n_1_mut = ~~(n_1 / 2);
                continue power;
            }
            break;
        }
    };
    return power(BigNatModule_one, x, n);
}
_c90 = BigNatModule_powi;
function BigNatModule_pow(x, n) {
    const power = (acc_mut, x_1_mut, n_1_mut)=>{
        power: while(true){
            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;
            if (BigNatModule_isZero(n_1)) return acc;
            else {
                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);
                const ndiv2 = patternInput[0];
                if (BigNatModule_isZero(patternInput[1])) {
                    acc_mut = acc;
                    x_1_mut = BigNatModule_mul(x_1, x_1);
                    n_1_mut = ndiv2;
                    continue power;
                } else {
                    acc_mut = BigNatModule_mul(x_1, acc);
                    x_1_mut = BigNatModule_mul(x_1, x_1);
                    n_1_mut = ndiv2;
                    continue power;
                }
            }
            break;
        }
    };
    return power(BigNatModule_one, x, n);
}
_c91 = BigNatModule_pow;
function BigNatModule_toFloat(n) {
    const evalFloat = (acc_mut, k_mut, i_mut)=>{
        evalFloat: while(true){
            const acc = acc_mut, k1 = k_mut, i = i_mut;
            if (i === n.bound) return acc;
            else {
                acc_mut = acc + k1 * n.digits[i];
                k_mut = k1 * BigNatModule_baseN;
                i_mut = i + 1;
                continue evalFloat;
            }
            break;
        }
    };
    return evalFloat(0, 1, 0);
}
_c92 = BigNatModule_toFloat;
function BigNatModule_ofInt32(n) {
    return BigNatModule_embed(n);
}
_c93 = BigNatModule_ofInt32;
function BigNatModule_ofInt64(n) {
    return BigNatModule_embed64(n);
}
_c94 = BigNatModule_ofInt64;
function BigNatModule_toUInt32(n) {
    const matchValue = n.bound | 0;
    switch(matchValue){
        case 0:
            return 0;
        case 1:
            {
                const value = n.digits[0] | 0;
                return value >>> 0;
            }
        case 2:
            {
                const patternInput = [
                    n.digits[0],
                    n.digits[1]
                ];
                const xB = patternInput[1] | 0;
                if (xB > BigNatModule_baseMask32B) throw new Error();
                return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((xB & BigNatModule_baseMask32B) >>> 0 << BigNatModule_baseShift32B >>> 0);
            }
        default:
            throw new Error();
    }
}
_c95 = BigNatModule_toUInt32;
function BigNatModule_toUInt64(n) {
    const matchValue = n.bound | 0;
    switch(matchValue){
        case 0:
            return _longJs.fromBits(0, 0, true);
        case 1:
            return _longJs.fromInteger(n.digits[0], true, 2);
        case 2:
            {
                const patternInput = [
                    n.digits[0],
                    n.digits[1]
                ];
                return _longJs.op_Addition(_longJs.fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), _longJs.op_LeftShift(_longJs.fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));
            }
        case 3:
            {
                const patternInput_1 = [
                    n.digits[0],
                    n.digits[1],
                    n.digits[2]
                ];
                const xC = patternInput_1[2] | 0;
                if (xC > BigNatModule_baseMask64C) throw new Error();
                return _longJs.op_Addition(_longJs.op_Addition(_longJs.fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), _longJs.op_LeftShift(_longJs.fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), _longJs.op_LeftShift(_longJs.fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));
            }
        default:
            throw new Error();
    }
}
_c96 = BigNatModule_toUInt64;
function BigNatModule_toString(n) {
    const degn = BigNatModule_degree(n) | 0;
    const route = (prior_mut, k_mut, ten2k_mut)=>{
        route: while(true){
            const prior = prior_mut, k1 = k_mut, ten2k = ten2k_mut;
            if (BigNatModule_degree(ten2k) > degn) return _listJs.cons([
                k1,
                ten2k
            ], prior);
            else {
                prior_mut = _listJs.cons([
                    k1,
                    ten2k
                ], prior);
                k_mut = k1 + 1;
                ten2k_mut = BigNatModule_mul(ten2k, ten2k);
                continue route;
            }
            break;
        }
    };
    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut)=>{
        collect: while(true){
            const isLeading = isLeading_mut, digits1 = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;
            if (!_listJs.isEmpty(_arg1)) {
                const prior_1 = _listJs.tail(_arg1);
                const patternInput = BigNatModule_divmod(n_1, _listJs.head(_arg1)[1]);
                const nL = patternInput[1];
                const nH = patternInput[0];
                if (isLeading ? BigNatModule_isZero(nH) : false) {
                    isLeading_mut = isLeading;
                    digits_mut = digits1;
                    n_1_mut = nL;
                    _arg1_mut = prior_1;
                    continue collect;
                } else {
                    isLeading_mut = isLeading;
                    digits_mut = collect(false, digits1, nL, prior_1);
                    n_1_mut = nH;
                    _arg1_mut = prior_1;
                    continue collect;
                }
            } else {
                const n_2 = BigNatModule_eval32(n_1) | 0;
                if (isLeading ? n_2 === 0 : false) return digits1;
                else return _listJs.cons(_utilJs.int32ToString(n_2), digits1);
            }
            break;
        }
    };
    const digits_4 = collect(true, _listJs.empty(), n, route(_listJs.empty(), 0, BigNatModule_embed(10)));
    if (_listJs.isEmpty(digits_4)) return "0";
    else return _stringJs.join("", _listJs.toArray(digits_4));
}
_c97 = BigNatModule_toString;
function BigNatModule_ofString(str) {
    const len = str.length | 0;
    if (_stringJs.isNullOrEmpty(str)) throw new Error("empty string\\nParameter name: str");
    const ten = BigNatModule_embed(10);
    const build = (acc_mut, i_mut)=>{
        build: while(true){
            const acc = acc_mut, i = i_mut;
            if (i === len) return acc;
            else {
                const d = str[i].charCodeAt(0) - "0".charCodeAt(0) | 0;
                if (0 <= d ? d <= 9 : false) {
                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));
                    i_mut = i + 1;
                    continue build;
                } else throw new Error();
            }
            break;
        }
    };
    return build(BigNatModule_embed(0), 0);
}
_c98 = BigNatModule_ofString;
function BigNatModule_isSmall(n) {
    return n.bound <= 1;
}
_c99 = BigNatModule_isSmall;
function BigNatModule_getSmall(n) {
    const z = n;
    const i = 0;
    if (i < z.bound) return z.digits[i] | 0;
    else return 0;
}
_c100 = BigNatModule_getSmall;
function BigNatModule_factorial(n) {
    const productR = (a, b)=>{
        if (BigNatModule_equal(a, b)) return a;
        else {
            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));
            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));
        }
    };
    return productR(BigNatModule_one, n);
}
_c101 = BigNatModule_factorial;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101;
$RefreshReg$(_c, "BigNat$reflection");
$RefreshReg$(_c1, "BigNatModule_FFT_pow32");
$RefreshReg$(_c2, "BigNatModule_FFT_leastBounding2Power");
$RefreshReg$(_c3, "BigNatModule_FFT_Fp_toInt");
$RefreshReg$(_c4, "BigNatModule_FFT_Fp_ofInt32");
$RefreshReg$(_c5, "BigNatModule_FFT_Fp_mpow");
$RefreshReg$(_c6, "BigNatModule_FFT_Fp_mpowL");
$RefreshReg$(_c7, "BigNatModule_FFT_Fp_m2PowNthRoot");
$RefreshReg$(_c8, "BigNatModule_FFT_Fp_minv");
$RefreshReg$(_c9, "BigNatModule_FFT_computeFFT");
$RefreshReg$(_c10, "BigNatModule_FFT_computFftInPlace");
$RefreshReg$(_c11, "BigNatModule_FFT_computeInverseFftInPlace");
$RefreshReg$(_c12, "BigNatModule_FFT_computeFftPaddedPolynomialProduct");
$RefreshReg$(_c13, "BigNatModule_FFT_padTo");
$RefreshReg$(_c14, "BigNatModule_FFT_computeFftPolynomialProduct");
$RefreshReg$(_c15, "BigNatModule_bound");
$RefreshReg$(_c16, "BigNatModule_setBound");
$RefreshReg$(_c17, "BigNatModule_coeff");
$RefreshReg$(_c18, "BigNatModule_coeff64");
$RefreshReg$(_c19, "BigNatModule_setCoeff");
$RefreshReg$(_c20, "BigNatModule_pow64");
$RefreshReg$(_c21, "BigNatModule_pow32");
$RefreshReg$(_c22, "BigNatModule_hash");
$RefreshReg$(_c23, "BigNatModule_maxInt");
$RefreshReg$(_c24, "BigNatModule_minInt");
$RefreshReg$(_c25, "BigNatModule_divbase");
$RefreshReg$(_c26, "BigNatModule_modbase");
$RefreshReg$(_c27, "BigNatModule_createN");
$RefreshReg$(_c28, "BigNatModule_copyN");
$RefreshReg$(_c29, "BigNatModule_normN");
$RefreshReg$(_c30, "BigNatModule_embed");
$RefreshReg$(_c31, "BigNatModule_embed64");
$RefreshReg$(_c32, "BigNatModule_eval32");
$RefreshReg$(_c33, "BigNatModule_eval64");
$RefreshReg$(_c34, "BigNatModule_restrictTo");
$RefreshReg$(_c35, "BigNatModule_shiftUp");
$RefreshReg$(_c36, "BigNatModule_shiftDown");
$RefreshReg$(_c37, "BigNatModule_degree");
$RefreshReg$(_c38, "BigNatModule_addP");
$RefreshReg$(_c39, "BigNatModule_add");
$RefreshReg$(_c40, "BigNatModule_subP");
$RefreshReg$(_c41, "BigNatModule_sub");
$RefreshReg$(_c42, "BigNatModule_isZero");
$RefreshReg$(_c43, "BigNatModule_IsZero");
$RefreshReg$(_c44, "BigNatModule_isOne");
$RefreshReg$(_c45, "BigNatModule_equal");
$RefreshReg$(_c46, "BigNatModule_shiftCompare");
$RefreshReg$(_c47, "BigNatModule_compare");
$RefreshReg$(_c48, "BigNatModule_lt");
$RefreshReg$(_c49, "BigNatModule_gt");
$RefreshReg$(_c50, "BigNatModule_lte");
$RefreshReg$(_c51, "BigNatModule_gte");
$RefreshReg$(_c52, "BigNatModule_min");
$RefreshReg$(_c53, "BigNatModule_max");
$RefreshReg$(_c54, "BigNatModule_contributeArr");
$RefreshReg$(_c55, "BigNatModule_scale");
$RefreshReg$(_c56, "BigNatModule_mulSchoolBookBothSmall");
$RefreshReg$(_c57, "BigNatModule_mulSchoolBookCarry");
$RefreshReg$(_c58, "BigNatModule_mulSchoolBookOneSmall");
$RefreshReg$(_c59, "BigNatModule_mulSchoolBookNeitherSmall");
$RefreshReg$(_c60, "BigNatModule_mulSchoolBook");
$RefreshReg$(_c61, "BigNatModule_encoding$reflection");
$RefreshReg$(_c62, "BigNatModule_mkEncoding");
$RefreshReg$(_c63, "BigNatModule_calculateTableTow");
$RefreshReg$(_c64, "BigNatModule_encodingGivenResultBits");
$RefreshReg$(_c65, "BigNatModule_bitmask");
$RefreshReg$(_c66, "BigNatModule_twopowers");
$RefreshReg$(_c67, "BigNatModule_twopowersI64");
$RefreshReg$(_c68, "BigNatModule_wordBits");
$RefreshReg$(_c69, "BigNatModule_bits");
$RefreshReg$(_c70, "BigNatModule_extractBits");
$RefreshReg$(_c71, "BigNatModule_encodePoly");
$RefreshReg$(_c72, "BigNatModule_decodeResultBits");
$RefreshReg$(_c73, "BigNatModule_decodePoly");
$RefreshReg$(_c74, "BigNatModule_quickMulUsingFft");
$RefreshReg$(_c75, "BigNatModule_recMulKaratsuba");
$RefreshReg$(_c76, "BigNatModule_mulKaratsuba");
$RefreshReg$(_c77, "BigNatModule_mul");
$RefreshReg$(_c78, "BigNatModule_scaleSubInPlace");
$RefreshReg$(_c79, "BigNatModule_scaleSub");
$RefreshReg$(_c80, "BigNatModule_scaleAddInPlace");
$RefreshReg$(_c81, "BigNatModule_scaleAdd");
$RefreshReg$(_c82, "BigNatModule_removeFactor");
$RefreshReg$(_c83, "BigNatModule_divmod");
$RefreshReg$(_c84, "BigNatModule_div");
$RefreshReg$(_c85, "BigNatModule_rem");
$RefreshReg$(_c86, "BigNatModule_bitAnd");
$RefreshReg$(_c87, "BigNatModule_bitOr");
$RefreshReg$(_c88, "BigNatModule_bitXor");
$RefreshReg$(_c89, "BigNatModule_hcf");
$RefreshReg$(_c90, "BigNatModule_powi");
$RefreshReg$(_c91, "BigNatModule_pow");
$RefreshReg$(_c92, "BigNatModule_toFloat");
$RefreshReg$(_c93, "BigNatModule_ofInt32");
$RefreshReg$(_c94, "BigNatModule_ofInt64");
$RefreshReg$(_c95, "BigNatModule_toUInt32");
$RefreshReg$(_c96, "BigNatModule_toUInt64");
$RefreshReg$(_c97, "BigNatModule_toString");
$RefreshReg$(_c98, "BigNatModule_ofString");
$RefreshReg$(_c99, "BigNatModule_isSmall");
$RefreshReg$(_c100, "BigNatModule_getSmall");
$RefreshReg$(_c101, "BigNatModule_factorial");

},{"../Types.js":"7IOW0","../Reflection.js":"c0YT4","../Long.js":"2dOzy","../Array.js":"dl8am","../List.js":"3UB49","../Util.js":"e4VZ7","../String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dVl3F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "get_Zero", ()=>get_Zero
);
parcelHelpers.export(exports, "get_One", ()=>get_One
);
parcelHelpers.export(exports, "get_MinusOne", ()=>get_MinusOne
);
parcelHelpers.export(exports, "get_MaxValue", ()=>get_MaxValue
);
parcelHelpers.export(exports, "get_MinValue", ()=>get_MinValue
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "round", ()=>round
);
parcelHelpers.export(exports, "truncate", ()=>truncate
);
parcelHelpers.export(exports, "ceiling", ()=>ceiling
);
parcelHelpers.export(exports, "floor", ()=>floor
);
parcelHelpers.export(exports, "pow", ()=>pow
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "op_Multiply", ()=>op_Multiply
);
parcelHelpers.export(exports, "op_Division", ()=>op_Division
);
parcelHelpers.export(exports, "op_Modulus", ()=>op_Modulus
);
parcelHelpers.export(exports, "op_UnaryNegation", ()=>op_UnaryNegation
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "subtract", ()=>subtract
);
parcelHelpers.export(exports, "multiply", ()=>multiply
);
parcelHelpers.export(exports, "divide", ()=>divide
);
parcelHelpers.export(exports, "remainder", ()=>remainder
);
parcelHelpers.export(exports, "negate", ()=>negate
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "toNumber", ()=>toNumber
);
parcelHelpers.export(exports, "fromIntArray", ()=>fromIntArray
);
parcelHelpers.export(exports, "fromInts", ()=>fromInts
);
parcelHelpers.export(exports, "fromParts", ()=>fromParts
);
parcelHelpers.export(exports, "getBits", ()=>getBits
) // export function makeRangeStepFunction(step: Decimal, last: Decimal) {
 //   const stepComparedWithZero = step.cmp(get_Zero);
 //   if (stepComparedWithZero === 0) {
 //     throw new Error("The step of a range cannot be zero");
 //   }
 //   const stepGreaterThanZero = stepComparedWithZero > 0;
 //   return (x: Decimal) => {
 //     const comparedWithLast = x.cmp(last);
 //     if ((stepGreaterThanZero && comparedWithLast <= 0)
 //       || (!stepGreaterThanZero && comparedWithLast >= 0)) {
 //       return [x, op_Addition(x, step)];
 //     } else {
 //       return undefined;
 //     }
 //   };
 // }
;
var _bigJs = require("./lib/big.js");
var _bigJsDefault = parcelHelpers.interopDefault(_bigJs);
var _typesJs = require("./Types.js");
exports.default = _bigJsDefault.default;
const get_Zero = new _bigJsDefault.default(0);
const get_One = new _bigJsDefault.default(1);
const get_MinusOne = new _bigJsDefault.default(-1);
const get_MaxValue = new _bigJsDefault.default("79228162514264337593543950335");
const get_MinValue = new _bigJsDefault.default("-79228162514264337593543950335");
function compare(x, y) {
    return x.cmp(y);
}
function equals(x, y) {
    return !x.cmp(y);
}
function abs(x) {
    return x.abs();
}
function round(x, digits = 0) {
    return x.round(digits, 2 /* ROUND_HALF_EVEN */ );
}
function truncate(x) {
    return x.round(0, 0 /* ROUND_DOWN */ );
}
function ceiling(x) {
    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */  : 0 /* ROUND_DOWN */ );
}
function floor(x) {
    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */  : 3 /* ROUND_UP */ );
}
function pow(x, n) {
    return x.pow(n);
}
function sqrt(x) {
    return x.sqrt();
}
function op_Addition(x, y) {
    return x.add(y);
}
function op_Subtraction(x, y) {
    return x.sub(y);
}
function op_Multiply(x, y) {
    return x.mul(y);
}
function op_Division(x, y) {
    return x.div(y);
}
function op_Modulus(x, y) {
    return x.mod(y);
}
function op_UnaryNegation(x) {
    const x2 = new _bigJsDefault.default(x);
    x2.s = -x2.s || 0;
    return x2;
}
const add = op_Addition;
const subtract = op_Subtraction;
const multiply = op_Multiply;
const divide = op_Division;
const remainder = op_Modulus;
const negate = op_UnaryNegation;
function toString(x) {
    return x.toString();
}
function tryParse(str, defValue) {
    try {
        defValue.contents = new _bigJsDefault.default(str.trim());
        return true;
    } catch (_a) {
        return false;
    }
}
function parse(str) {
    const defValue = new _typesJs.FSharpRef(get_Zero);
    if (tryParse(str, defValue)) return defValue.contents;
    else throw new Error("Input string was not in a correct format.");
}
function toNumber(x) {
    return +x;
}
function decimalToHex(dec, bitSize) {
    const hex = new Uint8Array(bitSize / 4 | 0);
    let hexCount = 1;
    for(let d = 0; d < dec.length; d++){
        let value = dec[d];
        for(let i = 0; i < hexCount; i++){
            const digit = hex[i] * 10 + value | 0;
            hex[i] = digit & 15;
            value = digit >> 4;
        }
        if (value !== 0) hex[hexCount++] = value;
    }
    return hex.slice(0, hexCount); // digits in reverse order
}
function hexToDecimal(hex, bitSize) {
    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);
    let decCount = 1;
    for(let d = hex.length - 1; d >= 0; d--){
        let carry = hex[d];
        for(let i = 0; i < decCount; i++){
            const val = dec[i] * 16 + carry | 0;
            dec[i] = val % 10 | 0;
            carry = val / 10 | 0;
        }
        while(carry > 0){
            dec[decCount++] = carry % 10 | 0;
            carry = carry / 10 | 0;
        }
    }
    return dec.slice(0, decCount); // digits in reverse order
}
function setInt32Bits(hexDigits, bits, offset) {
    for(let i = 0; i < 8; i++)hexDigits[offset + i] = bits >> i * 4 & 15;
}
function getInt32Bits(hexDigits, offset) {
    let bits = 0;
    for(let i = 0; i < 8; i++)bits = bits | hexDigits[offset + i] << i * 4;
    return bits;
}
function fromIntArray(bits) {
    return fromInts(bits[0], bits[1], bits[2], bits[3]);
}
function fromInts(low, mid, high, signExp) {
    const isNegative = signExp < 0;
    const scale = signExp >> 16 & 127;
    return fromParts(low, mid, high, isNegative, scale);
}
function fromParts(low, mid, high, isNegative, scale) {
    const bitSize = 96;
    const hexDigits = new Uint8Array(bitSize / 4);
    setInt32Bits(hexDigits, low, 0);
    setInt32Bits(hexDigits, mid, 8);
    setInt32Bits(hexDigits, high, 16);
    const decDigits = hexToDecimal(hexDigits, bitSize);
    scale = scale & 127;
    const big = new _bigJsDefault.default(0);
    big.c = Array.from(decDigits.reverse());
    big.e = decDigits.length - scale - 1;
    big.s = isNegative ? -1 : 1;
    const d = new _bigJsDefault.default(big);
    return d;
}
function getBits(d) {
    const bitSize = 96;
    const decDigits = Uint8Array.from(d.c);
    const hexDigits = decimalToHex(decDigits, bitSize);
    const low = getInt32Bits(hexDigits, 0);
    const mid = getInt32Bits(hexDigits, 8);
    const high = getInt32Bits(hexDigits, 16);
    const decStr = d.toString();
    const dotPos = decStr.indexOf(".");
    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;
    const signExp = (scale & 127) << 16 | (d.s < 0 ? 2147483648 : 0);
    return [
        low,
        mid,
        high,
        signExp
    ];
}

},{"./lib/big.js":"aa06b","./Types.js":"7IOW0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aa06b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Big", ()=>Big
);
// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs
/* tslint:disable */ var _utilJs = require("../Util.js");
var _numericJs = require("../Numeric.js");
// The shared prototype object.
var P = {
    GetHashCode () {
        return _utilJs.combineHashCodes([
            this.s,
            this.e
        ].concat(this.c));
    },
    Equals (x) {
        return !this.cmp(x);
    },
    CompareTo (x) {
        return this.cmp(x);
    },
    [_numericJs.symbol] () {
        const _this = this;
        return {
            multiply: (y)=>_this.mul(y)
            ,
            toPrecision: (sd)=>_this.toPrecision(sd)
            ,
            toExponential: (dp)=>_this.toExponential(dp)
            ,
            toFixed: (dp)=>_this.toFixed(dp)
            ,
            toHex: ()=>(Number(_this) >>> 0).toString(16)
        };
    }
};
/*
 *  big.js v6.0.3
 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
 *  Copyright (c) 2020 Michael Mclaughlin
 *  https://github.com/MikeMcl/big.js/LICENCE.md
 */ /************************************** EDITABLE DEFAULTS *****************************************/ // The default values below must be integers within the stated ranges.
/*
 * The maximum number of decimal places (DP) of the results of operations involving division:
 * div and sqrt, and pow with negative exponents.
 */ var DP = 28, /*
 * The rounding mode (RM) used when rounding to the above decimal places.
 *
 *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
 *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
 *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
 *  3  Away from zero.                                  (ROUND_UP)
 */ RM = 1, // The maximum value of DP and Big.DP.
MAX_DP = 1000000, // The maximum magnitude of the exponent argument to the pow method.
MAX_POWER = 1000000, /*
 * The negative exponent (NE) at and beneath which toString returns exponential notation.
 * (JavaScript numbers: -7)
 * -1000000 is the minimum recommended exponent value of a Big.
 */ NE = -29, /*
 * The positive exponent (PE) at and above which toString returns exponential notation.
 * (JavaScript numbers: 21)
 * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
 */ PE = 29, /*
 * When true, an error will be thrown if a primitive number is passed to the Big constructor,
 * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
 * primitive number without a loss of precision.
 */ STRICT = false, /**************************************************************************************************/ // Error messages.
NAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
/*
 * Create and return a Big constructor.
 */ function _Big_() {
    /*
     * The Big constructor and exported function.
     * Create and return a new instance of a Big number object.
     *
     * n {number|string|Big} A numeric value.
     */ function Big(n) {
        var x = this;
        // Enable constructor usage without new.
        if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);
        // Duplicate.
        if (n instanceof Big) {
            x.s = n.s;
            x.e = n.e;
            x.c = n.c.slice();
            normalize(x);
        } else {
            if (typeof n !== 'string') {
                if (Big.strict === true) throw TypeError(INVALID + 'number');
                // Minus zero?
                n = n === 0 && 1 / n < 0 ? '-0' : String(n);
            }
            parse(x, n);
        }
        // Retain a reference to this Big constructor.
        // Shadow Big.prototype.constructor which points to Object.
        x.constructor = Big;
    }
    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.strict = STRICT;
    return Big;
}
function normalize(x) {
    // x = round(x, DP, 0);
    if (x.c.length > 1 && !x.c[0]) {
        let i = x.c.findIndex((x1)=>x1
        );
        x.c = x.c.slice(i);
        x.e = x.e - i;
    }
}
/*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */ function parse(x, n) {
    var e, i, nl;
    if (!NUMERIC.test(n)) throw Error(INVALID + 'number');
    // Determine sign.
    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;
    // Decimal point?
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');
    // Exponential form?
    if ((i = n.search(/e/i)) > 0) {
        // Determine exponent.
        if (e < 0) e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
    } else if (e < 0) // Integer.
    e = n.length;
    nl = n.length;
    // Determine leading zeros before decimal point.
    for(i = 0; i < e && i < nl && n.charAt(i) == '0';)++i;
    // original version (ignores decimal point).
    // // Determine leading zeros.
    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;
    if (i == nl) // Zero.
    x.c = [
        x.e = 0
    ];
    else {
        x.e = e - i - 1;
        x.c = [];
        // Convert string to array of digits without leading zeros
        for(e = 0; i < nl;)x.c[e++] = +n.charAt(i++);
    // older version (doesn't keep trailing zeroes).
    // // Determine trailing zeros.
    // for (; nl > 0 && n.charAt(--nl) == '0';);
    // // Convert string to array of digits without leading/trailing zeros.
    // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
    }
    x = round(x, Big.DP + 1, Big.RM);
    return x;
}
/*
 * Round Big x to a maximum of sd significant digits using rounding mode rm.
 *
 * x {Big} The Big to round.
 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 * [more] {boolean} Whether the result of division was truncated.
 */ function round(x, sd, rm, more) {
    var xc = x.c;
    if (rm === UNDEFINED) rm = Big.RM;
    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) throw Error(INVALID_RM);
    if (sd < 1) {
        more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
        xc.length = 1;
        if (more) {
            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            x.e = x.e - sd + 1;
            xc[0] = 1;
        } else // Zero.
        xc[0] = x.e = 0;
    } else if (sd < xc.length) {
        // xc[sd] is the digit after the digit that may be rounded up.
        const isZero = xc.findIndex((xci, idx)=>idx >= sd && xci > 0
        ) < 0;
        more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !isZero);
        // Remove any digits after the required precision.
        xc.length = sd--;
        // Round up?
        if (more) // Rounding up may mean the previous digit has to be rounded up.
        for(; (++xc[sd]) > 9;){
            xc[sd] = 0;
            if (!sd--) {
                ++x.e;
                xc.unshift(1);
            }
        }
        // Remove trailing zeros.
        for(sd = xc.length; !xc[--sd];)xc.pop();
    }
    return x;
}
/*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 */ function stringify(x, doExponential, isNonzero) {
    var e = x.e, s = x.c.join(''), n = s.length;
    // Exponential notation?
    if (doExponential) s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;
    else if (e < 0) {
        for(; ++e;)s = '0' + s;
        s = '0.' + s;
    } else if (e > 0) {
        if ((++e) > n) for(e -= n; e--;)s += '0';
        else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);
    } else if (n > 1) s = s.charAt(0) + '.' + s.slice(1);
    return x.s < 0 && isNonzero ? '-' + s : s;
}
// Prototype/instance methods
/*
 * Return a new Big whose value is the absolute value of this Big.
 */ P.abs = function() {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
};
/*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
 */ P.cmp = function(y) {
    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
    // Either zero?
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
    // Signs differ?
    if (i != j) return i;
    isneg = i < 0;
    // Compare exponents.
    if (k != l) return k > l ^ isneg ? 1 : -1;
    // Compare digit by digit.
    j = Math.max(xc.length, yc.length);
    for(i = 0; i < j; i++){
        k = i < xc.length ? xc[i] : 0;
        l = i < yc.length ? yc[i] : 0;
        if (k != l) return k > l ^ isneg ? 1 : -1;
    }
    return 0;
// original version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)
// j = (k = xc.length) < (l = yc.length) ? k : l;
// // Compare digit by digit.
// for (i = -1; ++i < j;) {
//   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
// }
// // Compare lengths.
// return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};
/*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */ P.div = function(y) {
    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, b = y.c, k = x.s == y.s ? 1 : -1, dp = Big.DP;
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);
    // Divisor is zero?
    if (!b[0]) throw Error(DIV_BY_ZERO);
    // Dividend is 0? Return +-0.
    if (!a[0]) {
        y.s = k;
        y.c = [
            y.e = 0
        ];
        return y;
    }
    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result
    q.s = k;
    k = p < 0 ? 0 : p;
    // Create version of divisor with leading zero.
    bz.unshift(0);
    // Add zeros to make remainder as long as divisor.
    for(; (rl++) < bl;)r.push(0);
    do {
        // n is how many times the divisor goes into current remainder.
        for(n = 0; n < 10; n++){
            // Compare divisor and remainder.
            if (bl != (rl = r.length)) cmp = bl > rl ? 1 : -1;
            else {
                for(ri = -1, cmp = 0; (++ri) < bl;)if (b[ri] != r[ri]) {
                    cmp = b[ri] > r[ri] ? 1 : -1;
                    break;
                }
            }
            // If divisor < remainder, subtract divisor from remainder.
            if (cmp < 0) {
                // Remainder can't be more than 1 digit longer than divisor.
                // Equalise lengths using divisor with extra leading zero?
                for(bt = rl == bl ? b : bz; rl;){
                    if (r[--rl] < bt[rl]) {
                        ri = rl;
                        for(; ri && !r[--ri];)r[ri] = 9;
                        --r[ri];
                        r[rl] += 10;
                    }
                    r[rl] -= bt[rl];
                }
                for(; !r[0];)r.shift();
            } else break;
        }
        // Add the digit n to the result array.
        qc[qi++] = cmp ? n : ++n;
        // Update the remainder.
        if (r[0] && cmp) r[rl] = a[ai] || 0;
        else r = [
            a[ai]
        ];
    }while (((ai++) < al || r[0] !== UNDEFINED) && k--)
    // Leading zero? Do not remove if result is simply zero (qi == 1).
    if (!qc[0] && qi != 1) {
        // There can't be more than one zero.
        qc.shift();
        q.e--;
        p--;
    }
    // Round?
    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);
    return q;
};
/*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */ P.eq = function(y) {
    return this.cmp(y) === 0;
};
/*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */ P.gt = function(y) {
    return this.cmp(y) > 0;
};
/*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */ P.gte = function(y) {
    return this.cmp(y) > -1;
};
/*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */ P.lt = function(y) {
    return this.cmp(y) < 0;
};
/*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */ P.lte = function(y) {
    return this.cmp(y) < 1;
};
/*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */ P.minus = P.sub = function(y) {
    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;
    // Signs differ?
    if (a != b) {
        y.s = -b;
        return x.plus(y);
    }
    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
    // Either zero?
    if (!xc[0] || !yc[0]) {
        if (yc[0]) y.s = -b;
        else if (xc[0]) y = new Big(x);
        else y.s = 1;
        return y;
    }
    // Determine which is the bigger number. Prepend zeros to equalise exponents.
    if (a = xe - ye) {
        if (xlty = a < 0) {
            a = -a;
            t = xc;
        } else {
            ye = xe;
            t = yc;
        }
        t.reverse();
        for(b = a; b--;)t.push(0);
        t.reverse();
    } else {
        // Exponents equal. Check digit by digit.
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
            xlty = xc[b] < yc[b];
            break;
        }
    }
    // x < y? Point xc to the array of the bigger number.
    if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
    }
    /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
     * needs to start at yc.length.
     */ if ((b = (j = yc.length) - (i = xc.length)) > 0) for(; b--;)xc[i++] = 0;
    // Subtract yc from xc.
    for(b = i; j > a;){
        if (xc[--j] < yc[j]) {
            for(i = j; i && !xc[--i];)xc[i] = 9;
            --xc[i];
            xc[j] += 10;
        }
        xc[j] -= yc[j];
    }
    // Remove trailing zeros.
    for(; xc[--b] === 0;)xc.pop();
    // Remove leading zeros and adjust exponent accordingly.
    for(; xc[0] === 0;){
        xc.shift();
        --ye;
    }
    if (!xc[0]) {
        // n - n = +0
        y.s = 1;
        // Result must be zero.
        xc = [
            ye = 0
        ];
    }
    y.c = xc;
    y.e = ye;
    return y;
};
/*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */ P.mod = function(y) {
    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;
    if (!y.c[0]) throw Error(DIV_BY_ZERO);
    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;
    if (ygtx) return new Big(x);
    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;
    return this.minus(x.times(y));
};
/*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */ P.plus = P.add = function(y) {
    var e, k, t, Big = this.constructor, x = new Big(this), y = new Big(y);
    // Signs differ?
    if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
    }
    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
    // Either zero?
    if (!xc[0] || !yc[0]) {
        if (!yc[0]) {
            if (xc[0]) y = new Big(x);
            else y.s = x.s;
        }
        return y;
    }
    xc = xc.slice();
    // Prepend zeros to equalise exponents.
    // Note: reverse faster than unshifts.
    if (e = xe - ye) {
        if (e > 0) {
            ye = xe;
            t = yc;
        } else {
            e = -e;
            t = xc;
        }
        t.reverse();
        for(; e--;)t.push(0);
        t.reverse();
    }
    // Point xc to the longer array.
    if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
    }
    e = yc.length;
    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
    for(k = 0; e; xc[e] %= 10)k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    if (k) {
        xc.unshift(k);
        ++ye;
    }
    // Remove trailing zeros.
    for(e = xc.length; xc[--e] === 0;)xc.pop();
    y.c = xc;
    y.e = ye;
    return y;
};
/*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */ P.pow = function(n) {
    var Big = this.constructor, x = new Big(this), y = new Big('1'), one = new Big('1'), isneg = n < 0;
    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');
    if (isneg) n = -n;
    for(;;){
        if (n & 1) y = y.times(x);
        n >>= 1;
        if (!n) break;
        x = x.times(x);
    }
    return isneg ? one.div(y) : y;
};
/*
 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */ P.prec = function(sd, rm) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) throw Error(INVALID + 'precision');
    return round(new this.constructor(this), sd, rm);
};
/*
 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
 * using rounding mode rm, or Big.RM if rm is not specified.
 * If dp is negative, round to an integer which is a multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */ P.round = function(dp, rm) {
    if (dp === UNDEFINED) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
    return round(new this.constructor(this), dp + this.e + 1, rm);
};
/*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */ P.sqrt = function() {
    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big('0.5');
    // Zero?
    if (!x.c[0]) return new Big(x);
    // Negative?
    if (s < 0) throw Error(NAME + 'No square root');
    // Estimate.
    s = Math.sqrt(x + '');
    // Math.sqrt underflow/overflow?
    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
    if (s === 0 || s === 1 / 0) {
        c = x.c.join('');
        if (!(c.length + e & 1)) c += '0';
        s = Math.sqrt(c);
        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else r = new Big(s + '');
    e = r.e + (Big.DP += 4);
    // Newton-Raphson iteration.
    do {
        t = r;
        r = half.times(t.plus(x.div(t)));
    }while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''))
    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
};
/*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */ P.times = P.mul = function(y) {
    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;
    // Determine sign of result.
    y.s = x.s == y.s ? 1 : -1;
    // Return signed 0 if either 0.
    if (!xc[0] || !yc[0]) {
        y.c = [
            y.e = 0
        ];
        return y;
    }
    // Initialise exponent of result as x.e + y.e.
    y.e = i + j;
    // If array xc has fewer digits than yc, swap xc and yc, and lengths.
    if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
    }
    // Initialise coefficient array of result with zeros.
    for(c = new Array(j = a + b); j--;)c[j] = 0;
    // Multiply.
    // i is initially xc.length.
    for(i = b; i--;){
        b = 0;
        // a is yc.length.
        for(j = a + i; j > i;){
            // Current sum of products at this digit position, plus carry.
            b = c[j] + yc[i] * xc[j - i - 1] + b;
            c[j--] = b % 10;
            // carry
            b = b / 10 | 0;
        }
        c[j] = b;
    }
    // Increment result exponent if there is a final carry, otherwise remove leading zero.
    if (b) ++y.e;
    else c.shift();
    // Remove trailing zeros.
    for(i = c.length; !c[--i];)c.pop();
    y.c = c;
    return y;
};
/*
 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */ P.toExponential = function(dp, rm) {
    var x = this, n = x.c[0];
    if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);
        x = round(new x.constructor(x), ++dp, rm);
        for(; x.c.length < dp;)x.c.push(0);
    }
    return stringify(x, true, !!n);
};
/*
 * Return a string representing the value of this Big in normal notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */ P.toFixed = function(dp, rm) {
    var x = this, n = x.c[0];
    if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);
        x = round(new x.constructor(x), dp + x.e + 1, rm);
        // x.e may have changed if the value is rounded up.
        for(dp = dp + x.e + 1; x.c.length < dp;)x.c.push(0);
    }
    return stringify(x, false, !!n);
};
/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */ P.toJSON = P.toString = function() {
    var x = this, Big = x.constructor;
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
};
/*
 * Return the value of this Big as a primitve number.
 */ P.toNumber = function() {
    var n = Number(stringify(this, true, true));
    if (this.constructor.strict === true && !this.eq(n.toString())) throw Error(NAME + 'Imprecise conversion');
    return n;
};
/*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * rounding mode rm, or Big.RM if rm is not specified.
 * Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */ P.toPrecision = function(sd, rm) {
    var x = this, Big = x.constructor, n = x.c[0];
    if (sd !== UNDEFINED) {
        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) throw Error(INVALID + 'precision');
        x = round(new Big(x), sd, rm);
        for(; x.c.length < sd;)x.c.push(0);
    }
    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
};
/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */ P.valueOf = function() {
    var x = this, Big = x.constructor;
    if (Big.strict === true) throw Error(NAME + 'valueOf disallowed');
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
};
var Big = _Big_();
exports.default = Big;

},{"../Util.js":"e4VZ7","../Numeric.js":"9n2No","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gkWJK":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"uMwNA"}],"uMwNA":[function(require,module,exports) {
/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var checkPropTypes = require('prop-types/checkPropTypes');
    var scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    /**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var validateFormat = function() {
    };
    validateFormat = function(format) {
        if (format === undefined) throw new Error('invariant requires an error message argument');
    };
    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);
        if (!condition) {
            var error = void 0;
            if (format === undefined) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
                var args = [
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                ];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function() {
                    return args[argIndex++];
                }));
                error.name = 'Invariant Violation';
            }
            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
        }
    }
    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.
    !React && invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.');
    var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    };
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            !(typeof document !== 'undefined') && invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.');
            var evt = document.createEvent('Event');
            // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true;
            // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event;
            // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false);
                // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
                func.apply(context, funcArgs);
                didError = false;
            }
            // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error = void 0;
            // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {
                    // Ignore.
                    }
                }
            }
            // Create a fake event type.
            var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
            // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                this.onError(error);
            }
            // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
        };
        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    // Used by Fiber to simulate a try-catch.
    var hasError = false;
    var caughtError = null;
    // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
    }
    /**
 * Injectable ordering of event plugins.
 */ var eventPluginOrder = null;
    /**
 * Injectable mapping from names to event plugin modules.
 */ var namesToPlugins = {
    };
    /**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */ function recomputePluginOrdering() {
        if (!eventPluginOrder) // Wait until an `eventPluginOrder` is injected.
        return;
        for(var pluginName in namesToPlugins){
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            !(pluginIndex > -1) && invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName);
            if (plugins[pluginIndex]) continue;
            !pluginModule.extractEvents && invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName);
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for(var eventName in publishedEvents)!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) && invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName);
        }
    }
    /**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */ function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        !!eventNameDispatchConfigs.hasOwnProperty(eventName) && invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
        if (phasedRegistrationNames) {
            for(var phaseName in phasedRegistrationNames)if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
            return true;
        } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
        }
        return false;
    }
    /**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */ function publishRegistrationName(registrationName, pluginModule, eventName) {
        !!registrationNameModules[registrationName] && invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
    }
    /**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */ /**
 * Ordered list of injected plugins.
 */ var plugins = [];
    /**
 * Mapping from event name to dispatch config
 */ var eventNameDispatchConfigs = {
    };
    /**
 * Mapping from registration name to plugin module
 */ var registrationNameModules = {
    };
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    };
    // Trust the developer to only use possibleRegistrationNames in true
    /**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */ function injectEventPluginOrder(injectedEventPluginOrder) {
        !!eventPluginOrder && invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.');
        // Clone the ordering so it cannot be dynamically mutated.
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
    }
    /**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */ function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for(var pluginName in injectedNamesToPlugins){
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) continue;
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                !!namesToPlugins[pluginName] && invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName);
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
            }
        }
        if (isOrderingDirty) recomputePluginOrdering();
    }
    /**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var warningWithoutStack = function() {
    };
    warningWithoutStack = function(condition, format) {
        for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
        if (format === undefined) throw new Error("`warningWithoutStack(condition, format, ...args)` requires a warning message argument");
        if (args.length > 8) // Check before the condition to catch violations early.
        throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        if (condition) return;
        if (typeof console !== 'undefined') {
            var argsWithFormat = args.map(function(item) {
                return '' + item;
            });
            argsWithFormat.unshift('Warning: ' + format);
            // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            Function.prototype.apply.call(console.error, console, argsWithFormat);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function() {
                return args[argIndex++];
            });
            throw new Error(message);
        } catch (x) {
        }
    };
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;
    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        !(getNodeFromInstance && getInstanceFromNode) && warningWithoutStack$1(false, "EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
    }
    var validateEventDispatches = void 0;
    validateEventDispatches = function(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) && warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.');
    };
    /**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */ function executeDispatch(event, listener, inst) {
        var type = event.type || 'unknown-event';
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    /**
 * Standard/simple iteration through an event's collected dispatches.
 */ function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        validateEventDispatches(event);
        if (Array.isArray(dispatchListeners)) for(var i = 0; i < dispatchListeners.length; i++){
            if (event.isPropagationStopped()) break;
            // Listeners and Instances are two parallel arrays that are always in sync.
            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
        else if (dispatchListeners) executeDispatch(event, dispatchListeners, dispatchInstances);
        event._dispatchListeners = null;
        event._dispatchInstances = null;
    }
    /**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */ /**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */ /**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */ /**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */ function accumulateInto(current, next) {
        !(next != null) && invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.');
        if (current == null) return next;
        // Both are not empty. Warning: Never call x.concat(y) when you are not
        // certain that x is an Array (x could be a string with concat method).
        if (Array.isArray(current)) {
            if (Array.isArray(next)) {
                current.push.apply(current, next);
                return current;
            }
            current.push(next);
            return current;
        }
        if (Array.isArray(next)) // A bit too dangerous to mutate `next`.
        return [
            current
        ].concat(next);
        return [
            current,
            next
        ];
    }
    /**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */ function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) arr.forEach(cb, scope);
        else if (arr) cb.call(scope, arr);
    }
    /**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */ var eventQueue = null;
    /**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */ var executeDispatchesAndRelease = function(event) {
        if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) event.constructor.release(event);
        }
    };
    var executeDispatchesAndReleaseTopLevel = function(e) {
        return executeDispatchesAndRelease(e);
    };
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */ /**
 * Methods for injecting dependencies.
 */ var injection = {
        /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */ injectEventPluginOrder: injectEventPluginOrder,
        /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */ injectEventPluginsByName: injectEventPluginsByName
    };
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var listener = void 0;
        // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
        // live here; needs to be moved to a better place soon
        var stateNode = inst.stateNode;
        if (!stateNode) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (!props) // Work in progress.
        return null;
        listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        !(!listener || typeof listener === 'function') && invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        return listener;
    }
    /**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */ function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;
        for(var i = 0; i < plugins.length; i++){
            // Not every plugin in the ordering may be loaded at runtime.
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                if (extractedEvents) events = accumulateInto(events, extractedEvents);
            }
        }
        return events;
    }
    function runEventsInBatch(events) {
        if (events !== null) eventQueue = accumulateInto(eventQueue, events);
        // Set `eventQueue` to null before processing it so that we can tell if more
        // events get enqueued while processing.
        var processingEventQueue = eventQueue;
        eventQueue = null;
        if (!processingEventQueue) return;
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        !!eventQueue && invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.');
        // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    /**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */ function getClosestInstanceFromNode(node) {
        if (node[internalInstanceKey]) return node[internalInstanceKey];
        while(!node[internalInstanceKey]){
            if (node.parentNode) node = node.parentNode;
            else // Top of the tree. This node must not be part of a React tree (or is
            // unmounted, potentially).
            return null;
        }
        var inst = node[internalInstanceKey];
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber, this will always be the deepest root.
        return inst;
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode$1(node) {
        var inst = node[internalInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance$1(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
        // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        invariant(false, 'getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode$1(node) {
        return node[internalEventHandlersKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalEventHandlersKey] = props;
    }
    function getParent(inst) {
        do inst = inst.return;
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;
        for(var tempA = instA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = instB; tempB; tempB = getParent(tempB))depthB++;
        // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            instA = getParent(instA);
            depthA--;
        }
        // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            instB = getParent(instB);
            depthB--;
        }
        // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (instA === instB || instA === instB.alternate) return instA;
            instA = getParent(instA);
            instB = getParent(instB);
        }
        return null;
    }
    /**
 * Return if A is an ancestor of B.
 */ /**
 * Return the parent instance of the passed-in instance.
 */ /**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */ function traverseTwoPhase(inst, fn, arg) {
        var path = [];
        while(inst){
            path.push(inst);
            inst = getParent(inst);
        }
        var i = void 0;
        for(i = path.length; (i--) > 0;)fn(path[i], 'captured', arg);
        for(i = 0; i < path.length; i++)fn(path[i], 'bubbled', arg);
    }
    /**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */ function traverseEnterLeave(from, to, fn, argFrom, argTo) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        var pathFrom = [];
        while(true){
            if (!from) break;
            if (from === common) break;
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) break;
            pathFrom.push(from);
            from = getParent(from);
        }
        var pathTo = [];
        while(true){
            if (!to) break;
            if (to === common) break;
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common) break;
            pathTo.push(to);
            to = getParent(to);
        }
        for(var i = 0; i < pathFrom.length; i++)fn(pathFrom[i], 'bubbled', argFrom);
        for(var _i = pathTo.length; (_i--) > 0;)fn(pathTo[_i], 'captured', argTo);
    }
    /**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */ function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
    }
    /**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */ /**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */ function accumulateDirectionalDispatches(inst, phase, event) {
        !inst && warningWithoutStack$1(false, 'Dispatching inst must not be null');
        var listener = listenerAtPhase(inst, event, phase);
        if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
    }
    /**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */ function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
    /**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */ function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
        }
    }
    /**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */ function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) accumulateDispatches(event._targetInst, null, event);
    }
    function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }
    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
        traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }
    function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)
    function unsafeCastStringToDOMTopLevelType(topLevelType) {
        return topLevelType;
    }
    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
        return topLevelType;
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {
        };
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style;
        // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        }
        // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    /**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */ var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
    // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
    var mediaEventTypes = [
        TOP_ABORT,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING
    ];
    function getRawEventName(topLevelType) {
        return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start = void 0;
        var startValue = startText;
        var startLength = startValue.length;
        var end = void 0;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /* eslint valid-typeof: 0 */ var EVENT_POOL_SIZE = 10;
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        type: null,
        target: null,
        // currentTarget is set when dispatching; no use in copying it here
        currentTarget: function() {
            return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
    };
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    }
    /**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */ function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;
        for(var propName in Interface){
            if (!Interface.hasOwnProperty(propName)) continue;
            delete this[propName]; // this has a getter/setter for warnings
            var normalize = Interface[propName];
            if (normalize) this[propName] = normalize(nativeEvent);
            else if (propName === 'target') this.target = nativeEventTarget;
            else this[propName] = nativeEvent[propName];
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
        else this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
    }
    _assign(SyntheticEvent.prototype, {
        preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) return;
            if (event.preventDefault) event.preventDefault();
            else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
            this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) return;
            if (event.stopPropagation) event.stopPropagation();
            else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
            // IE. This event does not support bubbling or cancelling, and
            // any references to cancelBubble throw "Member not found".  A
            // typeof check of "unknown" circumvents this issue (and is also
            // IE specific).
            event.cancelBubble = true;
            this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */ persist: function() {
            this.isPersistent = functionThatReturnsTrue;
        },
        /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */ isPersistent: functionThatReturnsFalse,
        /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */ destructor: function() {
            var Interface = this.constructor.Interface;
            for(var propName in Interface)Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
            Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
            Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
            Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function() {
            }));
            Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function() {
            }));
        }
    });
    SyntheticEvent.Interface = EventInterface;
    /**
 * Helper to reduce boilerplate when creating subclasses.
 */ SyntheticEvent.extend = function(Interface) {
        var Super = this;
        var E = function() {
        };
        E.prototype = Super.prototype;
        var prototype = new E();
        function Class() {
            return Super.apply(this, arguments);
        }
        _assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _assign({
        }, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
    };
    addEventPoolingTo(SyntheticEvent);
    /**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */ function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === 'function';
        function set(val) {
            var action = isFunction ? 'setting the method' : 'setting the property';
            warn(action, 'This is effectively a no-op');
            return val;
        }
        function get() {
            var action = isFunction ? 'accessing the method' : 'accessing the property';
            var result = isFunction ? 'This is a no-op function' : 'This is set to null';
            warn(action, result);
            return getVal;
        }
        function warn(action, result) {
            var warningCondition = false;
            !warningCondition && warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
        return {
            configurable: true,
            set: set,
            get: get
        };
    }
    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;
        if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
        }
        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }
    function releasePooledEvent(event) {
        var EventConstructor = this;
        !(event instanceof EventConstructor) && invariant(false, 'Trying to release an event instance into a pool of a different type.');
        event.destructor();
        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) EventConstructor.eventPool.push(event);
    }
    function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var SyntheticCompositionEvent = SyntheticEvent.extend({
        data: null
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ var SyntheticInputEvent = SyntheticEvent.extend({
        data: null
    });
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;
    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    // Events and their corresponding property names.
    var eventTypes = {
        beforeInput: {
            phasedRegistrationNames: {
                bubbled: 'onBeforeInput',
                captured: 'onBeforeInputCapture'
            },
            dependencies: [
                TOP_COMPOSITION_END,
                TOP_KEY_PRESS,
                TOP_TEXT_INPUT,
                TOP_PASTE
            ]
        },
        compositionEnd: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionEnd',
                captured: 'onCompositionEndCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_END,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        },
        compositionStart: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionStart',
                captured: 'onCompositionStartCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_START,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        },
        compositionUpdate: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionUpdate',
                captured: 'onCompositionUpdateCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_UPDATE,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        }
    };
    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */ function getCompositionEventType(topLevelType) {
        switch(topLevelType){
            case TOP_COMPOSITION_START:
                return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
                return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
                return eventTypes.compositionUpdate;
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isFallbackCompositionStart(topLevelType, nativeEvent) {
        return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isFallbackCompositionEnd(topLevelType, nativeEvent) {
        switch(topLevelType){
            case TOP_KEY_UP:
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    }
    // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var eventType = void 0;
        var fallbackData = void 0;
        if (canUseCompositionEvent) eventType = getCompositionEventType(topLevelType);
        else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) eventType = eventTypes.compositionStart;
        } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) eventType = eventTypes.compositionEnd;
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === eventTypes.compositionStart) isComposing = initialize(nativeEventTarget);
            else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) fallbackData = getData();
            }
        }
        var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
        if (fallbackData) // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
        else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) event.data = customData;
        }
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */ function getNativeBeforeInputChars(topLevelType, nativeEvent) {
        switch(topLevelType){
            case TOP_COMPOSITION_END:
                return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data;
                // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(topLevelType){
            case TOP_PASTE:
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case TOP_KEY_PRESS:
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case TOP_COMPOSITION_END:
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var chars = void 0;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
        else chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
        // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
        event.data = chars;
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ var BeforeInputEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) return beforeInput;
            if (beforeInput === null) return composition;
            return [
                composition,
                beforeInput
            ];
        }
    };
    // Use to restore controlled state after a change event has fired.
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        !(typeof restoreImpl === 'function') && invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.');
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var _batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var _interactiveUpdatesImpl = function(fn, a, b) {
        return fn(a, b);
    };
    var _flushInteractiveUpdatesImpl = function() {
    };
    var isBatching = false;
    function batchedUpdates(fn, bookkeeping) {
        if (isBatching) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isBatching = true;
        try {
            return _batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            // Here we wait until all updates have propagated, which is important
            // when using controlled components within layers:
            // https://github.com/facebook/react/issues/1698
            // Then we restore state of any controlled component.
            isBatching = false;
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
                // If a controlled event was fired, we may need to restore the state of
                // the DOM node back to the controlled value. This is necessary when React
                // bails out of the update without touching the DOM.
                _flushInteractiveUpdatesImpl();
                restoreStateIfNeeded();
            }
        }
    }
    function interactiveUpdates(fn, a, b) {
        return _interactiveUpdatesImpl(fn, a, b);
    }
    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
        _batchedUpdatesImpl = batchedUpdatesImpl;
        _interactiveUpdatesImpl = interactiveUpdatesImpl;
        _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
        // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField];
        // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        });
        // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
        // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node);
        // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.
    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    var describeComponentFrame = function(name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            // In DEV, include code for a common special case:
            // prefer "folder/index.js" instead of just "index.js".
            if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                        fileName = folderName + '/' + fileName;
                    }
                }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        } else if (ownerName) sourceInfo = ' (created by ' + ownerName + ')';
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') warningWithoutStack$1(false, "Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_CONCURRENT_MODE_TYPE:
                return 'ConcurrentMode';
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return 'Context.Consumer';
            case REACT_PROVIDER_TYPE:
                return 'Context.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_LAZY_TYPE:
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) return getComponentName(resolvedThenable);
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function describeFiber(fiber) {
        switch(fiber.tag){
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
                return '';
            default:
                var owner = fiber._debugOwner;
                var source = fiber._debugSource;
                var name = getComponentName(fiber.type);
                var ownerName = null;
                if (owner) ownerName = getComponentName(owner.type);
                return describeComponentFrame(name, source, ownerName);
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        var info = '';
        var node = workInProgress;
        do {
            info += describeFiber(node);
            node = node.return;
        }while (node)
        return info;
    }
    var current = null;
    var phase = null;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
        // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
    }
    function setCurrentPhase(lifeCyclePhase) {
        phase = lifeCyclePhase;
    }
    /**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var warning = warningWithoutStack$1;
    warning = function(condition, format) {
        if (condition) return;
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args
        for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
        warningWithoutStack$1.apply(undefined, [
            false,
            format + '%s'
        ].concat(args, [
            stack
        ]));
    };
    var warning$1 = warning;
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0;
    // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.
    var STRING = 1;
    // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2;
    // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3;
    // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4;
    // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5;
    // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            // $FlowIssue symbol is perfectly valid here
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
    }
    // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    };
    // These props are reserved by React. They shouldn't be written to the DOM.
    [
        'children',
        'dangerouslySetInnerHTML',
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null);
    } // attributeNamespace
    );
    // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null);
    } // attributeNamespace
    );
    // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null);
    } // attributeNamespace
    );
    // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null);
    } // attributeNamespace
    );
    // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        // Microdata
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null);
    } // attributeNamespace
    );
    // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null);
    } // attributeNamespace
    );
    // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null);
    } // attributeNamespace
    );
    // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null);
    } // attributeNamespace
    );
    // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    };
    // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null);
    } // attributeNamespace
    );
    // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:href',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink');
    });
    // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace');
    });
    // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null);
    } // attributeNamespace
    );
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        }
        // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue = void 0;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) attributeValue = '';
            else // `setAttribute` with objects becomes only `[object]` in IE8/9,
            // ('' + value) makes it output the correct toString()-value.
            attributeValue = '' + value;
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
        checkPropTypes: null
    };
    ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    var propTypes = {
        value: function(props, propName, componentName) {
            if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) return null;
            return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        },
        checked: function(props, propName, componentName) {
            if (props.onChange || props.readOnly || props.disabled || props[propName] == null) return null;
            return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
    };
    /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */ ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
    };
    var enableUserTimingAPI = true;
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    var debugRenderPhaseSideEffects = false;
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    var debugRenderPhaseSideEffectsForStrictMode = true;
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    var warnAboutDeprecatedLifecycles = false;
    // Gather advanced timing metrics for Profiler subtrees.
    var enableProfilerTimer = true;
    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;
    // Only used in www builds.
    var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    var disableInputAttributeSyncing = false;
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;
    var warnAboutShorthandPropertyCollision = false;
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        ReactControlledValuePropTypes.checkPropTypes('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            warning$1(false, "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            warning$1(false, "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var _controlled = isControlled(props);
        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
            warning$1(false, "A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
            warning$1(false, "A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        if (disableInputAttributeSyncing) // When not syncing the value attribute, React only assigns a new value
        // whenever the defaultValue React prop has changed. When not present,
        // React does nothing
        {
            if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        } else {
            // When syncing the value attribute, the value comes from a cascade of
            // properties:
            //  1. The value React property
            //  2. The defaultValue React property
            //  3. Otherwise there should be no change
            if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
            else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
        if (disableInputAttributeSyncing) {
            // When not syncing the checked attribute, the attribute is directly
            // controllable from the defaultValue React property. It needs to be
            // updated as new props come in.
            if (props.defaultChecked == null) node.removeAttribute('checked');
            else node.defaultChecked = !!props.defaultChecked;
        } else // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element;
        // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset';
            // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var _initialValue = toString(node._wrapperState.initialValue);
            // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) {
                if (disableInputAttributeSyncing) {
                    var value = getToStringValue(props.value);
                    // When not syncing the value attribute, the value property points
                    // directly to the React prop. Only assign it if it exists.
                    if (value != null) // Always assign on buttons so that it is possible to assign an
                    // empty string to clear button text.
                    //
                    // Otherwise, do not re-assign the value property if is empty. This
                    // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
                    // prematurely marking required inputs as invalid. Equality is compared
                    // to the current value in case the browser provided value is not an
                    // empty string.
                    {
                        if (isButton || value !== node.value) node.value = toString(value);
                    }
                } else // When syncing the value attribute, the value property should use
                // the wrapperState._initialValue property. This uses:
                //
                //   1. The value React property when present
                //   2. The defaultValue React property when present
                //   3. An empty string
                if (_initialValue !== node.value) node.value = _initialValue;
            }
            if (disableInputAttributeSyncing) {
                // When not syncing the value attribute, assign the value attribute
                // directly from the defaultValue React property (when present)
                var defaultValue = getToStringValue(props.defaultValue);
                if (defaultValue != null) node.defaultValue = toString(defaultValue);
            } else // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = _initialValue;
        }
        // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        if (disableInputAttributeSyncing) {
            // When not syncing the checked attribute, the checked property
            // never gets assigned. It must be manually set. We don't want
            // to do this when hydrating so that existing user input isn't
            // modified
            if (!isHydrating) updateChecked(element, props);
            // Only assign the checked attribute if it is defined. This saves
            // a DOM write when controlling the checked attribute isn't needed
            // (text inputs, submit/reset)
            if (props.hasOwnProperty('defaultChecked')) {
                node.defaultChecked = !node.defaultChecked;
                node.defaultChecked = !!props.defaultChecked;
            }
        } else {
            // When syncing the checked attribute, both the checked property and
            // attribute are assigned at the same time using defaultChecked. This uses:
            //
            //   1. The checked React property when present
            //   2. The defaultChecked React property when present
            //   3. Otherwise, false
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
            // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                !otherProps && invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.');
                // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode);
                // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    }
    // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        type !== 'number' || node.ownerDocument.activeElement !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var eventTypes$1 = {
        change: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_CHANGE,
                TOP_CLICK,
                TOP_FOCUS,
                TOP_INPUT,
                TOP_KEY_DOWN,
                TOP_KEY_UP,
                TOP_SELECTION_CHANGE
            ]
        }
    };
    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
        var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
        event.type = 'change';
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, event);
    }
    function runEventInBatch(event) {
        runEventsInBatch(event);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance$1(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CHANGE) return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
        if (topLevelType === TOP_FOCUS) {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (topLevelType === TOP_BLUR) stopWatchingForValueChange();
    }
    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
        if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CLICK) return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        if (!disableInputAttributeSyncing) // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ var ChangeEventPlugin = {
        eventTypes: eventTypes$1,
        _isInputEventSupported: isInputEventSupported,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc = void 0, handleEventFunc = void 0;
            if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    handleEventFunc = handleEventsForInputEventPolyfill;
                }
            } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
            if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst);
                if (inst) {
                    var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                    return event;
                }
            }
            if (handleEventFunc) handleEventFunc(topLevelType, targetNode, targetInst);
            // When blurring, set the value attribute for number inputs
            if (topLevelType === TOP_BLUR) handleControlledInputBlur(targetNode);
        }
    };
    /**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */ var DOMEventPluginOrder = [
        'ResponderEventPlugin',
        'SimpleEventPlugin',
        'EnterLeaveEventPlugin',
        'ChangeEventPlugin',
        'SelectEventPlugin',
        'BeforeInputEventPlugin'
    ];
    var SyntheticUIEvent = SyntheticEvent.extend({
        view: null,
        detail: null
    });
    var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    };
    // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    var previousScreenX = 0;
    var previousScreenY = 0;
    // Use flags to signal movementX/Y has already been set
    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticMouseEvent = SyntheticUIEvent.extend({
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        pageX: null,
        pageY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: getEventModifierState,
        button: null,
        buttons: null,
        relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
                isMovementXSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenX - screenX : 0;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
                isMovementYSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenY - screenY : 0;
        }
    });
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var SyntheticPointerEvent = SyntheticMouseEvent.extend({
        pointerId: null,
        width: null,
        height: null,
        pressure: null,
        tangentialPressure: null,
        tiltX: null,
        tiltY: null,
        twist: null,
        pointerType: null,
        isPrimary: null
    });
    var eventTypes$2 = {
        mouseEnter: {
            registrationName: 'onMouseEnter',
            dependencies: [
                TOP_MOUSE_OUT,
                TOP_MOUSE_OVER
            ]
        },
        mouseLeave: {
            registrationName: 'onMouseLeave',
            dependencies: [
                TOP_MOUSE_OUT,
                TOP_MOUSE_OVER
            ]
        },
        pointerEnter: {
            registrationName: 'onPointerEnter',
            dependencies: [
                TOP_POINTER_OUT,
                TOP_POINTER_OVER
            ]
        },
        pointerLeave: {
            registrationName: 'onPointerLeave',
            dependencies: [
                TOP_POINTER_OUT,
                TOP_POINTER_OVER
            ]
        }
    };
    var EnterLeaveEventPlugin = {
        eventTypes: eventTypes$2,
        /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */ extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) return null;
            if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
            return null;
            var win = void 0;
            if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
            win = nativeEventTarget;
            else {
                // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                var doc = nativeEventTarget.ownerDocument;
                if (doc) win = doc.defaultView || doc.parentWindow;
                else win = window;
            }
            var from = void 0;
            var to = void 0;
            if (isOutEvent) {
                from = targetInst;
                var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                to = related ? getClosestInstanceFromNode(related) : null;
            } else {
                // Moving to a node from outside the window.
                from = null;
                to = targetInst;
            }
            if (from === to) // Nothing pertains to our managed components.
            return null;
            var eventInterface = void 0, leaveEventType = void 0, enterEventType = void 0, eventTypePrefix = void 0;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                eventInterface = SyntheticMouseEvent;
                leaveEventType = eventTypes$2.mouseLeave;
                enterEventType = eventTypes$2.mouseEnter;
                eventTypePrefix = 'mouse';
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                eventInterface = SyntheticPointerEvent;
                leaveEventType = eventTypes$2.pointerLeave;
                enterEventType = eventTypes$2.pointerEnter;
                eventTypePrefix = 'pointer';
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + 'leave';
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + 'enter';
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to);
            return [
                leave,
                enter
            ];
        }
    };
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (is(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ /**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */ function get(key) {
        return key._reactInternalFiber;
    }
    function has(key) {
        return key._reactInternalFiber !== undefined;
    }
    function set(key, value) {
        key._reactInternalFiber = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoEffect = /*              */ 0;
    var PerformedWork = /*         */ 1;
    // You can change the rest (and add more).
    var Placement = /*             */ 2;
    var Update = /*                */ 4;
    var PlacementAndUpdate = /*    */ 6;
    var Deletion = /*              */ 8;
    var ContentReset = /*          */ 16;
    var Callback = /*              */ 32;
    var DidCapture = /*            */ 64;
    var Ref = /*                   */ 128;
    var Snapshot = /*              */ 256;
    var Passive = /*               */ 512;
    // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*   */ 932;
    // Union of all host effects
    var HostEffectMask = /*        */ 1023;
    var Incomplete = /*            */ 1024;
    var ShouldCapture = /*         */ 2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;
    function isFiberMountedImpl(fiber) {
        var node = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
            while(node.return){
                node = node.return;
                if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
            }
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
        // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return UNMOUNTED;
    }
    function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner$1.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            !instance._warnedAboutRefsInRender && warningWithoutStack$1(false, "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return isFiberMountedImpl(fiber) === MOUNTED;
    }
    function assertIsMounted(fiber) {
        !(isFiberMountedImpl(fiber) === MOUNTED) && invariant(false, 'Unable to find node on an unmounted component.');
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var state = isFiberMountedImpl(fiber);
            !(state !== UNMOUNTED) && invariant(false, 'Unable to find node on an unmounted component.');
            if (state === MOUNTING) return null;
            return fiber;
        }
        // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            var parentB = parentA ? parentA.alternate : null;
            if (!parentA || !parentB) break;
            // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                }
                // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                invariant(false, 'Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    !didFindChild && invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.');
                }
            }
            !(a.alternate === b) && invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.');
        }
        // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        !(a.tag === HostRoot) && invariant(false, 'Unable to find node on an unmounted component.');
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
        // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
        // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
        // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function addEventBubbleListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, false);
    }
    function addEventCaptureListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, true);
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var SyntheticAnimationEvent = SyntheticEvent.extend({
        animationName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var SyntheticClipboardEvent = SyntheticEvent.extend({
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticFocusEvent = SyntheticUIEvent.extend({
        relatedTarget: null
    });
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode = void 0;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode;
            // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
        // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
        // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        }
        // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent);
            // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
        key: getEventKey,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticDragEvent = SyntheticMouseEvent.extend({
        dataTransfer: null
    });
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var SyntheticTouchEvent = SyntheticUIEvent.extend({
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: getEventModifierState
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var SyntheticTransitionEvent = SyntheticEvent.extend({
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticWheelEvent = SyntheticMouseEvent.extend({
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: null,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: null
    });
    /**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */ var interactiveEventTypeNames = [
        [
            TOP_BLUR,
            'blur'
        ],
        [
            TOP_CANCEL,
            'cancel'
        ],
        [
            TOP_CLICK,
            'click'
        ],
        [
            TOP_CLOSE,
            'close'
        ],
        [
            TOP_CONTEXT_MENU,
            'contextMenu'
        ],
        [
            TOP_COPY,
            'copy'
        ],
        [
            TOP_CUT,
            'cut'
        ],
        [
            TOP_AUX_CLICK,
            'auxClick'
        ],
        [
            TOP_DOUBLE_CLICK,
            'doubleClick'
        ],
        [
            TOP_DRAG_END,
            'dragEnd'
        ],
        [
            TOP_DRAG_START,
            'dragStart'
        ],
        [
            TOP_DROP,
            'drop'
        ],
        [
            TOP_FOCUS,
            'focus'
        ],
        [
            TOP_INPUT,
            'input'
        ],
        [
            TOP_INVALID,
            'invalid'
        ],
        [
            TOP_KEY_DOWN,
            'keyDown'
        ],
        [
            TOP_KEY_PRESS,
            'keyPress'
        ],
        [
            TOP_KEY_UP,
            'keyUp'
        ],
        [
            TOP_MOUSE_DOWN,
            'mouseDown'
        ],
        [
            TOP_MOUSE_UP,
            'mouseUp'
        ],
        [
            TOP_PASTE,
            'paste'
        ],
        [
            TOP_PAUSE,
            'pause'
        ],
        [
            TOP_PLAY,
            'play'
        ],
        [
            TOP_POINTER_CANCEL,
            'pointerCancel'
        ],
        [
            TOP_POINTER_DOWN,
            'pointerDown'
        ],
        [
            TOP_POINTER_UP,
            'pointerUp'
        ],
        [
            TOP_RATE_CHANGE,
            'rateChange'
        ],
        [
            TOP_RESET,
            'reset'
        ],
        [
            TOP_SEEKED,
            'seeked'
        ],
        [
            TOP_SUBMIT,
            'submit'
        ],
        [
            TOP_TOUCH_CANCEL,
            'touchCancel'
        ],
        [
            TOP_TOUCH_END,
            'touchEnd'
        ],
        [
            TOP_TOUCH_START,
            'touchStart'
        ],
        [
            TOP_VOLUME_CHANGE,
            'volumeChange'
        ]
    ];
    var nonInteractiveEventTypeNames = [
        [
            TOP_ABORT,
            'abort'
        ],
        [
            TOP_ANIMATION_END,
            'animationEnd'
        ],
        [
            TOP_ANIMATION_ITERATION,
            'animationIteration'
        ],
        [
            TOP_ANIMATION_START,
            'animationStart'
        ],
        [
            TOP_CAN_PLAY,
            'canPlay'
        ],
        [
            TOP_CAN_PLAY_THROUGH,
            'canPlayThrough'
        ],
        [
            TOP_DRAG,
            'drag'
        ],
        [
            TOP_DRAG_ENTER,
            'dragEnter'
        ],
        [
            TOP_DRAG_EXIT,
            'dragExit'
        ],
        [
            TOP_DRAG_LEAVE,
            'dragLeave'
        ],
        [
            TOP_DRAG_OVER,
            'dragOver'
        ],
        [
            TOP_DURATION_CHANGE,
            'durationChange'
        ],
        [
            TOP_EMPTIED,
            'emptied'
        ],
        [
            TOP_ENCRYPTED,
            'encrypted'
        ],
        [
            TOP_ENDED,
            'ended'
        ],
        [
            TOP_ERROR,
            'error'
        ],
        [
            TOP_GOT_POINTER_CAPTURE,
            'gotPointerCapture'
        ],
        [
            TOP_LOAD,
            'load'
        ],
        [
            TOP_LOADED_DATA,
            'loadedData'
        ],
        [
            TOP_LOADED_METADATA,
            'loadedMetadata'
        ],
        [
            TOP_LOAD_START,
            'loadStart'
        ],
        [
            TOP_LOST_POINTER_CAPTURE,
            'lostPointerCapture'
        ],
        [
            TOP_MOUSE_MOVE,
            'mouseMove'
        ],
        [
            TOP_MOUSE_OUT,
            'mouseOut'
        ],
        [
            TOP_MOUSE_OVER,
            'mouseOver'
        ],
        [
            TOP_PLAYING,
            'playing'
        ],
        [
            TOP_POINTER_MOVE,
            'pointerMove'
        ],
        [
            TOP_POINTER_OUT,
            'pointerOut'
        ],
        [
            TOP_POINTER_OVER,
            'pointerOver'
        ],
        [
            TOP_PROGRESS,
            'progress'
        ],
        [
            TOP_SCROLL,
            'scroll'
        ],
        [
            TOP_SEEKING,
            'seeking'
        ],
        [
            TOP_STALLED,
            'stalled'
        ],
        [
            TOP_SUSPEND,
            'suspend'
        ],
        [
            TOP_TIME_UPDATE,
            'timeUpdate'
        ],
        [
            TOP_TOGGLE,
            'toggle'
        ],
        [
            TOP_TOUCH_MOVE,
            'touchMove'
        ],
        [
            TOP_TRANSITION_END,
            'transitionEnd'
        ],
        [
            TOP_WAITING,
            'waiting'
        ],
        [
            TOP_WHEEL,
            'wheel'
        ]
    ];
    var eventTypes$4 = {
    };
    var topLevelEventsToDispatchConfig = {
    };
    function addEventTypeNameToConfig(_ref, isInteractive1) {
        var topEvent = _ref[0], event = _ref[1];
        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
        var onEvent = 'on' + capitalizedEvent;
        var type = {
            phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + 'Capture'
            },
            dependencies: [
                topEvent
            ],
            isInteractive: isInteractive1
        };
        eventTypes$4[event] = type;
        topLevelEventsToDispatchConfig[topEvent] = type;
    }
    interactiveEventTypeNames.forEach(function(eventTuple) {
        addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function(eventTuple) {
        addEventTypeNameToConfig(eventTuple, false);
    });
    // Only used in DEV for exhaustiveness validation.
    var knownHTMLTopLevelTypes = [
        TOP_ABORT,
        TOP_CANCEL,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_CLOSE,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_INPUT,
        TOP_INVALID,
        TOP_LOAD,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_RESET,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUBMIT,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_TOGGLE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING
    ];
    var SimpleEventPlugin = {
        eventTypes: eventTypes$4,
        isInteractiveTopLevelEventType: function(topLevelType) {
            var config = topLevelEventsToDispatchConfig[topLevelType];
            return config !== undefined && config.isInteractive === true;
        },
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
            if (!dispatchConfig) return null;
            var EventConstructor = void 0;
            switch(topLevelType){
                case TOP_KEY_PRESS:
                    // Firefox creates a keypress event for function keys too. This removes
                    // the unwanted keypress events. Enter is however both printable and
                    // non-printable. One would expect Tab to be as well (but it isn't).
                    if (getEventCharCode(nativeEvent) === 0) return null;
                /* falls through */ case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    EventConstructor = SyntheticKeyboardEvent;
                    break;
                case TOP_BLUR:
                case TOP_FOCUS:
                    EventConstructor = SyntheticFocusEvent;
                    break;
                case TOP_CLICK:
                    // Firefox creates a click event on right mouse clicks. This removes the
                    // unwanted click events.
                    if (nativeEvent.button === 2) return null;
                /* falls through */ case TOP_AUX_CLICK:
                case TOP_DOUBLE_CLICK:
                case TOP_MOUSE_DOWN:
                case TOP_MOUSE_MOVE:
                case TOP_MOUSE_UP:
                // TODO: Disabled elements should not respond to mouse events
                /* falls through */ case TOP_MOUSE_OUT:
                case TOP_MOUSE_OVER:
                case TOP_CONTEXT_MENU:
                    EventConstructor = SyntheticMouseEvent;
                    break;
                case TOP_DRAG:
                case TOP_DRAG_END:
                case TOP_DRAG_ENTER:
                case TOP_DRAG_EXIT:
                case TOP_DRAG_LEAVE:
                case TOP_DRAG_OVER:
                case TOP_DRAG_START:
                case TOP_DROP:
                    EventConstructor = SyntheticDragEvent;
                    break;
                case TOP_TOUCH_CANCEL:
                case TOP_TOUCH_END:
                case TOP_TOUCH_MOVE:
                case TOP_TOUCH_START:
                    EventConstructor = SyntheticTouchEvent;
                    break;
                case TOP_ANIMATION_END:
                case TOP_ANIMATION_ITERATION:
                case TOP_ANIMATION_START:
                    EventConstructor = SyntheticAnimationEvent;
                    break;
                case TOP_TRANSITION_END:
                    EventConstructor = SyntheticTransitionEvent;
                    break;
                case TOP_SCROLL:
                    EventConstructor = SyntheticUIEvent;
                    break;
                case TOP_WHEEL:
                    EventConstructor = SyntheticWheelEvent;
                    break;
                case TOP_COPY:
                case TOP_CUT:
                case TOP_PASTE:
                    EventConstructor = SyntheticClipboardEvent;
                    break;
                case TOP_GOT_POINTER_CAPTURE:
                case TOP_LOST_POINTER_CAPTURE:
                case TOP_POINTER_CANCEL:
                case TOP_POINTER_DOWN:
                case TOP_POINTER_MOVE:
                case TOP_POINTER_OUT:
                case TOP_POINTER_OVER:
                case TOP_POINTER_UP:
                    EventConstructor = SyntheticPointerEvent;
                    break;
                default:
                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) warningWithoutStack$1(false, "SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                    // HTML Events
                    // @see http://www.w3.org/TR/html5/index.html#events-0
                    EventConstructor = SyntheticEvent;
                    break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
        }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */ function findRootContainerNode(inst) {
        // TODO: It may be a good idea to cache this to prevent unnecessary DOM
        // traversal, but caching is difficult to do correctly without using a
        // mutation observer to listen for all DOM changes.
        while(inst.return)inst = inst.return;
        if (inst.tag !== HostRoot) // This can happen if we're in a detached tree.
        return null;
        return inst.stateNode.containerInfo;
    }
    // Used to store ancestor hierarchy in top level callback
    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
        if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
        }
        return {
            topLevelType: topLevelType,
            nativeEvent: nativeEvent,
            targetInst: targetInst,
            ancestors: []
        };
    }
    function releaseTopLevelCallbackBookKeeping(instance) {
        instance.topLevelType = null;
        instance.nativeEvent = null;
        instance.targetInst = null;
        instance.ancestors.length = 0;
        if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) callbackBookkeepingPool.push(instance);
    }
    function handleTopLevel(bookKeeping) {
        var targetInst = bookKeeping.targetInst;
        // Loop through the hierarchy, in case there's any nested components.
        // It's important that we build the array of ancestors before calling any
        // event handlers, because event handlers can modify the DOM, leading to
        // inconsistencies with ReactMount's node cache. See #1105.
        var ancestor = targetInst;
        do {
            if (!ancestor) {
                bookKeeping.ancestors.push(ancestor);
                break;
            }
            var root1 = findRootContainerNode(ancestor);
            if (!root1) break;
            bookKeeping.ancestors.push(ancestor);
            ancestor = getClosestInstanceFromNode(root1);
        }while (ancestor)
        for(var i = 0; i < bookKeeping.ancestors.length; i++){
            targetInst = bookKeeping.ancestors[i];
            runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
        }
    }
    // TODO: can we stop exporting these?
    var _enabled = true;
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    /**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */ function trapBubbledEvent(topLevelType, element) {
        if (!element) return null;
        var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
        addEventBubbleListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
        dispatch.bind(null, topLevelType));
    }
    /**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */ function trapCapturedEvent(topLevelType, element) {
        if (!element) return null;
        var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
        addEventCaptureListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
        dispatch.bind(null, topLevelType));
    }
    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
        interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }
    function dispatchEvent(topLevelType, nativeEvent) {
        if (!_enabled) return;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
        try {
            // Event queue being processed in the same cycle allows
            // `preventDefault`.
            batchedUpdates(handleTopLevel, bookKeeping);
        } finally{
            releaseTopLevelCallbackBookKeeping(bookKeeping);
        }
    }
    /**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */ var alreadyListeningTo = {
    };
    var reactTopListenersCounter = 0;
    /**
 * To ensure no conflicts with other potential React instances on the page
 */ var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);
    function getListeningForDocument(mountAt) {
        // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
        // directly.
        if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
            mountAt[topListenersIDKey] = reactTopListenersCounter++;
            alreadyListeningTo[mountAt[topListenersIDKey]] = {
            };
        }
        return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */ function listenTo(registrationName, mountAt) {
        var isListening = getListeningForDocument(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for(var i = 0; i < dependencies.length; i++){
            var dependency = dependencies[i];
            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                switch(dependency){
                    case TOP_SCROLL:
                        trapCapturedEvent(TOP_SCROLL, mountAt);
                        break;
                    case TOP_FOCUS:
                    case TOP_BLUR:
                        trapCapturedEvent(TOP_FOCUS, mountAt);
                        trapCapturedEvent(TOP_BLUR, mountAt);
                        // We set the flag for a single dependency later in this function,
                        // but this ensures we mark both as attached rather than just one.
                        isListening[TOP_BLUR] = true;
                        isListening[TOP_FOCUS] = true;
                        break;
                    case TOP_CANCEL:
                    case TOP_CLOSE:
                        if (isEventSupported(getRawEventName(dependency))) trapCapturedEvent(dependency, mountAt);
                        break;
                    case TOP_INVALID:
                    case TOP_SUBMIT:
                    case TOP_RESET:
                        break;
                    default:
                        // By default, listen on the top level to all non-media events.
                        // Media events don't bubble so adding the listener wouldn't do anything.
                        var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
                        if (!isMediaEvent) trapBubbledEvent(dependency, mountAt);
                        break;
                }
                isListening[dependency] = true;
            }
        }
    }
    function isListeningToAllDependencies(registrationName, mountAt) {
        var isListening = getListeningForDocument(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for(var i = 0; i < dependencies.length; i++){
            var dependency = dependencies[i];
            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) return false;
        }
        return true;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            }
            // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
            // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection$1(input) {
        var selection = void 0;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
        select: {
            phasedRegistrationNames: {
                bubbled: 'onSelect',
                captured: 'onSelectCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_CONTEXT_MENU,
                TOP_DRAG_END,
                TOP_FOCUS,
                TOP_KEY_DOWN,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN,
                TOP_MOUSE_UP,
                TOP_SELECTION_CHANGE
            ]
        }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */ function getSelection(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return null;
        // Only fire when selection has actually changed.
        var currentSelection = getSelection(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = 'select';
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
        }
        return null;
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ var SelectEventPlugin = {
        eventTypes: eventTypes$3,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            // Track whether all listeners exists for this plugin. If none exist, we do
            // not extract events. See #3639.
            if (!doc || !isListeningToAllDependencies('onSelect', doc)) return null;
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch(topLevelType){
                // Track the input node that has focus.
                case TOP_FOCUS:
                    if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                        activeElement$1 = targetNode;
                        activeElementInst$1 = targetInst;
                        lastSelection = null;
                    }
                    break;
                case TOP_BLUR:
                    activeElement$1 = null;
                    activeElementInst$1 = null;
                    lastSelection = null;
                    break;
                // Don't fire the event while the user is dragging. This matches the
                // semantics of the native select event.
                case TOP_MOUSE_DOWN:
                    mouseDown = true;
                    break;
                case TOP_CONTEXT_MENU:
                case TOP_MOUSE_UP:
                case TOP_DRAG_END:
                    mouseDown = false;
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                // Chrome and IE fire non-standard event when selection is changed (and
                // sometimes when it hasn't). IE's event fires out of order with respect
                // to key and input events on deletion, so we discard it.
                //
                // Firefox doesn't support selectionchange, so check selection status
                // after each key entry. The selection changes after keydown and before
                // keyup, but we check on keydown as well in the case of holding down a
                // key, when multiple keydown events are fired but only one keyup is.
                // This is also our approach for IE handling, for the reason above.
                case TOP_SELECTION_CHANGE:
                    if (skipSelectionChangeEvent) break;
                // falls through
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
        }
    };
    /**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */ injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
 * Some important event plugins included by default (without having to require
 * them).
 */ injection.injectEventPluginsByName({
        SimpleEventPlugin: SimpleEventPlugin,
        EnterLeaveEventPlugin: EnterLeaveEventPlugin,
        ChangeEventPlugin: ChangeEventPlugin,
        SelectEventPlugin: SelectEventPlugin,
        BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = '';
        // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child;
        // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
        });
        // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            warning$1(false, "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue$1 = void 0;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        ReactControlledValuePropTypes.checkPropTypes('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) warning$1(false, "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) warning$1(false, "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            warning$1(false, "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$2(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        !(props.dangerouslySetInnerHTML == null) && invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.');
        // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            warning$1(false, "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value;
        // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var defaultValue = props.defaultValue;
            // TODO (yungsters): Remove support for children content in <textarea>.
            var children = props.children;
            if (children != null) {
                warning$1(false, "Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                !(defaultValue == null) && invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.');
                if (Array.isArray(children)) {
                    !(children.length <= 1) && invariant(false, '<textarea> can only have at most one child.');
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value);
            // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element;
        // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent;
        // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) node.value = textContent;
    }
    function restoreControlledState$3(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE$1,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    };
    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE$1;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE$1;
        // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    // SVG temp container for IE lacking innerHTML
    var reusableSVGContainer = void 0;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        // IE does not have innerHTML for SVG nodes, so instead we inject the
        // new markup in a temp node and then move the child nodes across into
        // the target node
        if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement('div');
            reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
            var svgNode = reusableSVGContainer.firstChild;
            while(node.firstChild)node.removeChild(node.firstChild);
            while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
        } else node.innerHTML = html;
    });
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ];
    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + hyphenateStyleName(styleName) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style1 = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style1.setProperty(styleName, styleValue);
            else style1[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!warnAboutShorthandPropertyCollision) return;
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                warning$1(false, "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.
    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    function assertValidProps(tag, props) {
        if (!props) return;
        // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) !(props.children == null && props.dangerouslySetInnerHTML == null) && invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum());
        if (props.dangerouslySetInnerHTML != null) {
            !(props.children == null) && invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
            !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) && invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.');
        }
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) && warning$1(false, "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        !(props.style == null || typeof props.style === 'object') && invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum());
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this whitelist too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        'aria-hidden': 0,
        'aria-invalid': 0,
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            }
            // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            }
            // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) warning$1(false, "Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
        else if (invalidProps.length > 1) warning$1(false, "Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) warning$1(false, "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else warning$1(false, "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            warning$1(false, "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        }
        // We can't rely on the event system being injected on the server.
        if (canUseEventSystem) {
            if (registrationNameModules.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) warning$1(false, "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            warning$1(false, "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            warning$1(false, "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            warning$1(false, "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            warning$1(false, "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            warning$1(false, "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) warning$1(false, "Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else warning$1(false, "Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        }
        // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
        // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        }
        // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            warning$1(false, "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, canUseEventSystem) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) warning$1(false, "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
        else if (unknownProps.length > 1) warning$1(false, "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
    };
    function validateProperties$2(type, props, canUseEventSystem) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, canUseEventSystem);
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, /* canUseEventSystem */ true);
    };
    // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) warning$1(false, "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    };
    // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function ensureListeningTo(rootContainerElement, registrationName) {
        var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
        var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
        listenTo(registrationName, doc);
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE$1) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE$1) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag = void 0;
        // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement = void 0;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props);
            // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            !(isCustomComponentTag || type === type.toLowerCase()) && warning$1(false, "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type);
                // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                warning$1(false, "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$1(false, "%s is using shady DOM. Using shady DOM with React can cause things to break subtly.", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnShadyDOM = true;
        }
        // TODO: Make sure that we check isMounted before firing any of these events.
        var props = void 0;
        switch(tag){
            case 'iframe':
            case 'object':
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for(var i = 0; i < mediaEventTypes.length; i++)trapBubbledEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                props = rawProps;
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement, rawProps);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    }
    // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps = void 0;
        var nextProps = void 0;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey = void 0;
        var styleName = void 0;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE$1) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the whitelist in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE$1) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                    // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined;
                var lastHtml = lastProp ? lastProp[HTML] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the whitelist during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
            (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
        }
        return updatePayload;
    }
    // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag = void 0;
        var extraAttributeNames = void 0;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
            warning$1(false, "%s is using shady DOM. Using shady DOM with React can cause things to break subtly.", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnShadyDOM = true;
        }
        // TODO: Make sure that we check isMounted before firing any of these events.
        switch(tag){
            case 'iframe':
            case 'object':
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for(var i = 0; i < mediaEventTypes.length; i++)trapBubbledEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is whitelisted
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
            } else if (// Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
                    if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                } else if (propKey === STYLE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true;
                                // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            }
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement, rawProps);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$1(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$3(domElement, props);
                return;
            case 'select':
                restoreControlledState$2(domElement, props);
                return;
        }
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ];
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ];
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]);
    // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
        // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body';
            case '#document':
                return tag === 'html';
        }
        // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            !(childTag == null) && warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
        if (didWarn[warnKey]) return;
        didWarn[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody> to your code to match the DOM tree generated by the browser.";
            warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else warningWithoutStack$1(false, "validateDOMNesting(...): %s cannot appear as a descendant of <%s>.%s", tagDisplayName, ancestorTag, addendum);
    };
    // Renderers that don't support persistence
    // can re-export everything from this module.
    function shim() {
        invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    }
    // Persistence (when unsupported)
    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneUnhiddenInstance = shim;
    var createHiddenTextInstance = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var STYLE = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type = void 0;
        var namespace = void 0;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: _ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        var parentNamespace;
        return {
            namespace: _namespace,
            ancestorInfo: _ancestorInfo2
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        setEnabled(false);
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        selectionInformation = null;
        setEnabled(eventsEnabled);
        eventsEnabled = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace = void 0;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function shouldDeprioritizeSubtree(type, props) {
        return !!props.hidden;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    var isPrimaryRenderer = true;
    // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var schedulePassiveEffects = scheduler.unstable_scheduleCallback;
    var cancelPassiveEffects = scheduler.unstable_cancelCallback;
    // -------------------
    //     Mutation
    // -------------------
    var supportsMutation = true;
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode = void 0;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        }
        // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA) depth++;
            }
            node = nextNode;
        }while (node)
    // TODO: Warn, we didn't find the end comment boundary.
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
    }
    function hideInstance(instance) {
        instance.style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    // -------------------
    //     Hydration
    // -------------------
    var supportsHydration = true;
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
        // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
        // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
        // This has now been refined to a suspense node.
        return instance;
    }
    function getNextHydratableSibling(instance) {
        var node = instance.nextSibling;
        // Skip non-hydratable nodes.
        while(node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA))node = node.nextSibling;
        return node;
    }
    function getFirstHydratableChild(parentInstance) {
        var next = parentInstance.firstChild;
        // Skip non-hydratable nodes.
        while(next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA))next = next.nextSibling;
        return next;
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace = void 0;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA) depth++;
            }
            node = node.nextSibling;
        }
        // TODO: Warn, we didn't find the end comment boundary.
        return null;
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type, props);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) warnForInsertedHydratedElement(parentInstance, type, props);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING];
    }
    // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.
    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
    // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
    var currentFiber = null;
    // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).
    var currentPhase = null;
    var currentPhaseFiber = null;
    // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.
    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false;
    // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.
    var labelsInCurrentCommit = new Set();
    var formatMarkName = function(markName) {
        return reactEmoji + ' ' + markName;
    };
    var formatLabel = function(label, warning1) {
        var prefix = warning1 ? warningEmoji + ' ' : reactEmoji + ' ';
        var suffix = warning1 ? ' Warning: ' + warning1 : '';
        return '' + prefix + label + suffix;
    };
    var beginMark = function(markName) {
        performance.mark(formatMarkName(markName));
    };
    var clearMark = function(markName) {
        performance.clearMarks(formatMarkName(markName));
    };
    var endMark = function(label, markName, warning1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning1);
        try {
            performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {
        }
        // If previous mark was missing for some reason, this will throw.
        // This could only happen if React crashed in an unexpected place earlier.
        // Don't pile on with more errors.
        // Clear marks immediately to avoid growing buffer.
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
    };
    var getFiberMarkName = function(label, debugID) {
        return label + ' (#' + debugID + ')';
    };
    var getFiberLabel = function(componentName, isMounted1, phase1) {
        if (phase1 === null) // These are composite component total time measurements.
        return componentName + ' [' + (isMounted1 ? 'update' : 'mount') + ']';
        else // Composite component methods.
        return componentName + '.' + phase1;
    };
    var beginFiberMark = function(fiber, phase1) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase1);
        if (isCommitting && labelsInCurrentCommit.has(label)) // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
    };
    var clearFiberMark = function(fiber, phase1) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase1);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
    };
    var endFiberMark = function(fiber, phase1, warning1) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase1);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning1);
    };
    var shouldIgnoreFiber = function(fiber) {
        // Host components should be skipped in the timeline.
        // We could check typeof fiber.type, but does this work with RN?
        switch(fiber.tag){
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
                return true;
            default:
                return false;
        }
    };
    var clearPendingPhaseMeasurement = function() {
        if (currentPhase !== null && currentPhaseFiber !== null) clearFiberMark(currentPhaseFiber, currentPhase);
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
    };
    var pauseTimers = function() {
        // Stops all currently active measurements so that they can be resumed
        // if we continue in a later deferred loop from the same unit of work.
        var fiber = currentFiber;
        while(fiber){
            if (fiber._debugIsCurrentlyTiming) endFiberMark(fiber, null, null);
            fiber = fiber.return;
        }
    };
    var resumeTimersRecursively = function(fiber) {
        if (fiber.return !== null) resumeTimersRecursively(fiber.return);
        if (fiber._debugIsCurrentlyTiming) beginFiberMark(fiber, null);
    };
    var resumeTimers = function() {
        // Resumes all measurements that were active during the last deferred loop.
        if (currentFiber !== null) resumeTimersRecursively(currentFiber);
    };
    function recordEffect() {
        if (enableUserTimingAPI) effectCountInCurrentCommit++;
    }
    function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
            if (isCommitting) hasScheduledUpdateInCurrentCommit = true;
            if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') hasScheduledUpdateInCurrentPhase = true;
        }
    }
    function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
            if (supportsUserTiming && !isWaitingForCallback) {
                isWaitingForCallback = true;
                beginMark('(Waiting for async callback...)');
            }
        }
    }
    function stopRequestCallbackTimer(didExpire, expirationTime) {
        if (enableUserTimingAPI) {
            if (supportsUserTiming) {
                isWaitingForCallback = false;
                var warning1 = didExpire ? 'React was blocked by main thread' : null;
                endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning1);
            }
        }
    }
    function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
            // If we pause, this is the fiber to unwind from.
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) return;
            fiber._debugIsCurrentlyTiming = true;
        }
    }
    function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
            // Remember we shouldn't complete measurement for this fiber.
            // Otherwise flamechart will be deep even for small updates.
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
        }
    }
    function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
            // If we pause, its parent is the fiber to unwind from.
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) return;
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
        }
    }
    function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
            // If we pause, its parent is the fiber to unwind from.
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) return;
            fiber._debugIsCurrentlyTiming = false;
            var warning2 = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
            endFiberMark(fiber, null, warning2);
        }
    }
    function startPhaseTimer(fiber, phase1) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase1)) return;
            currentPhaseFiber = fiber;
            currentPhase = phase1;
        }
    }
    function stopPhaseTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning3 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
                endFiberMark(currentPhaseFiber, currentPhase, warning3);
            }
            currentPhase = null;
            currentPhaseFiber = null;
        }
    }
    function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) return;
            commitCountInCurrentWorkLoop = 0;
            // This is top level call.
            // Any other measurements are performed within.
            beginMark('(React Tree Reconciliation)');
            // Resume any measurements that were in progress during the last loop.
            resumeTimers();
        }
    }
    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            var warning4 = null;
            if (interruptedBy !== null) {
                if (interruptedBy.tag === HostRoot) warning4 = 'A top-level update interrupted the previous render';
                else {
                    var componentName = getComponentName(interruptedBy.type) || 'Unknown';
                    warning4 = 'An update to ' + componentName + ' interrupted the previous render';
                }
            } else if (commitCountInCurrentWorkLoop > 1) warning4 = 'There were cascading updates';
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
            // Pause any measurements until the next loop.
            pauseTimers();
            endMark(label, '(React Tree Reconciliation)', warning4);
        }
    }
    function startCommitTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark('(Committing Changes)');
        }
    }
    function stopCommitTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            var warning5 = null;
            if (hasScheduledUpdateInCurrentCommit) warning5 = 'Lifecycle hook scheduled a cascading update';
            else if (commitCountInCurrentWorkLoop > 0) warning5 = 'Caused by a cascading update in earlier commit';
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark('(Committing Changes)', '(Committing Changes)', warning5);
        }
    }
    function startCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            effectCountInCurrentCommit = 0;
            beginMark('(Committing Snapshot Effects)');
        }
    }
    function stopCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
        }
    }
    function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            effectCountInCurrentCommit = 0;
            beginMark('(Committing Host Effects)');
        }
    }
    function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
        }
    }
    function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            effectCountInCurrentCommit = 0;
            beginMark('(Calling Lifecycle Methods)');
        }
    }
    function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) return;
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
        }
    }
    var valueStack = [];
    var fiberStack = void 0;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            warningWithoutStack$1(false, 'Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    function checkThatStackIsEmpty() {
        if (index !== -1) warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
    }
    function resetStackAfterFatalErrorInDev() {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
    }
    var warnedAboutMissingGetChildContext = void 0;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyContextObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
        // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        !(contextStackCursor.current === emptyContextObject) && invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.');
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                warningWithoutStack$1(false, "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = void 0;
        setCurrentPhase('getChildContext');
        startPhaseTimer(fiber, 'getChildContext');
        childContext = instance.getChildContext();
        stopPhaseTimer();
        setCurrentPhase(null);
        for(var contextKey in childContext)!(contextKey in childContextTypes) && invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey);
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode;
        // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        !instance && invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.');
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        !(isFiberMounted(fiber) && fiber.tag === ClassComponent) && invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.');
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }
    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;
    function catchErrors(fn) {
        return function(arg) {
            try {
                return fn(arg);
            } catch (err) {
                if (!hasLoggedError) {
                    hasLoggedError = true;
                    warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
                }
            }
        };
    }
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            warningWithoutStack$1(false, "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            // DevTools exists, even though it doesn't support Fiber.
            return true;
        }
        try {
            var rendererID = hook.inject(internals);
            // We have successfully injected, so now it is safe to set up hooks.
            onCommitFiberRoot = catchErrors(function(root2) {
                return hook.onCommitFiberRoot(rendererID, root2);
            });
            onCommitFiberUnmount = catchErrors(function(fiber) {
                return hook.onCommitFiberUnmount(rendererID, fiber);
            });
        } catch (err) {
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
        // DevTools exists
        return true;
    }
    function onCommitRoot(root2) {
        if (typeof onCommitFiberRoot === 'function') onCommitFiberRoot(root2);
    }
    function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === 'function') onCommitFiberUnmount(fiber);
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;
    // 1 unit of expiration time represents 10ms.
    function msToExpirationTime(ms) {
        // Always add an offset so that we don't clash with the magic number for NoWork.
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }
    function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }
    function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
    }
    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }
    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;
    function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    }
    // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.
    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;
    function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }
    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        var testMap = new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        var testSet = new Set([
            nonExtensibleObject
        ]);
        // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.
        testMap.set(0, 0);
        testSet.add(0);
    } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.
    var debugCounter = void 0;
    debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.contextDependencies = null;
        this.mode = mode;
        // Effects
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        if (enableProfilerTimer) {
            // Note: The following is done to avoid a v8 performance cliff.
            //
            // Initializing the fields below to smis and later updating them with
            // double values will cause Fibers to end up having separate shapes.
            // This behavior/bug has something to do with Object.preventExtension().
            // Fortunately this only impacts DEV builds.
            // Unfortunately it makes React unusably slow for some applications.
            // To work around this, initialize the fields below with doubles.
            //
            // Learn more about this here:
            // https://github.com/facebook/react/issues/14365
            // https://bugs.chromium.org/p/v8/issues/detail?id=8538
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            // It's okay to replace the initial doubles with smis after initialization.
            // This won't trigger the performance cliff mentioned above,
            // and it simplifies other profiler code (including DevTools).
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
        }
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    }
    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    }
    // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current1, pendingProps, expirationTime) {
        var workInProgress = current1.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current1.tag, pendingProps, current1.key, current1.mode);
            workInProgress.elementType = current1.elementType;
            workInProgress.type = current1.type;
            workInProgress.stateNode = current1.stateNode;
            // DEV-only fields
            workInProgress._debugID = current1._debugID;
            workInProgress._debugSource = current1._debugSource;
            workInProgress._debugOwner = current1._debugOwner;
            workInProgress._debugHookTypes = current1._debugHookTypes;
            workInProgress.alternate = current1;
            current1.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps;
            // We already have an alternate.
            // Reset the effect tag.
            workInProgress.effectTag = NoEffect;
            // The effect list is no longer valid.
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            if (enableProfilerTimer) {
                // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                // This prevents time from endlessly accumulating in new commits.
                // This has the downside of resetting values for different priority renders,
                // But works for yielding (the common case) and should support resuming.
                workInProgress.actualDuration = 0;
                workInProgress.actualStartTime = -1;
            }
        }
        workInProgress.childExpirationTime = current1.childExpirationTime;
        workInProgress.expirationTime = current1.expirationTime;
        workInProgress.child = current1.child;
        workInProgress.memoizedProps = current1.memoizedProps;
        workInProgress.memoizedState = current1.memoizedState;
        workInProgress.updateQueue = current1.updateQueue;
        workInProgress.contextDependencies = current1.contextDependencies;
        // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current1.sibling;
        workInProgress.index = current1.index;
        workInProgress.ref = current1.ref;
        if (enableProfilerTimer) {
            workInProgress.selfBaseDuration = current1.selfBaseDuration;
            workInProgress.treeBaseDuration = current1.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(isConcurrent) {
        var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;
        if (enableProfilerTimer && isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber = void 0;
        var fiberTag = IndeterminateComponent;
        // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct(type)) fiberTag = ClassComponent;
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
            case REACT_CONCURRENT_MODE_TYPE:
                return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
            case REACT_STRICT_MODE_TYPE:
                return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
        }
        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(Mode, pendingProps, key, mode);
        // TODO: The Mode fiber shouldn't have a type. It has a tag.
        var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
        fiber.elementType = type;
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        var type = REACT_SUSPENSE_TYPE;
        fiber.elementType = type;
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
        };
        return fiber;
    }
    // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
        // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.contextDependencies = source.contextDependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        if (enableProfilerTimer) {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
        // Cyclic construction. This cheats the type system right now because
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(isConcurrent);
        var root2 = void 0;
        if (enableSchedulerTracing) root2 = {
            current: uninitializedFiber,
            containerInfo: containerInfo,
            pendingChildren: null,
            earliestPendingTime: NoWork,
            latestPendingTime: NoWork,
            earliestSuspendedTime: NoWork,
            latestSuspendedTime: NoWork,
            latestPingedTime: NoWork,
            pingCache: null,
            didError: false,
            pendingCommitExpirationTime: NoWork,
            finishedWork: null,
            timeoutHandle: noTimeout,
            context: null,
            pendingContext: null,
            hydrate: hydrate,
            nextExpirationTimeToWorkOn: NoWork,
            expirationTime: NoWork,
            firstBatch: null,
            nextScheduledRoot: null,
            interactionThreadID: tracing.unstable_getThreadID(),
            memoizedInteractions: new Set(),
            pendingInteractionMap: new Map()
        };
        else root2 = {
            current: uninitializedFiber,
            containerInfo: containerInfo,
            pendingChildren: null,
            pingCache: null,
            earliestPendingTime: NoWork,
            latestPendingTime: NoWork,
            earliestSuspendedTime: NoWork,
            latestSuspendedTime: NoWork,
            latestPingedTime: NoWork,
            didError: false,
            pendingCommitExpirationTime: NoWork,
            finishedWork: null,
            timeoutHandle: noTimeout,
            context: null,
            pendingContext: null,
            hydrate: hydrate,
            nextExpirationTimeToWorkOn: NoWork,
            expirationTime: NoWork,
            firstBatch: null,
            nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root2;
        // The reason for the way the Flow types are structured in this file,
        // Is to avoid needing :any casts everywhere interaction tracing fields are used.
        // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
        // $FlowFixMe Remove this :any cast and replace it with something better.
        return root2;
    }
    /**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var lowPriorityWarning = function() {
    };
    var printWarning = function(format) {
        for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.warn(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    lowPriorityWarning = function(condition, format) {
        if (format === undefined) throw new Error("`lowPriorityWarning(condition, format, ...args)` requires a warning message argument");
        if (!condition) {
            for(var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++)args[_key2 - 2] = arguments[_key2];
            printWarning.apply(undefined, [
                format
            ].concat(args));
        }
    };
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
        discardPendingWarnings: function() {
        },
        flushPendingDeprecationWarnings: function() {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordDeprecationWarnings: function(fiber, instance) {
        },
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        }
    };
    var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
    };
    var pendingComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUnsafeLifecycleWarnings = new Map();
    var pendingLegacyContextWarning = new Map();
    // Tracks components we have already warned about.
    var didWarnAboutDeprecatedLifecycles = new Set();
    var didWarnAboutUnsafeLifecycles = new Set();
    var didWarnAboutLegacyContext = new Set();
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        pendingUnsafeLifecycleWarnings.forEach(function(lifecycleWarningsMap, strictRoot) {
            var lifecyclesWarningMessages = [];
            Object.keys(lifecycleWarningsMap).forEach(function(lifecycle) {
                var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
                if (lifecycleWarnings.length > 0) {
                    var componentNames = new Set();
                    lifecycleWarnings.forEach(function(fiber) {
                        componentNames.add(getComponentName(fiber.type) || 'Component');
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                    });
                    var formatted = lifecycle.replace('UNSAFE_', '');
                    var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                    var sortedComponentNames = setToSortedString(componentNames);
                    lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
                }
            });
            if (lifecyclesWarningMessages.length > 0) {
                var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
                warningWithoutStack$1(false, "Unsafe lifecycle methods were found within a strict-mode tree:%s\n\n%s\n\nLearn more about this warning here:\nhttps://fb.me/react-strict-mode-warnings", strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
            }
        });
        pendingUnsafeLifecycleWarnings = new Map();
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    ReactStrictModeWarnings.flushPendingDeprecationWarnings = function() {
        if (pendingComponentWillMountWarnings.length > 0) {
            var uniqueNames = new Set();
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            lowPriorityWarning$1(false, "componentWillMount is deprecated and will be removed in the next major version. Use componentDidMount instead. As a temporary workaround, you can rename to UNSAFE_componentWillMount.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks", sortedNames);
            pendingComponentWillMountWarnings = [];
        }
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            var _uniqueNames = new Set();
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                _uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var _sortedNames = setToSortedString(_uniqueNames);
            lowPriorityWarning$1(false, "componentWillReceiveProps is deprecated and will be removed in the next major version. Use static getDerivedStateFromProps instead.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames);
            pendingComponentWillReceivePropsWarnings = [];
        }
        if (pendingComponentWillUpdateWarnings.length > 0) {
            var _uniqueNames2 = new Set();
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var _sortedNames2 = setToSortedString(_uniqueNames2);
            lowPriorityWarning$1(false, "componentWillUpdate is deprecated and will be removed in the next major version. Use componentDidUpdate instead. As a temporary workaround, you can rename to UNSAFE_componentWillUpdate.\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames2);
            pendingComponentWillUpdateWarnings = [];
        }
    };
    ReactStrictModeWarnings.recordDeprecationWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) return;
        // Don't warn about react-lifecycles-compat polyfilled components.
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            warningWithoutStack$1(false, "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        var warningsForRoot = void 0;
        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
            warningsForRoot = {
                UNSAFE_componentWillMount: [],
                UNSAFE_componentWillReceiveProps: [],
                UNSAFE_componentWillUpdate: []
            };
            pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        var unsafeLifecycles = [];
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') unsafeLifecycles.push('UNSAFE_componentWillMount');
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        if (unsafeLifecycles.length > 0) unsafeLifecycles.forEach(function(lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
        });
    };
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            warningWithoutStack$1(false, "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, "Legacy context API has been detected within a strict-mode tree: %s\n\nPlease update the following components: %s\n\nLearn more about this warning here:\nhttps://fb.me/react-strict-mode-warnings", strictRootComponentStack, sortedNames);
        });
    };
    // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.
    var ReactFiberInstrumentation = {
        debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
    // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.
    function markPendingPriorityLevel(root2, expirationTime) {
        // If there's a gap between completing a failed root and retrying it,
        // additional updates may be scheduled. Clear `didError`, in case the update
        // is sufficient to fix the error.
        root2.didError = false;
        // Update the latest and earliest pending times
        var earliestPendingTime = root2.earliestPendingTime;
        if (earliestPendingTime === NoWork) // No other pending updates.
        root2.earliestPendingTime = root2.latestPendingTime = expirationTime;
        else if (earliestPendingTime < expirationTime) // This is the earliest pending update.
        root2.earliestPendingTime = expirationTime;
        else {
            var latestPendingTime = root2.latestPendingTime;
            if (latestPendingTime > expirationTime) // This is the latest pending update
            root2.latestPendingTime = expirationTime;
        }
        findNextExpirationTimeToWorkOn(expirationTime, root2);
    }
    function markCommittedPriorityLevels(root2, earliestRemainingTime) {
        root2.didError = false;
        if (earliestRemainingTime === NoWork) {
            // Fast path. There's no remaining work. Clear everything.
            root2.earliestPendingTime = NoWork;
            root2.latestPendingTime = NoWork;
            root2.earliestSuspendedTime = NoWork;
            root2.latestSuspendedTime = NoWork;
            root2.latestPingedTime = NoWork;
            findNextExpirationTimeToWorkOn(NoWork, root2);
            return;
        }
        if (earliestRemainingTime < root2.latestPingedTime) root2.latestPingedTime = NoWork;
        // Let's see if the previous latest known pending level was just flushed.
        var latestPendingTime = root2.latestPendingTime;
        if (latestPendingTime !== NoWork) {
            if (latestPendingTime > earliestRemainingTime) // We've flushed all the known pending levels.
            root2.earliestPendingTime = root2.latestPendingTime = NoWork;
            else {
                var earliestPendingTime = root2.earliestPendingTime;
                if (earliestPendingTime > earliestRemainingTime) // We've flushed the earliest known pending level. Set this to the
                // latest pending time.
                root2.earliestPendingTime = root2.latestPendingTime;
            }
        }
        // Now let's handle the earliest remaining level in the whole tree. We need to
        // decide whether to treat it as a pending level or as suspended. Check
        // it falls within the range of known suspended levels.
        var earliestSuspendedTime = root2.earliestSuspendedTime;
        if (earliestSuspendedTime === NoWork) {
            // There's no suspended work. Treat the earliest remaining level as a
            // pending level.
            markPendingPriorityLevel(root2, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root2);
            return;
        }
        var latestSuspendedTime = root2.latestSuspendedTime;
        if (earliestRemainingTime < latestSuspendedTime) {
            // The earliest remaining level is later than all the suspended work. That
            // means we've flushed all the suspended work.
            root2.earliestSuspendedTime = NoWork;
            root2.latestSuspendedTime = NoWork;
            root2.latestPingedTime = NoWork;
            // There's no suspended work. Treat the earliest remaining level as a
            // pending level.
            markPendingPriorityLevel(root2, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root2);
            return;
        }
        if (earliestRemainingTime > earliestSuspendedTime) {
            // The earliest remaining time is earlier than all the suspended work.
            // Treat it as a pending update.
            markPendingPriorityLevel(root2, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root2);
            return;
        }
        // The earliest remaining time falls within the range of known suspended
        // levels. We should treat this as suspended work.
        findNextExpirationTimeToWorkOn(NoWork, root2);
    }
    function hasLowerPriorityWork(root2, erroredExpirationTime) {
        var latestPendingTime = root2.latestPendingTime;
        var latestSuspendedTime = root2.latestSuspendedTime;
        var latestPingedTime = root2.latestPingedTime;
        return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }
    function isPriorityLevelSuspended(root2, expirationTime) {
        var earliestSuspendedTime = root2.earliestSuspendedTime;
        var latestSuspendedTime = root2.latestSuspendedTime;
        return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }
    function markSuspendedPriorityLevel(root2, suspendedTime) {
        root2.didError = false;
        clearPing(root2, suspendedTime);
        // First, check the known pending levels and update them if needed.
        var earliestPendingTime = root2.earliestPendingTime;
        var latestPendingTime = root2.latestPendingTime;
        if (earliestPendingTime === suspendedTime) {
            if (latestPendingTime === suspendedTime) // Both known pending levels were suspended. Clear them.
            root2.earliestPendingTime = root2.latestPendingTime = NoWork;
            else // The earliest pending level was suspended. Clear by setting it to the
            // latest pending level.
            root2.earliestPendingTime = latestPendingTime;
        } else if (latestPendingTime === suspendedTime) // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root2.latestPendingTime = earliestPendingTime;
        // Finally, update the known suspended levels.
        var earliestSuspendedTime = root2.earliestSuspendedTime;
        var latestSuspendedTime = root2.latestSuspendedTime;
        if (earliestSuspendedTime === NoWork) // No other suspended levels.
        root2.earliestSuspendedTime = root2.latestSuspendedTime = suspendedTime;
        else {
            if (earliestSuspendedTime < suspendedTime) // This is the earliest suspended level.
            root2.earliestSuspendedTime = suspendedTime;
            else if (latestSuspendedTime > suspendedTime) // This is the latest suspended level
            root2.latestSuspendedTime = suspendedTime;
        }
        findNextExpirationTimeToWorkOn(suspendedTime, root2);
    }
    function markPingedPriorityLevel(root2, pingedTime) {
        root2.didError = false;
        // TODO: When we add back resuming, we need to ensure the progressed work
        // is thrown out and not reused during the restarted render. One way to
        // invalidate the progressed work is to restart at expirationTime + 1.
        var latestPingedTime = root2.latestPingedTime;
        if (latestPingedTime === NoWork || latestPingedTime > pingedTime) root2.latestPingedTime = pingedTime;
        findNextExpirationTimeToWorkOn(pingedTime, root2);
    }
    function clearPing(root2, completedTime) {
        var latestPingedTime = root2.latestPingedTime;
        if (latestPingedTime >= completedTime) root2.latestPingedTime = NoWork;
    }
    function findEarliestOutstandingPriorityLevel(root2, renderExpirationTime) {
        var earliestExpirationTime = renderExpirationTime;
        var earliestPendingTime = root2.earliestPendingTime;
        var earliestSuspendedTime = root2.earliestSuspendedTime;
        if (earliestPendingTime > earliestExpirationTime) earliestExpirationTime = earliestPendingTime;
        if (earliestSuspendedTime > earliestExpirationTime) earliestExpirationTime = earliestSuspendedTime;
        return earliestExpirationTime;
    }
    function didExpireAtExpirationTime(root2, currentTime) {
        var expirationTime = root2.expirationTime;
        if (expirationTime !== NoWork && currentTime <= expirationTime) // The root has expired. Flush all work up to the current time.
        root2.nextExpirationTimeToWorkOn = currentTime;
    }
    function findNextExpirationTimeToWorkOn(completedExpirationTime, root2) {
        var earliestSuspendedTime = root2.earliestSuspendedTime;
        var latestSuspendedTime = root2.latestSuspendedTime;
        var earliestPendingTime = root2.earliestPendingTime;
        var latestPingedTime = root2.latestPingedTime;
        // Work on the earliest pending time. Failing that, work on the latest
        // pinged time.
        var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;
        // If there is no pending or pinged work, check if there's suspended work
        // that's lower priority than what we just completed.
        if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
        var expirationTime = nextExpirationTimeToWorkOn;
        if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
        root2.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
        root2.expirationTime = expirationTime;
    }
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    function readLazyComponentType(lazyComponent) {
        var status = lazyComponent._status;
        var result = lazyComponent._result;
        switch(status){
            case Resolved:
                var Component = result;
                return Component;
            case Rejected:
                var error = result;
                throw error;
            case Pending:
                var thenable = result;
                throw thenable;
            default:
                lazyComponent._status = Pending;
                var ctor = lazyComponent._ctor;
                var _thenable = ctor();
                _thenable.then(function(moduleObject) {
                    if (lazyComponent._status === Pending) {
                        var defaultExport = moduleObject.default;
                        if (defaultExport === undefined) warning$1(false, "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                        lazyComponent._status = Resolved;
                        lazyComponent._result = defaultExport;
                    }
                }, function(error1) {
                    if (lazyComponent._status === Pending) {
                        lazyComponent._status = Rejected;
                        lazyComponent._result = error1;
                    }
                });
                // Handle synchronous thenables.
                switch(lazyComponent._status){
                    case Resolved:
                        return lazyComponent._result;
                    case Rejected:
                        throw lazyComponent._result;
                }
                lazyComponent._result = _thenable;
                throw _thenable;
        }
    }
    var fakeInternalInstance = {
    };
    var isArray$1 = Array.isArray;
    // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback$1 = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            warningWithoutStack$1(false, "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                warningWithoutStack$1(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    };
    // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) // Invoke the function an extra time to help detect side-effects.
        getDerivedStateFromProps(nextProps, prevState);
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        // Merge the partial state and the previous state.
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState;
        // Once the update queue is empty, persist the derived state onto the
        // base state.
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null && workInProgress.expirationTime === NoWork) updateQueue.baseState = memoizedState;
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback$1(callback, 'setState');
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback$1(callback, 'replaceState');
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback$1(callback, 'forceUpdate');
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            startPhaseTimer(workInProgress, 'shouldComponentUpdate');
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            !(shouldUpdate !== undefined) && warningWithoutStack$1(false, "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 && warningWithoutStack$1(false, "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 && warningWithoutStack$1(false, "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes && warningWithoutStack$1(false, "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType && warningWithoutStack$1(false, "contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes && warningWithoutStack$1(false, "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            warningWithoutStack$1(false, "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate && warningWithoutStack$1(false, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') warningWithoutStack$1(false, "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount && warningWithoutStack$1(false, "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps && warningWithoutStack$1(false, "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps && warningWithoutStack$1(false, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps && warningWithoutStack$1(false, "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) && warningWithoutStack$1(false, "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps && warningWithoutStack$1(false, "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps && warningWithoutStack$1(false, "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
        !noInstanceGetDerivedStateFromCatch && warningWithoutStack$1(false, "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate && warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray$1(_state))) warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function') !(typeof ctor.childContextTypes === 'object') && warningWithoutStack$1(false, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = null;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = // Allow null for conditional declaration
            contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                warningWithoutStack$1(false, "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) new ctor(props, context); // eslint-disable-line no-new
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                warningWithoutStack$1(false, "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        }
        // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    warningWithoutStack$1(false, "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks", _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
                }
            }
        }
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        stopPhaseTimer();
        if (oldState !== instance.state) {
            warningWithoutStack$1(false, "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, 'componentWillReceiveProps');
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        stopPhaseTimer();
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                warningWithoutStack$1(false, "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                warningWithoutStack$1(false, "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }
        if (warnAboutDeprecatedLifecycles) ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            instance.state = workInProgress.memoizedState;
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        }
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance);
            // If we had additional state updates during this life-cycle, let's
            // process them now.
            updateQueue = workInProgress.updateQueue;
            if (updateQueue !== null) {
                processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
                instance.state = workInProgress.memoizedState;
            }
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = void 0;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            newState = workInProgress.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillMount');
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
                stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
            // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current1, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = void 0;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            newState = workInProgress.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current1.memoizedProps || oldState !== current1.memoizedState) workInProgress.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current1.memoizedProps || oldState !== current1.memoizedState) workInProgress.effectTag |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillUpdate');
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.effectTag |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.effectTag |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current1.memoizedProps || oldState !== current1.memoizedState) workInProgress.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current1.memoizedProps || oldState !== current1.memoizedState) workInProgress.effectTag |= Snapshot;
            }
            // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;
    var warnForMissingKey = function(child) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefInStrictMode = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        !(typeof child._store === 'object') && invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.');
        child._store.validated = true;
        var currentComponentErrorInfo = "Each child in a list should have a unique \"key\" prop. See https://fb.me/react-warning-keys for more information." + getCurrentFiberStackInDev();
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, "Each child in a list should have a unique \"key\" prop. See https://fb.me/react-warning-keys for more information.");
    };
    var isArray = Array.isArray;
    function coerceRef(returnFiber, current$$1, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            if (returnFiber.mode & StrictMode) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefInStrictMode[componentName]) {
                    warningWithoutStack$1(false, "A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using createRef() instead.\n%s\n\nLearn more about using refs safely here:\nhttps://fb.me/react-strict-mode-string-ref", mixedRef, getStackByFiberInDevAndProd(returnFiber));
                    didWarnAboutStringRefInStrictMode[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst = void 0;
                if (owner) {
                    var ownerFiber = owner;
                    !(ownerFiber.tag === ClassComponent) && invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?');
                    inst = ownerFiber.stateNode;
                }
                !inst && invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef);
                var stringRef = '' + mixedRef;
                // Check if previous string ref matches new string ref
                if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) return current$$1.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                !(typeof mixedRef === 'string') && invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
                !element._owner && invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef);
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') {
            var addendum = '';
            addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
        }
    }
    function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) return;
        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning$1(false, "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
            // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps, expirationTime) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current$$1 = newFiber.alternate;
            if (current$$1 !== null) {
                var oldIndex = current$$1.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.effectTag = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current$$1, textContent, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current$$1, element, expirationTime) {
            if (current$$1 !== null && current$$1.elementType === element.type) {
                // Move based on index
                var existing = useFiber(current$$1, element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, current$$1, element);
                existing.return = returnFiber;
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
                return existing;
            } else {
                // Insert
                var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
                created.ref = coerceRef(returnFiber, current$$1, element);
                created.return = returnFiber;
                return created;
            }
        }
        function updatePortal(returnFiber, current$$1, portal, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current$$1, portal.children || [], expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
            if (current$$1 === null || current$$1.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current$$1, fragment, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                            return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                        else return null;
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    warning$1(false, "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
                default:
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                    if (!_newFiber) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            }
            // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                if (_newFiber2) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            !(typeof iteratorFn === 'function') && invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.');
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                !didWarnAboutGenerators && warning$1(false, "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            }
            // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                !didWarnAboutMaps && warning$1(false, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            }
            // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            !(newChildren != null) && invariant(false, 'An iterable object provided no iterator.');
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (!oldFiber) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            }
            // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
            // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                        existing.ref = coerceRef(returnFiber, child, element);
                        existing.return = returnFiber;
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || [], expirationTime);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        }
        // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
            // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
            if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType();
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case FunctionComponent:
                    var Component = returnFiber.type;
                    invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
            }
            // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current$$1, workInProgress) {
        !(current$$1 === null || workInProgress.child === current$$1.child) && invariant(false, 'Resuming work not yet implemented.');
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        !(c !== NO_CONTEXT) && invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.');
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type, rootInstance);
        // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var NoEffect$1 = /*             */ 0;
    var UnmountSnapshot = /*      */ 2;
    var UnmountMutation = /*      */ 4;
    var MountMutation = /*        */ 8;
    var UnmountLayout = /*        */ 16;
    var MountLayout = /*          */ 32;
    var MountPassive = /*         */ 64;
    var UnmountPassive = /*       */ 128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderExpirationTime = NoWork;
    // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null;
    // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0;
    // Updates scheduled during render will trigger an immediate re-render at the
    // end of the current pass. We can't store these updates on the normal queue,
    // because if the work is aborted, they should be discarded. Because this is
    // a relatively rare case, we also don't want to add an additional field to
    // either the hook or queue object types. So we store them in a lazily create
    // map of queue -> render-phase updates, which are discarded once the component
    // completes without re-rendering.
    // Whether an update was scheduled during the currently executing render pass.
    var didScheduleRenderPhaseUpdate = false;
    // Lazily created map of render-phase updates
    var renderPhaseUpdates = null;
    // Counter to prevent infinite loops.
    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25;
    // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null;
    // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + '. ' + oldHookName;
                    // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                warning$1(false, "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null) {
            warning$1(false, "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) warning$1(false, "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (is(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current1, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
        renderExpirationTime = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        nextCurrentHook = current1 !== null ? current1.memoizedState : null;
        hookTypesDev = current1 !== null ? current1._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        if (nextCurrentHook !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, refOrContext);
        if (didScheduleRenderPhaseUpdate) {
            do {
                didScheduleRenderPhaseUpdate = false;
                numberOfReRenders += 1;
                // Start over from the beginning of the list
                nextCurrentHook = current1 !== null ? current1.memoizedState : null;
                nextWorkInProgressHook = firstWorkInProgressHook;
                currentHook = null;
                workInProgressHook = null;
                componentUpdateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                children = Component(props, refOrContext);
            }while (didScheduleRenderPhaseUpdate)
            renderPhaseUpdates = null;
            numberOfReRenders = 0;
        }
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        var renderedWork = currentlyRenderingFiber$1;
        renderedWork.memoizedState = firstWorkInProgressHook;
        renderedWork.expirationTime = remainingExpirationTime;
        renderedWork.updateQueue = componentUpdateQueue;
        renderedWork.effectTag |= sideEffectTag;
        renderedWork._debugHookTypes = hookTypesDev;
        // This check uses currentHook so that it works the same in DEV and prod bundles.
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        // These were reset above
        // didScheduleRenderPhaseUpdate = false;
        // renderPhaseUpdates = null;
        // numberOfReRenders = 0;
        !!didRenderTooFewHooks && invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.');
        return children;
    }
    function bailoutHooks(current1, workInProgress, expirationTime) {
        workInProgress.updateQueue = current1.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);
        if (current1.expirationTime <= expirationTime) current1.expirationTime = NoWork;
    }
    function resetHooks() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        // This is used to reset the state of this module when a component throws.
        // It's also called inside mountIndeterminateComponent if we determine the
        // component is a module-style component.
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        didScheduleRenderPhaseUpdate = false;
        renderPhaseUpdates = null;
        numberOfReRenders = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            queue: null,
            baseUpdate: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        firstWorkInProgressHook = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
            nextCurrentHook = currentHook !== null ? currentHook.next : null;
        } else {
            // Clone from the current hook.
            !(nextCurrentHook !== null) && invariant(false, 'Rendered more hooks than during the previous render.');
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                queue: currentHook.queue,
                baseUpdate: currentHook.baseUpdate,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            workInProgressHook = firstWorkInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
            nextCurrentHook = currentHook.next;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState = void 0;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            last: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
        currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        !(queue !== null) && invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        if (numberOfReRenders > 0) {
            // This is a re-render. Apply the new render phase updates to the previous
            var _dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
                // Render phase updates are stored in a map of queue -> linked list
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== undefined) {
                    renderPhaseUpdates.delete(queue);
                    var newState = hook.memoizedState;
                    var update = firstRenderPhaseUpdate;
                    do {
                        // Process this render phase update. We don't have to check the
                        // priority because it will always be the same as the current
                        // render's.
                        var _action = update.action;
                        newState = reducer(newState, _action);
                        update = update.next;
                    }while (update !== null)
                    // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.
                    if (!is(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
                    hook.memoizedState = newState;
                    // Don't persist the state accumlated from the render phase updates to
                    // the base state unless the queue is empty.
                    // TODO: Not sure if this is the desired semantics, but it's what we
                    // do for gDSFP. I can't remember why.
                    if (hook.baseUpdate === queue.last) hook.baseState = newState;
                    queue.lastRenderedState = newState;
                    return [
                        newState,
                        _dispatch
                    ];
                }
            }
            return [
                hook.memoizedState,
                _dispatch
            ];
        }
        // The last update in the entire queue
        var last = queue.last;
        // The last update that is part of the base state.
        var baseUpdate = hook.baseUpdate;
        var baseState = hook.baseState;
        // Find the first unprocessed update.
        var first = void 0;
        if (baseUpdate !== null) {
            if (last !== null) // For the first update, the queue is a circular linked list where
            // `queue.last.next = queue.first`. Once the first update commits, and
            // the `baseUpdate` is no longer empty, we can unravel the list.
            last.next = null;
            first = baseUpdate.next;
        } else first = last !== null ? last.next : null;
        if (first !== null) {
            var _newState = baseState;
            var newBaseState = null;
            var newBaseUpdate = null;
            var prevUpdate = baseUpdate;
            var _update = first;
            var didSkip = false;
            do {
                var updateExpirationTime = _update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    if (!didSkip) {
                        didSkip = true;
                        newBaseUpdate = prevUpdate;
                        newBaseState = _newState;
                    }
                    // Update the remaining priority in the queue.
                    if (updateExpirationTime > remainingExpirationTime) remainingExpirationTime = updateExpirationTime;
                } else // Process this update.
                if (_update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                // current reducer, we can use the eagerly computed state.
                _newState = _update.eagerState;
                else {
                    var _action2 = _update.action;
                    _newState = reducer(_newState, _action2);
                }
                prevUpdate = _update;
                _update = _update.next;
            }while (_update !== null && _update !== first)
            if (!didSkip) {
                newBaseUpdate = prevUpdate;
                newBaseState = _newState;
            }
            // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!is(_newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = _newState;
            hook.baseUpdate = newBaseUpdate;
            hook.baseState = newBaseState;
            queue.lastRenderedState = _newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            last: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
        currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer, initialState);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var _lastEffect = componentUpdateQueue.lastEffect;
            if (_lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = _lastEffect.next;
                _lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(NoEffect$1, create, destroy, nextDeps);
                    return;
                }
            }
        }
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            !refObject.hasOwnProperty('current') && warning$1(false, "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        !(typeof create === 'function') && warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        // TODO: If deps are provided, should we skip comparing the ref itself?
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        !(typeof create === 'function') && warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        // TODO: If deps are provided, should we skip comparing the ref itself?
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // This hook is normally a no-op.
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    // in a test-like environment, we want to warn if dispatchAction()
    // is called outside of a batchedUpdates/TestUtils.act(...) call.
    var shouldWarnForUnbatchedSetState = false;
    // jest isn't a 'global', it's just exposed to tests via a wrapped function
    // further, this isn't a test file, so flow doesn't recognize the symbol. So...
    // $FlowExpectedError - because requirements don't give a damn about your type sigs.
    if ('undefined' !== typeof jest) shouldWarnForUnbatchedSetState = true;
    function dispatchAction(fiber, queue, action) {
        !(numberOfReRenders < RE_RENDER_LIMIT) && invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.');
        !(arguments.length <= 3) && warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdate = true;
            var update = {
                expirationTime: renderExpirationTime,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
            };
            if (renderPhaseUpdates === null) renderPhaseUpdates = new Map();
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === undefined) renderPhaseUpdates.set(queue, update);
            else {
                // Append the update to the end of the list.
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while(lastRenderPhaseUpdate.next !== null)lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                lastRenderPhaseUpdate.next = update;
            }
        } else {
            flushPassiveEffects();
            var currentTime = requestCurrentTime();
            var _expirationTime = computeExpirationForFiber(currentTime, fiber);
            var _update2 = {
                expirationTime: _expirationTime,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
            };
            // Append the update to the end of the list.
            var _last = queue.last;
            if (_last === null) // This is the first update. Create a circular list.
            _update2.next = _update2;
            else {
                var first = _last.next;
                if (first !== null) // Still circular.
                _update2.next = first;
                _last.next = _update2;
            }
            queue.last = _update2;
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var _lastRenderedReducer = queue.lastRenderedReducer;
                if (_lastRenderedReducer !== null) {
                    var prevDispatcher = void 0;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var _eagerState = _lastRenderedReducer(currentState, action);
                        // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        _update2.eagerReducer = _lastRenderedReducer;
                        _update2.eagerState = _eagerState;
                        if (is(_eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error) {
                    // Suppress the error. It will throw again in the render phase.
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            if (shouldWarnForUnbatchedSetState === true) warnIfNotCurrentlyBatchingInDev(fiber);
            scheduleWork(fiber, _expirationTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var warnInvalidContextAccess = function() {
        warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        warning$1(false, "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue(value, formatterFn);
        }
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue(value, formatterFn);
        }
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue(value, formatterFn);
        }
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue(value, formatterFn);
        }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue(value, formatterFn);
        }
    };
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        if (!enableProfilerTimer) return;
        commitTime = scheduler.unstable_now();
    }
    function startProfilerTimer(fiber) {
        if (!enableProfilerTimer) return;
        profilerStartTime = scheduler.unstable_now();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = scheduler.unstable_now();
    }
    function stopProfilerTimerIfRunning(fiber) {
        if (!enableProfilerTimer) return;
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (!enableProfilerTimer) return;
        if (profilerStartTime >= 0) {
            var elapsedTime = scheduler.unstable_now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        if (!supportsHydration) return false;
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
        if (!supportsHydration) return false;
        var suspenseInstance = fiber.stateNode;
        nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
        popToNextHostParent(fiber);
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.effectTag = Deletion;
        // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type, props);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                    case SuspenseComponent:
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                if (enableSuspenseServerRenderer) {
                    var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                    if (suspenseInstance !== null) {
                        // Downgrade the tag to a dehydrated component until we've hydrated it.
                        fiber.tag = DehydratedSuspenseComponent;
                        fiber.stateNode = suspenseInstance;
                        return true;
                    }
                }
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            }
            // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        if (!supportsHydration) invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        if (!supportsHydration) invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        if (!supportsHydration) invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        var suspenseInstance = fiber.stateNode;
        !suspenseInstance && invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.');
        nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (!supportsHydration) return false;
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type;
        // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        if (!supportsHydration) return;
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    didWarnAboutBadClass = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1) {
        if (current$$1 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime1);
    }
    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime1);
        // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their their
        // identity matches.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
    }
    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        // The rest is a fork of updateFunctionComponent
        var nextChildren = void 0;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime1);
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) // Only double-render components with Hooks
        {
            if (workInProgress.memoizedState !== null) nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime1);
        }
        setCurrentPhase(null);
        if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress, renderExpirationTime1);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime1) {
        if (current$$1 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined) {
                // If this is a plain function component without default props,
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = type;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type), getCurrentFiberStackInDev);
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type), getCurrentFiberStackInDev);
        var currentChild = current$$1.child; // This is always exactly one child
        if (updateExpirationTime < renderExpirationTime1) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps;
            // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime1);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
        // Inner propTypes will be validated in the function component path.
        }
        if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
                didReceiveUpdate = false;
                if (updateExpirationTime < renderExpirationTime1) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
            }
        }
        return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime1);
    }
    function updateFragment(current$$1, workInProgress, renderExpirationTime1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateMode(current$$1, workInProgress, renderExpirationTime1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateProfiler(current$$1, workInProgress, renderExpirationTime1) {
        if (enableProfilerTimer) workInProgress.effectTag |= Update;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function markRef(current$$1, workInProgress) {
        var ref = workInProgress.ref;
        if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
    }
    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren = void 0;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime1);
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) // Only double-render components with Hooks
        {
            if (workInProgress.memoizedState !== null) nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime1);
        }
        setCurrentPhase(null);
        if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress, renderExpirationTime1);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = void 0;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var instance = workInProgress.stateNode;
        var shouldUpdate = void 0;
        if (instance === null) {
            if (current$$1 !== null) {
                // An class component without an instance only mounts if it suspended
                // inside a non- concurrent tree, in an inconsistent state. We want to
                // tree it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current$$1.alternate = null;
                workInProgress.alternate = null;
                // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
            }
            // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
            mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
            shouldUpdate = true;
        } else if (current$$1 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
        else shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime1);
        var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime1);
        var inst = workInProgress.stateNode;
        if (inst.props !== nextProps) {
            !didWarnAboutReassigningProps && warning$1(false, "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current$$1, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
        }
        var instance = workInProgress.stateNode;
        // Rerender
        ReactCurrentOwner$3.current = workInProgress;
        var nextChildren = void 0;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFrom catch is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            if (enableProfilerTimer) stopProfilerTimerIfRunning(workInProgress);
        } else {
            setCurrentPhase('render');
            nextChildren = instance.render();
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) instance.render();
            setCurrentPhase(null);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        if (current$$1 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        else reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state;
        // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root2 = workInProgress.stateNode;
        if (root2.pendingContext) pushTopLevelContextObject(workInProgress, root2.pendingContext, root2.pendingContext !== root2.context);
        else if (root2.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root2.context, false);
        pushHostContainer(workInProgress, root2.containerInfo);
    }
    function updateHostRoot(current$$1, workInProgress, renderExpirationTime1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        !(updateQueue !== null) && invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.');
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime1);
        var nextState = workInProgress.memoizedState;
        // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            // If the state is the same as before, that's a bailout because we had
            // no work that expires at this time.
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
        }
        var root2 = workInProgress.stateNode;
        if ((current$$1 === null || current$$1.child === null) && root2.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            // This is a bit of a hack. We track the host root as a placement to
            // know that we're currently in a mounting state. That way isMounted
            // works as expected. We must reset this before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag |= Placement;
            // Ensure that children mount into this root without tracking
            // side-effects. This ensures that we don't store Placement effects on
            // nodes that will be hydrated.
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current$$1, workInProgress, renderExpirationTime1) {
        pushHostContext(workInProgress);
        if (current$$1 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
        markRef(current$$1, workInProgress);
        // Check the host config to see if the children are offscreen/hidden.
        if (renderExpirationTime1 !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
            // Schedule this fiber to re-render at offscreen priority. Then bailout.
            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
        }
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateHostText(current$$1, workInProgress) {
        if (current$$1 === null) tryToClaimNextHydratableInstance(workInProgress);
        // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime1) {
        if (_current !== null) {
            // An lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        // We can't start a User Timing measurement with correct label yet.
        // Cancel and resume right after we know the tag.
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType);
        // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child = void 0;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                break;
            case ClassComponent:
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                break;
            case ForwardRef:
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                break;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime1);
                break;
            default:
                var hint = '';
                if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
                // This message intentionally doesn't mention ForwardRef or MemoComponent
                // because the fact that it's a separate type of work is an
                // implementation detail.
                invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
        }
        return child;
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent;
        // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = void 0;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var value = void 0;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        ReactCurrentOwner$3.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime1);
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            // Proceed under the assumption that this is a class instance
            workInProgress.tag = ClassComponent;
            // Throw out any hooks that were used.
            resetHooks();
            // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderExpirationTime1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) // Only double-render components with Hooks
            {
                if (workInProgress.memoizedState !== null) value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime1);
            }
            reconcileChildren(null, workInProgress, value, renderExpirationTime1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) !!Component.childContextTypes && warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                warning$1(false, "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
                warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
                didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
                warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
                didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
            }
        }
    }
    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime1) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps;
        // We should attempt to render the primary children unless this boundary
        // already suspended during this render (`alreadyCaptured` is true).
        var nextState = workInProgress.memoizedState;
        var nextDidTimeout = void 0;
        if ((workInProgress.effectTag & DidCapture) === NoEffect) {
            // This is the first attempt.
            nextState = null;
            nextDidTimeout = false;
        } else {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            nextState = {
                timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
            };
            nextDidTimeout = true;
            workInProgress.effectTag &= ~DidCapture;
        }
        // This next part is a bit confusing. If the children timeout, we switch to
        // showing the fallback children in place of the "primary" children.
        // However, we don't want to delete the primary children because then their
        // state will be lost (both the React state and the host state, e.g.
        // uncontrolled form inputs). Instead we keep them mounted and hide them.
        // Both the fallback children AND the primary children are rendered at the
        // same time. Once the primary children are un-suspended, we can delete
        // the fallback children — don't need to preserve their state.
        //
        // The two sets of children are siblings in the host environment, but
        // semantically, for purposes of reconciliation, they are two separate sets.
        // So we store them using two fragment fibers.
        //
        // However, we want to avoid allocating extra fibers for every placeholder.
        // They're only necessary when the children time out, because that's the
        // only time when both sets are mounted.
        //
        // So, the extra fragment fibers are only used if the children time out.
        // Otherwise, we render the primary children directly. This requires some
        // custom reconciliation logic to preserve the state of the primary
        // children. It's essentially a very basic form of re-parenting.
        // `child` points to the child fiber. In the normal case, this is the first
        // fiber of the primary children set. In the timed-out case, it's a
        // a fragment fiber containing the primary children.
        var child = void 0;
        // `next` points to the next fiber React should render. In the normal case,
        // it's the same as `child`: the first fiber of the primary children set.
        // In the timed-out case, it's a fragment fiber containing the *fallback*
        // children -- we skip over the primary children entirely.
        var next = void 0;
        if (current$$1 === null) {
            if (enableSuspenseServerRenderer) // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            {
                if (nextProps.fallback !== undefined) {
                    tryToClaimNextHydratableInstance(workInProgress);
                    // This could've changed the tag if this was a dehydrated suspense component.
                    if (workInProgress.tag === DehydratedSuspenseComponent) return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime1);
                }
            }
            // This is the initial mount. This branch is pretty simple because there's
            // no previous state that needs to be preserved.
            if (nextDidTimeout) {
                // Mount separate fragments for primary and fallback children.
                var nextFallbackChildren = nextProps.fallback;
                var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                    // Outside of concurrent mode, we commit the effects from the
                    var progressedState = workInProgress.memoizedState;
                    var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
                    primaryChildFragment.child = progressedPrimaryChild;
                }
                var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime1, null);
                primaryChildFragment.sibling = fallbackChildFragment;
                child = primaryChildFragment;
                // Skip the primary children, and continue working on the
                // fallback children.
                next = fallbackChildFragment;
                child.return = next.return = workInProgress;
            } else {
                // Mount the primary children without an intermediate fragment fiber.
                var nextPrimaryChildren = nextProps.children;
                child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime1);
            }
        } else {
            // This is an update. This branch is more complicated because we need to
            // ensure the state of the primary children is preserved.
            var prevState = current$$1.memoizedState;
            var prevDidTimeout = prevState !== null;
            if (prevDidTimeout) {
                // The current tree already timed out. That means each child set is
                var currentPrimaryChildFragment = current$$1.child;
                var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                if (nextDidTimeout) {
                    // Still timed out. Reuse the current primary children by cloning
                    // its fragment. We're going to skip over these entirely.
                    var _nextFallbackChildren = nextProps.fallback;
                    var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);
                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                        // Outside of concurrent mode, we commit the effects from the
                        var _progressedState = workInProgress.memoizedState;
                        var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
                        if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) _primaryChildFragment.child = _progressedPrimaryChild;
                    }
                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var treeBaseDuration = 0;
                        var hiddenChild = _primaryChildFragment.child;
                        while(hiddenChild !== null){
                            treeBaseDuration += hiddenChild.treeBaseDuration;
                            hiddenChild = hiddenChild.sibling;
                        }
                        _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                    }
                    // Clone the fallback child fragment, too. These we'll continue
                    // working on.
                    var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
                    child = _primaryChildFragment;
                    _primaryChildFragment.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment;
                    child.return = next.return = workInProgress;
                } else {
                    // No longer suspended. Switch back to showing the primary children,
                    // and remove the intermediate fragment fiber.
                    var _nextPrimaryChildren = nextProps.children;
                    var currentPrimaryChild = currentPrimaryChildFragment.child;
                    var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime1);
                    // If this render doesn't suspend, we need to delete the fallback
                    // children. Wait until the complete phase, after we've confirmed the
                    // fallback is no longer needed.
                    // TODO: Would it be better to store the fallback fragment on
                    // the stateNode?
                    // Continue rendering the children, like we normally do.
                    child = next = primaryChild;
                }
            } else {
                // The current tree has not already timed out. That means the primary
                // children are not wrapped in a fragment fiber.
                var _currentPrimaryChild = current$$1.child;
                if (nextDidTimeout) {
                    // Timed out. Wrap the children in a fragment fiber to keep them
                    // separate from the fallback children.
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _primaryChildFragment2 = createFiberFromFragment(// It shouldn't matter what the pending props are because we aren't
                    // going to render this fragment.
                    null, mode, NoWork, null);
                    _primaryChildFragment2.child = _currentPrimaryChild;
                    // Even though we're creating a new fiber, there are no new children,
                    // because we're reusing an already mounted tree. So we don't need to
                    // schedule a placement.
                    // primaryChildFragment.effectTag |= Placement;
                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                        // Outside of concurrent mode, we commit the effects from the
                        var _progressedState2 = workInProgress.memoizedState;
                        var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
                        _primaryChildFragment2.child = _progressedPrimaryChild2;
                    }
                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var _treeBaseDuration = 0;
                        var _hiddenChild = _primaryChildFragment2.child;
                        while(_hiddenChild !== null){
                            _treeBaseDuration += _hiddenChild.treeBaseDuration;
                            _hiddenChild = _hiddenChild.sibling;
                        }
                        _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                    }
                    // Create a fragment from the fallback children, too.
                    var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime1, null);
                    _fallbackChildFragment2.effectTag |= Placement;
                    child = _primaryChildFragment2;
                    _primaryChildFragment2.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment2;
                    child.return = next.return = workInProgress;
                } else {
                    // Still haven't timed out.  Continue rendering the children, like we
                    // normally do.
                    var _nextPrimaryChildren2 = nextProps.children;
                    next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime1);
                }
            }
            workInProgress.stateNode = current$$1.stateNode;
        }
        workInProgress.memoizedState = nextState;
        workInProgress.child = child;
        return next;
    }
    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime1) {
        if (current$$1 === null) {
            // During the first pass, we'll bail out and not drill into the children.
            // Instead, we'll leave the content in place and try to hydrate it later.
            workInProgress.expirationTime = Never;
            return null;
        }
        // We use childExpirationTime to indicate that a child might depend on context, so if
        // any context has changed, we need to treat is as if the input might have changed.
        var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime1;
        if (didReceiveUpdate || hasContextChanged$$1) {
            // This boundary has changed since the first render. This means that we are now unable to
            // hydrate it. We might still be able to hydrate it using an earlier expiration time but
            // during this render we can't. Instead, we're going to delete the whole subtree and
            // instead inject a new real Suspense boundary to take its place, which may render content
            // or fallback. The real Suspense boundary will suspend for a while so we have some time
            // to ensure it can produce real content, but all state and pending events will be lost.
            // Detach from the current dehydrated boundary.
            current$$1.alternate = null;
            workInProgress.alternate = null;
            // Insert a deletion in the effect list.
            var returnFiber = workInProgress.return;
            !(returnFiber !== null) && invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.');
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = current$$1;
                returnFiber.lastEffect = current$$1;
            } else returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
            current$$1.nextEffect = null;
            current$$1.effectTag = Deletion;
            // Upgrade this work in progress to a real Suspense component.
            workInProgress.tag = SuspenseComponent;
            workInProgress.stateNode = null;
            workInProgress.memoizedState = null;
            // This is now an insertion.
            workInProgress.effectTag |= Placement;
            // Retry as a real Suspense component.
            return updateSuspenseComponent(null, workInProgress, renderExpirationTime1);
        }
        if ((workInProgress.effectTag & DidCapture) === NoEffect) {
            // This is the first attempt.
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
            return workInProgress.child;
        } else {
            // Something suspended. Leave the existing children in place.
            // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
            workInProgress.child = null;
            return null;
        }
    }
    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current$$1 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
        else reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateContextProvider(current$$1, workInProgress, renderExpirationTime1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime1) {
        var context = workInProgress.type;
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    warning$1(false, "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        !(typeof render === 'function') && warningWithoutStack$1(false, "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren = void 0;
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1) {
        cancelWorkTimer(workInProgress);
        if (current$$1 !== null) // Reuse previous context list
        workInProgress.contextDependencies = current$$1.contextDependencies;
        if (enableProfilerTimer) // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
        // Check if the children have any pending work.
        var childExpirationTime = workInProgress.childExpirationTime;
        if (childExpirationTime < renderExpirationTime1) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current$$1, workInProgress);
            return workInProgress.child;
        }
    }
    function beginWork(current$$1, workInProgress, renderExpirationTime1) {
        var updateExpirationTime = workInProgress.expirationTime;
        if (current$$1 !== null) {
            var oldProps = current$$1.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged()) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (updateExpirationTime < renderExpirationTime1) {
                didReceiveUpdate = false;
                // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        if (enableProfilerTimer) workInProgress.effectTag |= Update;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        var didTimeout = state !== null;
                        if (didTimeout) {
                            // If this boundary is currently timed out, we need to decide
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                            if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime1) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime1);
                            else {
                                // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        }
                        break;
                    case DehydratedSuspenseComponent:
                        if (enableSuspenseServerRenderer) {
                            // We know that this component will suspend again because if it has
                            // been unsuspended it has committed as a regular Suspense component.
                            // If it needs to be retried, it should have work scheduled on it.
                            workInProgress.effectTag |= DidCapture;
                            break;
                        }
                }
                return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime1);
            }
        } else didReceiveUpdate = false;
        // Before entering the begin phase, clear the expiration time.
        workInProgress.expirationTime = NoWork;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                var elementType = workInProgress.elementType;
                return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime1);
            case LazyComponent:
                var _elementType = workInProgress.elementType;
                return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime1);
            case HostRoot:
                return updateHostRoot(current$$1, workInProgress, renderExpirationTime1);
            case HostComponent:
                return updateHostComponent(current$$1, workInProgress, renderExpirationTime1);
            case HostText:
                return updateHostText(current$$1, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime1);
            case HostPortal:
                return updatePortalComponent(current$$1, workInProgress, renderExpirationTime1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime1);
            case Fragment:
                return updateFragment(current$$1, workInProgress, renderExpirationTime1);
            case Mode:
                return updateMode(current$$1, workInProgress, renderExpirationTime1);
            case Profiler:
                return updateProfiler(current$$1, workInProgress, renderExpirationTime1);
            case ContextProvider:
                return updateContextProvider(current$$1, workInProgress, renderExpirationTime1);
            case ContextConsumer:
                return updateContextConsumer(current$$1, workInProgress, renderExpirationTime1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps;
                // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime1);
            case DehydratedSuspenseComponent:
                if (enableSuspenseServerRenderer) return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime1);
                break;
        }
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependences() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) && warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            context._currentRenderer = rendererSigil;
        } else {
            push(valueCursor, context._currentValue2, providerFiber);
            context._currentValue2 = nextValue;
            !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) && warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            context._currentRenderer2 = rendererSigil;
        }
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) context._currentValue = currentValue;
        else context._currentValue2 = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (is(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
            !((changedBits & maxSigned31BitInt) === changedBits) && warning$1(false, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderExpirationTime1) {
        // Update the child expiration time of all the ancestors, including
        // the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime1) {
                node.childExpirationTime = renderExpirationTime1;
                if (alternate !== null && alternate.childExpirationTime < renderExpirationTime1) alternate.childExpirationTime = renderExpirationTime1;
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime1) alternate.childExpirationTime = renderExpirationTime1;
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime1) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0;
            // Visit this fiber.
            var list = fiber.contextDependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.first;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(renderExpirationTime1);
                            update.tag = ForceUpdate;
                            // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        if (fiber.expirationTime < renderExpirationTime1) fiber.expirationTime = renderExpirationTime1;
                        var alternate = fiber.alternate;
                        if (alternate !== null && alternate.expirationTime < renderExpirationTime1) alternate.expirationTime = renderExpirationTime1;
                        scheduleWorkOnParentPath(fiber.return, renderExpirationTime1);
                        // Mark the expiration time on the list, too.
                        if (list.expirationTime < renderExpirationTime1) list.expirationTime = renderExpirationTime1;
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
                // If a dehydrated suspense component is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates on its children.
                if (fiber.expirationTime < renderExpirationTime1) fiber.expirationTime = renderExpirationTime1;
                var _alternate = fiber.alternate;
                if (_alternate !== null && _alternate.expirationTime < renderExpirationTime1) _alternate.expirationTime = renderExpirationTime1;
                // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childExpirationTime on
                // this fiber to indicate that a context has changed.
                scheduleWorkOnParentPath(fiber, renderExpirationTime1);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    }
                    // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderExpirationTime1) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var currentDependencies = workInProgress.contextDependencies;
        if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime1) // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
        // Reset the work-in-progress list
        workInProgress.contextDependencies = null;
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        !!isDisallowedContextReadInDEV && warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = maxSigned31BitInt;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                !(currentlyRenderingFiber !== null) && invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().');
                // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.contextDependencies = {
                    first: contextItem,
                    expirationTime: NoWork
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    }
    // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which can be
    // mutated and processed asynchronously before it is committed — a form of
    // double buffering. If a work-in-progress render is discarded before finishing,
    // we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    resetCurrentlyProcessingQueue = function() {
        currentlyProcessingQueue = null;
    };
    function createUpdateQueue(baseState) {
        var queue = {
            baseState: baseState,
            firstUpdate: null,
            lastUpdate: null,
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
        };
        return queue;
    }
    function cloneUpdateQueue(currentQueue) {
        var queue = {
            baseState: currentQueue.baseState,
            firstUpdate: currentQueue.firstUpdate,
            lastUpdate: currentQueue.lastUpdate,
            // TODO: With resuming, if we bail out and resuse the child tree, we should
            // keep these effects.
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
        };
        return queue;
    }
    function createUpdate(expirationTime) {
        return {
            expirationTime: expirationTime,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null,
            nextEffect: null
        };
    }
    function appendUpdateToQueue(queue, update) {
        // Append the update to the end of the list.
        if (queue.lastUpdate === null) // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
        else {
            queue.lastUpdate.next = update;
            queue.lastUpdate = update;
        }
    }
    function enqueueUpdate(fiber, update) {
        // Update queues are created lazily.
        var alternate = fiber.alternate;
        var queue1 = void 0;
        var queue2 = void 0;
        if (alternate === null) {
            // There's only one fiber.
            queue1 = fiber.updateQueue;
            queue2 = null;
            if (queue1 === null) queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        } else {
            // There are two owners.
            queue1 = fiber.updateQueue;
            queue2 = alternate.updateQueue;
            if (queue1 === null) {
                if (queue2 === null) {
                    // Neither fiber has an update queue. Create new ones.
                    queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
                    queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
                } else // Only one fiber has an update queue. Clone to create a new one.
                queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
            } else if (queue2 === null) // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
        }
        if (queue2 === null || queue1 === queue2) // There's only a single queue.
        appendUpdateToQueue(queue1, update);
        else // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
            // One of the queues is not empty. We must add the update to both queues.
            appendUpdateToQueue(queue1, update);
            appendUpdateToQueue(queue2, update);
        } else {
            // Both queues are non-empty. The last update is the same in both lists,
            // because of structural sharing. So, only append to one of the lists.
            appendUpdateToQueue(queue1, update);
            // But we still need to update the `lastUpdate` pointer of queue2.
            queue2.lastUpdate = update;
        }
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
            warningWithoutStack$1(false, "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, update) {
        // Captured updates go into a separate list, and only on the work-in-
        // progress queue.
        var workInProgressQueue = workInProgress.updateQueue;
        if (workInProgressQueue === null) workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
        else // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
        // Append the update to the end of the list.
        if (workInProgressQueue.lastCapturedUpdate === null) // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
        else {
            workInProgressQueue.lastCapturedUpdate.next = update;
            workInProgressQueue.lastCapturedUpdate = update;
        }
    }
    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
        var current1 = workInProgress.alternate;
        if (current1 !== null) // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        {
            if (queue === current1.updateQueue) queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
        return queue;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var _payload = update.payload;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) _payload.call(instance, prevState, nextProps);
                    var nextState = _payload.call(instance, prevState, nextProps);
                    exitDisallowedContextReadInDEV();
                    return nextState;
                }
                // State object
                return _payload;
            case CaptureUpdate:
                workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload2 = update.payload;
                var partialState = void 0;
                if (typeof _payload2 === 'function') {
                    enterDisallowedContextReadInDEV();
                    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) _payload2.call(instance, prevState, nextProps);
                    partialState = _payload2.call(instance, prevState, nextProps);
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload2;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime1) {
        hasForceUpdate = false;
        queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
        currentlyProcessingQueue = queue;
        // These values may change as we process the queue.
        var newBaseState = queue.baseState;
        var newFirstUpdate = null;
        var newExpirationTime = NoWork;
        // Iterate through the list of updates to compute the result.
        var update = queue.firstUpdate;
        var resultState = newBaseState;
        while(update !== null){
            var updateExpirationTime = update.expirationTime;
            if (updateExpirationTime < renderExpirationTime1) {
                // This update does not have sufficient priority. Skip it.
                if (newFirstUpdate === null) {
                    // This is the first skipped update. It will be the first update in
                    // the new list.
                    newFirstUpdate = update;
                    // Since this is the first update that was skipped, the current result
                    // is the new base state.
                    newBaseState = resultState;
                }
                // Since this update will remain in the list, update the remaining
                // expiration time.
                if (newExpirationTime < updateExpirationTime) newExpirationTime = updateExpirationTime;
            } else {
                // This update does have sufficient priority. Process it and compute
                // a new result.
                resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
                var _callback = update.callback;
                if (_callback !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastEffect === null) queue.firstEffect = queue.lastEffect = update;
                    else {
                        queue.lastEffect.nextEffect = update;
                        queue.lastEffect = update;
                    }
                }
            }
            // Continue to the next update.
            update = update.next;
        }
        // Separately, iterate though the list of captured updates.
        var newFirstCapturedUpdate = null;
        update = queue.firstCapturedUpdate;
        while(update !== null){
            var _updateExpirationTime = update.expirationTime;
            if (_updateExpirationTime < renderExpirationTime1) {
                // This update does not have sufficient priority. Skip it.
                if (newFirstCapturedUpdate === null) {
                    // This is the first skipped captured update. It will be the first
                    // update in the new list.
                    newFirstCapturedUpdate = update;
                    // If this is the first update that was skipped, the current result is
                    // the new base state.
                    if (newFirstUpdate === null) newBaseState = resultState;
                }
                // Since this update will remain in the list, update the remaining
                // expiration time.
                if (newExpirationTime < _updateExpirationTime) newExpirationTime = _updateExpirationTime;
            } else {
                // This update does have sufficient priority. Process it and compute
                // a new result.
                resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
                var _callback2 = update.callback;
                if (_callback2 !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastCapturedEffect === null) queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                    else {
                        queue.lastCapturedEffect.nextEffect = update;
                        queue.lastCapturedEffect = update;
                    }
                }
            }
            update = update.next;
        }
        if (newFirstUpdate === null) queue.lastUpdate = null;
        if (newFirstCapturedUpdate === null) queue.lastCapturedUpdate = null;
        else workInProgress.effectTag |= Callback;
        if (newFirstUpdate === null && newFirstCapturedUpdate === null) // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
        queue.baseState = newBaseState;
        queue.firstUpdate = newFirstUpdate;
        queue.firstCapturedUpdate = newFirstCapturedUpdate;
        // Set the remaining expiration time to be whatever is remaining in the queue.
        // This should be fine because the only two other things that contribute to
        // expiration time are props and context. We're already in the middle of the
        // begin phase by the time we start processing the queue, so we've already
        // dealt with the props. Context in components that specify
        // shouldComponentUpdate is tricky; but we'll have to account for
        // that regardless.
        workInProgress.expirationTime = newExpirationTime;
        workInProgress.memoizedState = resultState;
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        !(typeof callback === 'function') && invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime1) {
        // If the finished render included captured updates, and there are still
        // lower priority updates left over, we need to keep the captured updates
        // in the queue so that they are rebased and not dropped once we process the
        // queue again at the lower priority.
        if (finishedQueue.firstCapturedUpdate !== null) {
            // Join the captured update list to the end of the normal list.
            if (finishedQueue.lastUpdate !== null) {
                finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
                finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
            }
            // Clear the list of captured updates.
            finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
        }
        // Commit the effects
        commitUpdateEffects(finishedQueue.firstEffect, instance);
        finishedQueue.firstEffect = finishedQueue.lastEffect = null;
        commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
        finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }
    function commitUpdateEffects(effect, instance) {
        while(effect !== null){
            var _callback3 = effect.callback;
            if (_callback3 !== null) {
                effect.callback = null;
                callCallback(_callback3, instance);
            }
            effect = effect.nextEffect;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.effectTag |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
    }
    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;
    if (supportsMutation) {
        // Mutation mode
        appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while(node !== null){
                if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
                else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === workInProgress) return;
                while(node.sibling === null){
                    if (node.return === null || node.return === workInProgress) return;
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        updateHostContainer = function(workInProgress) {
        // Noop
        };
        updateHostComponent$1 = function(current1, workInProgress, type, newProps, rootContainerInstance) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current1.memoizedProps;
            if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
            // we won't touch this node even if children changed.
            return;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            // TODO: Type this specific to this type of component.
            workInProgress.updateQueue = updatePayload;
            // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.
            if (updatePayload) markUpdate(workInProgress);
        };
        updateHostText$1 = function(current1, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) markUpdate(workInProgress);
        };
    } else if (supportsPersistence) {
        // Persistent host tree mode
        appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while(node !== null){
                // eslint-disable-next-line no-labels
                branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var props = node.memoizedProps;
                        var type = node.type;
                        if (isHidden) // This child is inside a timed out tree. Hide it.
                        instance = cloneHiddenInstance(instance, type, props, node);
                        else // This child was previously inside a timed out tree. If it was not
                        // updated during this render, it may need to be unhidden. Clone
                        // again to be sure.
                        instance = cloneUnhiddenInstance(instance, type, props, node);
                        node.stateNode = instance;
                    }
                    appendInitialChild(parent, instance);
                } else if (node.tag === HostText) {
                    var _instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var text = node.memoizedProps;
                        var rootContainerInstance = getRootHostContainer();
                        var currentHostContext = getHostContext();
                        if (isHidden) _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        else _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        node.stateNode = _instance;
                    }
                    appendInitialChild(parent, _instance);
                } else if (node.tag === HostPortal) ;
                else if (node.tag === SuspenseComponent) {
                    var current1 = node.alternate;
                    if (current1 !== null) {
                        var oldState = current1.memoizedState;
                        var newState = node.memoizedState;
                        var oldIsHidden = oldState !== null;
                        var newIsHidden = newState !== null;
                        if (oldIsHidden !== newIsHidden) {
                            // The placeholder either just timed out or switched back to the normal
                            // children after having previously timed out. Toggle the visibility of
                            // the direct host children.
                            var primaryChildParent = newIsHidden ? node.child : node;
                            if (primaryChildParent !== null) appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                            break branches;
                        }
                    }
                    if (node.child !== null) {
                        // Continue traversing like normal
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === workInProgress) return;
                while(node.sibling === null){
                    if (node.return === null || node.return === workInProgress) return;
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        // An unfortunate fork of appendAllChildren because we have two different parent types.
        var appendAllChildrenToContainer = function(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while(node !== null){
                // eslint-disable-next-line no-labels
                branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var props = node.memoizedProps;
                        var type = node.type;
                        if (isHidden) // This child is inside a timed out tree. Hide it.
                        instance = cloneHiddenInstance(instance, type, props, node);
                        else // This child was previously inside a timed out tree. If it was not
                        // updated during this render, it may need to be unhidden. Clone
                        // again to be sure.
                        instance = cloneUnhiddenInstance(instance, type, props, node);
                        node.stateNode = instance;
                    }
                    appendChildToContainerChildSet(containerChildSet, instance);
                } else if (node.tag === HostText) {
                    var _instance2 = node.stateNode;
                    if (needsVisibilityToggle) {
                        var text = node.memoizedProps;
                        var rootContainerInstance = getRootHostContainer();
                        var currentHostContext = getHostContext();
                        if (isHidden) _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        else _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        node.stateNode = _instance2;
                    }
                    appendChildToContainerChildSet(containerChildSet, _instance2);
                } else if (node.tag === HostPortal) ;
                else if (node.tag === SuspenseComponent) {
                    var current2 = node.alternate;
                    if (current2 !== null) {
                        var oldState = current2.memoizedState;
                        var newState = node.memoizedState;
                        var oldIsHidden = oldState !== null;
                        var newIsHidden = newState !== null;
                        if (oldIsHidden !== newIsHidden) {
                            // The placeholder either just timed out or switched back to the normal
                            // children after having previously timed out. Toggle the visibility of
                            // the direct host children.
                            var primaryChildParent = newIsHidden ? node.child : node;
                            if (primaryChildParent !== null) appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                            break branches;
                        }
                    }
                    if (node.child !== null) {
                        // Continue traversing like normal
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === workInProgress) return;
                while(node.sibling === null){
                    if (node.return === null || node.return === workInProgress) return;
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        updateHostContainer = function(workInProgress) {
            var portalOrRoot = workInProgress.stateNode;
            var childrenUnchanged = workInProgress.firstEffect === null;
            if (childrenUnchanged) ;
            else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);
                // If children might have changed, we have to add them all to the set.
                appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
                portalOrRoot.pendingChildren = newChildSet;
                // Schedule an update on the container to swap out the container.
                markUpdate(workInProgress);
                finalizeContainerChildren(container, newChildSet);
            }
        };
        updateHostComponent$1 = function(current3, workInProgress, type, newProps, rootContainerInstance) {
            var currentInstance = current3.stateNode;
            var oldProps = current3.memoizedProps;
            // If there are no effects associated with this node, then none of our children had any updates.
            // This guarantees that we can reuse all of them.
            var childrenUnchanged = workInProgress.firstEffect === null;
            if (childrenUnchanged && oldProps === newProps) {
                // No changes, just reuse the existing instance.
                // Note that this might release a previous clone.
                workInProgress.stateNode = currentInstance;
                return;
            }
            var recyclableInstance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = null;
            if (oldProps !== newProps) updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            if (childrenUnchanged && updatePayload === null) {
                // No changes, just reuse the existing instance.
                // Note that this might release a previous clone.
                workInProgress.stateNode = currentInstance;
                return;
            }
            var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
            if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) markUpdate(workInProgress);
            workInProgress.stateNode = newInstance;
            if (childrenUnchanged) // If there are no other effects in this tree, we need to flag this node as having one.
            // Even though we're not going to use it for anything.
            // Otherwise parents won't know that there are new children to propagate upwards.
            markUpdate(workInProgress);
            else // If children might have changed, we have to add them all to the set.
            appendAllChildren(newInstance, workInProgress, false, false);
        };
        updateHostText$1 = function(current3, workInProgress, oldText, newText) {
            if (oldText !== newText) {
                // If the text content differs, we'll create a new text instance for it.
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                // This lets the parents know that at least one of their children has changed.
                markUpdate(workInProgress);
            }
        };
    } else {
        // No host operations
        updateHostContainer = function(workInProgress) {
        // Noop
        };
        updateHostComponent$1 = function(current3, workInProgress, type, newProps, rootContainerInstance) {
        // Noop
        };
        updateHostText$1 = function(current3, workInProgress, oldText, newText) {
        // Noop
        };
    }
    function completeWork(current3, workInProgress, renderExpirationTime1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                break;
            case LazyComponent:
                break;
            case SimpleMemoComponent:
            case FunctionComponent:
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                break;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current3 === null || current3.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    popHydrationState(workInProgress);
                    // This resets the hacky state to fix isMounted before committing.
                    // TODO: Delete this when we delete isMounted and findDOMNode.
                    workInProgress.effectTag &= ~Placement;
                }
                updateHostContainer(workInProgress);
                break;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current3 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current3, workInProgress, type, newProps, rootContainerInstance);
                    if (current3.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        !(workInProgress.stateNode !== null) && invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.');
                        break;
                    }
                    var currentHostContext = getHostContext();
                    // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on we want to add then top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node needs to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) markUpdate(workInProgress);
                        workInProgress.stateNode = instance;
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                break;
            case HostText:
                var newText = newProps;
                if (current3 && workInProgress.stateNode != null) {
                    var oldText = current3.memoizedProps;
                    // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current3, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') !(workInProgress.stateNode !== null) && invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.');
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                break;
            case ForwardRef:
                break;
            case SuspenseComponent:
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.expirationTime = renderExpirationTime1;
                    // Do not reset the effect list.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current3 !== null && current3.memoizedState !== null;
                if (current3 !== null && !nextDidTimeout && prevDidTimeout) {
                    // We just switched from the fallback to the normal children. Delete
                    // the fallback.
                    // TODO: Would it be better to store the fallback fragment on
                    var currentFallbackChild = current3.child.sibling;
                    if (currentFallbackChild !== null) {
                        // Deletions go at the beginning of the return fiber's effect list
                        var first = workInProgress.firstEffect;
                        if (first !== null) {
                            workInProgress.firstEffect = currentFallbackChild;
                            currentFallbackChild.nextEffect = first;
                        } else {
                            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                            currentFallbackChild.nextEffect = null;
                        }
                        currentFallbackChild.effectTag = Deletion;
                    }
                }
                if (nextDidTimeout || prevDidTimeout) // If the children are hidden, or if they were previous hidden, schedule
                // an effect to toggle their visibility. This is also used to attach a
                // retry listener to the promise.
                workInProgress.effectTag |= Update;
                break;
            case Fragment:
                break;
            case Mode:
                break;
            case Profiler:
                break;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                break;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                break;
            case ContextConsumer:
                break;
            case MemoComponent:
                break;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                break;
            case DehydratedSuspenseComponent:
                if (enableSuspenseServerRenderer) {
                    if (current3 === null) {
                        var _wasHydrated2 = popHydrationState(workInProgress);
                        !_wasHydrated2 && invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.');
                        skipPastDehydratedSuspenseInstance(workInProgress);
                    } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                        // This boundary did not suspend so it's now hydrated.
                        // To handle any future suspense cases, we're going to now upgrade it
                        // to a Suspense component. We detach it from the existing current fiber.
                        current3.alternate = null;
                        workInProgress.alternate = null;
                        workInProgress.tag = SuspenseComponent;
                        workInProgress.memoizedState = null;
                        workInProgress.stateNode = null;
                    }
                }
                break;
            default:
                invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
        return null;
    }
    function shouldCaptureSuspense(workInProgress) {
        // In order to capture, the Suspense component must have a fallback prop.
        if (workInProgress.memoizedProps.fallback === undefined) return false;
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        return nextState === null;
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(capturedError) {
        return true;
    }
    function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);
        // Allow injected showErrorDialog() to prevent default console.error logging.
        // This enables renderers like ReactNative to better manage redbox behavior.
        if (logError === false) return;
        var error = capturedError.error;
        var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
        // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.
        if (error != null && error._suppressLogging) {
            if (errorBoundaryFound && willRetry) // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
            // The error is fatal. Since the silencing might have
            // been accidental, we'll surface it anyway.
            // However, the browser would have silenced the original error
            // so we'll print it first, and then print the stack addendum.
            console.error(error);
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
        }
        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0;
        // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
        if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
            else errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
        } else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
        // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
        console.error(combinedMessage);
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;
    function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        if (stack === null && source !== null) stack = getStackByFiberInDevAndProd(source);
        var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : '',
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
        };
        if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
        }
        try {
            logCapturedError(capturedError);
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var callComponentWillUnmountWithTimer = function(current$$1, instance) {
        startPhaseTimer(current$$1, 'componentWillUnmount');
        instance.props = current$$1.memoizedProps;
        instance.state = current$$1.memoizedState;
        instance.componentWillUnmount();
        stopPhaseTimer();
    };
    // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current$$1, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current$$1, unmountError);
        }
    }
    function safelyDetachRef(current$$1) {
        var ref = current$$1.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current$$1, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current$$1, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current$$1, error);
        }
    }
    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
                return;
            case ClassComponent:
                if (finishedWork.effectTag & Snapshot) {
                    if (current$$1 !== null) {
                        var prevProps = current$$1.memoizedProps;
                        var prevState = current$$1.memoizedState;
                        startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                        var instance = finishedWork.stateNode;
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            !(instance.props === finishedWork.memoizedProps) && warning$1(false, "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            !(instance.state === finishedWork.memoizedState) && warning$1(false, "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            warningWithoutStack$1(false, "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                        stopPhaseTimer();
                    }
                }
                return;
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
            default:
                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & unmountTag) !== NoEffect$1) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                if ((effect.tag & mountTag) !== NoEffect$1) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var _destroy = effect.destroy;
                    if (_destroy !== undefined && typeof _destroy !== 'function') {
                        var addendum = void 0;
                        if (_destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof _destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                        else addendum = ' You returned: ' + _destroy;
                        warningWithoutStack$1(false, "An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitPassiveHookEffects(finishedWork) {
        commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
        commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
    }
    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update) {
                    if (current$$1 === null) {
                        startPhaseTimer(finishedWork, 'componentDidMount');
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            !(instance.props === finishedWork.memoizedProps) && warning$1(false, "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            !(instance.state === finishedWork.memoizedState) && warning$1(false, "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                        stopPhaseTimer();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                        var prevState = current$$1.memoizedState;
                        startPhaseTimer(finishedWork, 'componentDidUpdate');
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            !(instance.props === finishedWork.memoizedProps) && warning$1(false, "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            !(instance.state === finishedWork.memoizedState) && warning$1(false, "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        stopPhaseTimer();
                    }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        !(instance.props === finishedWork.memoizedProps) && warning$1(false, "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        !(instance.state === finishedWork.memoizedState) && warning$1(false, "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
                }
                return;
            case HostRoot:
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode;
                // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current$$1 === null && finishedWork.effectTag & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                if (enableProfilerTimer) {
                    var onRender = finishedWork.memoizedProps.onRender;
                    if (enableSchedulerTracing) onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                    else onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
                }
                return;
            case SuspenseComponent:
                break;
            case IncompleteClassComponent:
                break;
            default:
                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        if (supportsMutation) {
            // We only have the top Fiber that was inserted but we need to recurse down its
            var node = finishedWork;
            while(true){
                if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (isHidden) hideInstance(instance);
                    else unhideInstance(node.stateNode, node.memoizedProps);
                } else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
                    // Found a nested Suspense component that timed out. Skip over the
                    var fallbackChildFragment = node.child.sibling;
                    fallbackChildFragment.return = node;
                    node = fallbackChildFragment;
                    continue;
                } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === finishedWork) return;
                while(node.sibling === null){
                    if (node.return === null || node.return === finishedWork) return;
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse = void 0;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) warningWithoutStack$1(false, "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current$$1) {
        var currentRef = current$$1.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    }
    // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(current$$1) {
        onCommitUnmount(current$$1);
        switch(current$$1.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                var updateQueue = current$$1.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var destroy = effect.destroy;
                            if (destroy !== undefined) safelyCallDestroy(current$$1, destroy);
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                break;
            case ClassComponent:
                safelyDetachRef(current$$1);
                var instance = current$$1.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current$$1, instance);
                return;
            case HostComponent:
                safelyDetachRef(current$$1);
                return;
            case HostPortal:
                // TODO: this is recursive.
                // We are also not using this parent because
                // the portal will get pushed immediately.
                if (supportsMutation) unmountHostComponents(current$$1);
                else if (supportsPersistence) emptyPortalContainer(current$$1);
                return;
        }
    }
    function commitNestedUnmounts(root2) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        var node = root2;
        while(true){
            commitUnmount(node);
            // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
            // If we don't use mutation we drill down into portals here instead.
            (!supportsMutation || node.tag !== HostPortal)) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiber(current$$1) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        current$$1.return = null;
        current$$1.child = null;
        current$$1.memoizedState = null;
        current$$1.updateQueue = null;
        var alternate = current$$1.alternate;
        if (alternate !== null) {
            alternate.return = null;
            alternate.child = null;
            alternate.memoizedState = null;
            alternate.updateQueue = null;
        }
    }
    function emptyPortalContainer(current$$1) {
        if (!supportsPersistence) return;
        var portal = current$$1.stateNode;
        var containerInfo = portal.containerInfo;
        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
    }
    function commitContainer(finishedWork) {
        if (!supportsPersistence) return;
        switch(finishedWork.tag){
            case ClassComponent:
                return;
            case HostComponent:
                return;
            case HostText:
                return;
            case HostRoot:
            case HostPortal:
                var portalOrRoot = finishedWork.stateNode;
                var containerInfo = portalOrRoot.containerInfo, _pendingChildren = portalOrRoot.pendingChildren;
                replaceContainerChildren(containerInfo, _pendingChildren);
                return;
            default:
                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.effectTag & Placement) continue siblings;
                // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            }
            // Check if this host node is stable or about to be placed.
            if (!(node.effectTag & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        if (!supportsMutation) return;
        // Recursively insert all host nodes into the parent.
        var parentFiber = getHostParentFiber(finishedWork);
        // Note: these two variables *must* always be updated together.
        var parent = void 0;
        var isContainer = void 0;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentFiber.stateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
            default:
                invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
        }
        if (parentFiber.effectTag & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent);
            // Clear ContentReset from the effect tag
            parentFiber.effectTag &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) {
                if (before) {
                    if (isContainer) insertInContainerBefore(parent, node.stateNode, before);
                    else insertBefore(parent, node.stateNode, before);
                } else if (isContainer) appendChildToContainer(parent, node.stateNode);
                else appendChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function unmountHostComponents(current$$1) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        var node = current$$1;
        // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false;
        // Note: these two variables *must* always be updated together.
        var currentParent = void 0;
        var currentParentIsContainer = void 0;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    !(parent !== null) && invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parent.stateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parent.stateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parent.stateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(node);
                // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
            // Don't visit children because we already visited them.
            } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
                // Delete the dehydrated suspense boundary and all of its content.
                if (currentParentIsContainer) clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                else clearSuspenseBoundary(currentParent, node.stateNode);
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(node);
                // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current$$1) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current$$1) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(current$$1) {
        if (supportsMutation) // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
        else // Detach refs and call componentWillUnmount() on the whole subtree.
        commitNestedUnmounts(current$$1);
        detachFiber(current$$1);
    }
    function commitWork(current$$1, finishedWork) {
        if (!supportsMutation) {
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    // Note: We currently never use MountMutation, but useLayout uses
                    // UnmountMutation.
                    commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                    return;
            }
            commitContainer(finishedWork);
            return;
        }
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                // Note: We currently never use MountMutation, but useLayout uses
                // UnmountMutation.
                commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps;
                    // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
                    var type = finishedWork.type;
                    // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                return;
            case HostText:
                !(finishedWork.stateNode !== null) && invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.');
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                var newState = finishedWork.memoizedState;
                var newDidTimeout = void 0;
                var primaryChildParent = finishedWork;
                if (newState === null) newDidTimeout = false;
                else {
                    newDidTimeout = true;
                    primaryChildParent = finishedWork.child;
                    if (newState.timedOutAt === NoWork) // If the children had not already timed out, record the time.
                    // This is used to compute the elapsed time during subsequent
                    // attempts to render the children.
                    newState.timedOutAt = requestCurrentTime();
                }
                if (primaryChildParent !== null) hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
                // If this boundary just timed out, then it will have a set of thenables.
                // For each thenable, attach a listener so that when it resolves, React
                // attempts to re-render the boundary in the primary (pre-timeout) state.
                var thenables = finishedWork.updateQueue;
                if (thenables !== null) {
                    finishedWork.updateQueue = null;
                    var retryCache = finishedWork.stateNode;
                    if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
                    thenables.forEach(function(thenable) {
                        // Memoize using the boundary fiber to prevent redundant listeners.
                        var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);
                        if (enableSchedulerTracing) retry = tracing.unstable_wrap(retry);
                        if (!retryCache.has(thenable)) {
                            retryCache.add(thenable);
                            thenable.then(retry, retry);
                        }
                    });
                }
                return;
            case IncompleteClassComponent:
                return;
            default:
                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
    function commitResetTextContent(current$$1) {
        if (!supportsMutation) return;
        resetTextContent(current$$1.stateNode);
    }
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime);
        // Unmount the root by rendering null.
        update.tag = CaptureUpdate;
        // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            if (typeof getDerivedStateFromError !== 'function') // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error = errorInfo.value;
            var stack = errorInfo.stack;
            logError(fiber, errorInfo);
            this.componentDidCatch(error, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            !(fiber.expirationTime === Sync) && warningWithoutStack$1(false, "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
        };
        return update;
    }
    function attachPingListener(root2, renderExpirationTime1, thenable) {
        // Attach a listener to the promise to "ping" the root and retry. But
        // only if one does not already exist for the current render expiration
        // time (which acts like a "thread ID" here).
        var pingCache = root2.pingCache;
        var threadIDs = void 0;
        if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
        } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(thenable, threadIDs);
            }
        }
        if (!threadIDs.has(renderExpirationTime1)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(renderExpirationTime1);
            var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime1);
            if (enableSchedulerTracing) ping = tracing.unstable_wrap(ping);
            thenable.then(ping, ping);
        }
    }
    function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime1) {
        // The source fiber did not complete.
        sourceFiber.effectTag |= Incomplete;
        // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a thenable.
            var thenable = value;
            // Find the earliest timeout threshold of all the placeholders in the
            // ancestor path. We could avoid this traversal by storing the thresholds on
            // the stack, but we choose not to because we only hit this path if we're
            // IO-bound (i.e. if something suspends). Whereas the stack is used even in
            // the non-IO- bound case.
            var _workInProgress = returnFiber;
            var earliestTimeoutMs = -1;
            var startTimeMs = -1;
            do {
                if (_workInProgress.tag === SuspenseComponent) {
                    var current$$1 = _workInProgress.alternate;
                    if (current$$1 !== null) {
                        var currentState = current$$1.memoizedState;
                        if (currentState !== null) {
                            // Reached a boundary that already timed out. Do not search
                            // any further.
                            var timedOutAt = currentState.timedOutAt;
                            startTimeMs = expirationTimeToMs(timedOutAt);
                            break;
                        }
                    }
                    var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
                    if (typeof timeoutPropMs === 'number') {
                        if (timeoutPropMs <= 0) earliestTimeoutMs = 0;
                        else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) earliestTimeoutMs = timeoutPropMs;
                    }
                }
                // If there is a DehydratedSuspenseComponent we don't have to do anything because
                // if something suspends inside it, we will simply leave that as dehydrated. It
                // will never timeout.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null)
            // Schedule the nearest Suspense to re-render the timed out view.
            _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    var thenables = _workInProgress.updateQueue;
                    if (thenables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(thenable);
                        _workInProgress.updateQueue = updateQueue;
                    } else thenables.add(thenable);
                    // If the boundary is outside of concurrent mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a concurrent mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
                        _workInProgress.effectTag |= DidCapture;
                        // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force updte to
                                // prevent a bail out.
                                var update = createUpdate(Sync);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        }
                        // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.expirationTime = Sync;
                        // Exit without suspending.
                        return;
                    }
                    // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    attachPingListener(root2, renderExpirationTime1, thenable);
                    var absoluteTimeoutMs = void 0;
                    if (earliestTimeoutMs === -1) // If no explicit threshold is given, default to an arbitrarily large
                    // value. The actual size doesn't matter because the threshold for the
                    // whole tree will be clamped to the expiration time.
                    absoluteTimeoutMs = maxSigned31BitInt;
                    else {
                        if (startTimeMs === -1) {
                            // This suspend happened outside of any already timed-out
                            // placeholders. We don't know exactly when the update was
                            // scheduled, but we can infer an approximate start time from the
                            // expiration time. First, find the earliest uncommitted expiration
                            // time in the tree, including work that is suspended. Then subtract
                            // the offset used to compute an async update's expiration time.
                            // This will cause high priority (interactive) work to expire
                            // earlier than necessary, but we can account for this by adjusting
                            // for the Just Noticeable Difference.
                            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root2, renderExpirationTime1);
                            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                        }
                        absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
                    }
                    // Mark the earliest timeout in the suspended fiber's ancestor path.
                    // After completing the root, we'll take the largest of all the
                    // suspended fiber's timeouts and use it to compute a timeout for the
                    // whole tree.
                    renderDidSuspend(root2, absoluteTimeoutMs, renderExpirationTime1);
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime1;
                    return;
                } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
                    attachPingListener(root2, renderExpirationTime1, thenable);
                    // Since we already have a current fiber, we can eagerly add a retry listener.
                    var retryCache = _workInProgress.memoizedState;
                    if (retryCache === null) {
                        retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
                        var _current = _workInProgress.alternate;
                        !_current && invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.');
                        _current.memoizedState = retryCache;
                    }
                    // Memoize using the boundary fiber to prevent redundant listeners.
                    if (!retryCache.has(thenable)) {
                        retryCache.add(thenable);
                        var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);
                        if (enableSchedulerTracing) retry = tracing.unstable_wrap(retry);
                        thenable.then(retry, retry);
                    }
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime1;
                    return;
                }
                // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null)
            // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
        }
        // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.effectTag |= ShouldCapture;
                    workInProgress.expirationTime = renderExpirationTime1;
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime1);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.effectTag |= ShouldCapture;
                        workInProgress.expirationTime = renderExpirationTime1;
                        // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime1);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
                default:
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    function unwindWork(workInProgress, renderExpirationTime1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var effectTag = workInProgress.effectTag;
                if (effectTag & ShouldCapture) {
                    workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var _effectTag = workInProgress.effectTag;
                !((_effectTag & DidCapture) === NoEffect) && invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.');
                workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                var _effectTag2 = workInProgress.effectTag;
                if (_effectTag2 & ShouldCapture) {
                    workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                    // Captured a suspense effect. Re-render the boundary.
                    return workInProgress;
                }
                return null;
            case DehydratedSuspenseComponent:
                if (enableSuspenseServerRenderer) {
                    // TODO: popHydrationState
                    var _effectTag3 = workInProgress.effectTag;
                    if (_effectTag3 & ShouldCapture) {
                        workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
                        // Captured a suspense effect. Re-render the boundary.
                        return workInProgress;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            default:
                break;
        }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;
    if (enableSchedulerTracing) // Provide explicit error message when production+profiling bundle of e.g. react-dom
    // is used with production (non-profiling) bundle of scheduler/tracing
    !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) && invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling');
    didWarnAboutStateTransition = false;
    didWarnSetStateChildContext = false;
    var didWarnStateUpdateForUnmountedComponent = {
    };
    warnAboutUpdateOnUnmounted = function(fiber, isClass) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent[componentName]) return;
        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
    };
    warnAboutInvalidUpdates = function(instance) {
        switch(phase){
            case 'getChildContext':
                if (didWarnSetStateChildContext) return;
                warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
                didWarnSetStateChildContext = true;
                break;
            case 'render':
                if (didWarnAboutStateTransition) return;
                warningWithoutStack$1(false, "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutStateTransition = true;
                break;
        }
    };
    // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
    var lastUniqueAsyncExpiration = Sync - 1;
    var isWorking = false;
    // The next work in progress fiber that we're currently working on.
    var nextUnitOfWork = null;
    var nextRoot = null;
    // The time at which we're currently rendering work.
    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false;
    // The next fiber with an effect that we're currently committing.
    var nextEffect = null;
    var isCommitting$1 = false;
    var rootWithPendingPassiveEffects = null;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    // Used for performance tracking.
    var interruptedBy = null;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;
    if (replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = null;
        mayReplayFailedUnitOfWork = true;
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;
        replayUnitOfWork = function(failedUnitOfWork, thrownValue, isYieldy) {
            if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') // Don't replay promises. Treat everything else like an error.
            // TODO: Need to figure out a different strategy if/when we add
            // support for catching other types.
            return;
            // Restore the original state of the work-in-progress
            if (stashedWorkInProgressProperties === null) {
                // This should never happen. Don't throw because this code is DEV-only.
                warningWithoutStack$1(false, "Could not replay rendering after an error. This is likely a bug in React. Please file an issue.");
                return;
            }
            assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);
            switch(failedUnitOfWork.tag){
                case HostRoot:
                    popHostContainer(failedUnitOfWork);
                    popTopLevelContextObject(failedUnitOfWork);
                    break;
                case HostComponent:
                    popHostContext(failedUnitOfWork);
                    break;
                case ClassComponent:
                    var Component = failedUnitOfWork.type;
                    if (isContextProvider(Component)) popContext(failedUnitOfWork);
                    break;
                case HostPortal:
                    popHostContainer(failedUnitOfWork);
                    break;
                case ContextProvider:
                    popProvider(failedUnitOfWork);
                    break;
            }
            // Replay the begin phase.
            isReplayingFailedUnitOfWork = true;
            originalReplayError = thrownValue;
            invokeGuardedCallback(null, workLoop, null, isYieldy);
            isReplayingFailedUnitOfWork = false;
            originalReplayError = null;
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (replayError != null && thrownValue != null) try {
                    // Reading the expando property is intentionally
                    // inside `try` because it might be a getter or Proxy.
                    if (replayError._suppressLogging) // Also suppress logging for the original error.
                    thrownValue._suppressLogging = true;
                } catch (inner) {
                // Ignore.
                }
            } else // If the begin phase did not fail the second time, set this pointer
            // back to the original value.
            nextUnitOfWork = failedUnitOfWork;
        };
        rethrowOriginalError = function() {
            throw originalReplayError;
        };
    }
    function resetStack() {
        if (nextUnitOfWork !== null) {
            var interruptedWork = nextUnitOfWork.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
        nextRoot = null;
        nextRenderExpirationTime = NoWork;
        nextLatestAbsoluteTimeoutMs = -1;
        nextRenderDidError = false;
        nextUnitOfWork = null;
    }
    function commitAllHostEffects() {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            recordEffect();
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) commitResetTextContent(nextEffect);
            if (effectTag & Ref) {
                var current$$1 = nextEffect.alternate;
                if (current$$1 !== null) commitDetachRef(current$$1);
            }
            // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every
            // possible bitmap value, we remove the secondary effects from the
            // effect tag and switch on that value.
            var primaryEffectTag = effectTag & (Placement | Update | Deletion);
            switch(primaryEffectTag){
                case Placement:
                    commitPlacement(nextEffect);
                    // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted
                    // does and isMounted is deprecated anyway so we should be able
                    // to kill this.
                    nextEffect.effectTag &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect);
                    // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.
                    nextEffect.effectTag &= ~Placement;
                    // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Update:
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(nextEffect);
                    break;
            }
            nextEffect = nextEffect.nextEffect;
        }
        resetCurrentFiber();
    }
    function commitBeforeMutationLifecycles() {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & Snapshot) {
                recordEffect();
                var current$$1 = nextEffect.alternate;
                commitBeforeMutationLifeCycles(current$$1, nextEffect);
            }
            nextEffect = nextEffect.nextEffect;
        }
        resetCurrentFiber();
    }
    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        ReactStrictModeWarnings.flushLegacyContextWarning();
        if (warnAboutDeprecatedLifecycles) ReactStrictModeWarnings.flushPendingDeprecationWarnings();
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                recordEffect();
                var current$$1 = nextEffect.alternate;
                commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
            }
            if (effectTag & Ref) {
                recordEffect();
                commitAttachRef(nextEffect);
            }
            if (effectTag & Passive) rootWithPendingPassiveEffects = finishedRoot;
            nextEffect = nextEffect.nextEffect;
        }
        resetCurrentFiber();
    }
    function commitPassiveEffects(root2, firstEffect) {
        rootWithPendingPassiveEffects = null;
        passiveEffectCallbackHandle = null;
        passiveEffectCallback = null;
        // Set this to true to prevent re-entrancy
        var previousIsRendering = isRendering;
        isRendering = true;
        var effect = firstEffect;
        do {
            setCurrentFiber(effect);
            if (effect.effectTag & Passive) {
                var didError = false;
                var error = void 0;
                invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
                if (hasCaughtError()) {
                    didError = true;
                    error = clearCaughtError();
                }
                if (didError) captureCommitPhaseError(effect, error);
            }
            effect = effect.nextEffect;
        }while (effect !== null)
        resetCurrentFiber();
        isRendering = previousIsRendering;
        // Check if work was scheduled by one of the effects
        var rootExpirationTime = root2.expirationTime;
        if (rootExpirationTime !== NoWork) requestWork(root2, rootExpirationTime);
        // Flush any sync work that was scheduled by effects
        if (!isBatchingUpdates && !isRendering) performSyncWork();
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function flushPassiveEffects() {
        if (passiveEffectCallbackHandle !== null) cancelPassiveEffects(passiveEffectCallbackHandle);
        if (passiveEffectCallback !== null) // We call the scheduled callback instead of commitPassiveEffects directly
        // to ensure tracing works correctly.
        passiveEffectCallback();
    }
    function commitRoot(root2, finishedWork) {
        isWorking = true;
        isCommitting$1 = true;
        startCommitTimer();
        !(root2.current !== finishedWork) && invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.');
        var committedExpirationTime = root2.pendingCommitExpirationTime;
        !(committedExpirationTime !== NoWork) && invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.');
        root2.pendingCommitExpirationTime = NoWork;
        // Update the pending priority levels to account for the work that we are
        // about to commit. This needs to happen before calling the lifecycles, since
        // they may schedule additional updates.
        var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
        var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
        var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
        markCommittedPriorityLevels(root2, earliestRemainingTimeBeforeCommit);
        var prevInteractions = null;
        if (enableSchedulerTracing) {
            // Restore any pending interactions at this point,
            // So that cascading work triggered during the render phase will be accounted for.
            prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
        }
        // Reset this to null before calling lifecycles
        ReactCurrentOwner$2.current = null;
        var firstEffect = void 0;
        if (finishedWork.effectTag > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if
            // it had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        prepareForCommit(root2.containerInfo);
        // Invoke instances of getSnapshotBeforeUpdate before mutation.
        nextEffect = firstEffect;
        startCommitSnapshotEffectsTimer();
        while(nextEffect !== null){
            var didError = false;
            var error = void 0;
            invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
            if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
            }
            if (didError) {
                !(nextEffect !== null) && invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.');
                captureCommitPhaseError(nextEffect, error);
                // Clean-up
                if (nextEffect !== null) nextEffect = nextEffect.nextEffect;
            }
        }
        stopCommitSnapshotEffectsTimer();
        if (enableProfilerTimer) // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
        // Commit all the side-effects within a tree. We'll do this in two passes.
        // The first pass performs all the host insertions, updates, deletions and
        // ref unmounts.
        nextEffect = firstEffect;
        startCommitHostEffectsTimer();
        while(nextEffect !== null){
            var _didError = false;
            var _error = void 0;
            invokeGuardedCallback(null, commitAllHostEffects, null);
            if (hasCaughtError()) {
                _didError = true;
                _error = clearCaughtError();
            }
            if (_didError) {
                !(nextEffect !== null) && invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.');
                captureCommitPhaseError(nextEffect, _error);
                // Clean-up
                if (nextEffect !== null) nextEffect = nextEffect.nextEffect;
            }
        }
        stopCommitHostEffectsTimer();
        resetAfterCommit(root2.containerInfo);
        // The work-in-progress tree is now the current tree. This must come after
        // the first pass of the commit phase, so that the previous tree is still
        // current during componentWillUnmount, but before the second pass, so that
        // the finished work is current during componentDidMount/Update.
        root2.current = finishedWork;
        // In the second pass we'll perform all life-cycles and ref callbacks.
        // Life-cycles happen as a separate pass so that all placements, updates,
        // and deletions in the entire tree have already been invoked.
        // This pass also triggers any renderer-specific initial effects.
        nextEffect = firstEffect;
        startCommitLifeCyclesTimer();
        while(nextEffect !== null){
            var _didError2 = false;
            var _error2 = void 0;
            invokeGuardedCallback(null, commitAllLifeCycles, null, root2, committedExpirationTime);
            if (hasCaughtError()) {
                _didError2 = true;
                _error2 = clearCaughtError();
            }
            if (_didError2) {
                !(nextEffect !== null) && invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.');
                captureCommitPhaseError(nextEffect, _error2);
                if (nextEffect !== null) nextEffect = nextEffect.nextEffect;
            }
        }
        if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
            // This commit included a passive effect. These do not need to fire until
            // after the next paint. Schedule an callback to fire them in an async
            // event. To ensure serial execution, the callback will be flushed early if
            // we enter rootWithPendingPassiveEffects commit phase before then.
            var callback = commitPassiveEffects.bind(null, root2, firstEffect);
            if (enableSchedulerTracing) // TODO: Avoid this extra callback by mutating the tracing ref directly,
            // like we do at the beginning of commitRoot. I've opted not to do that
            // here because that code is still in flux.
            callback = tracing.unstable_wrap(callback);
            passiveEffectCallbackHandle = scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority, function() {
                return schedulePassiveEffects(callback);
            });
            passiveEffectCallback = callback;
        }
        isCommitting$1 = false;
        isWorking = false;
        stopCommitLifeCyclesTimer();
        stopCommitTimer();
        onCommitRoot(finishedWork.stateNode);
        if (ReactFiberInstrumentation_1.debugTool) ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
        var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
        var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
        var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
        if (earliestRemainingTimeAfterCommit === NoWork) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        onCommit(root2, earliestRemainingTimeAfterCommit);
        if (enableSchedulerTracing) {
            tracing.__interactionsRef.current = prevInteractions;
            var subscriber = void 0;
            try {
                subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                    var threadID = computeThreadID(committedExpirationTime, root2.interactionThreadID);
                    subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
                }
            } catch (error) {
                // It's not safe for commitRoot() to throw.
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                    hasUnhandledError = true;
                    unhandledError = error;
                }
            } finally{
                // Clear completed interactions from the pending Map.
                // Unless the render was suspended or cascading work was scheduled,
                // In which case– leave pending interactions until the subsequent render.
                var pendingInteractionMap = root2.pendingInteractionMap;
                pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
                    // Only decrement the pending interaction count if we're done.
                    // If there's still work at the current priority,
                    // That indicates that we are waiting for suspense data.
                    if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                        pendingInteractionMap.delete(scheduledExpirationTime);
                        scheduledInteractions.forEach(function(interaction) {
                            interaction.__count--;
                            if (subscriber !== null && interaction.__count === 0) try {
                                subscriber.onInteractionScheduledWorkCompleted(interaction);
                            } catch (error) {
                                // It's not safe for commitRoot() to throw.
                                // Store the error for now and we'll re-throw in finishRendering().
                                if (!hasUnhandledError) {
                                    hasUnhandledError = true;
                                    unhandledError = error;
                                }
                            }
                        });
                    }
                });
            }
        }
    }
    function resetChildExpirationTime(workInProgress, renderTime) {
        if (renderTime !== Never && workInProgress.childExpirationTime === Never) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildExpirationTime = NoWork;
        // Bubble up the earliest expiration time.
        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
            // We're in profiling mode.
            // Let's use this same traversal to update the render durations.
            var actualDuration = workInProgress.actualDuration;
            var treeBaseDuration = workInProgress.selfBaseDuration;
            // When a fiber is cloned, its actualDuration is reset to 0.
            // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration.
            // If the fiber has not been cloned though, (meaning no work was done),
            // Then this value will reflect the amount of time spent working on a previous render.
            // In that case it should not bubble.
            // We determine whether it was cloned by comparing the child pointer.
            var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
            var child = workInProgress.child;
            while(child !== null){
                var childUpdateExpirationTime = child.expirationTime;
                var childChildExpirationTime = child.childExpirationTime;
                if (childUpdateExpirationTime > newChildExpirationTime) newChildExpirationTime = childUpdateExpirationTime;
                if (childChildExpirationTime > newChildExpirationTime) newChildExpirationTime = childChildExpirationTime;
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            workInProgress.actualDuration = actualDuration;
            workInProgress.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = workInProgress.child;
            while(_child !== null){
                var _childUpdateExpirationTime = _child.expirationTime;
                var _childChildExpirationTime = _child.childExpirationTime;
                if (_childUpdateExpirationTime > newChildExpirationTime) newChildExpirationTime = _childUpdateExpirationTime;
                if (_childChildExpirationTime > newChildExpirationTime) newChildExpirationTime = _childChildExpirationTime;
                _child = _child.sibling;
            }
        }
        workInProgress.childExpirationTime = newChildExpirationTime;
    }
    function completeUnitOfWork(workInProgress) {
        // Attempt to complete the current unit of work, then move to the
        // next sibling. If there are no more siblings, return to the
        // parent fiber.
        while(true){
            // The current, flushed, state of this fiber is the alternate.
            // Ideally nothing should rely on this, but relying on it here
            // means that we don't need an additional field on the work in
            // progress.
            var current$$1 = workInProgress.alternate;
            setCurrentFiber(workInProgress);
            var returnFiber = workInProgress.return;
            var siblingFiber = workInProgress.sibling;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                if (replayFailedUnitOfWorkWithInvokeGuardedCallback) // Don't replay if it fails during completion phase.
                mayReplayFailedUnitOfWork = false;
                // This fiber completed.
                // Remember we're completing this unit so we can find a boundary if it fails.
                nextUnitOfWork = workInProgress;
                if (enableProfilerTimer) {
                    if (workInProgress.mode & ProfileMode) startProfilerTimer(workInProgress);
                    nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
                    if (workInProgress.mode & ProfileMode) // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                } else nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
                if (replayFailedUnitOfWorkWithInvokeGuardedCallback) // We're out of completion phase so replaying is fine now.
                mayReplayFailedUnitOfWork = true;
                stopWorkTimer(workInProgress);
                resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
                resetCurrentFiber();
                if (nextUnitOfWork !== null) // Completing this fiber spawned new work. Work on that next.
                return nextUnitOfWork;
                if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                (returnFiber.effectTag & Incomplete) === NoEffect) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = workInProgress.firstEffect;
                    if (workInProgress.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                        returnFiber.lastEffect = workInProgress.lastEffect;
                    }
                    // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if
                    // needed, by doing multiple passes over the effect list. We don't want
                    // to schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var effectTag = workInProgress.effectTag;
                    // Skip both NoWork and PerformedWork tags when creating the effect list.
                    // PerformedWork effect is read by React DevTools but shouldn't be committed.
                    if (effectTag > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = workInProgress;
                        else returnFiber.firstEffect = workInProgress;
                        returnFiber.lastEffect = workInProgress;
                    }
                }
                if (ReactFiberInstrumentation_1.debugTool) ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                if (siblingFiber !== null) // If there is more work to do in this returnFiber, do that next.
                return siblingFiber;
                else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                } else // We've reached the root.
                return null;
            } else {
                if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                    // Include the time spent working on failed children before continuing.
                    var actualDuration = workInProgress.actualDuration;
                    var child = workInProgress.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    workInProgress.actualDuration = actualDuration;
                }
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var next = unwindWork(workInProgress, nextRenderExpirationTime);
                // Because this fiber did not complete, don't reset its expiration time.
                if (workInProgress.effectTag & DidCapture) // Restarting an error boundary
                stopFailedWorkTimer(workInProgress);
                else stopWorkTimer(workInProgress);
                resetCurrentFiber();
                if (next !== null) {
                    stopWorkTimer(workInProgress);
                    if (ReactFiberInstrumentation_1.debugTool) ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    next.effectTag &= HostEffectMask;
                    return next;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.effectTag |= Incomplete;
                }
                if (ReactFiberInstrumentation_1.debugTool) ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                if (siblingFiber !== null) // If there is more work to do in this returnFiber, do that next.
                return siblingFiber;
                else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                } else return null;
            }
        }
        // Without this explicit null return Flow complains of invalid return type
        // TODO Remove the above while(true) loop
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function performUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        // See if beginning this work spawns more work.
        startWorkTimer(workInProgress);
        setCurrentFiber(workInProgress);
        if (replayFailedUnitOfWorkWithInvokeGuardedCallback) stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
        var next = void 0;
        if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) startProfilerTimer(workInProgress);
            next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
            workInProgress.memoizedProps = workInProgress.pendingProps;
            if (workInProgress.mode & ProfileMode) // Record the render duration assuming we didn't bailout (or error).
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        } else {
            next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
            workInProgress.memoizedProps = workInProgress.pendingProps;
        }
        resetCurrentFiber();
        if (isReplayingFailedUnitOfWork) // Currently replaying a failed unit of work. This should be unreachable,
        // because the render phase is meant to be idempotent, and it should
        // have thrown again. Since it didn't, rethrow the original error, so
        // React's internal stack is not misaligned.
        rethrowOriginalError();
        if (ReactFiberInstrumentation_1.debugTool) ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
        if (next === null) // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
        ReactCurrentOwner$2.current = null;
        return next;
    }
    function workLoop(isYieldy) {
        if (!isYieldy) // Flush work without yielding
        while(nextUnitOfWork !== null)nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        else // Flush asynchronous work until there's a higher priority event
        while(nextUnitOfWork !== null && !shouldYieldToRenderer())nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
    function renderRoot(root2, isYieldy) {
        !!isWorking && invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.');
        flushPassiveEffects();
        isWorking = true;
        var previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        var expirationTime = root2.nextExpirationTimeToWorkOn;
        // Check if we're starting from a fresh stack, or if we're resuming from
        // previously yielded work.
        if (expirationTime !== nextRenderExpirationTime || root2 !== nextRoot || nextUnitOfWork === null) {
            // Reset the stack and start working from the root.
            resetStack();
            nextRoot = root2;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
            root2.pendingCommitExpirationTime = NoWork;
            if (enableSchedulerTracing) {
                // Determine which interactions this batch of work currently includes,
                // So that we can accurately attribute time spent working on it,
                var interactions = new Set();
                root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
                    if (scheduledExpirationTime >= expirationTime) scheduledInteractions.forEach(function(interaction) {
                        return interactions.add(interaction);
                    });
                });
                // Store the current set of interactions on the FiberRoot for a few reasons:
                // We can re-use it in hot functions like renderRoot() without having to recalculate it.
                // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
                // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
                root2.memoizedInteractions = interactions;
                if (interactions.size > 0) {
                    var subscriber = tracing.__subscriberRef.current;
                    if (subscriber !== null) {
                        var threadID = computeThreadID(expirationTime, root2.interactionThreadID);
                        try {
                            subscriber.onWorkStarted(interactions, threadID);
                        } catch (error) {
                            // Work thrown by an interaction tracing subscriber should be rethrown,
                            // But only once it's safe (to avoid leaving the scheduler in an invalid state).
                            // Store the error for now and we'll re-throw in finishRendering().
                            if (!hasUnhandledError) {
                                hasUnhandledError = true;
                                unhandledError = error;
                            }
                        }
                    }
                }
            }
        }
        var prevInteractions = null;
        if (enableSchedulerTracing) {
            // We're about to start new traced work.
            // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
            prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
        }
        var didFatal = false;
        startWorkLoopTimer(nextUnitOfWork);
        do {
            try {
                workLoop(isYieldy);
            } catch (thrownValue) {
                resetContextDependences();
                resetHooks();
                // Reset in case completion throws.
                // This is only used in DEV and when replaying is on.
                var mayReplay = void 0;
                if (replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    mayReplay = mayReplayFailedUnitOfWork;
                    mayReplayFailedUnitOfWork = true;
                }
                if (nextUnitOfWork === null) {
                    // This is a fatal error.
                    didFatal = true;
                    onUncaughtError(thrownValue);
                } else {
                    if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown.
                    // This avoids inaccurate Profiler durations in the case of a suspended render.
                    stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
                    // Reset global debug state
                    // We assume this is defined in DEV
                    resetCurrentlyProcessingQueue();
                    if (replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                        if (mayReplay) {
                            var failedUnitOfWork = nextUnitOfWork;
                            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
                        }
                    }
                    // TODO: we already know this isn't true in some cases.
                    // At least this shows a nicer error message until we figure out the cause.
                    // https://github.com/facebook/react/issues/12449#issuecomment-386727431
                    !(nextUnitOfWork !== null) && invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.');
                    var sourceFiber = nextUnitOfWork;
                    var returnFiber = sourceFiber.return;
                    if (returnFiber === null) {
                        // This is the root. The root could capture its own errors. However,
                        // we don't know if it errors before or after we pushed the host
                        // context. This information is needed to avoid a stack mismatch.
                        // Because we're not sure, treat this as a fatal error. We could track
                        // which phase it fails in, but doesn't seem worth it. At least
                        // for now.
                        didFatal = true;
                        onUncaughtError(thrownValue);
                    } else {
                        throwException(root2, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
                        nextUnitOfWork = completeUnitOfWork(sourceFiber);
                        continue;
                    }
                }
            }
            break;
        }while (true)
        if (enableSchedulerTracing) // Traced work is done for now; restore the previous interactions.
        tracing.__interactionsRef.current = prevInteractions;
        // We're done performing work. Time to clean up.
        isWorking = false;
        ReactCurrentDispatcher.current = previousDispatcher;
        resetContextDependences();
        resetHooks();
        // Yield back to main thread.
        if (didFatal) {
            var _didCompleteRoot = false;
            stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
            interruptedBy = null;
            resetStackAfterFatalErrorInDev();
            // `nextRoot` points to the in-progress root. A non-null value indicates
            // that we're in the middle of an async render. Set it to null to indicate
            // there's no more work to be done in the current batch.
            nextRoot = null;
            onFatal(root2);
            return;
        }
        if (nextUnitOfWork !== null) {
            // There's still remaining async work in this tree, but we ran out of time
            // in the current frame. Yield back to the renderer. Unless we're
            // interrupted by a higher priority update, we'll continue later from where
            // we left off.
            var _didCompleteRoot2 = false;
            stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
            interruptedBy = null;
            onYield(root2);
            return;
        }
        // We completed the whole tree.
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        var rootWorkInProgress = root2.current.alternate;
        !(rootWorkInProgress !== null) && invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.');
        // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.
        nextRoot = null;
        interruptedBy = null;
        if (nextRenderDidError) {
            // There was an error
            if (hasLowerPriorityWork(root2, expirationTime)) {
                // There's lower priority work. If so, it may have the effect of fixing
                // the exception that was just thrown. Exit without committing. This is
                // similar to a suspend, but without a timeout because we're not waiting
                // for a promise to resolve. React will restart at the lower
                // priority level.
                markSuspendedPriorityLevel(root2, expirationTime);
                var suspendedExpirationTime = expirationTime;
                var rootExpirationTime = root2.expirationTime;
                onSuspend(root2, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
                );
                return;
            } else if (// There's no lower priority work, but we're rendering asynchronously.
            // Synchronously attempt to render the same level one more time. This is
            // similar to a suspend, but without a timeout because we're not waiting
            // for a promise to resolve.
            !root2.didError && isYieldy) {
                root2.didError = true;
                var _suspendedExpirationTime = root2.nextExpirationTimeToWorkOn = expirationTime;
                var _rootExpirationTime = root2.expirationTime = Sync;
                onSuspend(root2, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
                );
                return;
            }
        }
        if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
            // The tree was suspended.
            var _suspendedExpirationTime2 = expirationTime;
            markSuspendedPriorityLevel(root2, _suspendedExpirationTime2);
            // Find the earliest uncommitted expiration time in the tree, including
            // work that is suspended. The timeout threshold cannot be longer than
            // the overall expiration.
            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root2, expirationTime);
            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
            if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
            // Subtract the current time from the absolute timeout to get the number
            // of milliseconds until the timeout. In other words, convert an absolute
            // timestamp to a relative time. This is the value that is passed
            // to `setTimeout`.
            var currentTimeMs = expirationTimeToMs(requestCurrentTime());
            var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
            msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;
            // TODO: Account for the Just Noticeable Difference
            var _rootExpirationTime2 = root2.expirationTime;
            onSuspend(root2, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
            return;
        }
        // Ready to commit.
        onComplete(root2, rootWorkInProgress, expirationTime);
    }
    function captureCommitPhaseError(sourceFiber, value) {
        var expirationTime = Sync;
        var fiber = sourceFiber.return;
        while(fiber !== null){
            switch(fiber.tag){
                case ClassComponent:
                    var ctor = fiber.type;
                    var instance = fiber.stateNode;
                    if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                        var errorInfo = createCapturedValue(value, sourceFiber);
                        var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
                        enqueueUpdate(fiber, update);
                        scheduleWork(fiber, expirationTime);
                        return;
                    }
                    break;
                case HostRoot:
                    var _errorInfo = createCapturedValue(value, sourceFiber);
                    var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
                    enqueueUpdate(fiber, _update);
                    scheduleWork(fiber, expirationTime);
                    return;
            }
            fiber = fiber.return;
        }
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            var rootFiber = sourceFiber;
            var _errorInfo2 = createCapturedValue(value, rootFiber);
            var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
            enqueueUpdate(rootFiber, _update2);
            scheduleWork(rootFiber, expirationTime);
        }
    }
    function computeThreadID(expirationTime, interactionThreadID) {
        // Interaction threads are unique per root and expiration time.
        return expirationTime * 1000 + interactionThreadID;
    }
    // Creates a unique async expiration time.
    function computeUniqueAsyncExpiration() {
        var currentTime = requestCurrentTime();
        var result = computeAsyncExpiration(currentTime);
        if (result >= lastUniqueAsyncExpiration) // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration - 1;
        lastUniqueAsyncExpiration = result;
        return lastUniqueAsyncExpiration;
    }
    function computeExpirationForFiber(currentTime, fiber) {
        var priorityLevel = scheduler.unstable_getCurrentPriorityLevel();
        var expirationTime = void 0;
        if ((fiber.mode & ConcurrentMode) === NoContext) // Outside of concurrent mode, updates are always synchronous.
        expirationTime = Sync;
        else if (isWorking && !isCommitting$1) // During render phase, updates expire during as the current render.
        expirationTime = nextRenderExpirationTime;
        else {
            switch(priorityLevel){
                case scheduler.unstable_ImmediatePriority:
                    expirationTime = Sync;
                    break;
                case scheduler.unstable_UserBlockingPriority:
                    expirationTime = computeInteractiveExpiration(currentTime);
                    break;
                case scheduler.unstable_NormalPriority:
                    // This is a normal, concurrent update
                    expirationTime = computeAsyncExpiration(currentTime);
                    break;
                case scheduler.unstable_LowPriority:
                case scheduler.unstable_IdlePriority:
                    expirationTime = Never;
                    break;
                default:
                    invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
            }
            // If we're in the middle of rendering a tree, do not update at the same
            // expiration time that is already rendering.
            if (nextRoot !== null && expirationTime === nextRenderExpirationTime) expirationTime -= 1;
        }
        // Keep track of the lowest pending interactive expiration time. This
        // allows us to synchronously flush all interactive updates
        // when needed.
        // TODO: Move this to renderer?
        if (priorityLevel === scheduler.unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) lowestPriorityPendingInteractiveExpirationTime = expirationTime;
        return expirationTime;
    }
    function renderDidSuspend(root2, absoluteTimeoutMs, suspendedTime) {
        // Schedule the timeout.
        if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
    }
    function renderDidError() {
        nextRenderDidError = true;
    }
    function pingSuspendedRoot(root2, thenable, pingTime) {
        // A promise that previously suspended React from committing has resolved.
        // If React is still suspended, try again at the previous level (pingTime).
        var pingCache = root2.pingCache;
        if (pingCache !== null) // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(thenable);
        if (nextRoot !== null && nextRenderExpirationTime === pingTime) // Received a ping at the same priority level at which we're currently
        // rendering. Restart from the root.
        nextRoot = null;
        else // Confirm that the root is still suspended at this level. Otherwise exit.
        if (isPriorityLevelSuspended(root2, pingTime)) {
            // Ping at the original level
            markPingedPriorityLevel(root2, pingTime);
            var rootExpirationTime = root2.expirationTime;
            if (rootExpirationTime !== NoWork) requestWork(root2, rootExpirationTime);
        }
    }
    function retryTimedOutBoundary(boundaryFiber, thenable) {
        // The boundary fiber (a Suspense component) previously timed out and was
        // rendered in its fallback state. One of the promises that suspended it has
        // resolved, which means at least part of the tree was likely unblocked. Try
        var retryCache = void 0;
        if (enableSuspenseServerRenderer) switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            case DehydratedSuspenseComponent:
                retryCache = boundaryFiber.memoizedState;
                break;
            default:
                invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
        }
        else retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(thenable);
        var currentTime = requestCurrentTime();
        var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
        var root2 = scheduleWorkToRoot(boundaryFiber, retryTime);
        if (root2 !== null) {
            markPendingPriorityLevel(root2, retryTime);
            var rootExpirationTime = root2.expirationTime;
            if (rootExpirationTime !== NoWork) requestWork(root2, rootExpirationTime);
        }
    }
    function scheduleWorkToRoot(fiber, expirationTime) {
        recordScheduleUpdate();
        if (fiber.tag === ClassComponent) {
            var instance = fiber.stateNode;
            warnAboutInvalidUpdates(instance);
        }
        // Update the source fiber's expiration time
        if (fiber.expirationTime < expirationTime) fiber.expirationTime = expirationTime;
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < expirationTime) alternate.expirationTime = expirationTime;
        // Walk the parent path to the root and update the child expiration time.
        var node = fiber.return;
        var root2 = null;
        if (node === null && fiber.tag === HostRoot) root2 = fiber.stateNode;
        else while(node !== null){
            alternate = node.alternate;
            if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) alternate.childExpirationTime = expirationTime;
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) alternate.childExpirationTime = expirationTime;
            if (node.return === null && node.tag === HostRoot) {
                root2 = node.stateNode;
                break;
            }
            node = node.return;
        }
        if (enableSchedulerTracing) {
            if (root2 !== null) {
                var interactions = tracing.__interactionsRef.current;
                if (interactions.size > 0) {
                    var pendingInteractionMap = root2.pendingInteractionMap;
                    var pendingInteractions = pendingInteractionMap.get(expirationTime);
                    if (pendingInteractions != null) interactions.forEach(function(interaction) {
                        if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                        interaction.__count++;
                        pendingInteractions.add(interaction);
                    });
                    else {
                        pendingInteractionMap.set(expirationTime, new Set(interactions));
                        // Update the pending async work count for the current interactions.
                        interactions.forEach(function(interaction) {
                            interaction.__count++;
                        });
                    }
                    var subscriber = tracing.__subscriberRef.current;
                    if (subscriber !== null) {
                        var threadID = computeThreadID(expirationTime, root2.interactionThreadID);
                        subscriber.onWorkScheduled(interactions, threadID);
                    }
                }
            }
        }
        return root2;
    }
    function warnIfNotCurrentlyBatchingInDev(fiber) {
        if (isRendering === false && isBatchingUpdates === false) warningWithoutStack$1(false, "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
    function scheduleWork(fiber, expirationTime) {
        var root2 = scheduleWorkToRoot(fiber, expirationTime);
        if (root2 === null) {
            switch(fiber.tag){
                case ClassComponent:
                    warnAboutUpdateOnUnmounted(fiber, true);
                    break;
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    warnAboutUpdateOnUnmounted(fiber, false);
                    break;
            }
            return;
        }
        if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
            // This is an interruption. (Used for performance tracking.)
            interruptedBy = fiber;
            resetStack();
        }
        markPendingPriorityLevel(root2, expirationTime);
        if (// If we're in the render phase, we don't need to schedule this root
        // for an update, because we'll do it before we exit...
        !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.
        nextRoot !== root2) {
            var rootExpirationTime = root2.expirationTime;
            requestWork(root2, rootExpirationTime);
        }
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            // Reset this back to zero so subsequent updates don't throw.
            nestedUpdateCount = 0;
            invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
        }
    }
    function syncUpdates(fn, a, b, c, d) {
        return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function() {
            return fn(a, b, c, d);
        });
    }
    // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots
    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = scheduler.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime;
    // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;
    function recomputeCurrentRendererTime() {
        var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
        currentRendererTime = msToExpirationTime(currentTimeMs);
    }
    function scheduleCallbackWithExpirationTime(root2, expirationTime) {
        if (callbackExpirationTime !== NoWork) {
            // A callback is already scheduled. Check its expiration time (timeout).
            if (expirationTime < callbackExpirationTime) // Existing callback has sufficient timeout. Exit.
            return;
            else if (callbackID !== null) // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            scheduler.unstable_cancelCallback(callbackID);
        // The request callback timer is already running. Don't start a new one.
        } else startRequestCallbackTimer();
        callbackExpirationTime = expirationTime;
        var currentMs = scheduler.unstable_now() - originalStartTimeMs;
        var expirationTimeMs = expirationTimeToMs(expirationTime);
        var timeout = expirationTimeMs - currentMs;
        callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, {
            timeout: timeout
        });
    }
    // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.
    function onFatal(root2) {
        root2.finishedWork = null;
    }
    function onComplete(root2, finishedWork, expirationTime) {
        root2.pendingCommitExpirationTime = expirationTime;
        root2.finishedWork = finishedWork;
    }
    function onSuspend(root2, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
        root2.expirationTime = rootExpirationTime;
        if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
            // Don't wait an additional tick. Commit the tree immediately.
            root2.pendingCommitExpirationTime = suspendedExpirationTime;
            root2.finishedWork = finishedWork;
        } else if (msUntilTimeout > 0) // Wait `msUntilTimeout` milliseconds before committing.
        root2.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root2, finishedWork, suspendedExpirationTime), msUntilTimeout);
    }
    function onYield(root2) {
        root2.finishedWork = null;
    }
    function onTimeout(root2, finishedWork, suspendedExpirationTime) {
        // The root timed out. Commit it.
        root2.pendingCommitExpirationTime = suspendedExpirationTime;
        root2.finishedWork = finishedWork;
        // Read the current time before entering the commit phase. We can be
        // certain this won't cause tearing related to batching of event updates
        // because we're at the top of a timer event.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        flushRoot(root2, suspendedExpirationTime);
    }
    function onCommit(root2, expirationTime) {
        root2.expirationTime = expirationTime;
        root2.finishedWork = null;
    }
    function requestCurrentTime() {
        // requestCurrentTime is called by the scheduler to compute an expiration
        // time.
        //
        // Expiration times are computed by adding to the current time (the start
        // time). However, if two updates are scheduled within the same event, we
        // should treat their start times as simultaneous, even if the actual clock
        // time has advanced between the first and second call.
        // In other words, because expiration times determine how updates are batched,
        // we want all updates of like priority that occur within the same event to
        // receive the same expiration time. Otherwise we get tearing.
        //
        // We keep track of two separate times: the current "renderer" time and the
        // current "scheduler" time. The renderer time can be updated whenever; it
        // only exists to minimize the calls performance.now.
        //
        // But the scheduler time can only be updated if there's no pending work, or
        // if we know for certain that we're not in the middle of an event.
        if (isRendering) // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
        // Check if there's pending work.
        findHighestPriorityRoot();
        if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
            // If there's no pending work, or if the pending work is offscreen, we can
            // read the current time without risk of tearing.
            recomputeCurrentRendererTime();
            currentSchedulerTime = currentRendererTime;
            return currentSchedulerTime;
        }
        // There's already pending work. We might be in the middle of a browser
        // event. If we were to read the current time, it could cause multiple updates
        // within the same event to receive different expiration times, leading to
        // tearing. Return the last read time. During the next idle callback, the
        // time will be updated.
        return currentSchedulerTime;
    }
    // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.
    function requestWork(root2, expirationTime) {
        addRootToSchedule(root2, expirationTime);
        if (isRendering) // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
        if (isBatchingUpdates) {
            // Flush work at the end of the batch.
            if (isUnbatchingUpdates) {
                // ...unless we're inside unbatchedUpdates, in which case we should
                // flush it now.
                nextFlushedRoot = root2;
                nextFlushedExpirationTime = Sync;
                performWorkOnRoot(root2, Sync, false);
            }
            return;
        }
        // TODO: Get rid of Sync and use current time?
        if (expirationTime === Sync) performSyncWork();
        else scheduleCallbackWithExpirationTime(root2, expirationTime);
    }
    function addRootToSchedule(root2, expirationTime) {
        // Add the root to the schedule.
        // Check if this root is already part of the schedule.
        if (root2.nextScheduledRoot === null) {
            // This root is not already scheduled. Add it.
            root2.expirationTime = expirationTime;
            if (lastScheduledRoot === null) {
                firstScheduledRoot = lastScheduledRoot = root2;
                root2.nextScheduledRoot = root2;
            } else {
                lastScheduledRoot.nextScheduledRoot = root2;
                lastScheduledRoot = root2;
                lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
        } else {
            // This root is already scheduled, but its priority may have increased.
            var remainingExpirationTime1 = root2.expirationTime;
            if (expirationTime > remainingExpirationTime1) // Update the priority.
            root2.expirationTime = expirationTime;
        }
    }
    function findHighestPriorityRoot() {
        var highestPriorityWork = NoWork;
        var highestPriorityRoot = null;
        if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root2 = firstScheduledRoot;
            while(root2 !== null){
                var remainingExpirationTime2 = root2.expirationTime;
                if (remainingExpirationTime2 === NoWork) {
                    // This root no longer has work. Remove it from the scheduler.
                    // TODO: This check is redudant, but Flow is confused by the branch
                    // below where we set lastScheduledRoot to null, even though we break
                    // from the loop right after.
                    !(previousScheduledRoot !== null && lastScheduledRoot !== null) && invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.');
                    if (root2 === root2.nextScheduledRoot) {
                        // This is the only root in the list.
                        root2.nextScheduledRoot = null;
                        firstScheduledRoot = lastScheduledRoot = null;
                        break;
                    } else if (root2 === firstScheduledRoot) {
                        // This is the first root in the list.
                        var next = root2.nextScheduledRoot;
                        firstScheduledRoot = next;
                        lastScheduledRoot.nextScheduledRoot = next;
                        root2.nextScheduledRoot = null;
                    } else if (root2 === lastScheduledRoot) {
                        // This is the last root in the list.
                        lastScheduledRoot = previousScheduledRoot;
                        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                        root2.nextScheduledRoot = null;
                        break;
                    } else {
                        previousScheduledRoot.nextScheduledRoot = root2.nextScheduledRoot;
                        root2.nextScheduledRoot = null;
                    }
                    root2 = previousScheduledRoot.nextScheduledRoot;
                } else {
                    if (remainingExpirationTime2 > highestPriorityWork) {
                        // Update the priority, if it's higher
                        highestPriorityWork = remainingExpirationTime2;
                        highestPriorityRoot = root2;
                    }
                    if (root2 === lastScheduledRoot) break;
                    if (highestPriorityWork === Sync) break;
                    previousScheduledRoot = root2;
                    root2 = root2.nextScheduledRoot;
                }
            }
        }
        nextFlushedRoot = highestPriorityRoot;
        nextFlushedExpirationTime = highestPriorityWork;
    }
    // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.
    var didYield = false;
    function shouldYieldToRenderer() {
        if (didYield) return true;
        if (scheduler.unstable_shouldYield()) {
            didYield = true;
            return true;
        }
        return false;
    }
    function performAsyncWork() {
        try {
            if (!shouldYieldToRenderer()) // The callback timed out. That means at least one update has expired.
            // Iterate through the root schedule. If they contain expired work, set
            // the next render expiration time to the current time. This has the effect
            // of flushing all expired work in a single batch, instead of flushing each
            // level one at a time.
            {
                if (firstScheduledRoot !== null) {
                    recomputeCurrentRendererTime();
                    var root3 = firstScheduledRoot;
                    do {
                        didExpireAtExpirationTime(root3, currentRendererTime);
                        // The root schedule is circular, so this is never null.
                        root3 = root3.nextScheduledRoot;
                    }while (root3 !== firstScheduledRoot)
                }
            }
            performWork(NoWork, true);
        } finally{
            didYield = false;
        }
    }
    function performSyncWork() {
        performWork(Sync, false);
    }
    function performWork(minExpirationTime, isYieldy) {
        // Keep working on roots until there's no more work, or until there's a higher
        // priority event.
        findHighestPriorityRoot();
        if (isYieldy) {
            recomputeCurrentRendererTime();
            currentSchedulerTime = currentRendererTime;
            if (enableUserTimingAPI) {
                var didExpire = nextFlushedExpirationTime > currentRendererTime;
                var timeout = expirationTimeToMs(nextFlushedExpirationTime);
                stopRequestCallbackTimer(didExpire, timeout);
            }
            while(nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)){
                performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
                findHighestPriorityRoot();
                recomputeCurrentRendererTime();
                currentSchedulerTime = currentRendererTime;
            }
        } else while(nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime){
            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
            findHighestPriorityRoot();
        }
        // We're done flushing work. Either we ran out of time in this callback,
        // or there's no more work left with sufficient priority.
        // If we're inside a callback, set this to false since we just completed it.
        if (isYieldy) {
            callbackExpirationTime = NoWork;
            callbackID = null;
        }
        // If there's work left over, schedule a new callback.
        if (nextFlushedExpirationTime !== NoWork) scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
        // Clean-up.
        finishRendering();
    }
    function flushRoot(root4, expirationTime) {
        !!isRendering && invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.');
        // Perform work on root as if the given expiration time is the current time.
        // This has the effect of synchronously flushing all work up to and
        // including the given time.
        nextFlushedRoot = root4;
        nextFlushedExpirationTime = expirationTime;
        performWorkOnRoot(root4, expirationTime, false);
        // Flush any sync work that was scheduled by lifecycles
        performSyncWork();
    }
    function finishRendering() {
        nestedUpdateCount = 0;
        lastCommittedRootDuringThisBatch = null;
        if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;
            for(var i = 0; i < batches.length; i++){
                var batch = batches[i];
                try {
                    batch._onComplete();
                } catch (error) {
                    if (!hasUnhandledError) {
                        hasUnhandledError = true;
                        unhandledError = error;
                    }
                }
            }
        }
        if (hasUnhandledError) {
            var error = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw error;
        }
    }
    function performWorkOnRoot(root4, expirationTime, isYieldy) {
        !!isRendering && invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.');
        isRendering = true;
        // Check if this is async work or sync/expired work.
        if (!isYieldy) {
            // Flush work without yielding.
            // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
            // may want to perform some work without yielding, but also without
            // requiring the root to complete (by triggering placeholders).
            var finishedWork = root4.finishedWork;
            if (finishedWork !== null) // This root is already complete. We can commit it.
            completeRoot(root4, finishedWork, expirationTime);
            else {
                root4.finishedWork = null;
                // If this root previously suspended, clear its existing timeout, since
                // we're about to try rendering again.
                var timeoutHandle = root4.timeoutHandle;
                if (timeoutHandle !== noTimeout) {
                    root4.timeoutHandle = noTimeout;
                    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
                    cancelTimeout(timeoutHandle);
                }
                renderRoot(root4, isYieldy);
                finishedWork = root4.finishedWork;
                if (finishedWork !== null) // We've completed the root. Commit it.
                completeRoot(root4, finishedWork, expirationTime);
            }
        } else {
            // Flush async work.
            var _finishedWork = root4.finishedWork;
            if (_finishedWork !== null) // This root is already complete. We can commit it.
            completeRoot(root4, _finishedWork, expirationTime);
            else {
                root4.finishedWork = null;
                // If this root previously suspended, clear its existing timeout, since
                // we're about to try rendering again.
                var _timeoutHandle = root4.timeoutHandle;
                if (_timeoutHandle !== noTimeout) {
                    root4.timeoutHandle = noTimeout;
                    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
                    cancelTimeout(_timeoutHandle);
                }
                renderRoot(root4, isYieldy);
                _finishedWork = root4.finishedWork;
                if (_finishedWork !== null) {
                    // We've completed the root. Check the if we should yield one more time
                    // before committing.
                    if (!shouldYieldToRenderer()) // Still time left. Commit the root.
                    completeRoot(root4, _finishedWork, expirationTime);
                    else // There's no time left. Mark this root as complete. We'll come
                    // back and commit it later.
                    root4.finishedWork = _finishedWork;
                }
            }
        }
        isRendering = false;
    }
    function completeRoot(root4, finishedWork, expirationTime) {
        // Check if there's a batch that matches this expiration time.
        var firstBatch = root4.firstBatch;
        if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
            if (completedBatches === null) completedBatches = [
                firstBatch
            ];
            else completedBatches.push(firstBatch);
            if (firstBatch._defer) {
                // This root is blocked from committing by a batch. Unschedule it until
                // we receive another update.
                root4.finishedWork = finishedWork;
                root4.expirationTime = NoWork;
                return;
            }
        }
        // Commit the root.
        root4.finishedWork = null;
        // Check if this is a nested update (a sync update scheduled during the
        // commit phase).
        if (root4 === lastCommittedRootDuringThisBatch) // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
        else {
            // Reset whenever we switch roots.
            lastCommittedRootDuringThisBatch = root4;
            nestedUpdateCount = 0;
        }
        scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function() {
            commitRoot(root4, finishedWork);
        });
    }
    function onUncaughtError(error) {
        !(nextFlushedRoot !== null) && invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.');
        // Unschedule this root so we don't work on it again until there's
        // another update.
        nextFlushedRoot.expirationTime = NoWork;
        if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
        }
    }
    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function batchedUpdates$1(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return fn(a);
        } finally{
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) performSyncWork();
        }
    }
    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;
            try {
                return fn(a);
            } finally{
                isUnbatchingUpdates = false;
            }
        }
        return fn(a);
    }
    // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.
    function flushSync(fn, a) {
        !!isRendering && invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.');
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return syncUpdates(fn, a);
        } finally{
            isBatchingUpdates = previousIsBatchingUpdates;
            performSyncWork();
        }
    }
    function interactiveUpdates$1(fn, a, b) {
        // If there are any pending interactive updates, synchronously flush them.
        // This needs to happen before we read any handlers, because the effect of
        // the previous event may influence which handlers are called during
        // this event.
        if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
            // Synchronously flush pending interactive updates.
            performWork(lowestPriorityPendingInteractiveExpirationTime, false);
            lowestPriorityPendingInteractiveExpirationTime = NoWork;
        }
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority, function() {
                return fn(a, b);
            });
        } finally{
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) performSyncWork();
        }
    }
    function flushInteractiveUpdates$1() {
        if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
            // Synchronously flush pending interactive updates.
            performWork(lowestPriorityPendingInteractiveExpirationTime, false);
            lowestPriorityPendingInteractiveExpirationTime = NoWork;
        }
    }
    function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            syncUpdates(fn);
        } finally{
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) performSyncWork();
        }
    }
    // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.
    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            warningWithoutStack$1(false, "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(expirationTime);
        // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            !(typeof callback === 'function') && warningWithoutStack$1(false, "render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        flushPassiveEffects();
        enqueueUpdate(current$$1, update);
        scheduleWork(current$$1, expirationTime);
        return expirationTime;
    }
    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        // TODO: If this is a nested container, this won't be the root.
        var current$$1 = container.current;
        if (ReactFiberInstrumentation_1.debugTool) {
            if (current$$1.alternate === null) ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
            else if (element === null) ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
            else ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }
    function findHostInstance(component) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') invariant(false, 'Unable to find node on an unmounted component.');
            else invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') invariant(false, 'Unable to find node on an unmounted component.');
            else invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference.\n%s\n\nLearn more about using refs safely here:\nhttps://fb.me/react-strict-mode-find-node", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                else warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference.\n%s\n\nLearn more about using refs safely here:\nhttps://fb.me/react-strict-mode-find-node", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, isConcurrent, hydrate) {
        return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        var current$$1 = container.current;
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, current$$1);
        return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var overrideProps = null;
    var copyWithSetImpl = function(obj, path, idx, value) {
        if (idx >= path.length) return value;
        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        flushPassiveEffects();
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleWork(fiber, Sync);
    };
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals(_assign({
        }, devToolsConfig, {
            overrideProps: overrideProps,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: function(fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) return null;
                return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
                if (!findFiberByHostInstance) // Might not be implemented by the renderer.
                return null;
                return findFiberByHostInstance(instance);
            }
        }));
    }
    // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.
    function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '16.8.6';
    // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') warningWithoutStack$1(false, "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) !(hostInstance.parentNode === container) && warningWithoutStack$1(false, "render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        !(!hasNonRootReactChild || isRootRenderedBySomeReact) && warningWithoutStack$1(false, "render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') && warningWithoutStack$1(false, "render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    warnOnInvalidCallback = function(callback, callerName) {
        !(callback === null || typeof callback === 'function') && warningWithoutStack$1(false, "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    };
    setRestoreImplementation(restoreControlledState$1);
    function ReactBatch(root4) {
        var expirationTime = computeUniqueAsyncExpiration();
        this._expirationTime = expirationTime;
        this._root = root4;
        this._next = null;
        this._callbacks = null;
        this._didComplete = false;
        this._hasChildren = false;
        this._children = null;
        this._defer = true;
    }
    ReactBatch.prototype.render = function(children) {
        !this._defer && invariant(false, 'batch.render: Cannot render a batch that already committed.');
        this._hasChildren = true;
        this._children = children;
        var internalRoot = this._root._internalRoot;
        var expirationTime = this._expirationTime;
        var work = new ReactWork();
        updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
        return work;
    };
    ReactBatch.prototype.then = function(onComplete1) {
        if (this._didComplete) {
            onComplete1();
            return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) callbacks = this._callbacks = [];
        callbacks.push(onComplete1);
    };
    ReactBatch.prototype.commit = function() {
        var internalRoot = this._root._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        !(this._defer && firstBatch !== null) && invariant(false, 'batch.commit: Cannot commit a batch multiple times.');
        if (!this._hasChildren) {
            // This batch is empty. Return.
            this._next = null;
            this._defer = false;
            return;
        }
        var expirationTime = this._expirationTime;
        // Ensure this is the first batch in the list.
        if (firstBatch !== this) {
            // This batch is not the earliest batch. We need to move it to the front.
            // Update its expiration time to be the expiration time of the earliest
            // batch, so that we can flush it without flushing the other batches.
            if (this._hasChildren) {
                expirationTime = this._expirationTime = firstBatch._expirationTime;
                // Rendering this batch again ensures its children will be the final state
                // when we flush (updates are processed in insertion order: last
                // update wins).
                // TODO: This forces a restart. Should we print a warning?
                this.render(this._children);
            }
            // Remove the batch from the list.
            var previous = null;
            var batch = firstBatch;
            while(batch !== this){
                previous = batch;
                batch = batch._next;
            }
            !(previous !== null) && invariant(false, 'batch.commit: Cannot commit a batch multiple times.');
            previous._next = batch._next;
            // Add it to the front.
            this._next = firstBatch;
            firstBatch = internalRoot.firstBatch = this;
        }
        // Synchronously flush all the work up to this batch's expiration time.
        this._defer = false;
        flushRoot(internalRoot, expirationTime);
        // Pop the batch from the list.
        var next = this._next;
        this._next = null;
        firstBatch = internalRoot.firstBatch = next;
        // Append the next earliest batch's children to the update queue.
        if (firstBatch !== null && firstBatch._hasChildren) firstBatch.render(firstBatch._children);
    };
    ReactBatch.prototype._onComplete = function() {
        if (this._didComplete) return;
        this._didComplete = true;
        var callbacks = this._callbacks;
        if (callbacks === null) return;
        // TODO: Error handling.
        for(var i = 0; i < callbacks.length; i++){
            var _callback = callbacks[i];
            _callback();
        }
    };
    function ReactWork() {
        this._callbacks = null;
        this._didCommit = false;
        // TODO: Avoid need to bind by replacing callbacks in the update queue with
        // list of Work objects.
        this._onCommit = this._onCommit.bind(this);
    }
    ReactWork.prototype.then = function(onCommit1) {
        if (this._didCommit) {
            onCommit1();
            return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) callbacks = this._callbacks = [];
        callbacks.push(onCommit1);
    };
    ReactWork.prototype._onCommit = function() {
        if (this._didCommit) return;
        this._didCommit = true;
        var callbacks = this._callbacks;
        if (callbacks === null) return;
        // TODO: Error handling.
        for(var i = 0; i < callbacks.length; i++){
            var _callback2 = callbacks[i];
            !(typeof _callback2 === 'function') && invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2);
            _callback2();
        }
    };
    function ReactRoot(container, isConcurrent, hydrate) {
        var root4 = createContainer(container, isConcurrent, hydrate);
        this._internalRoot = root4;
    }
    ReactRoot.prototype.render = function(children, callback) {
        var root4 = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        warnOnInvalidCallback(callback, 'render');
        if (callback !== null) work.then(callback);
        updateContainer(children, root4, null, work._onCommit);
        return work;
    };
    ReactRoot.prototype.unmount = function(callback) {
        var root4 = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        warnOnInvalidCallback(callback, 'render');
        if (callback !== null) work.then(callback);
        updateContainer(null, root4, null, work._onCommit);
        return work;
    };
    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function(parentComponent, children, callback) {
        var root4 = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        warnOnInvalidCallback(callback, 'render');
        if (callback !== null) work.then(callback);
        updateContainer(children, root4, parentComponent, work._onCommit);
        return work;
    };
    ReactRoot.prototype.createBatch = function() {
        var batch = new ReactBatch(this);
        var expirationTime = batch._expirationTime;
        var internalRoot = this._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        if (firstBatch === null) {
            internalRoot.firstBatch = batch;
            batch._next = null;
        } else {
            // Insert sorted by expiration time then insertion order
            var insertAfter = null;
            var insertBefore1 = firstBatch;
            while(insertBefore1 !== null && insertBefore1._expirationTime >= expirationTime){
                insertAfter = insertBefore1;
                insertBefore1 = insertBefore1._next;
            }
            batch._next = insertBefore1;
            if (insertAfter !== null) insertAfter._next = batch;
        }
        return batch;
    };
    /**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */ function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling = void 0;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    warningWithoutStack$1(false, "render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            lowPriorityWarning$1(false, "render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        // Legacy roots are not async by default.
        var isConcurrent = false;
        return new ReactRoot(container, isConcurrent, shouldHydrate);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        // TODO: Without `any` type, Flow says "Property cannot be accessed on any
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root4._internalRoot);
                    originalCallback.call(instance);
                };
            }
            // Initial mount should not be batched.
            unbatchedUpdates(function() {
                if (parentComponent != null) root4.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
                else root4.render(children, callback);
            });
        } else {
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root4._internalRoot);
                    _originalCallback.call(instance);
                };
            }
            // Update
            if (parentComponent != null) root4.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
            else root4.render(children, callback);
        }
        return getPublicRootInstance(root4._internalRoot);
    }
    function createPortal$$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        !isValidContainer(container) && invariant(false, 'Target container is not a DOM element.');
        // TODO: pass ReactDOM portal implementation as third argument
        return createPortal$1(children, container, null, key);
    }
    var ReactDOM = {
        createPortal: createPortal$$1,
        findDOMNode: function(componentOrElement) {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                !warnedAboutRefsInRender && warningWithoutStack$1(false, "%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
                owner.stateNode._warnedAboutRefsInRender = true;
            }
            if (componentOrElement == null) return null;
            if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
            return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
        },
        hydrate: function(element, container, callback) {
            !isValidContainer(container) && invariant(false, 'Target container is not a DOM element.');
            !!container._reactHasBeenPassedToCreateRootDEV && warningWithoutStack$1(false, "You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.%s(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?", enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot');
            // TODO: throw or warn if we couldn't hydrate?
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        },
        render: function(element, container, callback) {
            !isValidContainer(container) && invariant(false, 'Target container is not a DOM element.');
            !!container._reactHasBeenPassedToCreateRootDEV && warningWithoutStack$1(false, "You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.%s(). This is not supported. Did you mean to call root.render(element)?", enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot');
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        },
        unstable_renderSubtreeIntoContainer: function(parentComponent, element, containerNode, callback) {
            !isValidContainer(containerNode) && invariant(false, 'Target container is not a DOM element.');
            !(parentComponent != null && has(parentComponent)) && invariant(false, 'parentComponent must be a valid React Component');
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        },
        unmountComponentAtNode: function(container) {
            !isValidContainer(container) && invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.');
            !!container._reactHasBeenPassedToCreateRootDEV && warningWithoutStack$1(false, "You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?", enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot');
            if (container._reactRootContainer) {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                !!renderedByDifferentReact && warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                // Unmount should not be batched.
                unbatchedUpdates(function() {
                    legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                        container._reactRootContainer = null;
                    });
                });
                // If you call unmountComponentAtNode twice in quick succession, you'll
                // get `true` twice. That's probably fine?
                return true;
            } else {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                // Check if the container itself is a React root node.
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                !!hasNonRootReactChild && warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                return false;
            }
        },
        // Temporary alias since we already shipped React 16 RC with it.
        // TODO: remove in React 17.
        unstable_createPortal: function() {
            if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                lowPriorityWarning$1(false, "The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
            }
            return createPortal$$1.apply(undefined, arguments);
        },
        unstable_batchedUpdates: batchedUpdates$1,
        unstable_interactiveUpdates: interactiveUpdates$1,
        flushSync: flushSync,
        unstable_createRoot: createRoot,
        unstable_flushControlled: flushControlled,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
            // Keep in sync with ReactDOMUnstableNativeDependencies.js
            // and ReactTestUtils.js. This is an array for better minification.
            Events: [
                getInstanceFromNode$1,
                getNodeFromInstance$1,
                getFiberCurrentPropsFromNode$1,
                injection.injectEventPluginsByName,
                eventNameDispatchConfigs,
                accumulateTwoPhaseDispatches,
                accumulateDirectDispatches,
                enqueueStateRestore,
                restoreStateIfNeeded,
                dispatchEvent,
                runEventsInBatch
            ]
        }
    };
    function createRoot(container, options) {
        var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
        !isValidContainer(container) && invariant(false, '%s(...): Target container is not a DOM element.', functionName);
        !!container._reactRootContainer && warningWithoutStack$1(false, "You are calling ReactDOM.%s() on a container that was previously passed to ReactDOM.render(). This is not supported.", enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot');
        container._reactHasBeenPassedToCreateRootDEV = true;
        var hydrate = options != null && options.hydrate === true;
        return new ReactRoot(container, true, hydrate);
    }
    if (enableStableConcurrentModeAPIs) {
        ReactDOM.createRoot = createRoot;
        ReactDOM.unstable_createRoot = undefined;
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol;
            // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    var ReactDOM$2 = Object.freeze({
        default: ReactDOM
    });
    var ReactDOM$3 = ReactDOM$2 && ReactDOM || ReactDOM$2;
    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var reactDom = ReactDOM$3.default || ReactDOM$3;
    module.exports = reactDom;
})();

},{"react":"6TuXu","object-assign":"jzTFF","prop-types/checkPropTypes":"3evPV","scheduler":"lS3J3","scheduler/tracing":"aEthe"}],"6TuXu":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"9WG5J"}],"9WG5J":[function(require,module,exports) {
/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    var checkPropTypes = require('prop-types/checkPropTypes');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '16.8.6';
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var validateFormat = function() {
    };
    validateFormat = function(format) {
        if (format === undefined) throw new Error('invariant requires an error message argument');
    };
    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);
        if (!condition) {
            var error = void 0;
            if (format === undefined) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
                var args = [
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                ];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function() {
                    return args[argIndex++];
                }));
                error.name = 'Invariant Violation';
            }
            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
        }
    }
    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.
    /**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var lowPriorityWarning = function() {
    };
    var printWarning = function(format) {
        for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.warn(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    lowPriorityWarning = function(condition, format) {
        if (format === undefined) throw new Error("`lowPriorityWarning(condition, format, ...args)` requires a warning message argument");
        if (!condition) {
            for(var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++)args[_key2 - 2] = arguments[_key2];
            printWarning.apply(undefined, [
                format
            ].concat(args));
        }
    };
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var warningWithoutStack = function() {
    };
    warningWithoutStack = function(condition, format) {
        for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
        if (format === undefined) throw new Error("`warningWithoutStack(condition, format, ...args)` requires a warning message argument");
        if (args.length > 8) // Check before the condition to catch violations early.
        throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        if (condition) return;
        if (typeof console !== 'undefined') {
            var argsWithFormat = args.map(function(item) {
                return '' + item;
            });
            argsWithFormat.unshift('Warning: ' + format);
            // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            Function.prototype.apply.call(console.error, console, argsWithFormat);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function() {
                return args[argIndex++];
            });
            throw new Error(message);
        } catch (x) {
        }
    };
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) && invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.');
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    var describeComponentFrame = function(name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            // In DEV, include code for a common special case:
            // prefer "folder/index.js" instead of just "index.js".
            if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                        fileName = folderName + '/' + fileName;
                    }
                }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        } else if (ownerName) sourceInfo = ' (created by ' + ownerName + ')';
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };
    var Resolved = 1;
    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') warningWithoutStack$1(false, "Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_CONCURRENT_MODE_TYPE:
                return 'ConcurrentMode';
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return 'Context.Consumer';
            case REACT_PROVIDER_TYPE:
                return 'Context.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_LAZY_TYPE:
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) return getComponentName(resolvedThenable);
        }
        return null;
    }
    var ReactDebugCurrentFrame = {
    };
    var currentlyValidatingElement = null;
    function setCurrentlyValidatingElement(element) {
        currentlyValidatingElement = element;
    }
    // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = '';
        // Add an extra top frame while an element is being validated
        if (currentlyValidatingElement) {
            var name = getComponentName(currentlyValidatingElement.type);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        }
        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentOwner: ReactCurrentOwner,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {
        }
    });
    /**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var warning = warningWithoutStack$1;
    warning = function(condition, format) {
        if (condition) return;
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args
        for(var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
        warningWithoutStack$1.apply(undefined, [
            false,
            format + '%s'
        ].concat(args, [
            stack
        ]));
    };
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                warningWithoutStack$1(false, "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                warningWithoutStack$1(false, "%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        };
        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName = void 0;
        // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) ref = config.ref;
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source;
            // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        }
        // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */ function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        !!(element === null || element === undefined) && invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element);
        var propName = void 0;
        // Original props are copied
        var props = _assign({
        }, element.props);
        // Reserved names are extracted
        var key = element.key;
        var ref = element.ref;
        // Self is preserved since the owner is preserved.
        var self = element._self;
        // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source;
        // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
            // Remaining properties override existing props
            var defaultProps = void 0;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }
    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
        } else return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
        };
    }
    function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;
        if (traverseContextPool.length < POOL_SIZE) traverseContextPool.push(traverseContext);
    }
    /**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */ function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows.
            nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
        }
        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                // Warn about using Maps as children
                if (iteratorFn === children.entries) {
                    !didWarnAboutMaps && warning$1(false, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(children);
                var step = void 0;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getComponentKey(child, ii++);
                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
            } else if (type === 'object') {
                var addendum = '';
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
                var childrenString = '' + children;
                invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
            }
        }
        return subtreeCount;
    }
    /**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */ function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) return 0;
        return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getComponentKey(component, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof component === 'object' && component !== null && component.key != null) // Explicit key
        return escape(component.key);
        // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func, context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) return children;
        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
    }
    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);
        if (Array.isArray(mappedChild)) mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
            return c;
        });
        else if (mappedChild != null) {
            if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
            result.push(mappedChild);
        }
    }
    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';
        if (prefix != null) escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        return traverseAllChildren(children, function() {
            return null;
        }, null);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
        });
        return result;
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        !isValidElement(children) && invariant(false, 'React.Children.only expected to receive a single React element child.');
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else !(calculateChangedBits === null || typeof calculateChangedBits === 'function') && warningWithoutStack$1(false, "createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        warning$1(false, "Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        warning$1(false, "Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    function lazy(ctor) {
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            // React uses these fields to store the result.
            _status: -1,
            _result: null
        };
        // In production, this would just set it on the object.
        var defaultProps = void 0;
        var propTypes = void 0;
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    warning$1(false, "React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    // Match production behavior more closely:
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    warning$1(false, "React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    // Match production behavior more closely:
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) warningWithoutStack$1(false, "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else !// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
        (render.length === 0 || render.length === 2) && warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) !(render.defaultProps == null && render.propTypes == null) && warningWithoutStack$1(false, "forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
    }
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) warningWithoutStack$1(false, "memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        return {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        !(dispatcher !== null) && invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        !(unstable_observedBits === undefined) && warning$1(false, "useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : '');
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context;
            // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) warning$1(false, "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) warning$1(false, "Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, inputs);
    }
    function useLayoutEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, inputs);
    }
    function useCallback(callback, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, inputs);
    }
    function useMemo(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, inputs);
    }
    function useImperativeHandle(ref, create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, inputs);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    /**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */ var propTypesMisspellWarningShown = void 0;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
            var source = elementProps.__source;
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
        setCurrentlyValidatingElement(element);
        warning$1(false, "Each child in a list should have a unique \"key\" prop.%s%s See https://fb.me/react-warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step = void 0;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var name = getComponentName(type);
        var propTypes = void 0;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            setCurrentlyValidatingElement(element);
            checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
            setCurrentlyValidatingElement(null);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function') !type.getDefaultProps.isReactClassApproved && warningWithoutStack$1(false, "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        setCurrentlyValidatingElement(fragment);
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                warning$1(false, "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                break;
            }
        }
        if (fragment.ref !== null) warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
        setCurrentlyValidatingElement(null);
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString = void 0;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            warning$1(false, "React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments);
        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
        // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                lowPriorityWarning$1(false, "Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;
    var React = {
        Children: {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray,
            only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        lazy: lazy,
        memo: memo,
        useCallback: useCallback,
        useContext: useContext,
        useEffect: useEffect,
        useImperativeHandle: useImperativeHandle,
        useDebugValue: useDebugValue,
        useLayoutEffect: useLayoutEffect,
        useMemo: useMemo,
        useReducer: useReducer,
        useRef: useRef,
        useState: useState,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        Suspense: REACT_SUSPENSE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
        unstable_Profiler: REACT_PROFILER_TYPE,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };
    // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.
    if (enableStableConcurrentModeAPIs) {
        React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        React.Profiler = REACT_PROFILER_TYPE;
        React.unstable_ConcurrentMode = undefined;
        React.unstable_Profiler = undefined;
    }
    var React$2 = Object.freeze({
        default: React
    });
    var React$3 = React$2 && React || React$2;
    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;
    module.exports = react;
})();

},{"object-assign":"jzTFF","prop-types/checkPropTypes":"3evPV"}],"jzTFF":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"3evPV":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"lYuBM"}],"lYuBM":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"lS3J3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"9ljDM"}],"9ljDM":[function(require,module,exports) {
var global = arguments[3];
/** @license React v0.13.6
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var enableSchedulerDebugging = false;
    /* eslint-disable no-var */ // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;
    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;
    var currentDidTimeout = false;
    // Pausing the scheduler is useful for debugging.
    var isSchedulerPaused = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;
    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    function ensureHostCallbackIsScheduled() {
        if (isExecutingCallback) // Don't schedule work yet; wait until the next time we yield.
        return;
        // Schedule the host callback using the earliest expiration in the list.
        var expirationTime = firstCallbackNode.expirationTime;
        if (!isHostCallbackScheduled) isHostCallbackScheduled = true;
        else // Cancel the existing host callback.
        cancelHostCallback();
        requestHostCallback(flushWork, expirationTime);
    }
    function flushFirstCallback() {
        var flushedNode = firstCallbackNode;
        // Remove the node from the list before calling the callback. That way the
        // list is in a consistent state even if the callback throws.
        var next = firstCallbackNode.next;
        if (firstCallbackNode === next) {
            // This is the last callback in the list.
            firstCallbackNode = null;
            next = null;
        } else {
            var lastCallbackNode = firstCallbackNode.previous;
            firstCallbackNode = lastCallbackNode.next = next;
            next.previous = lastCallbackNode;
        }
        flushedNode.next = flushedNode.previous = null;
        // Now it's safe to call the callback.
        var callback = flushedNode.callback;
        var expirationTime = flushedNode.expirationTime;
        var priorityLevel = flushedNode.priorityLevel;
        var previousPriorityLevel = currentPriorityLevel;
        var previousExpirationTime = currentExpirationTime;
        currentPriorityLevel = priorityLevel;
        currentExpirationTime = expirationTime;
        var continuationCallback;
        try {
            continuationCallback = callback();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
            currentExpirationTime = previousExpirationTime;
        }
        // A callback may return a continuation. The continuation should be scheduled
        // with the same priority and expiration as the just-finished callback.
        if (typeof continuationCallback === 'function') {
            var continuationNode = {
                callback: continuationCallback,
                priorityLevel: priorityLevel,
                expirationTime: expirationTime,
                next: null,
                previous: null
            };
            // Insert the new callback into the list, sorted by its expiration. This is
            // almost the same as the code in `scheduleCallback`, except the callback
            // is inserted into the list *before* callbacks of equal expiration instead
            // of after.
            if (firstCallbackNode === null) // This is the first callback in the list.
            firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
            else {
                var nextAfterContinuation = null;
                var node = firstCallbackNode;
                do {
                    if (node.expirationTime >= expirationTime) {
                        // This callback expires at or after the continuation. We will insert
                        // the continuation *before* this callback.
                        nextAfterContinuation = node;
                        break;
                    }
                    node = node.next;
                }while (node !== firstCallbackNode)
                if (nextAfterContinuation === null) // No equal or lower priority callback was found, which means the new
                // callback is the lowest priority callback in the list.
                nextAfterContinuation = firstCallbackNode;
                else if (nextAfterContinuation === firstCallbackNode) {
                    // The new callback is the highest priority callback in the list.
                    firstCallbackNode = continuationNode;
                    ensureHostCallbackIsScheduled();
                }
                var previous = nextAfterContinuation.previous;
                previous.next = nextAfterContinuation.previous = continuationNode;
                continuationNode.next = nextAfterContinuation;
                continuationNode.previous = previous;
            }
        }
    }
    function flushImmediateWork() {
        if (// Confirm we've exited the outer most event handler
        currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
            isExecutingCallback = true;
            try {
                do flushFirstCallback();
                while (// Keep flushing until there are no more immediate callbacks
                firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority)
            } finally{
                isExecutingCallback = false;
                if (firstCallbackNode !== null) // There's still work remaining. Request another callback.
                ensureHostCallbackIsScheduled();
                else isHostCallbackScheduled = false;
            }
        }
    }
    function flushWork(didTimeout) {
        // Exit right away if we're currently paused
        if (enableSchedulerDebugging && isSchedulerPaused) return;
        isExecutingCallback = true;
        var previousDidTimeout = currentDidTimeout;
        currentDidTimeout = didTimeout;
        try {
            if (didTimeout) // Flush all the expired callbacks without yielding.
            while(firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)){
                // TODO Wrap in feature flag
                // Read the current time. Flush all the callbacks that expire at or
                // earlier than that time. Then read the current time again and repeat.
                // This optimizes for as few performance.now calls as possible.
                var currentTime = exports.unstable_now();
                if (firstCallbackNode.expirationTime <= currentTime) {
                    do flushFirstCallback();
                    while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused))
                    continue;
                }
                break;
            }
            else {
                // Keep flushing callbacks until we run out of time in the frame.
                if (firstCallbackNode !== null) do {
                    if (enableSchedulerDebugging && isSchedulerPaused) break;
                    flushFirstCallback();
                }while (firstCallbackNode !== null && !shouldYieldToHost())
            }
        } finally{
            isExecutingCallback = false;
            currentDidTimeout = previousDidTimeout;
            if (firstCallbackNode !== null) // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
            else isHostCallbackScheduled = false;
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = exports.unstable_now();
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel = void 0;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = exports.unstable_now();
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            var previousEventStartTime = currentEventStartTime;
            currentPriorityLevel = parentPriorityLevel;
            currentEventStartTime = exports.unstable_now();
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
                currentEventStartTime = previousEventStartTime;
                flushImmediateWork();
            }
        };
    }
    function unstable_scheduleCallback(callback, deprecated_options) {
        var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();
        var expirationTime;
        if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
        else switch(currentPriorityLevel){
            case ImmediatePriority:
                expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                expirationTime = startTime + USER_BLOCKING_PRIORITY;
                break;
            case IdlePriority:
                expirationTime = startTime + IDLE_PRIORITY;
                break;
            case LowPriority:
                expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
        var newNode = {
            callback: callback,
            priorityLevel: currentPriorityLevel,
            expirationTime: expirationTime,
            next: null,
            previous: null
        };
        // Insert the new callback into the list, ordered first by expiration, then
        // by insertion. So the new callback is inserted any other callback with
        // equal expiration.
        if (firstCallbackNode === null) {
            // This is the first callback in the list.
            firstCallbackNode = newNode.next = newNode.previous = newNode;
            ensureHostCallbackIsScheduled();
        } else {
            var next = null;
            var node = firstCallbackNode;
            do {
                if (node.expirationTime > expirationTime) {
                    // The new callback expires before this one.
                    next = node;
                    break;
                }
                node = node.next;
            }while (node !== firstCallbackNode)
            if (next === null) // No callback with a later expiration was found, which means the new
            // callback has the latest expiration in the list.
            next = firstCallbackNode;
            else if (next === firstCallbackNode) {
                // The new callback has the earliest expiration in the entire list.
                firstCallbackNode = newNode;
                ensureHostCallbackIsScheduled();
            }
            var previous = next.previous;
            previous.next = next.previous = newNode;
            newNode.next = next;
            newNode.previous = previous;
        }
        return newNode;
    }
    function unstable_pauseExecution() {
        isSchedulerPaused = true;
    }
    function unstable_continueExecution() {
        isSchedulerPaused = false;
        if (firstCallbackNode !== null) ensureHostCallbackIsScheduled();
    }
    function unstable_getFirstCallbackNode() {
        return firstCallbackNode;
    }
    function unstable_cancelCallback(callbackNode) {
        var next = callbackNode.next;
        if (next === null) // Already cancelled.
        return;
        if (next === callbackNode) // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
        else {
            // Remove the callback from its position in the list.
            if (callbackNode === firstCallbackNode) firstCallbackNode = next;
            var previous = callbackNode.previous;
            previous.next = next;
            next.previous = previous;
        }
        callbackNode.next = callbackNode.previous = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    function unstable_shouldYield() {
        return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    }
    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;
    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;
    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function(callback) {
        // schedule rAF and also a setTimeout
        rAFID = localRequestAnimationFrame(function(timestamp) {
            // cancel the setTimeout
            localClearTimeout(rAFTimeoutID);
            callback(timestamp);
        });
        rAFTimeoutID = localSetTimeout(function() {
            // cancel the requestAnimationFrame
            localCancelAnimationFrame(rAFID);
            callback(exports.unstable_now());
        }, ANIMATION_FRAME_TIMEOUT);
    };
    if (hasNativePerformanceNow) {
        var Performance1 = performance;
        exports.unstable_now = function() {
            return Performance1.now();
        };
    } else exports.unstable_now = function() {
        return localDate.now();
    };
    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;
    var globalValue = null;
    if (typeof window !== 'undefined') globalValue = window;
    else if (typeof global !== 'undefined') globalValue = global;
    if (globalValue && globalValue._schedMock) {
        // Dynamic injection, only for testing purposes.
        var globalImpl = globalValue._schedMock;
        requestHostCallback = globalImpl[0];
        cancelHostCallback = globalImpl[1];
        shouldYieldToHost = globalImpl[2];
        exports.unstable_now = globalImpl[3];
    } else if (// If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _flushCallback = function(didTimeout) {
            if (_callback !== null) try {
                _callback(didTimeout);
            } finally{
                _callback = null;
            }
        };
        requestHostCallback = function(cb, ms) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0, false);
            }
        };
        cancelHostCallback = function() {
            _callback = null;
        };
        shouldYieldToHost = function() {
            return false;
        };
    } else {
        if (typeof console !== 'undefined') {
            // TODO: Remove fb.me link
            if (typeof localRequestAnimationFrame !== 'function') console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            if (typeof localCancelAnimationFrame !== 'function') console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
        }
        var scheduledHostCallback = null;
        var isMessageEventScheduled = false;
        var timeoutTime = -1;
        var isAnimationFrameScheduled = false;
        var isFlushingHostCallback = false;
        var frameDeadline = 0;
        // We start out assuming that we run at 30fps but then the heuristic tracking
        // will adjust this value to a faster fps if we get more frequent animation
        // frames.
        var previousFrameTime = 33;
        var activeFrameTime = 33;
        shouldYieldToHost = function() {
            return frameDeadline <= exports.unstable_now();
        };
        // We use the postMessage trick to defer idle work until after the repaint.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = function(event) {
            isMessageEventScheduled = false;
            var prevScheduledCallback = scheduledHostCallback;
            var prevTimeoutTime = timeoutTime;
            scheduledHostCallback = null;
            timeoutTime = -1;
            var currentTime = exports.unstable_now();
            var didTimeout = false;
            if (frameDeadline - currentTime <= 0) {
                // There's no time left in this idle period. Check if the callback has
                // a timeout and whether it's been exceeded.
                if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) // Exceeded the timeout. Invoke the callback even though there's no
                // time left.
                didTimeout = true;
                else {
                    // No timeout.
                    if (!isAnimationFrameScheduled) {
                        // Schedule another animation callback so we retry later.
                        isAnimationFrameScheduled = true;
                        requestAnimationFrameWithTimeout(animationTick);
                    }
                    // Exit without invoking the callback.
                    scheduledHostCallback = prevScheduledCallback;
                    timeoutTime = prevTimeoutTime;
                    return;
                }
            }
            if (prevScheduledCallback !== null) {
                isFlushingHostCallback = true;
                try {
                    prevScheduledCallback(didTimeout);
                } finally{
                    isFlushingHostCallback = false;
                }
            }
        };
        var animationTick = function(rafTime) {
            if (scheduledHostCallback !== null) // Eagerly schedule the next animation callback at the beginning of the
            // frame. If the scheduler queue is not empty at the end of the frame, it
            // will continue flushing inside that callback. If the queue *is* empty,
            // then it will exit immediately. Posting the callback at the start of the
            // frame ensures it's fired within the earliest possible frame. If we
            // waited until the end of the frame to post the callback, we risk the
            // browser skipping a frame and not firing the callback until the frame
            // after that.
            requestAnimationFrameWithTimeout(animationTick);
            else {
                // No pending work. Exit.
                isAnimationFrameScheduled = false;
                return;
            }
            var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
            if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
                if (nextFrameTime < 8) // Defensive coding. We don't support higher frame rates than 120hz.
                // If the calculated frame time gets lower than 8, it is probably a bug.
                nextFrameTime = 8;
                // If one frame goes long, then the next one can be short to catch up.
                // If two frames are short in a row, then that's an indication that we
                // actually have a higher frame rate than what we're currently optimizing.
                // We adjust our heuristic dynamically accordingly. For example, if we're
                // running on 120hz display or 90hz VR display.
                // Take the max of the two in case one of them was an anomaly due to
                // missed frame deadlines.
                activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
            } else previousFrameTime = nextFrameTime;
            frameDeadline = rafTime + activeFrameTime;
            if (!isMessageEventScheduled) {
                isMessageEventScheduled = true;
                port.postMessage(undefined);
            }
        };
        requestHostCallback = function(callback, absoluteTimeout) {
            scheduledHostCallback = callback;
            timeoutTime = absoluteTimeout;
            if (isFlushingHostCallback || absoluteTimeout < 0) // Don't wait for the next frame. Continue working ASAP, in a new event.
            port.postMessage(undefined);
            else if (!isAnimationFrameScheduled) {
                // If rAF didn't already schedule one, we need to schedule a frame.
                // TODO: If this rAF doesn't materialize because the browser throttles, we
                // might want to still have setTimeout trigger rIC as a backup to ensure
                // that we keep performing work.
                isAnimationFrameScheduled = true;
                requestAnimationFrameWithTimeout(animationTick);
            }
        };
        cancelHostCallback = function() {
            scheduledHostCallback = null;
            isMessageEventScheduled = false;
            timeoutTime = -1;
        };
    }
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_next = unstable_next;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
})();

},{}],"aEthe":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"jlVvF"}],"jlVvF":[function(require,module,exports) {
/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var DEFAULT_THREAD_ID = 0;
    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;
    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;
    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    if (enableSchedulerTracing) {
        exports.__interactionsRef = {
            current: new Set()
        };
        exports.__subscriberRef = {
            current: null
        };
    }
    function unstable_clear(callback) {
        if (!enableSchedulerTracing) return callback();
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        if (!enableSchedulerTracing) return null;
        else return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) return callback();
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current;
        // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue = void 0;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--;
                        // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) return callback;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
        // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue = void 0;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true;
                    // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    if (enableSchedulerTracing) subscribers = new Set();
    function unstable_subscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.add(subscriber);
            if (subscribers.size === 1) exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                onInteractionTraced: onInteractionTraced,
                onWorkCanceled: onWorkCanceled,
                onWorkScheduled: onWorkScheduled,
                onWorkStarted: onWorkStarted,
                onWorkStopped: onWorkStopped
            };
        }
    }
    function unstable_unsubscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) exports.__subscriberRef.current = null;
        }
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
})();

},{}],"4cRys":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$2cd0 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$2cd0.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LazyProps$1", ()=>LazyProps$1
);
parcelHelpers.export(exports, "LazyProps$1$reflection", ()=>LazyProps$1$reflection
);
parcelHelpers.export(exports, "Components_LazyView$1", ()=>Components_LazyView$1
);
parcelHelpers.export(exports, "Components_LazyView$1$reflection", ()=>Components_LazyView$1$reflection
);
parcelHelpers.export(exports, "Components_LazyView$1_$ctor_Z7829D94B", ()=>Components_LazyView$1_$ctor_Z7829D94B
);
parcelHelpers.export(exports, "Common_lazyViewWith", ()=>Common_lazyViewWith
);
parcelHelpers.export(exports, "Common_lazyView2With", ()=>Common_lazyView2With
);
parcelHelpers.export(exports, "Common_lazyView3With", ()=>Common_lazyView3With
);
parcelHelpers.export(exports, "Common_lazyView", ()=>Common_lazyView
);
parcelHelpers.export(exports, "Common_lazyView2", ()=>Common_lazyView2
);
parcelHelpers.export(exports, "Common_lazyView3", ()=>Common_lazyView3
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _react = require("react");
var _utilJs = require("../fable-library.3.2.10/Util.js");
class LazyProps$1 extends _typesJs.Record {
    constructor(model, render, equal){
        super();
        this.model = model;
        this.render = render;
        this.equal = equal;
    }
}
function LazyProps$1$reflection(gen0) {
    return _reflectionJs.record_type("Elmish.React.LazyProps`1", [
        gen0
    ], LazyProps$1, ()=>[
            [
                "model",
                gen0
            ],
            [
                "render",
                _reflectionJs.lambda_type(_reflectionJs.unit_type, _reflectionJs.class_type("Fable.React.ReactElement"))
            ],
            [
                "equal",
                _reflectionJs.lambda_type(gen0, _reflectionJs.lambda_type(gen0, _reflectionJs.bool_type))
            ]
        ]
    );
}
_c = LazyProps$1$reflection;
class Components_LazyView$1 extends _react.Component {
    constructor(props){
        super(props);
    }
    shouldComponentUpdate(nextProps, _nextState) {
        const this$ = this;
        return !this$.props.equal(this$.props.model, nextProps.model);
    }
    render() {
        const this$ = this;
        return this$.props.render();
    }
}
function Components_LazyView$1$reflection(gen0) {
    return _reflectionJs.class_type("Elmish.React.Components.LazyView`1", [
        gen0
    ], Components_LazyView$1, _reflectionJs.class_type("Fable.React.Component`2", [
        LazyProps$1$reflection(gen0), _reflectionJs.obj_type]));
}
_c1 = Components_LazyView$1$reflection;
function Components_LazyView$1_$ctor_Z7829D94B(props1) {
    return new Components_LazyView$1(props1);
}
_c2 = Components_LazyView$1_$ctor_Z7829D94B;
function Common_lazyViewWith(equal1, view, state) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1(state, ()=>view(state)
    , equal1)));
}
_c3 = Common_lazyViewWith;
function Common_lazyView2With(equal1, view, state, dispatch) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1(state, ()=>view(state, dispatch)
    , equal1)));
}
_c4 = Common_lazyView2With;
function Common_lazyView3With(equal1, view, state1, state2, dispatch) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1([
        state1,
        state2
    ], ()=>view(state1, state2, dispatch)
    , equal1)));
}
_c5 = Common_lazyView3With;
function Common_lazyView(view) {
    return (state)=>Common_lazyViewWith((x, y)=>_utilJs.equals(x, y)
        , view, state)
    ;
}
_c6 = Common_lazyView;
function Common_lazyView2(view) {
    return (state)=>(dispatch)=>Common_lazyView2With((x, y)=>_utilJs.equals(x, y)
            , view, state, dispatch)
    ;
}
_c7 = Common_lazyView2;
function Common_lazyView3(view) {
    return (state1)=>(state2)=>(dispatch)=>Common_lazyView3With((x, y)=>_utilJs.equalArrays(x, y)
                , view, state1, state2, dispatch)
    ;
}
_c8 = Common_lazyView3;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8;
$RefreshReg$(_c, "LazyProps$1$reflection");
$RefreshReg$(_c1, "Components_LazyView$1$reflection");
$RefreshReg$(_c2, "Components_LazyView$1_$ctor_Z7829D94B");
$RefreshReg$(_c3, "Common_lazyViewWith");
$RefreshReg$(_c4, "Common_lazyView2With");
$RefreshReg$(_c5, "Common_lazyView3With");
$RefreshReg$(_c6, "Common_lazyView");
$RefreshReg$(_c7, "Common_lazyView2");
$RefreshReg$(_c8, "Common_lazyView3");

  $parcel$ReactRefreshHelpers$2cd0.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","react":"6TuXu","../fable-library.3.2.10/Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}],"7djJV":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$7024 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$7024.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LazyProps$1", ()=>LazyProps$1
);
parcelHelpers.export(exports, "LazyProps$1$reflection", ()=>LazyProps$1$reflection
);
parcelHelpers.export(exports, "LazyState", ()=>LazyState
);
parcelHelpers.export(exports, "LazyState$reflection", ()=>LazyState$reflection
);
parcelHelpers.export(exports, "Components_LazyView$1", ()=>Components_LazyView$1
);
parcelHelpers.export(exports, "Components_LazyView$1$reflection", ()=>Components_LazyView$1$reflection
);
parcelHelpers.export(exports, "Components_LazyView$1_$ctor_7D66F9C0", ()=>Components_LazyView$1_$ctor_7D66F9C0
);
parcelHelpers.export(exports, "lazyViewWith", ()=>lazyViewWith
);
parcelHelpers.export(exports, "lazyView2With", ()=>lazyView2With
);
parcelHelpers.export(exports, "lazyView3With", ()=>lazyView3With
);
parcelHelpers.export(exports, "lazyView2", ()=>lazyView2
);
parcelHelpers.export(exports, "lazyView3", ()=>lazyView3
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _react = require("react");
var _utilJs = require("../fable-library.3.2.10/Util.js");
class LazyProps$1 extends _typesJs.Record {
    constructor(model, render, equal){
        super();
        this.model = model;
        this.render = render;
        this.equal = equal;
    }
}
function LazyProps$1$reflection(gen0) {
    return _reflectionJs.record_type("Elmish.HMR.Common.LazyProps`1", [
        gen0
    ], LazyProps$1, ()=>[
            [
                "model",
                gen0
            ],
            [
                "render",
                _reflectionJs.lambda_type(_reflectionJs.unit_type, _reflectionJs.class_type("Fable.React.ReactElement"))
            ],
            [
                "equal",
                _reflectionJs.lambda_type(gen0, _reflectionJs.lambda_type(gen0, _reflectionJs.bool_type))
            ]
        ]
    );
}
_c = LazyProps$1$reflection;
class LazyState extends _typesJs.Record {
    constructor(HMRCount){
        super();
        this.HMRCount = HMRCount | 0;
    }
}
function LazyState$reflection() {
    return _reflectionJs.record_type("Elmish.HMR.Common.LazyState", [], LazyState, ()=>[
            [
                "HMRCount", _reflectionJs.int32_type]
        ]
    );
}
_c1 = LazyState$reflection;
class Components_LazyView$1 extends _react.Component {
    constructor(props){
        super(props);
        const hmrCount = (window.Elmish_HMR_Count == null ? 0 : window.Elmish_HMR_Count) | 0;
        this.state = new LazyState(hmrCount);
    }
    shouldComponentUpdate(nextProps, _nextState) {
        const this$ = this;
        if (module.hot == null) return !this$.props.equal(this$.props.model, nextProps.model);
        else {
            const currentHmrCount = window.Elmish_HMR_Count | 0;
            if (currentHmrCount > this$.state.HMRCount) {
                this$.setState((_prevState, _props)=>new LazyState(currentHmrCount)
                );
                return true;
            } else return !this$.props.equal(this$.props.model, nextProps.model);
        }
    }
    render() {
        const this$ = this;
        return this$.props.render();
    }
}
function Components_LazyView$1$reflection(gen0) {
    return _reflectionJs.class_type("Elmish.HMR.Common.Components.LazyView`1", [
        gen0
    ], Components_LazyView$1, _reflectionJs.class_type("Fable.React.Component`2", [
        LazyProps$1$reflection(gen0),
        LazyState$reflection()
    ]));
}
_c2 = Components_LazyView$1$reflection;
function Components_LazyView$1_$ctor_7D66F9C0(props1) {
    return new Components_LazyView$1(props1);
}
_c3 = Components_LazyView$1_$ctor_7D66F9C0;
function lazyViewWith(equal1, view, state) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1(state, ()=>view(state)
    , equal1)));
}
function lazyView2With(equal1, view, state, dispatch) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1(state, ()=>view(state, dispatch)
    , equal1)));
}
function lazyView3With(equal1, view, state1, state2, dispatch) {
    return(/*#__PURE__*/ _react.createElement(Components_LazyView$1, new LazyProps$1([
        state1,
        state2
    ], ()=>view(state1, state2, dispatch)
    , equal1)));
}
function lazyView2(view) {
    return (state)=>(dispatch)=>lazyView2With((x, y)=>_utilJs.equals(x, y)
            , view, state, dispatch)
    ;
}
function lazyView3(view) {
    return (state1)=>(state2)=>(dispatch)=>lazyView3With((x, y)=>_utilJs.equalArrays(x, y)
                , view, state1, state2, dispatch)
    ;
}
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "LazyProps$1$reflection");
$RefreshReg$(_c1, "LazyState$reflection");
$RefreshReg$(_c2, "Components_LazyView$1$reflection");
$RefreshReg$(_c3, "Components_LazyView$1_$ctor_7D66F9C0");

  $parcel$ReactRefreshHelpers$7024.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","react":"6TuXu","../fable-library.3.2.10/Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"eVTNj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "init", ()=>init
);
parcelHelpers.export(exports, "update", ()=>update
);
var _domainFsJs = require("./Domain.fs.js");
var _cmdFsJs = require("./.fable/Fable.Elmish.3.1.0/cmd.fs.js");
var _asyncBuilderJs = require("./.fable/fable-library.3.2.10/AsyncBuilder.js");
var _asyncJs = require("./.fable/fable-library.3.2.10/Async.js");
var _stringJs = require("./.fable/fable-library.3.2.10/String.js");
var _fableI18NextFsJs = require("../Fable.I18Next/Fable.I18Next.fs.js");
function init() {
    return [_domainFsJs.ModelModule_init, _cmdFsJs.Cmd_none()
    ];
}
function delay(msg) {
    return _asyncBuilderJs.singleton.Delay(()=>_asyncBuilderJs.singleton.Bind(_asyncJs.sleep(2000), ()=>_asyncBuilderJs.singleton.Return(msg)
        )
    );
}
function update(msg, currentModel) {
    switch(msg.tag){
        case 3:
            {
                const lang = msg.fields[0];
                _stringJs.toConsole(_stringJs.printf("lang %A"))(lang);
                return [
                    currentModel,
                    _cmdFsJs.Cmd_OfPromise_either((arg00)=>_fableI18NextFsJs.I18n_ChangeLanguage_Z721C83C5(arg00)
                    , _domainFsJs.Languages__get_Key(lang), ()=>new _domainFsJs.Msg(4, lang)
                    , (arg0)=>new _domainFsJs.Msg(5, arg0)
                    )
                ];
            }
        case 4:
            _stringJs.toConsole(_stringJs.printf("changed lang to %A"))(msg.fields[0]);
            return [
                currentModel,
                _cmdFsJs.Cmd_none()
            ];
        case 2:
            return [
                currentModel,
                _cmdFsJs.Cmd_none()
            ];
        case 1:
            return [
                new _domainFsJs.Model(currentModel.CurrentPage, currentModel.ShowQuickView, !currentModel.ShowLoader),
                !currentModel.ShowLoader ? _cmdFsJs.Cmd_OfAsyncWith_perform((x_1)=>{
                    _cmdFsJs.Cmd_OfAsync_start(x_1);
                }, (msg_1)=>delay(msg_1)
                , new _domainFsJs.Msg(1), (x)=>x
                ) : _cmdFsJs.Cmd_none()
            ];
        case 5:
            {
                const arg10_2 = msg.fields[0].message;
                _stringJs.toConsole(_stringJs.printf("Error: %s"))(arg10_2);
                return [
                    currentModel,
                    _cmdFsJs.Cmd_none()
                ];
            }
        default:
            return [
                new _domainFsJs.Model(msg.fields[0], currentModel.ShowQuickView, currentModel.ShowLoader),
                _cmdFsJs.Cmd_none()
            ];
    }
}

},{"./Domain.fs.js":"1rMO5","./.fable/Fable.Elmish.3.1.0/cmd.fs.js":"bqyYR","./.fable/fable-library.3.2.10/AsyncBuilder.js":"7Heoc","./.fable/fable-library.3.2.10/Async.js":"iuOII","./.fable/fable-library.3.2.10/String.js":"baXBU","../Fable.I18Next/Fable.I18Next.fs.js":"8uy8s","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1rMO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Model", ()=>Model
);
parcelHelpers.export(exports, "Model$reflection", ()=>Model$reflection
);
parcelHelpers.export(exports, "ModelModule_init", ()=>ModelModule_init
);
parcelHelpers.export(exports, "Languages", ()=>Languages
);
parcelHelpers.export(exports, "Languages$reflection", ()=>Languages$reflection
);
parcelHelpers.export(exports, "Languages__get_Key", ()=>Languages__get_Key
);
parcelHelpers.export(exports, "Languages__get_GetLogo", ()=>Languages__get_GetLogo
);
parcelHelpers.export(exports, "Msg", ()=>Msg
);
parcelHelpers.export(exports, "Msg$reflection", ()=>Msg$reflection
);
var _typesJs = require("./.fable/fable-library.3.2.10/Types.js");
var _routerFsJs = require("./Router.fs.js");
var _reflectionJs = require("./.fable/fable-library.3.2.10/Reflection.js");
class Model extends _typesJs.Record {
    constructor(CurrentPage, ShowQuickView, ShowLoader){
        super();
        this.CurrentPage = CurrentPage;
        this.ShowQuickView = ShowQuickView;
        this.ShowLoader = ShowLoader;
    }
}
function Model$reflection() {
    return _reflectionJs.record_type("Domain.Model", [], Model, ()=>[
            [
                "CurrentPage",
                _routerFsJs.Page$reflection()
            ],
            [
                "ShowQuickView", _reflectionJs.bool_type],
            [
                "ShowLoader", _reflectionJs.bool_type]
        ]
    );
}
_c = Model$reflection;
const ModelModule_init = new Model(_routerFsJs.defaultPage, false, false);
class Languages extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "EN",
            "DE"
        ];
    }
}
function Languages$reflection() {
    return _reflectionJs.union_type("Domain.Languages", [], Languages, ()=>[
            [],
            []
        ]
    );
}
_c1 = Languages$reflection;
function Languages__get_Key(this$) {
    if (this$.tag === 1) return "de";
    else return "en";
}
_c2 = Languages__get_Key;
function Languages__get_GetLogo(this$) {
    if (this$.tag === 1) return "png/flag-de.png";
    else return "png/flag-en.png";
}
_c3 = Languages__get_GetLogo;
class Msg extends _typesJs.Union {
    constructor(tag1, ...fields1){
        super();
        this.tag = tag1 | 0;
        this.fields = fields1;
    }
    cases() {
        return [
            "UrlChanged",
            "ToggleLoader",
            "SentToast",
            "ChangeLanguage",
            "LanguageChanged",
            "Error"
        ];
    }
}
function Msg$reflection() {
    return _reflectionJs.union_type("Domain.Msg", [], Msg, ()=>[
            [
                [
                    "Item",
                    _routerFsJs.Page$reflection()
                ]
            ],
            [],
            [
                [
                    "Item", _reflectionJs.string_type]
            ],
            [
                [
                    "Item",
                    Languages$reflection()
                ]
            ],
            [
                [
                    "Item",
                    Languages$reflection()
                ]
            ],
            [
                [
                    "Item",
                    _reflectionJs.class_type("System.Exception")
                ]
            ]
        ]
    );
}
_c4 = Msg$reflection;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "Model$reflection");
$RefreshReg$(_c1, "Languages$reflection");
$RefreshReg$(_c2, "Languages__get_Key");
$RefreshReg$(_c3, "Languages__get_GetLogo");
$RefreshReg$(_c4, "Msg$reflection");

},{"./.fable/fable-library.3.2.10/Types.js":"7IOW0","./Router.fs.js":"2wXmW","./.fable/fable-library.3.2.10/Reflection.js":"c0YT4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2wXmW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Page", ()=>Page
);
parcelHelpers.export(exports, "Page$reflection", ()=>Page$reflection
);
parcelHelpers.export(exports, "defaultPage", ()=>defaultPage
);
parcelHelpers.export(exports, "parseUrl", ()=>parseUrl
);
parcelHelpers.export(exports, "getHref", ()=>getHref
);
var _typesJs = require("./.fable/fable-library.3.2.10/Types.js");
var _reflectionJs = require("./.fable/fable-library.3.2.10/Reflection.js");
var _listJs = require("./.fable/fable-library.3.2.10/List.js");
var _routerFsJs = require("./.fable/Feliz.Router.3.8.0/Router.fs.js");
class Page extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "Landing"
        ];
    }
}
function Page$reflection() {
    return _reflectionJs.union_type("Router.Page", [], Page, ()=>[
            []
        ]
    );
}
_c = Page$reflection;
const defaultPage = new Page(0);
function parseUrl(_arg1) {
    let pattern_matching_result;
    if (!_listJs.isEmpty(_arg1)) {
        if (_listJs.head(_arg1) === "") {
            if (_listJs.isEmpty(_listJs.tail(_arg1))) pattern_matching_result = 0;
            else pattern_matching_result = 1;
        } else pattern_matching_result = 1;
    } else pattern_matching_result = 1;
    switch(pattern_matching_result){
        case 0:
            return new Page(0);
        case 1:
            return defaultPage;
    }
}
function getHref(_arg1) {
    return _routerFsJs.RouterModule_encodeParts(_listJs.singleton(""), 1);
}
var _c;
$RefreshReg$(_c, "Page$reflection");

},{"./.fable/fable-library.3.2.10/Types.js":"7IOW0","./.fable/fable-library.3.2.10/Reflection.js":"c0YT4","./.fable/fable-library.3.2.10/List.js":"3UB49","./.fable/Feliz.Router.3.8.0/Router.fs.js":"9QGvh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9QGvh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RouterModule_String_$007CPrefix$007C", ()=>RouterModule_String_$007CPrefix$007C
);
parcelHelpers.export(exports, "RouterModule_String_$007CSuffix$007C", ()=>RouterModule_String_$007CSuffix$007C
);
parcelHelpers.export(exports, "RouterModule_encodeQueryString", ()=>RouterModule_encodeQueryString
);
parcelHelpers.export(exports, "RouterModule_encodeQueryStringInts", ()=>RouterModule_encodeQueryStringInts
);
parcelHelpers.export(exports, "RouterModule_encodeParts", ()=>RouterModule_encodeParts
);
parcelHelpers.export(exports, "RouterModule_trySeparateLast", ()=>RouterModule_trySeparateLast
);
parcelHelpers.export(exports, "RouterModule_nav", ()=>RouterModule_nav
);
parcelHelpers.export(exports, "RouterModule_urlSegments", ()=>RouterModule_urlSegments
);
parcelHelpers.export(exports, "RouterModule_onUrlChange", ()=>RouterModule_onUrlChange
);
parcelHelpers.export(exports, "RouterModule_router", ()=>RouterModule_router
);
parcelHelpers.export(exports, "Route_$007CInt$007C_$007C", ()=>Route_$007CInt$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CInt64$007C_$007C", ()=>Route_$007CInt64$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CGuid$007C_$007C", ()=>Route_$007CGuid$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CNumber$007C_$007C", ()=>Route_$007CNumber$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CDecimal$007C_$007C", ()=>Route_$007CDecimal$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CBool$007C_$007C", ()=>Route_$007CBool$007C_$007C
);
parcelHelpers.export(exports, "Route_$007CQuery$007C_$007C", ()=>Route_$007CQuery$007C_$007C
);
var _stringJs = require("../fable-library.3.2.10/String.js");
var _listJs = require("../fable-library.3.2.10/List.js");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _reactFsJs = require("../Feliz.1.50.0/React.fs.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _listenerFsJs = require("../Feliz.UseListener.0.6.3/Listener.fs.js");
var _int32Js = require("../fable-library.3.2.10/Int32.js");
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _longJs = require("../fable-library.3.2.10/Long.js");
var _guidJs = require("../fable-library.3.2.10/Guid.js");
var _doubleJs = require("../fable-library.3.2.10/Double.js");
var _decimalJs = require("../fable-library.3.2.10/Decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
var _seqJs = require("../fable-library.3.2.10/Seq.js");
var _s = $RefreshSig$();
function RouterModule_String_$007CPrefix$007C(prefix, str) {
    if (str.indexOf(prefix) === 0) return str;
    else return void 0;
}
_c = RouterModule_String_$007CPrefix$007C;
function RouterModule_String_$007CSuffix$007C(suffix, str) {
    if (_stringJs.endsWith(str, suffix)) return str;
    else return void 0;
}
_c1 = RouterModule_String_$007CSuffix$007C;
function RouterModule_encodeQueryString(queryStringPairs) {
    const _arg1 = _stringJs.join("\u0026", _listJs.map((tupledArg)=>_stringJs.join("=", [
            encodeURIComponent(tupledArg[0]),
            encodeURIComponent(tupledArg[1])
        ])
    , queryStringPairs));
    if (_arg1 === "") return "";
    else return "?" + _arg1;
}
_c2 = RouterModule_encodeQueryString;
function RouterModule_encodeQueryStringInts(queryStringIntPairs) {
    const _arg1 = _stringJs.join("\u0026", _listJs.map((tupledArg)=>_stringJs.join("=", [
            encodeURIComponent(tupledArg[0]),
            tupledArg[1]
        ])
    , queryStringIntPairs));
    if (_arg1 === "") return "";
    else return "?" + _arg1;
}
_c3 = RouterModule_encodeQueryStringInts;
function RouterModule_normalizeRoute(routeMode) {
    if (routeMode === 1) return (_arg1)=>{
        let activePatternResult14216, path, activePatternResult14217, path_1, activePatternResult14218, path_2;
        return activePatternResult14216 = RouterModule_String_$007CPrefix$007C("/", _arg1), activePatternResult14216 != null ? (path = activePatternResult14216, "#" + path) : (activePatternResult14217 = RouterModule_String_$007CPrefix$007C("#/", _arg1), activePatternResult14217 != null ? (path_1 = activePatternResult14217, path_1) : (activePatternResult14218 = RouterModule_String_$007CPrefix$007C("#", _arg1), activePatternResult14218 != null ? (path_2 = activePatternResult14218, "#/" + _stringJs.substring(path_2, 1, path_2.length - 1)) : "#/" + _arg1));
    };
    else return (_arg2)=>{
        let activePatternResult14221, path_4;
        return activePatternResult14221 = RouterModule_String_$007CPrefix$007C("/", _arg2), activePatternResult14221 != null ? (path_4 = activePatternResult14221, path_4) : "/" + _arg2;
    };
}
_c4 = RouterModule_normalizeRoute;
function RouterModule_encodeParts(xs, routeMode) {
    return RouterModule_normalizeRoute(routeMode)(_stringJs.join("/", _listJs.map((part)=>{
        if ((part.indexOf("?") >= 0 ? true : part.indexOf("#") === 0) ? true : part.indexOf("/") === 0) return part;
        else return encodeURIComponent(part);
    }, xs)));
}
_c5 = RouterModule_encodeParts;
function RouterModule_trySeparateLast(xs) {
    const matchValue = _listJs.reverse(xs);
    if (!_listJs.isEmpty(matchValue)) {
        if (_listJs.isEmpty(_listJs.tail(matchValue))) return [
            _listJs.empty(),
            _listJs.head(matchValue)
        ];
        else return [
            _listJs.reverse(_listJs.tail(matchValue)),
            _listJs.head(matchValue)
        ];
    } else return void 0;
}
_c6 = RouterModule_trySeparateLast;
function RouterModule_nav(xs, mode, routeMode) {
    if (mode === 1) history.pushState(void 0, "", RouterModule_encodeParts(xs, routeMode));
    else history.replaceState(void 0, "", RouterModule_encodeParts(xs, routeMode));
    const ev = document.createEvent("CustomEvent");
    ev.initEvent("CUSTOM_NAVIGATION_EVENT", true, true);
    window.dispatchEvent(ev);
}
_c7 = RouterModule_nav;
function RouterModule_urlSegments(path, mode) {
    return _listJs.collect((segment)=>{
        if (_stringJs.isNullOrWhiteSpace(segment)) return _listJs.empty();
        else {
            const segment_1 = _stringJs.trimEnd(segment, "#");
            if (segment_1 === "?") return _listJs.empty();
            else if (RouterModule_String_$007CPrefix$007C("?", segment_1) != null) return _listJs.singleton(segment_1);
            else {
                const matchValue = segment_1.split("?");
                if (!_arrayJs.equalsWith((x, y)=>_utilJs.comparePrimitives(x, y)
                , matchValue, null) ? matchValue.length === 1 : false) {
                    const value = matchValue[0];
                    return _listJs.singleton(decodeURIComponent(value));
                } else if (!_arrayJs.equalsWith((x_1, y_1)=>_utilJs.comparePrimitives(x_1, y_1)
                , matchValue, null) ? matchValue.length === 2 : false) {
                    if (matchValue[1] === "") {
                        const value_1 = matchValue[0];
                        return _listJs.singleton(decodeURIComponent(value_1));
                    } else {
                        const value_2 = matchValue[0];
                        const query = matchValue[1];
                        return _listJs.ofArray([
                            decodeURIComponent(value_2),
                            "?" + query
                        ]);
                    }
                } else return _listJs.empty();
            }
        }
    }, _listJs.ofArray(_stringJs.split(RouterModule_String_$007CPrefix$007C("#", path) != null ? _stringJs.substring(path, 1, path.length - 1) : mode === 1 ? RouterModule_String_$007CSuffix$007C("#", path) != null ? "" : RouterModule_String_$007CSuffix$007C("#/", path) != null ? "" : path : path, [
        "/"
    ], null, 0)));
}
_c8 = RouterModule_urlSegments;
function RouterModule_onUrlChange(routeMode, urlChanged, ev) {
    return urlChanged(RouterModule_urlSegments(routeMode === 2 ? window.location.pathname + window.location.search : window.location.hash, routeMode));
}
_c9 = RouterModule_onUrlChange;
const RouterModule_router = _s(_reactFsJs.React_memo_62A0F746(_c10 = _s((input)=>{
    _s();
    const onChange = _reactFsJs.useReact_useCallbackRef_7C4B0DD6((ev)=>{
        const urlChanged = _optionJs.defaultArg(input.onUrlChanged, (value)=>{
        });
        RouterModule_onUrlChange(_optionJs.defaultArg(input.hashMode, 1), urlChanged, ev);
    });
    if (window.navigator.userAgent.indexOf("Trident") >= 0 ? true : window.navigator.userAgent.indexOf("MSIE") >= 0) {
        const eventType = "hashchange";
        const action_1 = (arg00)=>{
            onChange(arg00);
        };
        const options_1 = void 0;
        const addOptions = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_adjustPassive(options_1)
        , [
            options_1
        ]);
        const removeOptions = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_createRemoveOptions(options_1)
        , [
            options_1
        ]);
        const fn = _reactFsJs.useReact_useMemo_CF4EA67(()=>(arg)=>{
                action_1(arg);
            }
        , [
            action_1
        ]);
        _reactFsJs.useReact_useEffect_Z5ECA432F(_reactFsJs.useReact_useCallbackRef_7C4B0DD6(()=>{
            if (addOptions == null) window.addEventListener(eventType, fn);
            else window.addEventListener(eventType, fn, addOptions);
            return _reactFsJs.React_createDisposable_3A5B6456(()=>{
                if (removeOptions == null) window.removeEventListener(eventType, fn);
                else window.removeEventListener(eventType, fn, removeOptions);
            });
        }));
    } else {
        const eventType_1 = "popstate";
        const action_3 = onChange;
        const options_5 = void 0;
        const addOptions_1 = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_adjustPassive(options_5)
        , [
            options_5
        ]);
        const removeOptions_1 = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_createRemoveOptions(options_5)
        , [
            options_5
        ]);
        const fn_1 = _reactFsJs.useReact_useMemo_CF4EA67(()=>(arg_1)=>{
                action_3(arg_1);
            }
        , [
            action_3
        ]);
        _reactFsJs.useReact_useEffect_Z5ECA432F(_reactFsJs.useReact_useCallbackRef_7C4B0DD6(()=>{
            if (addOptions_1 == null) window.addEventListener(eventType_1, fn_1);
            else window.addEventListener(eventType_1, fn_1, addOptions_1);
            return _reactFsJs.React_createDisposable_3A5B6456(()=>{
                if (removeOptions_1 == null) window.removeEventListener(eventType_1, fn_1);
                else window.removeEventListener(eventType_1, fn_1, removeOptions_1);
            });
        }));
    }
    const eventType_2 = "CUSTOM_NAVIGATION_EVENT";
    const action_4 = onChange;
    const options_8 = void 0;
    const addOptions_2 = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_adjustPassive(options_8)
    , [
        options_8
    ]);
    const removeOptions_2 = _reactFsJs.useReact_useMemo_CF4EA67(()=>_listenerFsJs.Impl_createRemoveOptions(options_8)
    , [
        options_8
    ]);
    const fn_2 = _reactFsJs.useReact_useMemo_CF4EA67(()=>(arg_2)=>{
            action_4(arg_2);
        }
    , [
        action_4
    ]);
    _reactFsJs.useReact_useEffect_Z5ECA432F(_reactFsJs.useReact_useCallbackRef_7C4B0DD6(()=>{
        if (addOptions_2 == null) window.addEventListener(eventType_2, fn_2);
        else window.addEventListener(eventType_2, fn_2, addOptions_2);
        return _reactFsJs.React_createDisposable_3A5B6456(()=>{
            if (removeOptions_2 == null) window.removeEventListener(eventType_2, fn_2);
            else window.removeEventListener(eventType_2, fn_2, removeOptions_2);
        });
    }));
    const matchValue = input.application;
    return matchValue == null ? null : matchValue;
}, "nGxmHL0oZXjuZk0wipjosSPC5mc=", false, function() {
    return [_reactFsJs.useReact_useCallbackRef_7C4B0DD6, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useEffect_Z5ECA432F];
})), "nGxmHL0oZXjuZk0wipjosSPC5mc=", false, function() {
    return [_reactFsJs.useReact_useCallbackRef_7C4B0DD6, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useMemo_CF4EA67, _reactFsJs.useReact_useEffect_Z5ECA432F];
});
_c11 = RouterModule_router;
function Route_$007CInt$007C_$007C(input) {
    let matchValue;
    let outArg = 0;
    matchValue = [
        _int32Js.tryParse(input, 511, false, 32, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v | 0;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else return void 0;
}
_c12 = Route_$007CInt$007C_$007C;
function Route_$007CInt64$007C_$007C(input) {
    let matchValue;
    let outArg = _longJs.fromInt(0);
    matchValue = [
        _longJs.tryParse(input, 511, false, 64, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else return void 0;
}
_c13 = Route_$007CInt64$007C_$007C;
function Route_$007CGuid$007C_$007C(input) {
    let matchValue;
    let outArg = "00000000-0000-0000-0000-000000000000";
    matchValue = [
        _guidJs.tryParse(input, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else return void 0;
}
_c14 = Route_$007CGuid$007C_$007C;
function Route_$007CNumber$007C_$007C(input) {
    let matchValue;
    let outArg = 0;
    matchValue = [
        _doubleJs.tryParse(input, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else return void 0;
}
_c15 = Route_$007CNumber$007C_$007C;
function Route_$007CDecimal$007C_$007C(input) {
    let matchValue;
    let outArg = new _decimalJsDefault.default(0);
    matchValue = [
        _decimalJs.tryParse(input, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else return void 0;
}
_c16 = Route_$007CDecimal$007C_$007C;
function Route_$007CBool$007C_$007C(input) {
    const matchValue = input.toLocaleLowerCase();
    switch(matchValue){
        case "1":
        case "true":
            return true;
        case "0":
        case "false":
            return false;
        case "":
            return true;
        default:
            return void 0;
    }
}
_c17 = Route_$007CBool$007C_$007C;
function Route_$007CQuery$007C_$007C(input) {
    try {
        const urlParams = new URLSearchParams(input);
        return _seqJs.toList(_seqJs.delay(()=>_seqJs.map((entry)=>[
                    entry[0],
                    entry[1]
                ]
            , urlParams.entries())
        ));
    } catch (matchValue) {
        return void 0;
    }
}
_c18 = Route_$007CQuery$007C_$007C;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;
$RefreshReg$(_c, "RouterModule_String_$007CPrefix$007C");
$RefreshReg$(_c1, "RouterModule_String_$007CSuffix$007C");
$RefreshReg$(_c2, "RouterModule_encodeQueryString");
$RefreshReg$(_c3, "RouterModule_encodeQueryStringInts");
$RefreshReg$(_c4, "RouterModule_normalizeRoute");
$RefreshReg$(_c5, "RouterModule_encodeParts");
$RefreshReg$(_c6, "RouterModule_trySeparateLast");
$RefreshReg$(_c7, "RouterModule_nav");
$RefreshReg$(_c8, "RouterModule_urlSegments");
$RefreshReg$(_c9, "RouterModule_onUrlChange");
$RefreshReg$(_c10, "RouterModule_router$React_memo_62A0F746");
$RefreshReg$(_c11, "RouterModule_router");
$RefreshReg$(_c12, "Route_$007CInt$007C_$007C");
$RefreshReg$(_c13, "Route_$007CInt64$007C_$007C");
$RefreshReg$(_c14, "Route_$007CGuid$007C_$007C");
$RefreshReg$(_c15, "Route_$007CNumber$007C_$007C");
$RefreshReg$(_c16, "Route_$007CDecimal$007C_$007C");
$RefreshReg$(_c17, "Route_$007CBool$007C_$007C");
$RefreshReg$(_c18, "Route_$007CQuery$007C_$007C");

},{"../fable-library.3.2.10/String.js":"baXBU","../fable-library.3.2.10/List.js":"3UB49","../fable-library.3.2.10/Array.js":"dl8am","../fable-library.3.2.10/Util.js":"e4VZ7","../Feliz.1.50.0/React.fs.js":"lSrJ8","../fable-library.3.2.10/Option.js":"gHWVf","../Feliz.UseListener.0.6.3/Listener.fs.js":"7I0M6","../fable-library.3.2.10/Int32.js":"bPtbl","../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Long.js":"2dOzy","../fable-library.3.2.10/Guid.js":"29AE1","../fable-library.3.2.10/Double.js":"iED6P","../fable-library.3.2.10/Decimal.js":"dVl3F","../fable-library.3.2.10/Seq.js":"app8U","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lSrJ8":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$5562 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$5562.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReactInterop_useDebugValueWithFormatter", ()=>ReactInterop_useDebugValueWithFormatter
);
parcelHelpers.export(exports, "ReactInterop_useEffect", ()=>ReactInterop_useEffect
);
parcelHelpers.export(exports, "ReactInterop_useEffectWithDeps", ()=>ReactInterop_useEffectWithDeps
);
parcelHelpers.export(exports, "ReactInterop_useLayoutEffect", ()=>ReactInterop_useLayoutEffect
);
parcelHelpers.export(exports, "ReactInterop_useLayoutEffectWithDeps", ()=>ReactInterop_useLayoutEffectWithDeps
);
parcelHelpers.export(exports, "Internal", ()=>Internal
);
parcelHelpers.export(exports, "Internal$reflection", ()=>Internal$reflection
);
parcelHelpers.export(exports, "Internal_$ctor", ()=>Internal_$ctor
);
parcelHelpers.export(exports, "Internal_functionComponent_Z1B155329", ()=>Internal_functionComponent_Z1B155329
);
parcelHelpers.export(exports, "Internal_memo_Z603636D8", ()=>Internal_memo_Z603636D8
);
parcelHelpers.export(exports, "React", ()=>React
);
parcelHelpers.export(exports, "React$reflection", ()=>React$reflection
);
parcelHelpers.export(exports, "React_createDisposable_3A5B6456", ()=>React_createDisposable_3A5B6456
);
parcelHelpers.export(exports, "useReact_useState_FCFD9EF", ()=>useReact_useState_FCFD9EF
);
parcelHelpers.export(exports, "useReact_useReducer_2B9E6EA0", ()=>useReact_useReducer_2B9E6EA0
);
parcelHelpers.export(exports, "useReact_useEffect_Z5ECA432F", ()=>useReact_useEffect_Z5ECA432F
);
parcelHelpers.export(exports, "useReact_useEffect_Z5234A374", ()=>useReact_useEffect_Z5234A374
);
parcelHelpers.export(exports, "useReact_useLayoutEffect_Z5ECA432F", ()=>useReact_useLayoutEffect_Z5ECA432F
);
parcelHelpers.export(exports, "useReact_useLayoutEffect_Z5234A374", ()=>useReact_useLayoutEffect_Z5234A374
);
parcelHelpers.export(exports, "useReact_useLayoutEffect_3A5B6456", ()=>useReact_useLayoutEffect_3A5B6456
);
parcelHelpers.export(exports, "useReact_useLayoutEffect_Z101E1A95", ()=>useReact_useLayoutEffect_Z101E1A95
);
parcelHelpers.export(exports, "useReact_useEffectOnce_3A5B6456", ()=>useReact_useEffectOnce_3A5B6456
);
parcelHelpers.export(exports, "useReact_useEffectOnce_Z5ECA432F", ()=>useReact_useEffectOnce_Z5ECA432F
);
parcelHelpers.export(exports, "useReact_useEffectOnce_6E825304", ()=>useReact_useEffectOnce_6E825304
);
parcelHelpers.export(exports, "useReact_useEffect_3A5B6456", ()=>useReact_useEffect_3A5B6456
);
parcelHelpers.export(exports, "useReact_useEffect_Z101E1A95", ()=>useReact_useEffect_Z101E1A95
);
parcelHelpers.export(exports, "useReact_useDebugValue_Z721C83C5", ()=>useReact_useDebugValue_Z721C83C5
);
parcelHelpers.export(exports, "useReact_useDebugValue_77A55D6D", ()=>useReact_useDebugValue_77A55D6D
);
parcelHelpers.export(exports, "useReact_useCallback_93353E", ()=>useReact_useCallback_93353E
);
parcelHelpers.export(exports, "useReact_useRef_1505", ()=>useReact_useRef_1505
);
parcelHelpers.export(exports, "useReact_useInputRef", ()=>useReact_useInputRef
);
parcelHelpers.export(exports, "useReact_useButtonRef", ()=>useReact_useButtonRef
);
parcelHelpers.export(exports, "useReact_useElementRef", ()=>useReact_useElementRef
);
parcelHelpers.export(exports, "useReact_useMemo_CF4EA67", ()=>useReact_useMemo_CF4EA67
);
parcelHelpers.export(exports, "React_functionComponent_2F9D7239", ()=>React_functionComponent_2F9D7239
);
parcelHelpers.export(exports, "React_functionComponent_Z4C5FE1BE", ()=>React_functionComponent_Z4C5FE1BE
);
parcelHelpers.export(exports, "React_functionComponent_19A12FB2", ()=>React_functionComponent_19A12FB2
);
parcelHelpers.export(exports, "React_functionComponent_2E1DD889", ()=>React_functionComponent_2E1DD889
);
parcelHelpers.export(exports, "React_memo_62A0F746", ()=>React_memo_62A0F746
);
parcelHelpers.export(exports, "React_memo_6648A89D", ()=>React_memo_6648A89D
);
parcelHelpers.export(exports, "React_memo_C2C6BED", ()=>React_memo_C2C6BED
);
parcelHelpers.export(exports, "React_memo_Z4FCC584A", ()=>React_memo_Z4FCC584A
);
parcelHelpers.export(exports, "React_createContext_1AE444D8", ()=>React_createContext_1AE444D8
);
parcelHelpers.export(exports, "React_contextProvider_34D9BBBD", ()=>React_contextProvider_34D9BBBD
);
parcelHelpers.export(exports, "React_contextProvider_138D2F56", ()=>React_contextProvider_138D2F56
);
parcelHelpers.export(exports, "React_contextConsumer_Z68910595", ()=>React_contextConsumer_Z68910595
);
parcelHelpers.export(exports, "React_contextConsumer_56D53A40", ()=>React_contextConsumer_56D53A40
);
parcelHelpers.export(exports, "useReact_useContext_37FA55CF", ()=>useReact_useContext_37FA55CF
);
parcelHelpers.export(exports, "useReact_useCallbackRef_7C4B0DD6", ()=>useReact_useCallbackRef_7C4B0DD6
);
parcelHelpers.export(exports, "React_useStateWithUpdater_1505", ()=>React_useStateWithUpdater_1505
);
parcelHelpers.export(exports, "React_forwardRef_3790D881", ()=>React_forwardRef_3790D881
);
parcelHelpers.export(exports, "React_forwardRef_7DC3DB1A", ()=>React_forwardRef_7DC3DB1A
);
parcelHelpers.export(exports, "React_strictMode_6E3A73D", ()=>React_strictMode_6E3A73D
);
parcelHelpers.export(exports, "React_lazy$0027_4712D3AE", ()=>React_lazy$0027_4712D3AE
);
parcelHelpers.export(exports, "React_lazy$0027_Z3D8450FC", ()=>React_lazy$0027_Z3D8450FC
);
parcelHelpers.export(exports, "React_suspense_6E3A73D", ()=>React_suspense_6E3A73D
);
parcelHelpers.export(exports, "React_suspense_Z3796A576", ()=>React_suspense_Z3796A576
);
parcelHelpers.export(exports, "useReact_useImperativeHandle_596DDC25", ()=>useReact_useImperativeHandle_596DDC25
);
parcelHelpers.export(exports, "useReact_useImperativeHandle_Z12F09548", ()=>useReact_useImperativeHandle_Z12F09548
);
parcelHelpers.export(exports, "useFeliz_React__React_useState_Static_1505", ()=>useFeliz_React__React_useState_Static_1505
);
parcelHelpers.export(exports, "Feliz_React__React_useStateWithUpdater_Static_FCFD9EF", ()=>Feliz_React__React_useStateWithUpdater_Static_FCFD9EF
);
var _reactInteropJs = require("./ReactInterop.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _seqJs = require("../fable-library.3.2.10/Seq.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _interopFsJs = require("./Interop.fs.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _react = require("react");
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$();
const ReactInterop_useDebugValueWithFormatter = _reactInteropJs.useDebugValue;
const ReactInterop_useEffect = _reactInteropJs.useEffect;
const ReactInterop_useEffectWithDeps = _reactInteropJs.useEffectWithDeps;
const ReactInterop_useLayoutEffect = _reactInteropJs.useLayoutEffect;
const ReactInterop_useLayoutEffectWithDeps = _reactInteropJs.useLayoutEffectWithDeps;
class Internal {
    constructor(){
    }
}
function Internal$reflection() {
    return _reflectionJs.class_type("Feliz.Internal", void 0, Internal);
}
_c = Internal$reflection;
function Internal_$ctor() {
    return new Internal();
}
_c1 = Internal_$ctor;
function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {
    _seqJs.iterate((name_1)=>{
        renderElement.displayName = name_1;
    }, _optionJs.toArray(name));
    console.warn(_optionJs.some("Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\u003cReactComponent\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh"));
    return (props)=>_interopFsJs.Interop_reactApi.createElement(renderElement, Internal_propsWithKey(withKey, props))
    ;
}
_c2 = Internal_functionComponent_Z1B155329;
function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {
    const memoElementType = _interopFsJs.Interop_reactApi.memo(renderElement, _utilJs.uncurry(2, _optionJs.defaultArg(_utilJs.curry(2, areEqual), null)));
    _seqJs.iterate((name_1)=>{
        renderElement.displayName = name_1;
    }, _optionJs.toArray(name));
    return (props)=>_interopFsJs.Interop_reactApi.createElement(memoElementType, Internal_propsWithKey(withKey, props))
    ;
}
_c3 = Internal_memo_Z603636D8;
function Internal_propsWithKey(withKey, props) {
    if (withKey == null) return props;
    else {
        const f = withKey;
        props.key = f(props);
        return props;
    }
}
_c4 = Internal_propsWithKey;
class React {
    constructor(){
    }
}
function React$reflection() {
    return _reflectionJs.class_type("Feliz.React", void 0, React);
}
_c5 = React$reflection;
function React_createDisposable_3A5B6456(dispose) {
    return {
        Dispose () {
            dispose();
        }
    };
}
_c6 = React_createDisposable_3A5B6456;
function useReact_useState_FCFD9EF(initializer) {
    _s();
    return _interopFsJs.Interop_reactApi.useState(initializer);
}
_s(useReact_useState_FCFD9EF, "yfbLdthPRzBdMoR1HypNFSOZW8g=");
function useReact_useReducer_2B9E6EA0(update, initialState) {
    _s1();
    return _interopFsJs.Interop_reactApi.useReducer(update, initialState);
}
_s1(useReact_useReducer_2B9E6EA0, "skVOqNGrFQuDFh+lpttAJ2AZFeA=");
function useReact_useEffect_Z5ECA432F(effect) {
    ReactInterop_useEffect(effect);
}
function useReact_useEffect_Z5234A374(effect, dependencies) {
    ReactInterop_useEffectWithDeps(effect, dependencies);
}
function useReact_useLayoutEffect_Z5ECA432F(effect) {
    ReactInterop_useLayoutEffect(effect);
}
function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {
    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);
}
function useReact_useLayoutEffect_3A5B6456(effect) {
    ReactInterop_useLayoutEffect((_arg1)=>{
        effect();
        return React_createDisposable_3A5B6456(()=>{
        });
    });
}
function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {
    ReactInterop_useLayoutEffectWithDeps((_arg2)=>{
        effect();
        return React_createDisposable_3A5B6456(()=>{
        });
    }, dependencies);
}
function useReact_useEffectOnce_3A5B6456(effect) {
    _s2();
    useReact_useEffect_Z101E1A95(effect, []);
}
_s2(useReact_useEffectOnce_3A5B6456, "2qrbtQ4NHfulmFi7zSskCdEa82M=", false, function() {
    return [
        useReact_useEffect_Z101E1A95
    ];
});
function useReact_useEffectOnce_Z5ECA432F(effect) {
    _s3();
    useReact_useEffect_Z5234A374(effect, []);
}
_s3(useReact_useEffectOnce_Z5ECA432F, "5TZ0o72L5xwa7RQu/+h45tei098=", false, function() {
    return [
        useReact_useEffect_Z5234A374
    ];
});
function useReact_useEffectOnce_6E825304(effect) {
    _s4();
    useReact_useEffect_Z5234A374(()=>{
        const disposeOption = effect();
        return {
            Dispose () {
                _seqJs.iterate((d)=>{
                    let copyOfStruct = d;
                    copyOfStruct.Dispose();
                }, _optionJs.toArray(disposeOption));
            }
        };
    }, []);
}
_s4(useReact_useEffectOnce_6E825304, "5TZ0o72L5xwa7RQu/+h45tei098=", false, function() {
    return [
        useReact_useEffect_Z5234A374
    ];
});
function useReact_useEffect_3A5B6456(effect) {
    ReactInterop_useEffect((_arg3)=>{
        effect();
        return React_createDisposable_3A5B6456(()=>{
        });
    });
}
function useReact_useEffect_Z101E1A95(effect, dependencies) {
    ReactInterop_useEffectWithDeps((_arg4)=>{
        effect();
        return React_createDisposable_3A5B6456(()=>{
        });
    }, dependencies);
}
function useReact_useDebugValue_Z721C83C5(value) {
    ReactInterop_useDebugValueWithFormatter(value, (x)=>x
    );
}
function useReact_useDebugValue_77A55D6D(value, formatter) {
    ReactInterop_useDebugValueWithFormatter(value, formatter);
}
function useReact_useCallback_93353E(callbackFunction, dependencies) {
    _s5();
    return _interopFsJs.Interop_reactApi.useCallback(callbackFunction, _optionJs.defaultArg(dependencies, []));
}
_s5(useReact_useCallback_93353E, "epj4qY15NHsef74wNqHIp5fdZmg=");
function useReact_useRef_1505(initialValue) {
    _s6();
    return _interopFsJs.Interop_reactApi.useRef(initialValue);
}
_s6(useReact_useRef_1505, "J9pzIsEOVEZ74gjFtMkCj+5Po7s=");
function useReact_useInputRef() {
    _s7();
    return useReact_useRef_1505(void 0);
}
_s7(useReact_useInputRef, "4d3L4HFTKoPxhhBHtaYCj+/GOC8=", false, function() {
    return [
        useReact_useRef_1505
    ];
});
function useReact_useButtonRef() {
    _s8();
    return useReact_useRef_1505(void 0);
}
_s8(useReact_useButtonRef, "4d3L4HFTKoPxhhBHtaYCj+/GOC8=", false, function() {
    return [
        useReact_useRef_1505
    ];
});
function useReact_useElementRef() {
    _s9();
    return useReact_useRef_1505(void 0);
}
_s9(useReact_useElementRef, "4d3L4HFTKoPxhhBHtaYCj+/GOC8=", false, function() {
    return [
        useReact_useRef_1505
    ];
});
function useReact_useMemo_CF4EA67(createFunction, dependencies) {
    _s10();
    return _interopFsJs.Interop_reactApi.useMemo(createFunction, _optionJs.defaultArg(dependencies, []));
}
_s10(useReact_useMemo_CF4EA67, "nwk+m61qLgjDVUp4IGV/072DDN4=");
function React_functionComponent_2F9D7239(render, withKey) {
    return Internal_functionComponent_Z1B155329(render, void 0, withKey);
}
_c7 = React_functionComponent_2F9D7239;
function React_functionComponent_Z4C5FE1BE(name, render, withKey) {
    return Internal_functionComponent_Z1B155329(render, name, withKey);
}
_c8 = React_functionComponent_Z4C5FE1BE;
function React_functionComponent_19A12FB2(render, withKey) {
    return Internal_functionComponent_Z1B155329((arg)=>/*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, ...render(arg))
    , void 0, withKey);
}
_c9 = React_functionComponent_19A12FB2;
function React_functionComponent_2E1DD889(name, render, withKey) {
    return Internal_functionComponent_Z1B155329((arg)=>/*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, ...render(arg))
    , name, withKey);
}
_c10 = React_functionComponent_2E1DD889;
function React_memo_62A0F746(render, withKey, areEqual) {
    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);
}
_c11 = React_memo_62A0F746;
function React_memo_6648A89D(name, render, withKey, areEqual) {
    return Internal_memo_Z603636D8(render, name, areEqual, withKey);
}
_c12 = React_memo_6648A89D;
function React_memo_C2C6BED(render, withKey, areEqual) {
    return Internal_memo_Z603636D8((arg)=>/*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, ...render(arg))
    , void 0, areEqual, withKey);
}
_c13 = React_memo_C2C6BED;
function React_memo_Z4FCC584A(name, render, withKey, areEqual) {
    return Internal_memo_Z603636D8((arg)=>/*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, ...render(arg))
    , name, areEqual, withKey);
}
_c14 = React_memo_Z4FCC584A;
function React_createContext_1AE444D8(name, defaultValue) {
    const contextObject = _interopFsJs.Interop_reactApi.createContext(_optionJs.defaultArg(defaultValue, void 0));
    _seqJs.iterate((name_1)=>{
        contextObject.displayName = name_1;
    }, _optionJs.toArray(name));
    return contextObject;
}
_c15 = React_createContext_1AE444D8;
function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {
    return _interopFsJs.Interop_reactApi.createElement(contextObject.Provider, {
        value: contextValue
    }, child);
}
_c16 = React_contextProvider_34D9BBBD;
function React_contextProvider_138D2F56(contextObject, contextValue, children) {
    return _interopFsJs.Interop_reactApi.createElement(contextObject.Provider, {
        value: contextValue
    }, ...children);
}
_c17 = React_contextProvider_138D2F56;
function React_contextConsumer_Z68910595(contextObject, render) {
    return _interopFsJs.Interop_reactApi.createElement(contextObject.Consumer, null, render);
}
_c18 = React_contextConsumer_Z68910595;
function React_contextConsumer_56D53A40(contextObject, render) {
    return _interopFsJs.Interop_reactApi.createElement(contextObject.Consumer, null, (arg)=>/*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, ...render(arg))
    );
}
_c19 = React_contextConsumer_56D53A40;
function useReact_useContext_37FA55CF(contextObject) {
    _s11();
    return _interopFsJs.Interop_reactApi.useContext(contextObject);
}
_s11(useReact_useContext_37FA55CF, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");
function useReact_useCallbackRef_7C4B0DD6(callback) {
    _s12();
    const lastRenderCallbackRef = useReact_useRef_1505(callback);
    const callbackRef = useReact_useCallback_93353E((arg)=>lastRenderCallbackRef.current(arg)
    , []);
    useReact_useLayoutEffect_3A5B6456(()=>{
        lastRenderCallbackRef.current = callback;
    });
    return callbackRef;
}
_s12(useReact_useCallbackRef_7C4B0DD6, "jbMeZW5QQnMotaHFuNVwKmdaXN0=", false, function() {
    return [
        useReact_useRef_1505,
        useReact_useCallback_93353E,
        useReact_useLayoutEffect_3A5B6456
    ];
});
const React_useStateWithUpdater_1505 = _react.useState;
function React_forwardRef_3790D881(render) {
    const forwardRefType = _interopFsJs.Interop_reactApi.forwardRef((props, ref)=>render([
            props,
            ref
        ])
    );
    return (tupledArg)=>{
        let o;
        return _interopFsJs.Interop_reactApi.createElement(forwardRefType, (o = {
            props: tupledArg[0],
            ref: tupledArg[1]
        }, Object.assign({
        }, o)));
    };
}
_c20 = React_forwardRef_3790D881;
function React_forwardRef_7DC3DB1A(name, render) {
    const forwardRefType = _interopFsJs.Interop_reactApi.forwardRef((props, ref)=>render([
            props,
            ref
        ])
    );
    render.displayName = name;
    return (tupledArg)=>{
        let o;
        return _interopFsJs.Interop_reactApi.createElement(forwardRefType, (o = {
            props: tupledArg[0],
            ref: tupledArg[1]
        }, Object.assign({
        }, o)));
    };
}
_c21 = React_forwardRef_7DC3DB1A;
function React_strictMode_6E3A73D(children) {
    return _interopFsJs.Interop_reactApi.createElement(_interopFsJs.Interop_reactApi.StrictMode, void 0, ...children);
}
_c22 = React_strictMode_6E3A73D;
function React_lazy$0027_4712D3AE(dynamicImport, props) {
    return _interopFsJs.Interop_reactApi.createElement(_interopFsJs.Interop_reactApi.lazy(()=>dynamicImport
    ), props);
}
_c23 = React_lazy$0027_4712D3AE;
function React_lazy$0027_Z3D8450FC(dynamicImport, props) {
    return _interopFsJs.Interop_reactApi.createElement(_interopFsJs.Interop_reactApi.lazy(dynamicImport), props);
}
_c24 = React_lazy$0027_Z3D8450FC;
function React_suspense_6E3A73D(children) {
    let o;
    return _interopFsJs.Interop_reactApi.createElement(_interopFsJs.Interop_reactApi.Suspense, (o = {
        fallback: null
    }, Object.assign({
    }, o)), ...children);
}
_c25 = React_suspense_6E3A73D;
function React_suspense_Z3796A576(children, fallback) {
    let o;
    return _interopFsJs.Interop_reactApi.createElement(_interopFsJs.Interop_reactApi.Suspense, (o = {
        fallback: fallback
    }, Object.assign({
    }, o)), ...children);
}
_c26 = React_suspense_Z3796A576;
function useReact_useImperativeHandle_596DDC25(ref, createHandle) {
    _s13();
    _interopFsJs.Interop_reactApi.useImperativeHandle(ref, createHandle);
}
_s13(useReact_useImperativeHandle_596DDC25, "PYzlZ2AGFM0KxtNOGoZVRb5EOEw=");
function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {
    _s14();
    _interopFsJs.Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);
}
_s14(useReact_useImperativeHandle_Z12F09548, "PYzlZ2AGFM0KxtNOGoZVRb5EOEw=");
function useFeliz_React__React_useState_Static_1505(initial) {
    _s15();
    return _interopFsJs.Interop_reactApi.useState(initial);
}
_s15(useFeliz_React__React_useState_Static_1505, "T2Aha9ZILzZt8f6c8kv2CSALEMk=");
const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = _react.useState;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26;
$RefreshReg$(_c, "Internal$reflection");
$RefreshReg$(_c1, "Internal_$ctor");
$RefreshReg$(_c2, "Internal_functionComponent_Z1B155329");
$RefreshReg$(_c3, "Internal_memo_Z603636D8");
$RefreshReg$(_c4, "Internal_propsWithKey");
$RefreshReg$(_c5, "React$reflection");
$RefreshReg$(_c6, "React_createDisposable_3A5B6456");
$RefreshReg$(_c7, "React_functionComponent_2F9D7239");
$RefreshReg$(_c8, "React_functionComponent_Z4C5FE1BE");
$RefreshReg$(_c9, "React_functionComponent_19A12FB2");
$RefreshReg$(_c10, "React_functionComponent_2E1DD889");
$RefreshReg$(_c11, "React_memo_62A0F746");
$RefreshReg$(_c12, "React_memo_6648A89D");
$RefreshReg$(_c13, "React_memo_C2C6BED");
$RefreshReg$(_c14, "React_memo_Z4FCC584A");
$RefreshReg$(_c15, "React_createContext_1AE444D8");
$RefreshReg$(_c16, "React_contextProvider_34D9BBBD");
$RefreshReg$(_c17, "React_contextProvider_138D2F56");
$RefreshReg$(_c18, "React_contextConsumer_Z68910595");
$RefreshReg$(_c19, "React_contextConsumer_56D53A40");
$RefreshReg$(_c20, "React_forwardRef_3790D881");
$RefreshReg$(_c21, "React_forwardRef_7DC3DB1A");
$RefreshReg$(_c22, "React_strictMode_6E3A73D");
$RefreshReg$(_c23, "React_lazy$0027_4712D3AE");
$RefreshReg$(_c24, "React_lazy$0027_Z3D8450FC");
$RefreshReg$(_c25, "React_suspense_6E3A73D");
$RefreshReg$(_c26, "React_suspense_Z3796A576");

  $parcel$ReactRefreshHelpers$5562.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"./ReactInterop.js":"41YKi","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Seq.js":"app8U","../fable-library.3.2.10/Option.js":"gHWVf","./Interop.fs.js":"dWNhs","../fable-library.3.2.10/Util.js":"e4VZ7","react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"41YKi":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$913d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$913d.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useEffect", ()=>useEffect
);
parcelHelpers.export(exports, "useEffectWithDeps", ()=>useEffectWithDeps
);
parcelHelpers.export(exports, "useLayoutEffect", ()=>useLayoutEffect
);
parcelHelpers.export(exports, "useLayoutEffectWithDeps", ()=>useLayoutEffectWithDeps
);
parcelHelpers.export(exports, "useDebugValue", ()=>useDebugValue
);
var _react = require("react");
var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();
const useEffect = (getDisposable)=>{
    _s();
    _react.useEffect(()=>{
        const disposable = getDisposable();
        return ()=>{
            disposable.Dispose();
        };
    });
};
_s(useEffect, "+DoGbjc8viTMlKjpeJZC2bYgYlQ=", false, function() {
    return [_react.useEffect];
});
const useEffectWithDeps = (getDisposable, deps)=>{
    _s1();
    _react.useEffect(()=>{
        const disposable = getDisposable();
        return ()=>{
            disposable.Dispose();
        };
    }, deps);
};
_s1(useEffectWithDeps, "+DoGbjc8viTMlKjpeJZC2bYgYlQ=", false, function() {
    return [_react.useEffect];
});
const useLayoutEffect = (getDisposable)=>{
    _s2();
    _react.useLayoutEffect(()=>{
        const disposable = getDisposable();
        return ()=>{
            disposable.Dispose();
        };
    });
};
_s2(useLayoutEffect, "UDADnkQKppvbJ9LsDhBzpn3x744=", false, function() {
    return [_react.useLayoutEffect];
});
const useLayoutEffectWithDeps = (getDisposable, deps)=>{
    _s3();
    _react.useLayoutEffect(()=>{
        const disposable = getDisposable();
        return ()=>{
            disposable.Dispose();
        };
    }, deps);
};
_s3(useLayoutEffectWithDeps, "UDADnkQKppvbJ9LsDhBzpn3x744=", false, function() {
    return [_react.useLayoutEffect];
});
const useDebugValue = (value, formatter)=>{
    _s4();
    return _react.useDebugValue(value, formatter);
};
_s4(useDebugValue, "HWRI7KgTG2J4egrPJEdiorYSbKQ=", false, function() {
    return [_react.useDebugValue];
});

  $parcel$ReactRefreshHelpers$913d.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"dWNhs":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$877d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$877d.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DateParsing_$007CBetween$007C_$007C", ()=>DateParsing_$007CBetween$007C_$007C
);
parcelHelpers.export(exports, "DateParsing_isLeapYear", ()=>DateParsing_isLeapYear
);
parcelHelpers.export(exports, "DateParsing_$007CInt$007C_$007C", ()=>DateParsing_$007CInt$007C_$007C
);
parcelHelpers.export(exports, "DateParsing_parse", ()=>DateParsing_parse
);
parcelHelpers.export(exports, "Interop_reactApi", ()=>Interop_reactApi
);
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _dateJs = require("../fable-library.3.2.10/Date.js");
var _int32Js = require("../fable-library.3.2.10/Int32.js");
var _stringJs = require("../fable-library.3.2.10/String.js");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
function DateParsing_$007CBetween$007C_$007C(x, y, input) {
    if (input >= x ? input <= y : false) return _optionJs.some(void 0);
    else return void 0;
}
_c = DateParsing_$007CBetween$007C_$007C;
function DateParsing_isLeapYear(year) {
    return _dateJs.isLeapYear(year);
}
_c1 = DateParsing_isLeapYear;
function DateParsing_$007CInt$007C_$007C(input) {
    try {
        return _int32Js.parse(input, 511, false, 32);
    } catch (matchValue) {
        return void 0;
    }
}
_c2 = DateParsing_$007CInt$007C_$007C;
function DateParsing_parse(input) {
    try {
        if (_stringJs.isNullOrWhiteSpace(input)) return void 0;
        else {
            const parts = _stringJs.split(input, [
                "-"
            ], null, 0);
            let patternInput;
            let pattern_matching_result, month, year;
            if (!_arrayJs.equalsWith((x, y)=>_utilJs.comparePrimitives(x, y)
            , parts, null) ? parts.length === 2 : false) {
                const activePatternResult5656 = DateParsing_$007CInt$007C_$007C(parts[0]);
                if (activePatternResult5656 != null) {
                    const activePatternResult5657 = DateParsing_$007CInt$007C_$007C(parts[1]);
                    if (activePatternResult5657 != null) {
                        pattern_matching_result = 0;
                        month = activePatternResult5657;
                        year = activePatternResult5656;
                    } else pattern_matching_result = 1;
                } else pattern_matching_result = 1;
            } else pattern_matching_result = 1;
            switch(pattern_matching_result){
                case 0:
                    patternInput = [
                        year,
                        month,
                        1,
                        0,
                        0
                    ];
                    break;
                case 1:
                    {
                        let pattern_matching_result_1, day, month_1, year_1;
                        if (!_arrayJs.equalsWith((x_1, y_1)=>_utilJs.comparePrimitives(x_1, y_1)
                        , parts, null) ? parts.length === 3 : false) {
                            const activePatternResult5653 = DateParsing_$007CInt$007C_$007C(parts[0]);
                            if (activePatternResult5653 != null) {
                                const activePatternResult5654 = DateParsing_$007CInt$007C_$007C(parts[1]);
                                if (activePatternResult5654 != null) {
                                    const activePatternResult5655 = DateParsing_$007CInt$007C_$007C(parts[2]);
                                    if (activePatternResult5655 != null) {
                                        pattern_matching_result_1 = 0;
                                        day = activePatternResult5655;
                                        month_1 = activePatternResult5654;
                                        year_1 = activePatternResult5653;
                                    } else pattern_matching_result_1 = 1;
                                } else pattern_matching_result_1 = 1;
                            } else pattern_matching_result_1 = 1;
                        } else pattern_matching_result_1 = 1;
                        switch(pattern_matching_result_1){
                            case 0:
                                patternInput = [
                                    year_1,
                                    month_1,
                                    day,
                                    0,
                                    0
                                ];
                                break;
                            case 1:
                                {
                                    let pattern_matching_result_2, day_1, month_2, year_2;
                                    if (!_arrayJs.equalsWith((x_2, y_2)=>_utilJs.comparePrimitives(x_2, y_2)
                                    , parts, null) ? parts.length === 3 : false) {
                                        const activePatternResult5651 = DateParsing_$007CInt$007C_$007C(parts[0]);
                                        if (activePatternResult5651 != null) {
                                            const activePatternResult5652 = DateParsing_$007CInt$007C_$007C(parts[1]);
                                            if (activePatternResult5652 != null) {
                                                pattern_matching_result_2 = 0;
                                                day_1 = parts[2];
                                                month_2 = activePatternResult5652;
                                                year_2 = activePatternResult5651;
                                            } else pattern_matching_result_2 = 1;
                                        } else pattern_matching_result_2 = 1;
                                    } else pattern_matching_result_2 = 1;
                                    switch(pattern_matching_result_2){
                                        case 0:
                                            if (day_1.indexOf("T") >= 0) {
                                                const matchValue = _stringJs.split(day_1, [
                                                    "T"
                                                ], null, 0);
                                                let pattern_matching_result_3, parsedDay, time;
                                                if (!_arrayJs.equalsWith((x_3, y_3)=>_utilJs.comparePrimitives(x_3, y_3)
                                                , matchValue, null) ? matchValue.length === 2 : false) {
                                                    const activePatternResult5650 = DateParsing_$007CInt$007C_$007C(matchValue[0]);
                                                    if (activePatternResult5650 != null) {
                                                        pattern_matching_result_3 = 0;
                                                        parsedDay = activePatternResult5650;
                                                        time = matchValue[1];
                                                    } else pattern_matching_result_3 = 1;
                                                } else pattern_matching_result_3 = 1;
                                                switch(pattern_matching_result_3){
                                                    case 0:
                                                        {
                                                            const matchValue_1 = _stringJs.split(time, [
                                                                ":"
                                                            ], null, 0);
                                                            let pattern_matching_result_4, hour, minute;
                                                            if (!_arrayJs.equalsWith((x_4, y_4)=>_utilJs.comparePrimitives(x_4, y_4)
                                                            , matchValue_1, null) ? matchValue_1.length === 2 : false) {
                                                                const activePatternResult5648 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);
                                                                if (activePatternResult5648 != null) {
                                                                    const activePatternResult5649 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);
                                                                    if (activePatternResult5649 != null) {
                                                                        pattern_matching_result_4 = 0;
                                                                        hour = activePatternResult5648;
                                                                        minute = activePatternResult5649;
                                                                    } else pattern_matching_result_4 = 1;
                                                                } else pattern_matching_result_4 = 1;
                                                            } else pattern_matching_result_4 = 1;
                                                            switch(pattern_matching_result_4){
                                                                case 0:
                                                                    {
                                                                        const matchValue_2 = [
                                                                            hour,
                                                                            minute
                                                                        ];
                                                                        let pattern_matching_result_5;
                                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {
                                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) pattern_matching_result_5 = 0;
                                                                            else pattern_matching_result_5 = 1;
                                                                        } else pattern_matching_result_5 = 1;
                                                                        switch(pattern_matching_result_5){
                                                                            case 0:
                                                                                patternInput = [
                                                                                    year_2,
                                                                                    month_2,
                                                                                    parsedDay,
                                                                                    hour,
                                                                                    minute
                                                                                ];
                                                                                break;
                                                                            case 1:
                                                                                patternInput = [
                                                                                    -1,
                                                                                    1,
                                                                                    1,
                                                                                    0,
                                                                                    0
                                                                                ];
                                                                                break;
                                                                        }
                                                                        break;
                                                                    }
                                                                case 1:
                                                                    patternInput = [
                                                                        -1,
                                                                        1,
                                                                        1,
                                                                        0,
                                                                        0
                                                                    ];
                                                                    break;
                                                            }
                                                            break;
                                                        }
                                                    case 1:
                                                        patternInput = [
                                                            -1,
                                                            1,
                                                            1,
                                                            0,
                                                            0
                                                        ];
                                                        break;
                                                }
                                            } else patternInput = [
                                                -1,
                                                1,
                                                1,
                                                0,
                                                0
                                            ];
                                            break;
                                        case 1:
                                            patternInput = [
                                                -1,
                                                1,
                                                1,
                                                0,
                                                0
                                            ];
                                            break;
                                    }
                                    break;
                                }
                        }
                        break;
                    }
            }
            const year_3 = patternInput[0] | 0;
            const month_3 = patternInput[1] | 0;
            const minute_1 = patternInput[4] | 0;
            const hour_1 = patternInput[3] | 0;
            const day_2 = patternInput[2] | 0;
            if (year_3 <= 0) return void 0;
            else {
                const matchValue_3 = [
                    month_3,
                    day_2
                ];
                let pattern_matching_result_6;
                if (matchValue_3[0] === 2) {
                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {
                        if (DateParsing_isLeapYear(year_3)) pattern_matching_result_6 = 0;
                        else pattern_matching_result_6 = 1;
                    } else pattern_matching_result_6 = 1;
                } else pattern_matching_result_6 = 1;
                switch(pattern_matching_result_6){
                    case 0:
                        return _dateJs.create(year_3, month_3, day_2, hour_1, minute_1, 0);
                    case 1:
                        {
                            let pattern_matching_result_7;
                            if (matchValue_3[0] === 2) {
                                if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {
                                    if (!DateParsing_isLeapYear(year_3)) pattern_matching_result_7 = 0;
                                    else pattern_matching_result_7 = 1;
                                } else pattern_matching_result_7 = 1;
                            } else pattern_matching_result_7 = 1;
                            switch(pattern_matching_result_7){
                                case 0:
                                    return _dateJs.create(year_3, month_3, day_2, hour_1, minute_1, 0);
                                case 1:
                                    {
                                        let pattern_matching_result_8;
                                        if (matchValue_3[0] === 1) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 3) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 5) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 7) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 8) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 10) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else if (matchValue_3[0] === 12) {
                                            if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) pattern_matching_result_8 = 0;
                                            else pattern_matching_result_8 = 1;
                                        } else pattern_matching_result_8 = 1;
                                        switch(pattern_matching_result_8){
                                            case 0:
                                                return _dateJs.create(year_3, month_3, day_2, hour_1, minute_1, 0);
                                            case 1:
                                                {
                                                    let pattern_matching_result_9;
                                                    if (matchValue_3[0] === 4) {
                                                        if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) pattern_matching_result_9 = 0;
                                                        else pattern_matching_result_9 = 1;
                                                    } else if (matchValue_3[0] === 6) {
                                                        if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) pattern_matching_result_9 = 0;
                                                        else pattern_matching_result_9 = 1;
                                                    } else if (matchValue_3[0] === 9) {
                                                        if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) pattern_matching_result_9 = 0;
                                                        else pattern_matching_result_9 = 1;
                                                    } else if (matchValue_3[0] === 11) {
                                                        if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) pattern_matching_result_9 = 0;
                                                        else pattern_matching_result_9 = 1;
                                                    } else pattern_matching_result_9 = 1;
                                                    switch(pattern_matching_result_9){
                                                        case 0:
                                                            return _dateJs.create(year_3, month_3, day_2, hour_1, minute_1, 0);
                                                        case 1:
                                                            return void 0;
                                                    }
                                                }
                                        }
                                    }
                            }
                        }
                }
            }
        }
    } catch (matchValue_4) {
        return void 0;
    }
}
_c3 = DateParsing_parse;
const Interop_reactApi = _reactDefault.default;
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "DateParsing_$007CBetween$007C_$007C");
$RefreshReg$(_c1, "DateParsing_isLeapYear");
$RefreshReg$(_c2, "DateParsing_$007CInt$007C_$007C");
$RefreshReg$(_c3, "DateParsing_parse");

  $parcel$ReactRefreshHelpers$877d.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/Date.js":"bQWYH","../fable-library.3.2.10/Int32.js":"bPtbl","../fable-library.3.2.10/String.js":"baXBU","../fable-library.3.2.10/Array.js":"dl8am","../fable-library.3.2.10/Util.js":"e4VZ7","react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"7I0M6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Impl_allowsPassiveEvents", ()=>Impl_allowsPassiveEvents
);
parcelHelpers.export(exports, "Impl_defaultPassive", ()=>Impl_defaultPassive
);
parcelHelpers.export(exports, "Impl_adjustPassive", ()=>Impl_adjustPassive
);
parcelHelpers.export(exports, "Impl_createRemoveOptions", ()=>Impl_createRemoveOptions
);
var _optionJs = require("../fable-library.3.2.10/Option.js");
const Impl_allowsPassiveEvents = (()=>{
    let passive = false;
    try {
        if (typeof window !== 'undefined' ? typeof window.addEventListener === 'function' : false) {
            window.addEventListener("testPassiveEventSupport", (value)=>{
            }, {
                passive: true
            });
            window.removeEventListener("testPassiveEventSupport", (value_1)=>{
            });
        }
    } catch (matchValue) {
    }
    return passive;
})();
const Impl_defaultPassive = {
    passive: true
};
function Impl_adjustPassive(maybeOptions) {
    return _optionJs.map((options)=>{
        if (options.passive ? !Impl_allowsPassiveEvents : false) return {
            capture: options.capture,
            once: options.once,
            passive: false
        };
        else return options;
    }, maybeOptions);
}
_c = Impl_adjustPassive;
function Impl_createRemoveOptions(maybeOptions) {
    return _optionJs.bind((options)=>{
        if (options.capture) return {
            capture: true
        };
        else return void 0;
    }, maybeOptions);
}
_c1 = Impl_createRemoveOptions;
var _c, _c1;
$RefreshReg$(_c, "Impl_adjustPassive");
$RefreshReg$(_c1, "Impl_createRemoveOptions");

},{"../fable-library.3.2.10/Option.js":"gHWVf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"29AE1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toString", ()=>toString
);
/** Validates UUID as specified in RFC4122 (versions 1-5). */ parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
// From https://gist.github.com/LeverOne/1308368
parcelHelpers.export(exports, "newGuid", ()=>newGuid
);
/** Parse a UUID into it's component bytes */ // Adapted from https://github.com/zefferus/uuid-parse
parcelHelpers.export(exports, "guidToArray", ()=>guidToArray
);
/** Convert UUID byte array into a string */ parcelHelpers.export(exports, "arrayToGuid", ()=>arrayToGuid
);
var _stringJs = require("./String.js");
// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220
// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
// Relax GUID parsing, see #1637
const guidRegex = /^[\(\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\)\}]{0,2}$/;
const guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;
const guidRegexHex = /^\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\}\}$/;
const guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;
function toString(str, format, _provider) {
    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) switch(format){
        case "N":
            return str.replace(/-/g, '');
        case "D":
            return str;
        case "B":
            return "{" + str + "}";
        case "P":
            return "(" + str + ")";
        case "X":
            return str.replace(guidHexCaptures, "{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}");
        default:
            throw new Error("Unrecognized Guid print format");
    }
    else return str;
}
function parse(str) {
    function hyphenateGuid(str1) {
        return str1.replace(guidRegexNoHyphen, "$1-$2-$3-$4-$5");
    }
    const wsTrimAndLowered = str.trim().toLowerCase();
    if (guidRegex.test(wsTrimAndLowered)) return _stringJs.trim(wsTrimAndLowered, "{", "}", "(", ")");
    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) return hyphenateGuid(wsTrimAndLowered);
    else if (guidRegexHex.test(wsTrimAndLowered)) return hyphenateGuid(wsTrimAndLowered.replace(/[\{\},]|0x/g, ''));
    else throw new Error("Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
}
function tryParse(str, defValue) {
    try {
        defValue.contents = parse(str);
        return true;
    } catch (_a) {
        return false;
    }
}
function newGuid() {
    let b = "";
    for(let a = 0; (a++) < 36;)b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-";
    return b;
}
// Maps for number <-> hex string conversion
let _convertMapsInitialized = false;
let _byteToHex;
let _hexToByte;
function initConvertMaps() {
    _byteToHex = new Array(256);
    _hexToByte = {
    };
    for(let i = 0; i < 256; i++){
        _byteToHex[i] = (i + 256).toString(16).substr(1);
        _hexToByte[_byteToHex[i]] = i;
    }
    _convertMapsInitialized = true;
}
function guidToArray(s) {
    if (!_convertMapsInitialized) initConvertMaps();
    let i = 0;
    const buf = new Uint8Array(16);
    s.toLowerCase().replace(/[0-9a-f]{2}/g, (oct)=>{
        switch(i){
            // .NET saves first three byte groups with different endianness
            // See https://stackoverflow.com/a/16722909/3922220
            case 0:
            case 1:
            case 2:
            case 3:
                buf[3 - i++] = _hexToByte[oct];
                break;
            case 4:
            case 5:
                buf[9 - i++] = _hexToByte[oct];
                break;
            case 6:
            case 7:
                buf[13 - i++] = _hexToByte[oct];
                break;
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
                buf[i++] = _hexToByte[oct];
                break;
        }
    });
    // Zero out remaining bytes if string was short
    while(i < 16)buf[i++] = 0;
    return buf;
}
function arrayToGuid(buf) {
    if (buf.length !== 16) throw new Error("Byte array for GUID must be exactly 16 bytes long");
    if (!_convertMapsInitialized) initConvertMaps();
    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] + _byteToHex[buf[1]] + _byteToHex[buf[0]] + "-" + _byteToHex[buf[5]] + _byteToHex[buf[4]] + "-" + _byteToHex[buf[7]] + _byteToHex[buf[6]] + "-" + _byteToHex[buf[8]] + _byteToHex[buf[9]] + "-" + _byteToHex[buf[10]] + _byteToHex[buf[11]] + _byteToHex[buf[12]] + _byteToHex[buf[13]] + _byteToHex[buf[14]] + _byteToHex[buf[15]];
    return guid;
}

},{"./String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iED6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "parse", ()=>parse
);
// JS Number.isFinite function evals false for NaN
parcelHelpers.export(exports, "isInfinity", ()=>isInfinity
);
var _typesJs = require("./Types.js");
function tryParse(str, defValue) {
    // TODO: test if value is valid and in range
    if (str != null && /\S/.test(str)) {
        const v = +str.replace("_", "");
        if (!Number.isNaN(v)) {
            defValue.contents = v;
            return true;
        }
    }
    return false;
}
function parse(str) {
    const defValue = new _typesJs.FSharpRef(0);
    if (tryParse(str, defValue)) return defValue.contents;
    else throw new Error("Input string was not in a correct format.");
}
function isInfinity(x) {
    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
}

},{"./Types.js":"7IOW0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8uy8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Helpers_currentLanguage", ()=>Helpers_currentLanguage
);
parcelHelpers.export(exports, "Helpers_i18n", ()=>Helpers_i18n
);
parcelHelpers.export(exports, "I18n", ()=>I18n
);
parcelHelpers.export(exports, "I18n$reflection", ()=>I18n$reflection
);
parcelHelpers.export(exports, "I18n_Translate_Z1A8FAE6B", ()=>I18n_Translate_Z1A8FAE6B
);
parcelHelpers.export(exports, "I18n_Init_Z6861C5C0", ()=>I18n_Init_Z6861C5C0
);
parcelHelpers.export(exports, "I18n_Init_Z384F8060", ()=>I18n_Init_Z384F8060
);
parcelHelpers.export(exports, "I18n_SetLanguage_Z721C83C5", ()=>I18n_SetLanguage_Z721C83C5
);
parcelHelpers.export(exports, "I18n_ChangeLanguage_Z721C83C5", ()=>I18n_ChangeLanguage_Z721C83C5
);
parcelHelpers.export(exports, "I18n_GetLanguage", ()=>I18n_GetLanguage
);
var _utilJs = require("../Client/.fable/fable-library.3.2.10/Util.js");
var _i18Next = require("i18next");
var _i18NextDefault = parcelHelpers.interopDefault(_i18Next);
var _reflectionJs = require("../Client/.fable/fable-library.3.2.10/Reflection.js");
var _promiseFsJs = require("../Client/.fable/Fable.Promise.2.2.2/Promise.fs.js");
var _promiseImplFsJs = require("../Client/.fable/Fable.Promise.2.2.2/PromiseImpl.fs.js");
var _stringJs = require("../Client/.fable/fable-library.3.2.10/String.js");
let Helpers_currentLanguage = _utilJs.createAtom("");
const Helpers_i18n = _i18NextDefault.default;
class I18n {
    constructor(){
    }
}
function I18n$reflection() {
    return _reflectionJs.class_type("Fable.I18Next.I18n", void 0, I18n);
}
_c = I18n$reflection;
function I18n_Translate_Z1A8FAE6B(message, keys) {
    return Helpers_i18n.t(message, keys);
}
_c1 = I18n_Translate_Z1A8FAE6B;
function I18n_Init_Z6861C5C0(resources, language) {
    return _promiseFsJs.PromiseBuilder__Run_212F1D4B(_promiseImplFsJs.promise, _promiseFsJs.PromiseBuilder__Delay_62FBFDE1(_promiseImplFsJs.promise, ()=>{
        const options = {
            resources: resources,
            lng: language
        };
        Helpers_currentLanguage(language, true);
        return Helpers_i18n.init(options);
    }));
}
_c2 = I18n_Init_Z6861C5C0;
function I18n_Init_Z384F8060(fileName, language) {
    return _stringJs.toFail(_stringJs.printf("This overload does not work on Fable"));
}
_c3 = I18n_Init_Z384F8060;
function I18n_SetLanguage_Z721C83C5(newLanguage) {
    return _stringJs.toFail(_stringJs.printf("This overload does not work on Fable"));
}
_c4 = I18n_SetLanguage_Z721C83C5;
function I18n_ChangeLanguage_Z721C83C5(newLanguage) {
    return _promiseFsJs.PromiseBuilder__Run_212F1D4B(_promiseImplFsJs.promise, _promiseFsJs.PromiseBuilder__Delay_62FBFDE1(_promiseImplFsJs.promise, ()=>_promiseFsJs.PromiseBuilder__Delay_62FBFDE1(_promiseImplFsJs.promise, ()=>{
            Helpers_currentLanguage(newLanguage, true);
            return Helpers_i18n.changeLanguage(newLanguage).then(()=>Promise.resolve(undefined)
            );
        }).catch((_arg2)=>{
            throw new Error("Error switching language");
        })
    ));
}
_c5 = I18n_ChangeLanguage_Z721C83C5;
function I18n_GetLanguage() {
    return Helpers_currentLanguage();
}
_c6 = I18n_GetLanguage;
var _c, _c1, _c2, _c3, _c4, _c5, _c6;
$RefreshReg$(_c, "I18n$reflection");
$RefreshReg$(_c1, "I18n_Translate_Z1A8FAE6B");
$RefreshReg$(_c2, "I18n_Init_Z6861C5C0");
$RefreshReg$(_c3, "I18n_Init_Z384F8060");
$RefreshReg$(_c4, "I18n_SetLanguage_Z721C83C5");
$RefreshReg$(_c5, "I18n_ChangeLanguage_Z721C83C5");
$RefreshReg$(_c6, "I18n_GetLanguage");

},{"../Client/.fable/fable-library.3.2.10/Util.js":"e4VZ7","i18next":"aOP17","../Client/.fable/fable-library.3.2.10/Reflection.js":"c0YT4","../Client/.fable/Fable.Promise.2.2.2/Promise.fs.js":"1ebQI","../Client/.fable/Fable.Promise.2.2.2/PromiseImpl.fs.js":"lGgFU","../Client/.fable/fable-library.3.2.10/String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aOP17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeof = require("@babel/runtime/helpers/esm/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _objectSpread = require("@babel/runtime/helpers/esm/objectSpread");
var _objectSpreadDefault = parcelHelpers.interopDefault(_objectSpread);
var _classCallCheck = require("@babel/runtime/helpers/esm/classCallCheck");
var _classCallCheckDefault = parcelHelpers.interopDefault(_classCallCheck);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _possibleConstructorReturn = require("@babel/runtime/helpers/esm/possibleConstructorReturn");
var _possibleConstructorReturnDefault = parcelHelpers.interopDefault(_possibleConstructorReturn);
var _getPrototypeOf = require("@babel/runtime/helpers/esm/getPrototypeOf");
var _getPrototypeOfDefault = parcelHelpers.interopDefault(_getPrototypeOf);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var consoleLogger = {
    type: 'logger',
    log: function log(args) {
        this.output('log', args);
    },
    warn: function warn(args) {
        this.output('warn', args);
    },
    error: function error(args) {
        this.output('error', args);
    },
    output: function output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
    }
};
var Logger = function() {
    function Logger1(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        _classCallCheckDefault.default(this, Logger1);
        this.init(concreteLogger, options);
    }
    _createClassDefault.default(Logger1, [
        {
            key: "init",
            value: function init(concreteLogger) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                this.prefix = options.prefix || 'i18next:';
                this.logger = concreteLogger || consoleLogger;
                this.options = options;
                this.debug = options.debug;
            }
        },
        {
            key: "setDebug",
            value: function setDebug(bool) {
                this.debug = bool;
            }
        },
        {
            key: "log",
            value: function log() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                return this.forward(args, 'log', '', true);
            }
        },
        {
            key: "warn",
            value: function warn() {
                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                return this.forward(args, 'warn', '', true);
            }
        },
        {
            key: "error",
            value: function error() {
                for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
                return this.forward(args, 'error', '');
            }
        },
        {
            key: "deprecate",
            value: function deprecate() {
                for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
                return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
            }
        },
        {
            key: "forward",
            value: function forward(args, lvl, prefix, debugOnly) {
                if (debugOnly && !this.debug) return null;
                if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
                return this.logger[lvl](args);
            }
        },
        {
            key: "create",
            value: function create(moduleName) {
                return new Logger1(this.logger, _objectSpreadDefault.default({
                }, {
                    prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
                }, this.options));
            }
        }
    ]);
    return Logger1;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
    function EventEmitter1() {
        _classCallCheckDefault.default(this, EventEmitter1);
        this.observers = {
        };
    }
    _createClassDefault.default(EventEmitter1, [
        {
            key: "on",
            value: function on(events, listener) {
                var _this = this;
                events.split(' ').forEach(function(event) {
                    _this.observers[event] = _this.observers[event] || [];
                    _this.observers[event].push(listener);
                });
                return this;
            }
        },
        {
            key: "off",
            value: function off(event, listener) {
                if (!this.observers[event]) return;
                if (!listener) {
                    delete this.observers[event];
                    return;
                }
                this.observers[event] = this.observers[event].filter(function(l) {
                    return l !== listener;
                });
            }
        },
        {
            key: "emit",
            value: function emit(event) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
                if (this.observers[event]) {
                    var cloned = [].concat(this.observers[event]);
                    cloned.forEach(function(observer) {
                        observer.apply(void 0, args);
                    });
                }
                if (this.observers['*']) {
                    var _cloned = [].concat(this.observers['*']);
                    _cloned.forEach(function(observer) {
                        observer.apply(observer, [
                            event
                        ].concat(args));
                    });
                }
            }
        }
    ]);
    return EventEmitter1;
}();
function defer() {
    var res;
    var rej;
    var promise = new Promise(function(resolve, reject) {
        res = resolve;
        rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
}
function makeString(object) {
    if (object == null) return '';
    return '' + object;
}
function copy(a, s, t) {
    a.forEach(function(m) {
        if (s[m]) t[m] = s[m];
    });
}
function getLastOfPath(object, path, Empty) {
    function cleanKey(key) {
        return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
    }
    function canNotTraverseDeeper() {
        return !object || typeof object === 'string';
    }
    var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
    while(stack.length > 1){
        if (canNotTraverseDeeper()) return {
        };
        var key = cleanKey(stack.shift());
        if (!object[key] && Empty) object[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object, key)) object = object[key];
        else object = {
        };
    }
    if (canNotTraverseDeeper()) return {
    };
    return {
        obj: object,
        k: cleanKey(stack.shift())
    };
}
function setPath(object, path, newValue) {
    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
    obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
    obj[k] = obj[k] || [];
    if (concat) obj[k] = obj[k].concat(newValue);
    if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
    if (!obj) return undefined;
    return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
    var value = getPath(data, key);
    if (value !== undefined) return value;
    return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
    for(var prop in source)if (prop !== '__proto__' && prop !== 'constructor') {
        if (prop in target) {
            if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                if (overwrite) target[prop] = source[prop];
            } else deepExtend(target[prop], source[prop], overwrite);
        } else target[prop] = source[prop];
    }
    return target;
}
function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;'
};
function escape(data) {
    if (typeof data === 'string') return data.replace(/[&<>"'\/]/g, function(s) {
        return _entityMap[s];
    });
    return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
function deepFind(obj, path) {
    var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
    if (!obj) return undefined;
    if (obj[path]) return obj[path];
    var paths = path.split(keySeparator);
    var current = obj;
    for(var i = 0; i < paths.length; ++i){
        if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) return undefined;
        if (current[paths[i]] === undefined) {
            var j = 2;
            var p = paths.slice(i, i + j).join(keySeparator);
            var mix = current[p];
            while(mix === undefined && paths.length > i + j){
                j++;
                p = paths.slice(i, i + j).join(keySeparator);
                mix = current[p];
            }
            if (mix === undefined) return undefined;
            if (typeof mix === 'string') return mix;
            if (p && typeof mix[p] === 'string') return mix[p];
            var joinedPath = paths.slice(i + j).join(keySeparator);
            if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
            return undefined;
        }
        current = current[paths[i]];
    }
    return current;
}
var ResourceStore1 = function(_EventEmitter) {
    _inheritsDefault.default(ResourceStore2, _EventEmitter);
    function ResourceStore2(data) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            ns: [
                'translation'
            ],
            defaultNS: 'translation'
        };
        _classCallCheckDefault.default(this, ResourceStore2);
        _this = _possibleConstructorReturnDefault.default(this, _getPrototypeOfDefault.default(ResourceStore2).call(this));
        if (isIE10) EventEmitter.call(_assertThisInitializedDefault.default(_this));
        _this.data = data || {
        };
        _this.options = options;
        if (_this.options.keySeparator === undefined) _this.options.keySeparator = '.';
        if (_this.options.ignoreJSONStructure === undefined) _this.options.ignoreJSONStructure = true;
        return _this;
    }
    _createClassDefault.default(ResourceStore2, [
        {
            key: "addNamespaces",
            value: function addNamespaces(ns) {
                if (this.options.ns.indexOf(ns) < 0) this.options.ns.push(ns);
            }
        },
        {
            key: "removeNamespaces",
            value: function removeNamespaces(ns) {
                var index = this.options.ns.indexOf(ns);
                if (index > -1) this.options.ns.splice(index, 1);
            }
        },
        {
            key: "getResource",
            value: function getResource(lng, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                };
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
                var path = [
                    lng,
                    ns
                ];
                if (key && typeof key !== 'string') path = path.concat(key);
                if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf('.') > -1) path = lng.split('.');
                var result = getPath(this.data, path);
                if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
                return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
            }
        },
        {
            key: "addResource",
            value: function addResource(lng, ns, key, value) {
                var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
                    silent: false
                };
                var keySeparator = this.options.keySeparator;
                if (keySeparator === undefined) keySeparator = '.';
                var path = [
                    lng,
                    ns
                ];
                if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf('.') > -1) {
                    path = lng.split('.');
                    value = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                setPath(this.data, path, value);
                if (!options.silent) this.emit('added', lng, ns, key, value);
            }
        },
        {
            key: "addResources",
            value: function addResources(lng, ns, resources) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                    silent: false
                };
                for(var m in resources)if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
                    silent: true
                });
                if (!options.silent) this.emit('added', lng, ns, resources);
            }
        },
        {
            key: "addResourceBundle",
            value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
                    silent: false
                };
                var path = [
                    lng,
                    ns
                ];
                if (lng.indexOf('.') > -1) {
                    path = lng.split('.');
                    deep = resources;
                    resources = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                var pack = getPath(this.data, path) || {
                };
                if (deep) deepExtend(pack, resources, overwrite);
                else pack = _objectSpreadDefault.default({
                }, pack, resources);
                setPath(this.data, path, pack);
                if (!options.silent) this.emit('added', lng, ns, resources);
            }
        },
        {
            key: "removeResourceBundle",
            value: function removeResourceBundle(lng, ns) {
                if (this.hasResourceBundle(lng, ns)) delete this.data[lng][ns];
                this.removeNamespaces(ns);
                this.emit('removed', lng, ns);
            }
        },
        {
            key: "hasResourceBundle",
            value: function hasResourceBundle(lng, ns) {
                return this.getResource(lng, ns) !== undefined;
            }
        },
        {
            key: "getResourceBundle",
            value: function getResourceBundle(lng, ns) {
                if (!ns) ns = this.options.defaultNS;
                if (this.options.compatibilityAPI === 'v1') return _objectSpreadDefault.default({
                }, {
                }, this.getResource(lng, ns));
                return this.getResource(lng, ns);
            }
        },
        {
            key: "getDataByLanguage",
            value: function getDataByLanguage(lng) {
                return this.data[lng];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.data;
            }
        }
    ]);
    return ResourceStore2;
}(EventEmitter);
var postProcessor = {
    processors: {
    },
    addPostProcessor: function addPostProcessor(module) {
        this.processors[module.name] = module;
    },
    handle: function handle(processors, value, key, options, translator) {
        var _this = this;
        processors.forEach(function(processor) {
            if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
        });
        return value;
    }
};
var checkedLoadedFor = {
};
var Translator1 = function(_EventEmitter) {
    _inheritsDefault.default(Translator2, _EventEmitter);
    function Translator2(services) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        _classCallCheckDefault.default(this, Translator2);
        _this = _possibleConstructorReturnDefault.default(this, _getPrototypeOfDefault.default(Translator2).call(this));
        if (isIE10) EventEmitter.call(_assertThisInitializedDefault.default(_this));
        copy([
            'resourceStore',
            'languageUtils',
            'pluralResolver',
            'interpolator',
            'backendConnector',
            'i18nFormat',
            'utils'
        ], services, _assertThisInitializedDefault.default(_this));
        _this.options = options;
        if (_this.options.keySeparator === undefined) _this.options.keySeparator = '.';
        _this.logger = baseLogger.create('translator');
        return _this;
    }
    _createClassDefault.default(Translator2, [
        {
            key: "changeLanguage",
            value: function changeLanguage(lng) {
                if (lng) this.language = lng;
            }
        },
        {
            key: "exists",
            value: function exists(key) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                    interpolation: {
                    }
                };
                var resolved = this.resolve(key, options);
                return resolved && resolved.res !== undefined;
            }
        },
        {
            key: "extractFromKey",
            value: function extractFromKey(key, options) {
                var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
                if (nsSeparator === undefined) nsSeparator = ':';
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var namespaces = options.ns || this.options.defaultNS;
                if (nsSeparator && key.indexOf(nsSeparator) > -1) {
                    var m = key.match(this.interpolator.nestingRegexp);
                    if (m && m.length > 0) return {
                        key: key,
                        namespaces: namespaces
                    };
                    var parts = key.split(nsSeparator);
                    if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
                    key = parts.join(keySeparator);
                }
                if (typeof namespaces === 'string') namespaces = [
                    namespaces
                ];
                return {
                    key: key,
                    namespaces: namespaces
                };
            }
        },
        {
            key: "translate",
            value: function translate(keys, options, lastKey) {
                var _this2 = this;
                if (_typeofDefault.default(options) !== 'object' && this.options.overloadTranslationOptionHandler) options = this.options.overloadTranslationOptionHandler(arguments);
                if (!options) options = {
                };
                if (keys === undefined || keys === null) return '';
                if (!Array.isArray(keys)) keys = [
                    String(keys)
                ];
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
                var namespace = namespaces[namespaces.length - 1];
                var lng = options.lng || this.language;
                var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                if (lng && lng.toLowerCase() === 'cimode') {
                    if (appendNamespaceToCIMode) {
                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                        return namespace + nsSeparator + key;
                    }
                    return key;
                }
                var resolved = this.resolve(keys, options);
                var res = resolved && resolved.res;
                var resUsedKey = resolved && resolved.usedKey || key;
                var resExactUsedKey = resolved && resolved.exactUsedKey || key;
                var resType = Object.prototype.toString.apply(res);
                var noObject = [
                    '[object Number]',
                    '[object Function]',
                    '[object RegExp]'
                ];
                var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
                var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
                var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
                if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
                    if (!options.returnObjects && !this.options.returnObjects) {
                        if (!this.options.returnedObjectHandler) this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                        return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpreadDefault.default({
                        }, options, {
                            ns: namespaces
                        })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
                    }
                    if (keySeparator) {
                        var resTypeIsArray = resType === '[object Array]';
                        var copy1 = resTypeIsArray ? [] : {
                        };
                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                        for(var m in res)if (Object.prototype.hasOwnProperty.call(res, m)) {
                            var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                            copy1[m] = this.translate(deepKey, _objectSpreadDefault.default({
                            }, options, {
                                joinArrays: false,
                                ns: namespaces
                            }));
                            if (copy1[m] === deepKey) copy1[m] = res[m];
                        }
                        res = copy1;
                    }
                } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
                    res = res.join(joinArrays);
                    if (res) res = this.extendTranslation(res, keys, options, lastKey);
                } else {
                    var usedDefault = false;
                    var usedKey = false;
                    var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                    var hasDefaultValue = Translator2.hasDefaultValue(options);
                    var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count) : '';
                    var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
                    if (!this.isValidLookup(res) && hasDefaultValue) {
                        usedDefault = true;
                        res = defaultValue;
                    }
                    if (!this.isValidLookup(res)) {
                        usedKey = true;
                        res = key;
                    }
                    var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
                    if (usedKey || usedDefault || updateMissing) {
                        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
                        if (keySeparator) {
                            var fk = this.resolve(key, _objectSpreadDefault.default({
                            }, options, {
                                keySeparator: false
                            }));
                            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
                        }
                        var lngs = [];
                        var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) for(var i = 0; i < fallbackLngs.length; i++)lngs.push(fallbackLngs[i]);
                        else if (this.options.saveMissingTo === 'all') lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                        else lngs.push(options.lng || this.language);
                        var send = function send1(l, k, fallbackValue) {
                            if (_this2.options.missingKeyHandler) _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
                            else if (_this2.backendConnector && _this2.backendConnector.saveMissing) _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
                            _this2.emit('missingKey', l, namespace, k, res);
                        };
                        if (this.options.saveMissing) {
                            if (this.options.saveMissingPlurals && needsPluralHandling) lngs.forEach(function(language) {
                                _this2.pluralResolver.getSuffixes(language).forEach(function(suffix) {
                                    send([
                                        language
                                    ], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                                });
                            });
                            else send(lngs, key, defaultValue);
                        }
                    }
                    res = this.extendTranslation(res, keys, options, resolved, lastKey);
                    if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
                    if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
                }
                return res;
            }
        },
        {
            key: "extendTranslation",
            value: function extendTranslation(res, key, options, resolved, lastKey) {
                var _this3 = this;
                if (this.i18nFormat && this.i18nFormat.parse) res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                    resolved: resolved
                });
                else if (!options.skipInterpolation) {
                    if (options.interpolation) this.interpolator.init(_objectSpreadDefault.default({
                    }, options, {
                        interpolation: _objectSpreadDefault.default({
                        }, this.options.interpolation, options.interpolation)
                    }));
                    var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
                    var nestBef;
                    if (skipOnVariables) {
                        var nb = res.match(this.interpolator.nestingRegexp);
                        nestBef = nb && nb.length;
                    }
                    var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
                    if (this.options.interpolation.defaultVariables) data = _objectSpreadDefault.default({
                    }, this.options.interpolation.defaultVariables, data);
                    res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                    if (skipOnVariables) {
                        var na = res.match(this.interpolator.nestingRegexp);
                        var nestAft = na && na.length;
                        if (nestBef < nestAft) options.nest = false;
                    }
                    if (options.nest !== false) res = this.interpolator.nest(res, function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        if (lastKey && lastKey[0] === args[0] && !options.context) {
                            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                            return null;
                        }
                        return _this3.translate.apply(_this3, args.concat([
                            key
                        ]));
                    }, options);
                    if (options.interpolation) this.interpolator.reset();
                }
                var postProcess = options.postProcess || this.options.postProcess;
                var postProcessorNames = typeof postProcess === 'string' ? [
                    postProcess
                ] : postProcess;
                if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpreadDefault.default({
                    i18nResolved: resolved
                }, options) : options, this);
                return res;
            }
        },
        {
            key: "resolve",
            value: function resolve(keys) {
                var _this4 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                var found;
                var usedKey;
                var exactUsedKey;
                var usedLng;
                var usedNS;
                if (typeof keys === 'string') keys = [
                    keys
                ];
                keys.forEach(function(k) {
                    if (_this4.isValidLookup(found)) return;
                    var extracted = _this4.extractFromKey(k, options);
                    var key = extracted.key;
                    usedKey = key;
                    var namespaces = extracted.namespaces;
                    if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
                    var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                    var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
                    var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
                    namespaces.forEach(function(ns) {
                        if (_this4.isValidLookup(found)) return;
                        usedNS = ns;
                        if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
                            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                        }
                        codes.forEach(function(code) {
                            if (_this4.isValidLookup(found)) return;
                            usedLng = code;
                            var finalKey = key;
                            var finalKeys = [
                                finalKey
                            ];
                            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                            else {
                                var pluralSuffix;
                                if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
                                if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
                                if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
                                if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
                            }
                            var possibleKey;
                            while(possibleKey = finalKeys.pop())if (!_this4.isValidLookup(found)) {
                                exactUsedKey = possibleKey;
                                found = _this4.getResource(code, ns, possibleKey, options);
                            }
                        });
                    });
                });
                return {
                    res: found,
                    usedKey: usedKey,
                    exactUsedKey: exactUsedKey,
                    usedLng: usedLng,
                    usedNS: usedNS
                };
            }
        },
        {
            key: "isValidLookup",
            value: function isValidLookup(res) {
                return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
            }
        },
        {
            key: "getResource",
            value: function getResource(code, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                };
                if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
                return this.resourceStore.getResource(code, ns, key, options);
            }
        }
    ], [
        {
            key: "hasDefaultValue",
            value: function hasDefaultValue(options) {
                var prefix = 'defaultValue';
                for(var option in options){
                    if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) return true;
                }
                return false;
            }
        }
    ]);
    return Translator2;
}(EventEmitter);
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
    function LanguageUtil1(options) {
        _classCallCheckDefault.default(this, LanguageUtil1);
        this.options = options;
        this.whitelist = this.options.supportedLngs || false;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create('languageUtils');
    }
    _createClassDefault.default(LanguageUtil1, [
        {
            key: "getScriptPartFromCode",
            value: function getScriptPartFromCode(code) {
                if (!code || code.indexOf('-') < 0) return null;
                var p = code.split('-');
                if (p.length === 2) return null;
                p.pop();
                if (p[p.length - 1].toLowerCase() === 'x') return null;
                return this.formatLanguageCode(p.join('-'));
            }
        },
        {
            key: "getLanguagePartFromCode",
            value: function getLanguagePartFromCode(code) {
                if (!code || code.indexOf('-') < 0) return code;
                var p = code.split('-');
                return this.formatLanguageCode(p[0]);
            }
        },
        {
            key: "formatLanguageCode",
            value: function formatLanguageCode(code) {
                if (typeof code === 'string' && code.indexOf('-') > -1) {
                    var specialCases = [
                        'hans',
                        'hant',
                        'latn',
                        'cyrl',
                        'cans',
                        'mong',
                        'arab'
                    ];
                    var p = code.split('-');
                    if (this.options.lowerCaseLng) p = p.map(function(part) {
                        return part.toLowerCase();
                    });
                    else if (p.length === 2) {
                        p[0] = p[0].toLowerCase();
                        p[1] = p[1].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                    } else if (p.length === 3) {
                        p[0] = p[0].toLowerCase();
                        if (p[1].length === 2) p[1] = p[1].toUpperCase();
                        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
                    }
                    return p.join('-');
                }
                return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
            }
        },
        {
            key: "isWhitelisted",
            value: function isWhitelisted(code) {
                this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
                return this.isSupportedCode(code);
            }
        },
        {
            key: "isSupportedCode",
            value: function isSupportedCode(code) {
                if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) code = this.getLanguagePartFromCode(code);
                return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
            }
        },
        {
            key: "getBestMatchFromCodes",
            value: function getBestMatchFromCodes(codes) {
                var _this = this;
                if (!codes) return null;
                var found;
                codes.forEach(function(code) {
                    if (found) return;
                    var cleanedLng = _this.formatLanguageCode(code);
                    if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
                });
                if (!found && this.options.supportedLngs) codes.forEach(function(code) {
                    if (found) return;
                    var lngOnly = _this.getLanguagePartFromCode(code);
                    if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
                    found = _this.options.supportedLngs.find(function(supportedLng) {
                        if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
                    });
                });
                if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
                return found;
            }
        },
        {
            key: "getFallbackCodes",
            value: function getFallbackCodes(fallbacks, code) {
                if (!fallbacks) return [];
                if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
                if (typeof fallbacks === 'string') fallbacks = [
                    fallbacks
                ];
                if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
                if (!code) return fallbacks["default"] || [];
                var found = fallbacks[code];
                if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
                if (!found) found = fallbacks[this.formatLanguageCode(code)];
                if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
                if (!found) found = fallbacks["default"];
                return found || [];
            }
        },
        {
            key: "toResolveHierarchy",
            value: function toResolveHierarchy(code, fallbackCode) {
                var _this2 = this;
                var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
                var codes = [];
                var addCode = function addCode1(c) {
                    if (!c) return;
                    if (_this2.isSupportedCode(c)) codes.push(c);
                    else _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
                };
                if (typeof code === 'string' && code.indexOf('-') > -1) {
                    if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
                    if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
                    if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
                } else if (typeof code === 'string') addCode(this.formatLanguageCode(code));
                fallbackCodes.forEach(function(fc) {
                    if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
                });
                return codes;
            }
        }
    ]);
    return LanguageUtil1;
}();
var sets = [
    {
        lngs: [
            'ach',
            'ak',
            'am',
            'arn',
            'br',
            'fil',
            'gun',
            'ln',
            'mfe',
            'mg',
            'mi',
            'oc',
            'pt',
            'pt-BR',
            'tg',
            'tl',
            'ti',
            'tr',
            'uz',
            'wa'
        ],
        nr: [
            1,
            2
        ],
        fc: 1
    },
    {
        lngs: [
            'af',
            'an',
            'ast',
            'az',
            'bg',
            'bn',
            'ca',
            'da',
            'de',
            'dev',
            'el',
            'en',
            'eo',
            'es',
            'et',
            'eu',
            'fi',
            'fo',
            'fur',
            'fy',
            'gl',
            'gu',
            'ha',
            'hi',
            'hu',
            'hy',
            'ia',
            'it',
            'kk',
            'kn',
            'ku',
            'lb',
            'mai',
            'ml',
            'mn',
            'mr',
            'nah',
            'nap',
            'nb',
            'ne',
            'nl',
            'nn',
            'no',
            'nso',
            'pa',
            'pap',
            'pms',
            'ps',
            'pt-PT',
            'rm',
            'sco',
            'se',
            'si',
            'so',
            'son',
            'sq',
            'sv',
            'sw',
            'ta',
            'te',
            'tk',
            'ur',
            'yo'
        ],
        nr: [
            1,
            2
        ],
        fc: 2
    },
    {
        lngs: [
            'ay',
            'bo',
            'cgg',
            'fa',
            'ht',
            'id',
            'ja',
            'jbo',
            'ka',
            'km',
            'ko',
            'ky',
            'lo',
            'ms',
            'sah',
            'su',
            'th',
            'tt',
            'ug',
            'vi',
            'wo',
            'zh'
        ],
        nr: [
            1
        ],
        fc: 3
    },
    {
        lngs: [
            'be',
            'bs',
            'cnr',
            'dz',
            'hr',
            'ru',
            'sr',
            'uk'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 4
    },
    {
        lngs: [
            'ar'
        ],
        nr: [
            0,
            1,
            2,
            3,
            11,
            100
        ],
        fc: 5
    },
    {
        lngs: [
            'cs',
            'sk'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 6
    },
    {
        lngs: [
            'csb',
            'pl'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 7
    },
    {
        lngs: [
            'cy'
        ],
        nr: [
            1,
            2,
            3,
            8
        ],
        fc: 8
    },
    {
        lngs: [
            'fr'
        ],
        nr: [
            1,
            2
        ],
        fc: 9
    },
    {
        lngs: [
            'ga'
        ],
        nr: [
            1,
            2,
            3,
            7,
            11
        ],
        fc: 10
    },
    {
        lngs: [
            'gd'
        ],
        nr: [
            1,
            2,
            3,
            20
        ],
        fc: 11
    },
    {
        lngs: [
            'is'
        ],
        nr: [
            1,
            2
        ],
        fc: 12
    },
    {
        lngs: [
            'jv'
        ],
        nr: [
            0,
            1
        ],
        fc: 13
    },
    {
        lngs: [
            'kw'
        ],
        nr: [
            1,
            2,
            3,
            4
        ],
        fc: 14
    },
    {
        lngs: [
            'lt'
        ],
        nr: [
            1,
            2,
            10
        ],
        fc: 15
    },
    {
        lngs: [
            'lv'
        ],
        nr: [
            1,
            2,
            0
        ],
        fc: 16
    },
    {
        lngs: [
            'mk'
        ],
        nr: [
            1,
            2
        ],
        fc: 17
    },
    {
        lngs: [
            'mnk'
        ],
        nr: [
            0,
            1,
            2
        ],
        fc: 18
    },
    {
        lngs: [
            'mt'
        ],
        nr: [
            1,
            2,
            11,
            20
        ],
        fc: 19
    },
    {
        lngs: [
            'or'
        ],
        nr: [
            2,
            1
        ],
        fc: 2
    },
    {
        lngs: [
            'ro'
        ],
        nr: [
            1,
            2,
            20
        ],
        fc: 20
    },
    {
        lngs: [
            'sl'
        ],
        nr: [
            5,
            1,
            2,
            3
        ],
        fc: 21
    },
    {
        lngs: [
            'he',
            'iw'
        ],
        nr: [
            1,
            2,
            20,
            21
        ],
        fc: 22
    }
];
var _rulesPluralsTypes = {
    1: function _(n) {
        return Number(n > 1);
    },
    2: function _1(n) {
        return Number(n != 1);
    },
    3: function _2(n) {
        return 0;
    },
    4: function _3(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    5: function _4(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
    },
    6: function _5(n) {
        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
    },
    7: function _6(n) {
        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    8: function _7(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
    },
    9: function _8(n) {
        return Number(n >= 2);
    },
    10: function _9(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
    },
    11: function _10(n) {
        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
    },
    12: function _11(n) {
        return Number(n % 10 != 1 || n % 100 == 11);
    },
    13: function _12(n) {
        return Number(n !== 0);
    },
    14: function _13(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
    },
    15: function _14(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    16: function _15(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
    },
    17: function _16(n) {
        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
    },
    18: function _17(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
    },
    19: function _18(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
    },
    20: function _19(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
    },
    21: function _20(n) {
        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
    },
    22: function _21(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
    }
};
function createRules() {
    var rules = {
    };
    sets.forEach(function(set) {
        set.lngs.forEach(function(l) {
            rules[l] = {
                numbers: set.nr,
                plurals: _rulesPluralsTypes[set.fc]
            };
        });
    });
    return rules;
}
var PluralResolver = function() {
    function PluralResolver1(languageUtils) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        _classCallCheckDefault.default(this, PluralResolver1);
        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create('pluralResolver');
        this.rules = createRules();
    }
    _createClassDefault.default(PluralResolver1, [
        {
            key: "addRule",
            value: function addRule(lng, obj) {
                this.rules[lng] = obj;
            }
        },
        {
            key: "getRule",
            value: function getRule(code) {
                return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
            }
        },
        {
            key: "needsPlural",
            value: function needsPlural(code) {
                var rule = this.getRule(code);
                return rule && rule.numbers.length > 1;
            }
        },
        {
            key: "getPluralFormsOfKey",
            value: function getPluralFormsOfKey(code, key) {
                return this.getSuffixes(code).map(function(suffix) {
                    return key + suffix;
                });
            }
        },
        {
            key: "getSuffixes",
            value: function getSuffixes(code) {
                var _this = this;
                var rule = this.getRule(code);
                if (!rule) return [];
                return rule.numbers.map(function(number) {
                    return _this.getSuffix(code, number);
                });
            }
        },
        {
            key: "getSuffix",
            value: function getSuffix(code, count) {
                var _this2 = this;
                var rule = this.getRule(code);
                if (rule) {
                    var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                    var suffix = rule.numbers[idx];
                    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                        if (suffix === 2) suffix = 'plural';
                        else if (suffix === 1) suffix = '';
                    }
                    var returnSuffix = function returnSuffix1() {
                        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
                    };
                    if (this.options.compatibilityJSON === 'v1') {
                        if (suffix === 1) return '';
                        if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
                        return returnSuffix();
                    } else if (this.options.compatibilityJSON === 'v2') return returnSuffix();
                    else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) return returnSuffix();
                    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
                }
                this.logger.warn("no plural rule found for: ".concat(code));
                return '';
            }
        }
    ]);
    return PluralResolver1;
}();
var Interpolator = function() {
    function Interpolator1() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        };
        _classCallCheckDefault.default(this, Interpolator1);
        this.logger = baseLogger.create('interpolator');
        this.options = options;
        this.format = options.interpolation && options.interpolation.format || function(value) {
            return value;
        };
        this.init(options);
    }
    _createClassDefault.default(Interpolator1, [
        {
            key: "init",
            value: function init() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                };
                if (!options.interpolation) options.interpolation = {
                    escapeValue: true
                };
                var iOpts = options.interpolation;
                this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
                this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
                this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
                this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
                this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
                this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
                this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
                this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
                this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
                this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
                this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
                this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
                this.resetRegExp();
            }
        },
        {
            key: "reset",
            value: function reset() {
                if (this.options) this.init(this.options);
            }
        },
        {
            key: "resetRegExp",
            value: function resetRegExp() {
                var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
                this.regexp = new RegExp(regexpStr, 'g');
                var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
                this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
                var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
                this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
            }
        },
        {
            key: "interpolate",
            value: function interpolate(str, data, lng, options) {
                var _this = this;
                var match;
                var value;
                var replaces;
                var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {
                };
                function regexSafe(val) {
                    return val.replace(/\$/g, '$$$$');
                }
                var handleFormat = function handleFormat1(key) {
                    if (key.indexOf(_this.formatSeparator) < 0) {
                        var path = getPathWithDefaults(data, defaultData, key);
                        return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpreadDefault.default({
                        }, options, data, {
                            interpolationkey: key
                        })) : path;
                    }
                    var p = key.split(_this.formatSeparator);
                    var k = p.shift().trim();
                    var f = p.join(_this.formatSeparator).trim();
                    return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpreadDefault.default({
                    }, options, data, {
                        interpolationkey: k
                    }));
                };
                this.resetRegExp();
                var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
                var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
                var todos = [
                    {
                        regex: this.regexpUnescape,
                        safeValue: function safeValue(val) {
                            return regexSafe(val);
                        }
                    },
                    {
                        regex: this.regexp,
                        safeValue: function safeValue(val) {
                            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
                        }
                    }
                ];
                todos.forEach(function(todo) {
                    replaces = 0;
                    while(match = todo.regex.exec(str)){
                        value = handleFormat(match[1].trim());
                        if (value === undefined) {
                            if (typeof missingInterpolationHandler === 'function') {
                                var temp = missingInterpolationHandler(str, match, options);
                                value = typeof temp === 'string' ? temp : '';
                            } else if (skipOnVariables) {
                                value = match[0];
                                continue;
                            } else {
                                _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));
                                value = '';
                            }
                        } else if (typeof value !== 'string' && !_this.useRawValueToEscape) value = makeString(value);
                        var safeValue = todo.safeValue(value);
                        str = str.replace(match[0], safeValue);
                        if (skipOnVariables) {
                            todo.regex.lastIndex += safeValue.length;
                            todo.regex.lastIndex -= match[0].length;
                        } else todo.regex.lastIndex = 0;
                        replaces++;
                        if (replaces >= _this.maxReplaces) break;
                    }
                });
                return str;
            }
        },
        {
            key: "nest",
            value: function nest(str, fc) {
                var _this2 = this;
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
                };
                var match;
                var value;
                var clonedOptions = _objectSpreadDefault.default({
                }, options);
                clonedOptions.applyPostProcessor = false;
                delete clonedOptions.defaultValue;
                function handleHasOptions(key, inheritedOptions) {
                    var sep = this.nestingOptionsSeparator;
                    if (key.indexOf(sep) < 0) return key;
                    var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
                    var optionsString = "{".concat(c[1]);
                    key = c[0];
                    optionsString = this.interpolate(optionsString, clonedOptions);
                    optionsString = optionsString.replace(/'/g, '"');
                    try {
                        clonedOptions = JSON.parse(optionsString);
                        if (inheritedOptions) clonedOptions = _objectSpreadDefault.default({
                        }, inheritedOptions, clonedOptions);
                    } catch (e) {
                        this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
                        return "".concat(key).concat(sep).concat(optionsString);
                    }
                    delete clonedOptions.defaultValue;
                    return key;
                }
                while(match = this.nestingRegexp.exec(str)){
                    var formatters = [];
                    var doReduce = false;
                    if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
                        var r = match[1].split(this.formatSeparator).map(function(elem) {
                            return elem.trim();
                        });
                        match[1] = r.shift();
                        formatters = r;
                        doReduce = true;
                    }
                    value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                    if (value && match[0] === str && typeof value !== 'string') return value;
                    if (typeof value !== 'string') value = makeString(value);
                    if (!value) {
                        this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                        value = '';
                    }
                    if (doReduce) value = formatters.reduce(function(v, f) {
                        return _this2.format(v, f, options.lng, _objectSpreadDefault.default({
                        }, options, {
                            interpolationkey: match[1].trim()
                        }));
                    }, value.trim());
                    str = str.replace(match[0], value);
                    this.regexp.lastIndex = 0;
                }
                return str;
            }
        }
    ]);
    return Interpolator1;
}();
function remove(arr, what) {
    var found = arr.indexOf(what);
    while(found !== -1){
        arr.splice(found, 1);
        found = arr.indexOf(what);
    }
}
var Connector1 = function(_EventEmitter) {
    _inheritsDefault.default(Connector2, _EventEmitter);
    function Connector2(backend, store, services) {
        var _this;
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        };
        _classCallCheckDefault.default(this, Connector2);
        _this = _possibleConstructorReturnDefault.default(this, _getPrototypeOfDefault.default(Connector2).call(this));
        if (isIE10) EventEmitter.call(_assertThisInitializedDefault.default(_this));
        _this.backend = backend;
        _this.store = store;
        _this.services = services;
        _this.languageUtils = services.languageUtils;
        _this.options = options;
        _this.logger = baseLogger.create('backendConnector');
        _this.state = {
        };
        _this.queue = [];
        if (_this.backend && _this.backend.init) _this.backend.init(services, options.backend, options);
        return _this;
    }
    _createClassDefault.default(Connector2, [
        {
            key: "queueLoad",
            value: function queueLoad(languages, namespaces, options, callback) {
                var _this2 = this;
                var toLoad = [];
                var pending = [];
                var toLoadLanguages = [];
                var toLoadNamespaces = [];
                languages.forEach(function(lng) {
                    var hasAllNamespaces = true;
                    namespaces.forEach(function(ns) {
                        var name = "".concat(lng, "|").concat(ns);
                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) _this2.state[name] = 2;
                        else if (_this2.state[name] < 0) ;
                        else if (_this2.state[name] === 1) {
                            if (pending.indexOf(name) < 0) pending.push(name);
                        } else {
                            _this2.state[name] = 1;
                            hasAllNamespaces = false;
                            if (pending.indexOf(name) < 0) pending.push(name);
                            if (toLoad.indexOf(name) < 0) toLoad.push(name);
                            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
                        }
                    });
                    if (!hasAllNamespaces) toLoadLanguages.push(lng);
                });
                if (toLoad.length || pending.length) this.queue.push({
                    pending: pending,
                    loaded: {
                    },
                    errors: [],
                    callback: callback
                });
                return {
                    toLoad: toLoad,
                    pending: pending,
                    toLoadLanguages: toLoadLanguages,
                    toLoadNamespaces: toLoadNamespaces
                };
            }
        },
        {
            key: "loaded",
            value: function loaded(name, err, data) {
                var s = name.split('|');
                var lng = s[0];
                var ns = s[1];
                if (err) this.emit('failedLoading', lng, ns, err);
                if (data) this.store.addResourceBundle(lng, ns, data);
                this.state[name] = err ? -1 : 2;
                var loaded = {
                };
                this.queue.forEach(function(q) {
                    pushPath(q.loaded, [
                        lng
                    ], ns);
                    remove(q.pending, name);
                    if (err) q.errors.push(err);
                    if (q.pending.length === 0 && !q.done) {
                        Object.keys(q.loaded).forEach(function(l) {
                            if (!loaded[l]) loaded[l] = [];
                            if (q.loaded[l].length) q.loaded[l].forEach(function(ns1) {
                                if (loaded[l].indexOf(ns1) < 0) loaded[l].push(ns1);
                            });
                        });
                        q.done = true;
                        if (q.errors.length) q.callback(q.errors);
                        else q.callback();
                    }
                });
                this.emit('loaded', loaded);
                this.queue = this.queue.filter(function(q) {
                    return !q.done;
                });
            }
        },
        {
            key: "read",
            value: function read(lng, ns, fcName) {
                var _this3 = this;
                var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
                var callback = arguments.length > 5 ? arguments[5] : undefined;
                if (!lng.length) return callback(null, {
                });
                return this.backend[fcName](lng, ns, function(err, data) {
                    if (err && data && tried < 5) {
                        setTimeout(function() {
                            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                        }, wait);
                        return;
                    }
                    callback(err, data);
                });
            }
        },
        {
            key: "prepareLoading",
            value: function prepareLoading(languages, namespaces) {
                var _this4 = this;
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
                };
                var callback = arguments.length > 3 ? arguments[3] : undefined;
                if (!this.backend) {
                    this.logger.warn('No backend was added via i18next.use. Will not load resources.');
                    return callback && callback();
                }
                if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
                if (typeof namespaces === 'string') namespaces = [
                    namespaces
                ];
                var toLoad = this.queueLoad(languages, namespaces, options, callback);
                if (!toLoad.toLoad.length) {
                    if (!toLoad.pending.length) callback();
                    return null;
                }
                toLoad.toLoad.forEach(function(name) {
                    _this4.loadOne(name);
                });
            }
        },
        {
            key: "load",
            value: function load(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {
                }, callback);
            }
        },
        {
            key: "reload",
            value: function reload(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {
                    reload: true
                }, callback);
            }
        },
        {
            key: "loadOne",
            value: function loadOne(name) {
                var _this5 = this;
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var s = name.split('|');
                var lng = s[0];
                var ns = s[1];
                this.read(lng, ns, 'read', undefined, undefined, function(err, data) {
                    if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
                    if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
                    _this5.loaded(name, err, data);
                });
            }
        },
        {
            key: "saveMissing",
            value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
                };
                if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                    this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                    return;
                }
                if (key === undefined || key === null || key === '') return;
                if (this.backend && this.backend.create) this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpreadDefault.default({
                }, options, {
                    isUpdate: isUpdate
                }));
                if (!languages || !languages[0]) return;
                this.store.addResource(languages[0], namespace, key, fallbackValue);
            }
        }
    ]);
    return Connector2;
}(EventEmitter);
function get() {
    return {
        debug: false,
        initImmediate: true,
        ns: [
            'translation'
        ],
        defaultNS: [
            'translation'
        ],
        fallbackLng: [
            'dev'
        ],
        fallbackNS: false,
        whitelist: false,
        nonExplicitWhitelist: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: 'all',
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: '.',
        nsSeparator: ':',
        pluralSeparator: '_',
        contextSeparator: '_',
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: 'fallback',
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: true,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle(args) {
            var ret = {
            };
            if (_typeofDefault.default(args[1]) === 'object') ret = args[1];
            if (typeof args[1] === 'string') ret.defaultValue = args[1];
            if (typeof args[2] === 'string') ret.tDescription = args[2];
            if (_typeofDefault.default(args[2]) === 'object' || _typeofDefault.default(args[3]) === 'object') {
                var options = args[3] || args[2];
                Object.keys(options).forEach(function(key) {
                    ret[key] = options[key];
                });
            }
            return ret;
        },
        interpolation: {
            escapeValue: true,
            format: function format(value, _format, lng, options) {
                return value;
            },
            prefix: '{{',
            suffix: '}}',
            formatSeparator: ',',
            unescapePrefix: '-',
            nestingPrefix: '$t(',
            nestingSuffix: ')',
            nestingOptionsSeparator: ',',
            maxReplaces: 1000,
            skipOnVariables: false
        }
    };
}
function transformOptions(options) {
    if (typeof options.ns === 'string') options.ns = [
        options.ns
    ];
    if (typeof options.fallbackLng === 'string') options.fallbackLng = [
        options.fallbackLng
    ];
    if (typeof options.fallbackNS === 'string') options.fallbackNS = [
        options.fallbackNS
    ];
    if (options.whitelist) {
        if (options.whitelist && options.whitelist.indexOf('cimode') < 0) options.whitelist = options.whitelist.concat([
            'cimode'
        ]);
        options.supportedLngs = options.whitelist;
    }
    if (options.nonExplicitWhitelist) options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
    if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) options.supportedLngs = options.supportedLngs.concat([
        'cimode'
    ]);
    return options;
}
function noop() {
}
var I18n1 = function(_EventEmitter) {
    _inheritsDefault.default(I18n2, _EventEmitter);
    function I18n2() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        };
        var callback = arguments.length > 1 ? arguments[1] : undefined;
        _classCallCheckDefault.default(this, I18n2);
        _this = _possibleConstructorReturnDefault.default(this, _getPrototypeOfDefault.default(I18n2).call(this));
        if (isIE10) EventEmitter.call(_assertThisInitializedDefault.default(_this));
        _this.options = transformOptions(options);
        _this.services = {
        };
        _this.logger = baseLogger;
        _this.modules = {
            external: []
        };
        if (callback && !_this.isInitialized && !options.isClone) {
            if (!_this.options.initImmediate) {
                _this.init(options, callback);
                return _possibleConstructorReturnDefault.default(_this, _assertThisInitializedDefault.default(_this));
            }
            setTimeout(function() {
                _this.init(options, callback);
            }, 0);
        }
        return _this;
    }
    _createClassDefault.default(I18n2, [
        {
            key: "init",
            value: function init() {
                var _this2 = this;
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                };
                var callback = arguments.length > 1 ? arguments[1] : undefined;
                if (typeof options === 'function') {
                    callback = options;
                    options = {
                    };
                }
                if (options.whitelist && !options.supportedLngs) this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
                if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
                this.options = _objectSpreadDefault.default({
                }, get(), this.options, transformOptions(options));
                this.format = this.options.interpolation.format;
                if (!callback) callback = noop;
                function createClassOnDemand(ClassOrObject) {
                    if (!ClassOrObject) return null;
                    if (typeof ClassOrObject === 'function') return new ClassOrObject();
                    return ClassOrObject;
                }
                if (!this.options.isClone) {
                    if (this.modules.logger) baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                    else baseLogger.init(null, this.options);
                    var lu = new LanguageUtil(this.options);
                    this.store = new ResourceStore1(this.options.resources, this.options);
                    var s = this.services;
                    s.logger = baseLogger;
                    s.resourceStore = this.store;
                    s.languageUtils = lu;
                    s.pluralResolver = new PluralResolver(lu, {
                        prepend: this.options.pluralSeparator,
                        compatibilityJSON: this.options.compatibilityJSON,
                        simplifyPluralSuffix: this.options.simplifyPluralSuffix
                    });
                    s.interpolator = new Interpolator(this.options);
                    s.utils = {
                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                    };
                    s.backendConnector = new Connector1(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                    s.backendConnector.on('*', function(event) {
                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    if (this.modules.languageDetector) {
                        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                        s.languageDetector.init(s, this.options.detection, this.options);
                    }
                    if (this.modules.i18nFormat) {
                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                        if (s.i18nFormat.init) s.i18nFormat.init(this);
                    }
                    this.translator = new Translator1(this.services, this.options);
                    this.translator.on('*', function(event) {
                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    this.modules.external.forEach(function(m) {
                        if (m.init) m.init(_this2);
                    });
                }
                if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
                    var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                    if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
                }
                if (!this.services.languageDetector && !this.options.lng) this.logger.warn('init: no languageDetector is used and no lng is defined');
                var storeApi = [
                    'getResource',
                    'hasResourceBundle',
                    'getResourceBundle',
                    'getDataByLanguage'
                ];
                storeApi.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store;
                        return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
                    };
                });
                var storeApiChained = [
                    'addResource',
                    'addResources',
                    'addResourceBundle',
                    'removeResourceBundle'
                ];
                storeApiChained.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store2;
                        (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
                        return _this2;
                    };
                });
                var deferred = defer();
                var load = function load1() {
                    var finish = function finish1(err, t) {
                        if (_this2.isInitialized) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
                        _this2.isInitialized = true;
                        if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);
                        _this2.emit('initialized', _this2.options);
                        deferred.resolve(t);
                        callback(err, t);
                    };
                    if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
                    _this2.changeLanguage(_this2.options.lng, finish);
                };
                if (this.options.resources || !this.options.initImmediate) load();
                else setTimeout(load, 0);
                return deferred;
            }
        },
        {
            key: "loadResources",
            value: function loadResources(language) {
                var _this3 = this;
                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
                var usedCallback = callback;
                var usedLng = typeof language === 'string' ? language : this.language;
                if (typeof language === 'function') usedCallback = language;
                if (!this.options.resources || this.options.partialBundledLanguages) {
                    if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
                    var toLoad = [];
                    var append = function append1(lng) {
                        if (!lng) return;
                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                        lngs.forEach(function(l) {
                            if (toLoad.indexOf(l) < 0) toLoad.push(l);
                        });
                    };
                    if (!usedLng) {
                        var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                        fallbacks.forEach(function(l) {
                            return append(l);
                        });
                    } else append(usedLng);
                    if (this.options.preload) this.options.preload.forEach(function(l) {
                        return append(l);
                    });
                    this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
                } else usedCallback(null);
            }
        },
        {
            key: "reloadResources",
            value: function reloadResources(lngs, ns, callback) {
                var deferred = defer();
                if (!lngs) lngs = this.languages;
                if (!ns) ns = this.options.ns;
                if (!callback) callback = noop;
                this.services.backendConnector.reload(lngs, ns, function(err) {
                    deferred.resolve();
                    callback(err);
                });
                return deferred;
            }
        },
        {
            key: "use",
            value: function use(module) {
                if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
                if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
                if (module.type === 'backend') this.modules.backend = module;
                if (module.type === 'logger' || module.log && module.warn && module.error) this.modules.logger = module;
                if (module.type === 'languageDetector') this.modules.languageDetector = module;
                if (module.type === 'i18nFormat') this.modules.i18nFormat = module;
                if (module.type === 'postProcessor') postProcessor.addPostProcessor(module);
                if (module.type === '3rdParty') this.modules.external.push(module);
                return this;
            }
        },
        {
            key: "changeLanguage",
            value: function changeLanguage(lng, callback) {
                var _this4 = this;
                this.isLanguageChangingTo = lng;
                var deferred = defer();
                this.emit('languageChanging', lng);
                var done = function done1(err, l) {
                    if (l) {
                        _this4.language = l;
                        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        _this4.translator.changeLanguage(l);
                        _this4.isLanguageChangingTo = undefined;
                        _this4.emit('languageChanged', l);
                        _this4.logger.log('languageChanged', l);
                    } else _this4.isLanguageChangingTo = undefined;
                    deferred.resolve(function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                    if (callback) callback(err, function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                };
                var setLng = function setLng1(lngs) {
                    if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
                    var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
                    if (l) {
                        if (!_this4.language) {
                            _this4.language = l;
                            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        }
                        if (!_this4.translator.language) _this4.translator.changeLanguage(l);
                        if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
                    }
                    _this4.loadResources(l, function(err) {
                        done(err, l);
                    });
                };
                if (!lng && this.services.languageDetector && !this.services.languageDetector.async) setLng(this.services.languageDetector.detect());
                else if (!lng && this.services.languageDetector && this.services.languageDetector.async) this.services.languageDetector.detect(setLng);
                else setLng(lng);
                return deferred;
            }
        },
        {
            key: "getFixedT",
            value: function getFixedT(lng, ns) {
                var _this5 = this;
                var fixedT = function fixedT1(key, opts) {
                    var options;
                    if (_typeofDefault.default(opts) !== 'object') {
                        for(var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++)rest[_key3 - 2] = arguments[_key3];
                        options = _this5.options.overloadTranslationOptionHandler([
                            key,
                            opts
                        ].concat(rest));
                    } else options = _objectSpreadDefault.default({
                    }, opts);
                    options.lng = options.lng || fixedT1.lng;
                    options.lngs = options.lngs || fixedT1.lngs;
                    options.ns = options.ns || fixedT1.ns;
                    return _this5.t(key, options);
                };
                if (typeof lng === 'string') fixedT.lng = lng;
                else fixedT.lngs = lng;
                fixedT.ns = ns;
                return fixedT;
            }
        },
        {
            key: "t",
            value: function t() {
                var _this$translator;
                return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
            }
        },
        {
            key: "exists",
            value: function exists() {
                var _this$translator2;
                return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
            }
        },
        {
            key: "setDefaultNamespace",
            value: function setDefaultNamespace(ns) {
                this.options.defaultNS = ns;
            }
        },
        {
            key: "hasLoadedNamespace",
            value: function hasLoadedNamespace(ns) {
                var _this6 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                };
                if (!this.isInitialized) {
                    this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
                    return false;
                }
                if (!this.languages || !this.languages.length) {
                    this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
                    return false;
                }
                var lng = this.languages[0];
                var fallbackLng = this.options ? this.options.fallbackLng : false;
                var lastLng = this.languages[this.languages.length - 1];
                if (lng.toLowerCase() === 'cimode') return true;
                var loadNotPending = function loadNotPending1(l, n) {
                    var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
                    return loadState === -1 || loadState === 2;
                };
                if (options.precheck) {
                    var preResult = options.precheck(this, loadNotPending);
                    if (preResult !== undefined) return preResult;
                }
                if (this.hasResourceBundle(lng, ns)) return true;
                if (!this.services.backendConnector.backend) return true;
                if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
                return false;
            }
        },
        {
            key: "loadNamespaces",
            value: function loadNamespaces(ns, callback) {
                var _this7 = this;
                var deferred = defer();
                if (!this.options.ns) {
                    callback && callback();
                    return Promise.resolve();
                }
                if (typeof ns === 'string') ns = [
                    ns
                ];
                ns.forEach(function(n) {
                    if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
                });
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "loadLanguages",
            value: function loadLanguages(lngs, callback) {
                var deferred = defer();
                if (typeof lngs === 'string') lngs = [
                    lngs
                ];
                var preloaded = this.options.preload || [];
                var newLngs = lngs.filter(function(lng) {
                    return preloaded.indexOf(lng) < 0;
                });
                if (!newLngs.length) {
                    if (callback) callback();
                    return Promise.resolve();
                }
                this.options.preload = preloaded.concat(newLngs);
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "dir",
            value: function dir(lng) {
                if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
                if (!lng) return 'rtl';
                var rtlLngs = [
                    'ar',
                    'shu',
                    'sqr',
                    'ssh',
                    'xaa',
                    'yhd',
                    'yud',
                    'aao',
                    'abh',
                    'abv',
                    'acm',
                    'acq',
                    'acw',
                    'acx',
                    'acy',
                    'adf',
                    'ads',
                    'aeb',
                    'aec',
                    'afb',
                    'ajp',
                    'apc',
                    'apd',
                    'arb',
                    'arq',
                    'ars',
                    'ary',
                    'arz',
                    'auz',
                    'avl',
                    'ayh',
                    'ayl',
                    'ayn',
                    'ayp',
                    'bbz',
                    'pga',
                    'he',
                    'iw',
                    'ps',
                    'pbt',
                    'pbu',
                    'pst',
                    'prp',
                    'prd',
                    'ug',
                    'ur',
                    'ydd',
                    'yds',
                    'yih',
                    'ji',
                    'yi',
                    'hbo',
                    'men',
                    'xmn',
                    'fa',
                    'jpr',
                    'peo',
                    'pes',
                    'prs',
                    'dv',
                    'sam'
                ];
                return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
            }
        },
        {
            key: "createInstance",
            value: function createInstance() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                };
                var callback = arguments.length > 1 ? arguments[1] : undefined;
                return new I18n2(options, callback);
            }
        },
        {
            key: "cloneInstance",
            value: function cloneInstance() {
                var _this8 = this;
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                };
                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
                var mergedOptions = _objectSpreadDefault.default({
                }, this.options, options, {
                    isClone: true
                });
                var clone = new I18n2(mergedOptions);
                var membersToCopy = [
                    'store',
                    'services',
                    'language'
                ];
                membersToCopy.forEach(function(m) {
                    clone[m] = _this8[m];
                });
                clone.services = _objectSpreadDefault.default({
                }, this.services);
                clone.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                clone.translator = new Translator1(clone.services, clone.options);
                clone.translator.on('*', function(event) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
                    clone.emit.apply(clone, [
                        event
                    ].concat(args));
                });
                clone.init(mergedOptions, callback);
                clone.translator.options = clone.options;
                clone.translator.backendConnector.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                return clone;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    options: this.options,
                    store: this.store,
                    language: this.language,
                    languages: this.languages
                };
            }
        }
    ]);
    return I18n2;
}(EventEmitter);
var i18next = new I18n1();
exports.default = i18next;

},{"@babel/runtime/helpers/esm/typeof":"lAtv6","@babel/runtime/helpers/esm/objectSpread":"k7kTN","@babel/runtime/helpers/esm/classCallCheck":"aDFYs","@babel/runtime/helpers/esm/createClass":"jqMkn","@babel/runtime/helpers/esm/possibleConstructorReturn":"jDSap","@babel/runtime/helpers/esm/getPrototypeOf":"37OZS","@babel/runtime/helpers/esm/assertThisInitialized":"9OWJy","@babel/runtime/helpers/esm/inherits":"IF7oB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lAtv6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
exports.default = _typeof;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k7kTN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _definePropertyJs = require("./defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? Object(arguments[i]) : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            _definePropertyJsDefault.default(target, key, source[key]);
        });
    }
    return target;
}
exports.default = _objectSpread;

},{"./defineProperty.js":"1PaTi","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1PaTi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
exports.default = _defineProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aDFYs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports.default = _classCallCheck;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jqMkn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
exports.default = _createClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jDSap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _assertThisInitializedJs = require("./assertThisInitialized.js");
var _assertThisInitializedJsDefault = parcelHelpers.interopDefault(_assertThisInitializedJs);
function _possibleConstructorReturn(self, call) {
    if (call && (_typeofDefault.default(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitializedJsDefault.default(self);
}
exports.default = _possibleConstructorReturn;

},{"@babel/runtime/helpers/typeof":"2v6LF","./assertThisInitialized.js":"9OWJy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2v6LF":[function(require,module,exports) {
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        module.exports = _typeof = function _typeof1(obj1) {
            return typeof obj1;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
    } else {
        module.exports = _typeof = function _typeof1(obj1) {
            return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
    return _typeof(obj);
}
module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"9OWJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"37OZS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf1(o1) {
        return o1.__proto__ || Object.getPrototypeOf(o1);
    };
    return _getPrototypeOf(o);
}
exports.default = _getPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"IF7oB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inherits;

},{"./setPrototypeOf.js":"flZig","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"flZig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1ebQI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reject", ()=>reject
);
parcelHelpers.export(exports, "result", ()=>result
);
parcelHelpers.export(exports, "mapResult", ()=>mapResult
);
parcelHelpers.export(exports, "bindResult", ()=>bindResult
);
parcelHelpers.export(exports, "mapResultError", ()=>mapResultError
);
parcelHelpers.export(exports, "tap", ()=>tap
);
parcelHelpers.export(exports, "PromiseBuilder", ()=>PromiseBuilder
);
parcelHelpers.export(exports, "PromiseBuilder$reflection", ()=>PromiseBuilder$reflection
);
parcelHelpers.export(exports, "PromiseBuilder_$ctor", ()=>PromiseBuilder_$ctor
);
parcelHelpers.export(exports, "PromiseBuilder__For_1565554B", ()=>PromiseBuilder__For_1565554B
);
parcelHelpers.export(exports, "PromiseBuilder__While_2044D34", ()=>PromiseBuilder__While_2044D34
);
parcelHelpers.export(exports, "PromiseBuilder__TryFinally_7D49A2FD", ()=>PromiseBuilder__TryFinally_7D49A2FD
);
parcelHelpers.export(exports, "PromiseBuilder__Delay_62FBFDE1", ()=>PromiseBuilder__Delay_62FBFDE1
);
parcelHelpers.export(exports, "PromiseBuilder__Run_212F1D4B", ()=>PromiseBuilder__Run_212F1D4B
);
parcelHelpers.export(exports, "PromiseBuilder__Using_74F7E79D", ()=>PromiseBuilder__Using_74F7E79D
);
var _choiceJs = require("../fable-library.3.2.10/Choice.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
function reject(reason) {
    return Promise.reject(reason);
}
function result(a) {
    return a.then((arg)=>new _choiceJs.FSharpResult$2(0, arg)
    , (arg_1)=>new _choiceJs.FSharpResult$2(1, arg_1)
    );
}
function mapResult(fn, a) {
    return a.then((result_1)=>_choiceJs.Result_Map(fn, result_1)
    );
}
function bindResult(fn, a) {
    return a.then((a_1)=>{
        if (a_1.tag === 1) return Promise.resolve(new _choiceJs.FSharpResult$2(1, a_1.fields[0]));
        else return result(fn(a_1.fields[0]));
    });
}
function mapResultError(fn, a) {
    return a.then((result_1)=>_choiceJs.Result_MapError(fn, result_1)
    );
}
function tap(fn, a) {
    return a.then((x)=>{
        fn(x);
        return x;
    });
}
class PromiseBuilder {
    constructor(){
    }
}
function PromiseBuilder$reflection() {
    return _reflectionJs.class_type("Promise.PromiseBuilder", void 0, PromiseBuilder);
}
_c = PromiseBuilder$reflection;
function PromiseBuilder_$ctor() {
    return new PromiseBuilder();
}
_c1 = PromiseBuilder_$ctor;
function PromiseBuilder__For_1565554B(x, seq, body) {
    let p = Promise.resolve(undefined);
    const enumerator = _utilJs.getEnumerator(seq);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const a = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            p = p.then(()=>body(a)
            );
        }
    } finally{
        enumerator.Dispose();
    }
    return p;
}
_c2 = PromiseBuilder__For_1565554B;
function PromiseBuilder__While_2044D34(x, guard, p) {
    if (guard()) return p.then(()=>PromiseBuilder__While_2044D34(x, guard, p)
    );
    else return Promise.resolve(undefined);
}
_c3 = PromiseBuilder__While_2044D34;
function PromiseBuilder__TryFinally_7D49A2FD(x, p, compensation) {
    return p.then((x_1)=>{
        compensation();
        return x_1;
    }, (er)=>{
        compensation();
        throw er;
    });
}
_c4 = PromiseBuilder__TryFinally_7D49A2FD;
function PromiseBuilder__Delay_62FBFDE1(x, generator) {
    return {
        then: (f1, f2)=>{
            try {
                return generator().then(f1, f2);
            } catch (er) {
                if (_utilJs.equals(f2, null)) return Promise.reject(er);
                else try {
                    return Promise.resolve(f2(er));
                } catch (er_1) {
                    return Promise.reject(er_1);
                }
            }
        },
        catch: (f)=>{
            try {
                return generator().catch(f);
            } catch (er_2) {
                try {
                    return Promise.resolve(f(er_2));
                } catch (er_3) {
                    return Promise.reject(er_3);
                }
            }
        }
    };
}
_c5 = PromiseBuilder__Delay_62FBFDE1;
function PromiseBuilder__Run_212F1D4B(x, p) {
    return new Promise((success, fail)=>{
        try {
            const p_1 = Promise.resolve(p);
            p_1.then(success, fail);
        } catch (er) {
            fail(er);
        }
    });
}
_c6 = PromiseBuilder__Run_212F1D4B;
function PromiseBuilder__Using_74F7E79D(x, resource, binder) {
    return PromiseBuilder__TryFinally_7D49A2FD(x, binder(resource), ()=>{
        let copyOfStruct = resource;
        copyOfStruct.Dispose();
    });
}
_c7 = PromiseBuilder__Using_74F7E79D;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;
$RefreshReg$(_c, "PromiseBuilder$reflection");
$RefreshReg$(_c1, "PromiseBuilder_$ctor");
$RefreshReg$(_c2, "PromiseBuilder__For_1565554B");
$RefreshReg$(_c3, "PromiseBuilder__While_2044D34");
$RefreshReg$(_c4, "PromiseBuilder__TryFinally_7D49A2FD");
$RefreshReg$(_c5, "PromiseBuilder__Delay_62FBFDE1");
$RefreshReg$(_c6, "PromiseBuilder__Run_212F1D4B");
$RefreshReg$(_c7, "PromiseBuilder__Using_74F7E79D");

},{"../fable-library.3.2.10/Choice.js":"aEC7Y","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lGgFU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "promise", ()=>promise
);
var _promiseFsJs = require("./Promise.fs.js");
const promise = _promiseFsJs.PromiseBuilder_$ctor();

},{"./Promise.fs.js":"1ebQI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lp09b":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$a3f7 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$a3f7.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentPart", ()=>contentPart
);
parcelHelpers.export(exports, "view", ()=>view
);
var _landingFsJs = require("./views/Landing.fs.js");
var _interopFsJs = require("./.fable/Feliz.1.50.0/Interop.fs.js");
var _listJs = require("./.fable/fable-library.3.2.10/List.js");
var _react = require("react");
var _utilJs = require("./.fable/fable-library.3.2.10/Util.js");
var _elementBuildersFsJs = require("./.fable/Feliz.Bulma.2.17.0/ElementBuilders.fs.js");
var _routerFsJs = require("./.fable/Feliz.Router.3.8.0/Router.fs.js");
var _routerFsJs1 = require("./Router.fs.js");
var _domainFsJs = require("./Domain.fs.js");
function contentPart(model, dispatch) {
    return _landingFsJs.view(model, dispatch);
}
function view(model, dispatch) {
    let render;
    const props = _listJs.singleton([
        "children",
        _interopFsJs.Interop_reactApi.Children.toArray([
            contentPart(model, dispatch)
        ])
    ]);
    render = /*#__PURE__*/ _react.createElement("div", _utilJs.createObj(_elementBuildersFsJs.Helpers_combineClasses("content", props)));
    return _routerFsJs.RouterModule_router({
        onUrlChanged: (arg_1)=>{
            dispatch(new _domainFsJs.Msg(0, _routerFsJs1.parseUrl(arg_1)));
        },
        application: /*#__PURE__*/ _react.createElement(_react.Fragment, {
        }, render)
    });
}

  $parcel$ReactRefreshHelpers$a3f7.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"./views/Landing.fs.js":"9nh5Y","./.fable/Feliz.1.50.0/Interop.fs.js":"dWNhs","./.fable/fable-library.3.2.10/List.js":"3UB49","react":"6TuXu","./.fable/fable-library.3.2.10/Util.js":"e4VZ7","./.fable/Feliz.Bulma.2.17.0/ElementBuilders.fs.js":"3CPhf","./.fable/Feliz.Router.3.8.0/Router.fs.js":"9QGvh","./Router.fs.js":"2wXmW","./Domain.fs.js":"1rMO5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"9nh5Y":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$99b5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$99b5.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "view", ()=>view
);
var _interopFsJs = require("../.fable/Feliz.1.50.0/Interop.fs.js");
var _fableI18NextFsJs = require("../../Fable.I18Next/Fable.I18Next.fs.js");
var _react = require("react");
var _listJs = require("../.fable/fable-library.3.2.10/List.js");
var _utilJs = require("../.fable/fable-library.3.2.10/Util.js");
var _elementBuildersFsJs = require("../.fable/Feliz.Bulma.2.17.0/ElementBuilders.fs.js");
function view(model, dispatch) {
    let elms, props_2, value_4;
    const props_5 = _listJs.ofArray([
        [
            "style",
            {
                overflow: "auto"
            }
        ],
        [
            "children",
            _interopFsJs.Interop_reactApi.Children.toArray([
                (elms = _listJs.singleton((props_2 = _listJs.ofArray([
                    [
                        "className",
                        "has-background-link"
                    ],
                    [
                        "className",
                        "has-text-danger"
                    ],
                    [
                        "children",
                        _interopFsJs.Interop_reactApi.Children.toArray([
                            (value_4 = _fableI18NextFsJs.I18n_Translate_Z1A8FAE6B("SectionOne"), /*#__PURE__*/ _react.createElement("h2", {
                                children: [
                                    value_4
                                ]
                            })),
                            /*#__PURE__*/ _react.createElement("p", {
                                children: [
                                    "Write something meaningful"
                                ]
                            })
                        ])
                    ]
                ]), /*#__PURE__*/ _react.createElement("div", _utilJs.createObj(_elementBuildersFsJs.Helpers_combineClasses("container", props_2))))), /*#__PURE__*/ _react.createElement("section", {
                    className: "section",
                    children: _interopFsJs.Interop_reactApi.Children.toArray(Array.from(elms))
                }))
            ])
        ]
    ]);
    return(/*#__PURE__*/ _react.createElement("div", _utilJs.createObj(_elementBuildersFsJs.Helpers_combineClasses("content", props_5))));
}

  $parcel$ReactRefreshHelpers$99b5.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"../.fable/Feliz.1.50.0/Interop.fs.js":"dWNhs","../../Fable.I18Next/Fable.I18Next.fs.js":"8uy8s","react":"6TuXu","../.fable/fable-library.3.2.10/List.js":"3UB49","../.fable/fable-library.3.2.10/Util.js":"e4VZ7","../.fable/Feliz.Bulma.2.17.0/ElementBuilders.fs.js":"3CPhf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"3CPhf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Helpers_extractClasses", ()=>Helpers_extractClasses
);
parcelHelpers.export(exports, "Helpers_combineClasses", ()=>Helpers_combineClasses
);
var _listJs = require("../fable-library.3.2.10/List.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _stringJs = require("../fable-library.3.2.10/String.js");
function Helpers_extractClasses(xs) {
    return _listJs.fold(_utilJs.uncurry(2, (tupledArg)=>{
        const classes = tupledArg[0];
        const props = tupledArg[1];
        return (x)=>{
            const matchValue = x;
            return matchValue[0] === "className" ? [
                _listJs.cons(_typesJs.toString(matchValue[1]), classes),
                props
            ] : [
                classes,
                _listJs.cons(x, props)
            ];
        };
    }), [
        _listJs.empty(),
        _listJs.empty()
    ], _listJs.reverse(xs));
}
_c = Helpers_extractClasses;
function Helpers_combineClasses(cn, xs) {
    const tupledArg = Helpers_extractClasses(xs);
    return _listJs.cons([
        "className",
        _stringJs.join(" ", _listJs.cons(cn, tupledArg[0]))
    ], tupledArg[1]);
}
_c1 = Helpers_combineClasses;
var _c, _c1;
$RefreshReg$(_c, "Helpers_extractClasses");
$RefreshReg$(_c1, "Helpers_combineClasses");

},{"../fable-library.3.2.10/List.js":"3UB49","../fable-library.3.2.10/Util.js":"e4VZ7","../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gbXar":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Debugger_showError", ()=>Debugger_showError
);
parcelHelpers.export(exports, "Debugger_showWarning", ()=>Debugger_showWarning
);
parcelHelpers.export(exports, "Debugger_ConnectionOptions", ()=>Debugger_ConnectionOptions
);
parcelHelpers.export(exports, "Debugger_ConnectionOptions$reflection", ()=>Debugger_ConnectionOptions$reflection
);
parcelHelpers.export(exports, "Program_withDebuggerUsing", ()=>Program_withDebuggerUsing
);
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _listJs = require("../fable-library.3.2.10/List.js");
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _programFsJs = require("../Fable.Elmish.3.1.0/program.fs.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _cmdFsJs = require("../Fable.Elmish.3.1.0/cmd.fs.js");
var _remotedev = require("remotedev");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
function Debugger_showError(msgs) {
    console.error(_optionJs.some("[ELMISH DEBUGGER]"), ..._listJs.toArray(msgs));
}
_c = Debugger_showError;
function Debugger_showWarning(msgs) {
    console.warn(_optionJs.some("[ELMISH DEBUGGER]"), ..._listJs.toArray(msgs));
}
_c1 = Debugger_showWarning;
class Debugger_ConnectionOptions extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "ViaExtension",
            "Remote",
            "Secure"
        ];
    }
}
function Debugger_ConnectionOptions$reflection() {
    return _reflectionJs.union_type("Elmish.Debug.Debugger.ConnectionOptions", [], Debugger_ConnectionOptions, ()=>[
            [],
            [
                [
                    "address", _reflectionJs.string_type],
                [
                    "port", _reflectionJs.int32_type]
            ],
            [
                [
                    "address", _reflectionJs.string_type],
                [
                    "port", _reflectionJs.int32_type]
            ]
        ]
    );
}
_c2 = Debugger_ConnectionOptions$reflection;
function Program_withDebuggerUsing(deflater, inflater, connection, program) {
    return _programFsJs.ProgramModule_mapErrorHandler((userOnError, tupledArg)=>{
        const text = tupledArg[0];
        const ex_1 = tupledArg[1];
        userOnError([
            text,
            ex_1
        ]);
        connection.error(text + ex_1.message);
    }, _programFsJs.ProgramModule_map((userInit, a)=>{
        const patternInput = userInit(a);
        const model = patternInput[0];
        connection.init(deflater(model), void 0);
        return [
            model,
            patternInput[1]
        ];
    }, (userUpdate, msg, model_1)=>{
        const patternInput_1 = userUpdate(msg, model_1);
        const model$0027 = patternInput_1[0];
        connection.send(msg, deflater(model$0027));
        return [
            model$0027,
            patternInput_1[1]
        ];
    }, _utilJs.uncurry(3, (x)=>_utilJs.curry(2, x)
    ), _utilJs.uncurry(3, (x_1)=>_utilJs.curry(2, x_1)
    ), (userSubscribe, model_2)=>_cmdFsJs.Cmd_batch(_listJs.ofArray([
            _listJs.singleton((dispatch)=>{
                connection.subscribe((_arg1)=>{
                    if (_arg1.type === "DISPATCH") {
                        const msg_2 = _arg1;
                        try {
                            const matchValue = msg_2.payload.type;
                            switch(matchValue){
                                case "JUMP_TO_ACTION":
                                case "JUMP_TO_STATE":
                                    {
                                        const state = inflater(_remotedev.extractState(msg_2));
                                        _programFsJs.ProgramModule_setState(program)(state)(dispatch);
                                        break;
                                    }
                                case "IMPORT_STATE":
                                    {
                                        const state_2 = inflater(_arrayJs.last(msg_2.payload.nextLiftedState.computedStates).state);
                                        _programFsJs.ProgramModule_setState(program)(state_2)(dispatch);
                                        connection.send(null, msg_2.payload.nextLiftedState);
                                        break;
                                    }
                                default:
                            }
                        } catch (ex) {
                            Debugger_showError(_listJs.ofArray([
                                "Unable to process monitor command",
                                ex.message,
                                msg_2
                            ]));
                        }
                    }
                });
            }),
            userSubscribe(model_2)
        ]))
    , program));
}
_c3 = Program_withDebuggerUsing;
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "Debugger_showError");
$RefreshReg$(_c1, "Debugger_showWarning");
$RefreshReg$(_c2, "Debugger_ConnectionOptions$reflection");
$RefreshReg$(_c3, "Program_withDebuggerUsing");

},{"../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/List.js":"3UB49","../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","../Fable.Elmish.3.1.0/program.fs.js":"2PYJR","../fable-library.3.2.10/Util.js":"e4VZ7","../Fable.Elmish.3.1.0/cmd.fs.js":"bqyYR","remotedev":"Ma6EQ","../fable-library.3.2.10/Array.js":"dl8am","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"Ma6EQ":[function(require,module,exports) {
'use strict';
module.exports = require('./devTools');

},{"./devTools":"4Isy0"}],"4Isy0":[function(require,module,exports) {
'use strict';
exports.__esModule = true;
exports.send = undefined;
exports.extractState = extractState;
exports.generateId = generateId;
exports.start = start;
exports.connect = connect;
exports.connectViaExtension = connectViaExtension;
var _jsan = require('jsan');
var _socketclusterClient = require('socketcluster-client');
var _socketclusterClient2 = _interopRequireDefault(_socketclusterClient);
var _rnHostDetect = require('rn-host-detect');
var _rnHostDetect2 = _interopRequireDefault(_rnHostDetect);
var _constants = require('./constants');
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var socket = undefined;
var channel = undefined;
var listeners = {
};
function extractState(message) {
    if (!message || !message.state) return undefined;
    if (typeof message.state === 'string') return _jsan.parse(message.state);
    return message.state;
}
function generateId() {
    return Math.random().toString(36).substr(2);
}
function handleMessages(message) {
    if (!message.payload) message.payload = message.action;
    Object.keys(listeners).forEach(function(id) {
        if (message.instanceId && id !== message.instanceId) return;
        if (typeof listeners[id] === 'function') listeners[id](message);
        else listeners[id].forEach(function(fn) {
            fn(message);
        });
    });
}
function watch() {
    if (channel) return;
    socket.emit('login', 'master', function(err, channelName) {
        if (err) {
            console.log(err);
            return;
        }
        channel = socket.subscribe(channelName);
        channel.watch(handleMessages);
        socket.on(channelName, handleMessages);
    });
}
function connectToServer(options) {
    if (socket) return;
    var socketOptions = undefined;
    if (options.port) socketOptions = {
        port: options.port,
        hostname: _rnHostDetect2.default(options.hostname || 'localhost'),
        secure: !!options.secure
    };
    else socketOptions = _constants.defaultSocketOptions;
    socket = _socketclusterClient2.default.create(socketOptions);
    watch();
}
function start(options) {
    if (options) {
        if (options.port && !options.hostname) options.hostname = 'localhost';
    }
    connectToServer(options);
}
function transformAction(action, config) {
    if (action.action) return action;
    var liftedAction = {
        timestamp: Date.now()
    };
    if (action) {
        if (config.getActionType) liftedAction.action = config.getActionType(action);
        else {
            if (typeof action === 'string') liftedAction.action = {
                type: action
            };
            else if (!action.type) liftedAction.action = {
                type: 'update'
            };
            else liftedAction.action = action;
        }
    } else liftedAction.action = {
        type: action
    };
    return liftedAction;
}
function _send(action, state, options, type, instanceId) {
    start(options);
    setTimeout(function() {
        var message = {
            payload: state ? _jsan.stringify(state) : '',
            action: type === 'ACTION' ? _jsan.stringify(transformAction(action, options)) : action,
            type: type || 'ACTION',
            id: socket.id,
            instanceId: instanceId,
            name: options.name
        };
        socket.emit(socket.id ? 'log' : 'log-noid', message);
    }, 0);
}
exports.send = _send;
function connect() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {
    } : arguments[0];
    var id = generateId(options.instanceId);
    start(options);
    return {
        init: function init(state, action) {
            _send(action || {
            }, state, options, 'INIT', id);
        },
        subscribe: function subscribe(listener) {
            if (!listener) return undefined;
            if (!listeners[id]) listeners[id] = [];
            listeners[id].push(listener);
            return function unsubscribe() {
                var index = listeners[id].indexOf(listener);
                listeners[id].splice(index, 1);
            };
        },
        unsubscribe: function unsubscribe() {
            delete listeners[id];
        },
        send: function send(action, payload) {
            if (action) _send(action, payload, options, 'ACTION', id);
            else _send(undefined, payload, options, 'STATE', id);
        },
        error: function error(payload) {
            socket.emit({
                type: 'ERROR',
                payload: payload,
                id: socket.id,
                instanceId: id
            });
        }
    };
}
function connectViaExtension(options) {
    if (options && options.remote || typeof window === 'undefined' || !window.__REDUX_DEVTOOLS_EXTENSION__) return connect(options);
    return window.__REDUX_DEVTOOLS_EXTENSION__.connect(options);
}
exports.default = {
    connect: connect,
    connectViaExtension: connectViaExtension,
    send: _send,
    extractState: extractState,
    generateId: generateId
};

},{"jsan":"4RAUv","socketcluster-client":"izMVM","rn-host-detect":"9Vr47","./constants":"5OfsR"}],"4RAUv":[function(require,module,exports) {
module.exports = require('./lib');

},{"./lib":"a1bY3"}],"a1bY3":[function(require,module,exports) {
var cycle = require('./cycle');
exports.stringify = function stringify(value, replacer, space, _options) {
    if (arguments.length < 4) try {
        if (arguments.length === 1) return JSON.stringify(value);
        else return JSON.stringify.apply(JSON, arguments);
    } catch (e) {
    }
    var options = _options || false;
    if (typeof options === 'boolean') options = {
        'date': options,
        'function': options,
        'regex': options,
        'undefined': options,
        'error': options,
        'symbol': options,
        'map': options,
        'set': options,
        'nan': options,
        'infinity': options
    };
    var decycled = cycle.decycle(value, options, replacer);
    if (arguments.length === 1) return JSON.stringify(decycled);
    else // decycle already handles when replacer is a function.
    return JSON.stringify(decycled, Array.isArray(replacer) ? replacer : null, space);
};
exports.parse = function parse(text, reviver) {
    var needsRetrocycle = /"\$jsan"/.test(text);
    var parsed;
    if (arguments.length === 1) parsed = JSON.parse(text);
    else parsed = JSON.parse(text, reviver);
    if (needsRetrocycle) parsed = cycle.retrocycle(parsed);
    return parsed;
};

},{"./cycle":"4ziJC"}],"4ziJC":[function(require,module,exports) {
var pathGetter = require('./path-getter');
var utils = require('./utils');
var WMap = typeof WeakMap !== 'undefined' ? WeakMap : function() {
    var keys = [];
    var values = [];
    return {
        set: function(key, value) {
            keys.push(key);
            values.push(value);
        },
        get: function(key) {
            for(var i = 0; i < keys.length; i++){
                if (keys[i] === key) return values[i];
            }
        }
    };
};
// Based on https://github.com/douglascrockford/JSON-js/blob/master/cycle.js
exports.decycle = function decycle(object, options, replacer) {
    var map = new WMap();
    var noCircularOption = !Object.prototype.hasOwnProperty.call(options, 'circular');
    var withRefs = options.refs !== false;
    return (function derez(_value, path, key) {
        // The derez recurses through the object, producing the deep copy.
        var i, name, nu; // The new object or array
        // typeof null === 'object', so go on if this value is really an object but not
        // one of the weird builtin objects.
        var value = typeof replacer === 'function' ? replacer(key || '', _value) : _value;
        if (options.date && value instanceof Date) return {
            $jsan: 'd' + value.getTime()
        };
        if (options.regex && value instanceof RegExp) return {
            $jsan: 'r' + utils.getRegexFlags(value) + ',' + value.source
        };
        if (options['function'] && typeof value === 'function') return {
            $jsan: 'f' + utils.stringifyFunction(value, options['function'])
        };
        if (options['nan'] && typeof value === 'number' && isNaN(value)) return {
            $jsan: 'n'
        };
        if (options['infinity']) {
            if (Number.POSITIVE_INFINITY === value) return {
                $jsan: 'i'
            };
            if (Number.NEGATIVE_INFINITY === value) return {
                $jsan: 'y'
            };
        }
        if (options['undefined'] && value === undefined) return {
            $jsan: 'u'
        };
        if (options['error'] && value instanceof Error) return {
            $jsan: 'e' + value.message
        };
        if (options['symbol'] && typeof value === 'symbol') {
            var symbolKey = Symbol.keyFor(value);
            if (symbolKey !== undefined) return {
                $jsan: 'g' + symbolKey
            };
            // 'Symbol(foo)'.slice(7, -1) === 'foo'
            return {
                $jsan: 's' + value.toString().slice(7, -1)
            };
        }
        if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') return {
            $jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))
        };
        if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') return {
            $jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))
        };
        if (value && typeof value.toJSON === 'function') try {
            value = value.toJSON(key);
        } catch (error) {
            var keyString = key || '$';
            return "toJSON failed for '" + (map.get(value) || keyString) + "'";
        }
        if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String) && !(typeof value === 'symbol') && !(value instanceof Error)) {
            // If the value is an object or array, look to see if we have already
            // encountered it. If so, return a $ref/path object.
            if (typeof value === 'object') {
                var foundPath = map.get(value);
                if (foundPath) {
                    if (noCircularOption && withRefs) return {
                        $jsan: foundPath
                    };
                    if (path.indexOf(foundPath) === 0) {
                        if (!noCircularOption) return typeof options.circular === 'function' ? options.circular(value, path, foundPath) : options.circular;
                        return {
                            $jsan: foundPath
                        };
                    }
                    if (withRefs) return {
                        $jsan: foundPath
                    };
                }
                map.set(value, path);
            }
            // If it is an array, replicate the array.
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                nu = [];
                for(i = 0; i < value.length; i += 1)nu[i] = derez(value[i], path + '[' + i + ']', i);
            } else {
                // If it is an object, replicate the object.
                nu = {
                };
                for(name in value)if (Object.prototype.hasOwnProperty.call(value, name)) {
                    var nextPath = /^\w+$/.test(name) ? '.' + name : '[' + JSON.stringify(name) + ']';
                    nu[name] = name === '$jsan' ? [
                        derez(value[name], path + nextPath)
                    ] : derez(value[name], path + nextPath, name);
                }
            }
            return nu;
        }
        return value;
    })(object, '$');
};
exports.retrocycle = function retrocycle($) {
    return (function rez(value) {
        // The rez function walks recursively through the object looking for $jsan
        // properties. When it finds one that has a value that is a path, then it
        // replaces the $jsan object with a reference to the value that is found by
        // the path.
        var i, item, name, path;
        if (value && typeof value === 'object') {
            if (Object.prototype.toString.apply(value) === '[object Array]') for(i = 0; i < value.length; i += 1){
                item = value[i];
                if (item && typeof item === 'object') {
                    if (item.$jsan) value[i] = utils.restore(item.$jsan, $);
                    else rez(item);
                }
            }
            else for(name in value){
                // base case passed raw object
                if (typeof value[name] === 'string' && name === '$jsan') return utils.restore(value.$jsan, $);
                else {
                    if (name === '$jsan') value[name] = value[name][0];
                    if (typeof value[name] === 'object') {
                        item = value[name];
                        if (item && typeof item === 'object') {
                            if (item.$jsan) value[name] = utils.restore(item.$jsan, $);
                            else rez(item);
                        }
                    }
                }
            }
        }
        return value;
    })($);
};

},{"./path-getter":"42Cd0","./utils":"3BM2N"}],"42Cd0":[function(require,module,exports) {
module.exports = pathGetter;
function pathGetter(obj, path) {
    if (path !== '$') {
        var paths = getPaths(path);
        for(var i = 0; i < paths.length; i++){
            path = paths[i].toString().replace(/\\"/g, '"');
            if (typeof obj[path] === 'undefined' && i !== paths.length - 1) continue;
            obj = obj[path];
        }
    }
    return obj;
}
function getPaths(pathString) {
    var regex = /(?:\.(\w+))|(?:\[(\d+)\])|(?:\["((?:[^\\"]|\\.)*)"\])/g;
    var matches = [];
    var match;
    while(match = regex.exec(pathString))matches.push(match[1] || match[2] || match[3]);
    return matches;
}

},{}],"3BM2N":[function(require,module,exports) {
var pathGetter = require('./path-getter');
var jsan = require('./');
exports.getRegexFlags = function getRegexFlags(regex) {
    var flags = '';
    if (regex.ignoreCase) flags += 'i';
    if (regex.global) flags += 'g';
    if (regex.multiline) flags += 'm';
    return flags;
};
exports.stringifyFunction = function stringifyFunction(fn, customToString) {
    if (typeof customToString === 'function') return customToString(fn);
    var str = fn.toString();
    var match = str.match(/^[^{]*{|^[^=]*=>/);
    var start = match ? match[0] : '<function> ';
    var end = str[str.length - 1] === '}' ? '}' : '';
    return start.replace(/\r\n|\n/g, ' ').replace(/\s+/g, ' ') + ' /* ... */ ' + end;
};
exports.restore = function restore(obj, root) {
    var type = obj[0];
    var rest = obj.slice(1);
    switch(type){
        case '$':
            return pathGetter(root, obj);
        case 'r':
            var comma = rest.indexOf(',');
            var flags = rest.slice(0, comma);
            var source = rest.slice(comma + 1);
            return RegExp(source, flags);
        case 'd':
            return new Date(+rest);
        case 'f':
            var fn = function() {
                throw new Error("can't run jsan parsed function");
            };
            fn.toString = function() {
                return rest;
            };
            return fn;
        case 'u':
            return undefined;
        case 'e':
            var error = new Error(rest);
            error.stack = 'Stack is unavailable for jsan parsed errors';
            return error;
        case 's':
            return Symbol(rest);
        case 'g':
            return Symbol.for(rest);
        case 'm':
            return new Map(jsan.parse(rest));
        case 'l':
            return new Set(jsan.parse(rest));
        case 'n':
            return NaN;
        case 'i':
            return Infinity;
        case 'y':
            return -Infinity;
        default:
            console.warn('unknown type', obj);
            return obj;
    }
};

},{"./path-getter":"42Cd0","./":"a1bY3"}],"izMVM":[function(require,module,exports) {
var SCClientSocket = require('./lib/scclientsocket');
var factory = require('./lib/factory');
module.exports.factory = factory;
module.exports.SCClientSocket = SCClientSocket;
module.exports.Emitter = require('component-emitter');
module.exports.create = function(options) {
    return factory.create(options);
};
module.exports.connect = module.exports.create;
module.exports.destroy = function(socket) {
    return factory.destroy(socket);
};
module.exports.clients = factory.clients;
module.exports.version = '13.0.1';

},{"./lib/scclientsocket":"l80Am","./lib/factory":"jYjyg","component-emitter":"f4dye"}],"l80Am":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var Emitter = require('component-emitter');
var SCChannel = require('sc-channel').SCChannel;
var Response1 = require('./response').Response;
var AuthEngine = require('./auth').AuthEngine;
var formatter = require('sc-formatter');
var SCTransport = require('./sctransport').SCTransport;
var querystring = require('querystring');
var LinkedList = require('linked-list');
var base64 = require('base-64');
var clone = require('clone');
var scErrors = require('sc-errors');
var InvalidArgumentsError = scErrors.InvalidArgumentsError;
var InvalidMessageError = scErrors.InvalidMessageError;
var InvalidActionError = scErrors.InvalidActionError;
var SocketProtocolError = scErrors.SocketProtocolError;
var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;
var isBrowser = typeof window != 'undefined';
var SCClientSocket = function(opts) {
    var self = this;
    Emitter.call(this);
    this.id = null;
    this.state = this.CLOSED;
    this.authState = this.UNAUTHENTICATED;
    this.signedAuthToken = null;
    this.authToken = null;
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    this.preparingPendingSubscriptions = false;
    this.clientId = opts.clientId;
    this.connectTimeout = opts.connectTimeout;
    this.ackTimeout = opts.ackTimeout;
    this.channelPrefix = opts.channelPrefix || null;
    this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;
    this.authTokenName = opts.authTokenName;
    // pingTimeout will be ackTimeout at the start, but it will
    // be updated with values provided by the 'connect' event
    this.pingTimeout = this.ackTimeout;
    this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;
    this.active = true;
    this._clientMap = opts.clientMap || {
    };
    var maxTimeout = Math.pow(2, 31) - 1;
    var verifyDuration = function(propertyName) {
        if (self[propertyName] > maxTimeout) throw new InvalidArgumentsError('The ' + propertyName + ' value provided exceeded the maximum amount allowed');
    };
    verifyDuration('connectTimeout');
    verifyDuration('ackTimeout');
    this._localEvents = {
        'connect': 1,
        'connectAbort': 1,
        'close': 1,
        'disconnect': 1,
        'message': 1,
        'error': 1,
        'raw': 1,
        'kickOut': 1,
        'subscribe': 1,
        'unsubscribe': 1,
        'subscribeStateChange': 1,
        'authStateChange': 1,
        'authenticate': 1,
        'deauthenticate': 1,
        'removeAuthToken': 1,
        'subscribeRequest': 1
    };
    this.connectAttempts = 0;
    this._emitBuffer = new LinkedList();
    this.channels = {
    };
    this.options = opts;
    this._cid = 1;
    this.options.callIdGenerator = function() {
        return self._cid++;
    };
    if (this.options.autoReconnect) {
        if (this.options.autoReconnectOptions == null) this.options.autoReconnectOptions = {
        };
        // Add properties to the this.options.autoReconnectOptions object.
        // We assign the reference to a reconnectOptions variable to avoid repetition.
        var reconnectOptions = this.options.autoReconnectOptions;
        if (reconnectOptions.initialDelay == null) reconnectOptions.initialDelay = 10000;
        if (reconnectOptions.randomness == null) reconnectOptions.randomness = 10000;
        if (reconnectOptions.multiplier == null) reconnectOptions.multiplier = 1.5;
        if (reconnectOptions.maxDelay == null) reconnectOptions.maxDelay = 60000;
    }
    if (this.options.subscriptionRetryOptions == null) this.options.subscriptionRetryOptions = {
    };
    if (this.options.authEngine) this.auth = this.options.authEngine;
    else this.auth = new AuthEngine();
    if (this.options.codecEngine) this.codec = this.options.codecEngine;
    else // Default codec engine
    this.codec = formatter;
    this.options.path = this.options.path.replace(/\/$/, '') + '/';
    this.options.query = opts.query || {
    };
    if (typeof this.options.query == 'string') this.options.query = querystring.parse(this.options.query);
    this._channelEmitter = new Emitter();
    this._unloadHandler = function() {
        self.disconnect();
    };
    if (isBrowser && this.disconnectOnUnload && global.addEventListener) global.addEventListener('beforeunload', this._unloadHandler, false);
    this._clientMap[this.clientId] = this;
    if (this.options.autoConnect) this.connect();
};
SCClientSocket.prototype = Object.create(Emitter.prototype);
SCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;
SCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;
SCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;
SCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';
SCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';
SCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';
SCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;
SCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;
SCClientSocket.prototype._privateEventHandlerMap = {
    '#publish': function(data) {
        var undecoratedChannelName = this._undecorateChannelName(data.channel);
        var isSubscribed = this.isSubscribed(undecoratedChannelName, true);
        if (isSubscribed) this._channelEmitter.emit(undecoratedChannelName, data.data);
    },
    '#kickOut': function(data) {
        var undecoratedChannelName = this._undecorateChannelName(data.channel);
        var channel = this.channels[undecoratedChannelName];
        if (channel) {
            Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);
            channel.emit('kickOut', data.message, undecoratedChannelName);
            this._triggerChannelUnsubscribe(channel);
        }
    },
    '#setAuthToken': function(data, response) {
        var self = this;
        if (data) {
            var triggerAuthenticate = function(err) {
                if (err) {
                    // This is a non-fatal error, we don't want to close the connection
                    // because of this but we do want to notify the server and throw an error
                    // on the client.
                    response.error(err);
                    self._onSCError(err);
                } else {
                    self._changeToAuthenticatedState(data.token);
                    response.end();
                }
            };
            this.auth.saveToken(this.authTokenName, data.token, {
            }, triggerAuthenticate);
        } else response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));
    },
    '#removeAuthToken': function(data, response) {
        var self = this;
        this.auth.removeToken(this.authTokenName, function(err, oldToken) {
            if (err) {
                // Non-fatal error - Do not close the connection
                response.error(err);
                self._onSCError(err);
            } else {
                Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);
                self._changeToUnauthenticatedStateAndClearTokens();
                response.end();
            }
        });
    },
    '#disconnect': function(data) {
        this.transport.close(data.code, data.data);
    }
};
SCClientSocket.prototype.getState = function() {
    return this.state;
};
SCClientSocket.prototype.getBytesReceived = function() {
    return this.transport.getBytesReceived();
};
SCClientSocket.prototype.deauthenticate = function(callback) {
    var self = this;
    this.auth.removeToken(this.authTokenName, function(err, oldToken) {
        if (err) // Non-fatal error - Do not close the connection
        self._onSCError(err);
        else {
            Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);
            if (self.state != self.CLOSED) self.emit('#removeAuthToken');
            self._changeToUnauthenticatedStateAndClearTokens();
        }
        callback && callback(err);
    });
};
SCClientSocket.prototype.connect = SCClientSocket.prototype.open = function() {
    var self = this;
    if (!this.active) {
        var error = new InvalidActionError('Cannot connect a destroyed client');
        this._onSCError(error);
        return;
    }
    if (this.state == this.CLOSED) {
        this.pendingReconnect = false;
        this.pendingReconnectTimeout = null;
        clearTimeout(this._reconnectTimeoutRef);
        this.state = this.CONNECTING;
        Emitter.prototype.emit.call(this, 'connecting');
        if (this.transport) this.transport.off();
        this.transport = new SCTransport(this.auth, this.codec, this.options);
        this.transport.on('open', function(status) {
            self.state = self.OPEN;
            self._onSCOpen(status);
        });
        this.transport.on('error', function(err) {
            self._onSCError(err);
        });
        this.transport.on('close', function(code, data) {
            self.state = self.CLOSED;
            self._onSCClose(code, data);
        });
        this.transport.on('openAbort', function(code, data) {
            self.state = self.CLOSED;
            self._onSCClose(code, data, true);
        });
        this.transport.on('event', function(event, data, res) {
            self._onSCEvent(event, data, res);
        });
    }
};
SCClientSocket.prototype.reconnect = function(code, data) {
    this.disconnect(code, data);
    this.connect();
};
SCClientSocket.prototype.disconnect = function(code, data) {
    code = code || 1000;
    if (typeof code != 'number') throw new InvalidArgumentsError('If specified, the code argument must be a number');
    if (this.state == this.OPEN || this.state == this.CONNECTING) this.transport.close(code, data);
    else {
        this.pendingReconnect = false;
        this.pendingReconnectTimeout = null;
        clearTimeout(this._reconnectTimeoutRef);
    }
};
SCClientSocket.prototype.destroy = function(code, data) {
    if (isBrowser && global.removeEventListener) global.removeEventListener('beforeunload', this._unloadHandler, false);
    this.active = false;
    this.disconnect(code, data);
    delete this._clientMap[this.clientId];
};
SCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function() {
    if (this.authState != this.UNAUTHENTICATED) {
        var oldState = this.authState;
        var oldSignedToken = this.signedAuthToken;
        this.authState = this.UNAUTHENTICATED;
        this.signedAuthToken = null;
        this.authToken = null;
        var stateChangeData = {
            oldState: oldState,
            newState: this.authState
        };
        Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
        Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);
    }
};
SCClientSocket.prototype._changeToAuthenticatedState = function(signedAuthToken) {
    this.signedAuthToken = signedAuthToken;
    this.authToken = this._extractAuthTokenData(signedAuthToken);
    if (this.authState != this.AUTHENTICATED) {
        var oldState = this.authState;
        this.authState = this.AUTHENTICATED;
        var stateChangeData = {
            oldState: oldState,
            newState: this.authState,
            signedAuthToken: signedAuthToken,
            authToken: this.authToken
        };
        if (!this.preparingPendingSubscriptions) this.processPendingSubscriptions();
        Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
    }
    Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);
};
SCClientSocket.prototype.decodeBase64 = function(encodedString) {
    var decodedString;
    if (typeof Buffer == 'undefined') {
        if (global.atob) decodedString = global.atob(encodedString);
        else decodedString = base64.decode(encodedString);
    } else {
        var buffer = new Buffer(encodedString, 'base64');
        decodedString = buffer.toString('utf8');
    }
    return decodedString;
};
SCClientSocket.prototype.encodeBase64 = function(decodedString) {
    var encodedString;
    if (typeof Buffer == 'undefined') {
        if (global.btoa) encodedString = global.btoa(decodedString);
        else encodedString = base64.encode(decodedString);
    } else {
        var buffer = new Buffer(decodedString, 'utf8');
        encodedString = buffer.toString('base64');
    }
    return encodedString;
};
SCClientSocket.prototype._extractAuthTokenData = function(signedAuthToken) {
    var tokenParts = (signedAuthToken || '').split('.');
    var encodedTokenData = tokenParts[1];
    if (encodedTokenData != null) {
        var tokenData = encodedTokenData;
        try {
            tokenData = this.decodeBase64(tokenData);
            return JSON.parse(tokenData);
        } catch (e) {
            return tokenData;
        }
    }
    return null;
};
SCClientSocket.prototype.getAuthToken = function() {
    return this.authToken;
};
SCClientSocket.prototype.getSignedAuthToken = function() {
    return this.signedAuthToken;
};
// Perform client-initiated authentication by providing an encrypted token string.
SCClientSocket.prototype.authenticate = function(signedAuthToken, callback) {
    var self = this;
    this.emit('#authenticate', signedAuthToken, function(err, authStatus) {
        if (authStatus && authStatus.isAuthenticated != null) // If authStatus is correctly formatted (has an isAuthenticated property),
        // then we will rehydrate the authError.
        {
            if (authStatus.authError) authStatus.authError = scErrors.hydrateError(authStatus.authError);
        } else // Some errors like BadConnectionError and TimeoutError will not pass a valid
        // authStatus object to the current function, so we need to create it ourselves.
        authStatus = {
            isAuthenticated: self.authState,
            authError: null
        };
        if (err) {
            if (err.name != 'BadConnectionError' && err.name != 'TimeoutError') // In case of a bad/closed connection or a timeout, we maintain the last
            // known auth state since those errors don't mean that the token is invalid.
            self._changeToUnauthenticatedStateAndClearTokens();
            callback && callback(err, authStatus);
        } else self.auth.saveToken(self.authTokenName, signedAuthToken, {
        }, function(err1) {
            if (err1) self._onSCError(err1);
            if (authStatus.isAuthenticated) self._changeToAuthenticatedState(signedAuthToken);
            else self._changeToUnauthenticatedStateAndClearTokens();
            callback && callback(err1, authStatus);
        });
    });
};
SCClientSocket.prototype._tryReconnect = function(initialDelay) {
    var self = this;
    var exponent = this.connectAttempts++;
    var reconnectOptions = this.options.autoReconnectOptions;
    var timeout;
    if (initialDelay == null || exponent > 0) {
        var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());
        timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));
    } else timeout = initialDelay;
    if (timeout > reconnectOptions.maxDelay) timeout = reconnectOptions.maxDelay;
    clearTimeout(this._reconnectTimeoutRef);
    this.pendingReconnect = true;
    this.pendingReconnectTimeout = timeout;
    this._reconnectTimeoutRef = setTimeout(function() {
        self.connect();
    }, timeout);
};
SCClientSocket.prototype._onSCOpen = function(status) {
    var self = this;
    this.preparingPendingSubscriptions = true;
    if (status) {
        this.id = status.id;
        this.pingTimeout = status.pingTimeout;
        this.transport.pingTimeout = this.pingTimeout;
        if (status.isAuthenticated) this._changeToAuthenticatedState(status.authToken);
        else this._changeToUnauthenticatedStateAndClearTokens();
    } else // This can happen if auth.loadToken (in sctransport.js) fails with
    // an error - This means that the signedAuthToken cannot be loaded by
    // the auth engine and therefore, we need to unauthenticate the client.
    this._changeToUnauthenticatedStateAndClearTokens();
    this.connectAttempts = 0;
    if (this.options.autoSubscribeOnConnect) this.processPendingSubscriptions();
    // If the user invokes the callback while in autoSubscribeOnConnect mode, it
    // won't break anything.
    Emitter.prototype.emit.call(this, 'connect', status, function() {
        self.processPendingSubscriptions();
    });
    if (this.state == this.OPEN) this._flushEmitBuffer();
};
SCClientSocket.prototype._onSCError = function(err) {
    var self = this;
    // Throw error in different stack frame so that error handling
    // cannot interfere with a reconnect action.
    setTimeout(function() {
        if (self.listeners('error').length < 1) throw err;
        else Emitter.prototype.emit.call(self, 'error', err);
    }, 0);
};
SCClientSocket.prototype._suspendSubscriptions = function() {
    var channel, newState;
    for(var channelName in this.channels)if (this.channels.hasOwnProperty(channelName)) {
        channel = this.channels[channelName];
        if (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING) newState = channel.PENDING;
        else newState = channel.UNSUBSCRIBED;
        this._triggerChannelUnsubscribe(channel, newState);
    }
};
SCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function(failureType) {
    var currentNode = this._emitBuffer.head;
    var nextNode;
    while(currentNode){
        nextNode = currentNode.next;
        var eventObject = currentNode.data;
        clearTimeout(eventObject.timeout);
        delete eventObject.timeout;
        currentNode.detach();
        currentNode = nextNode;
        var callback = eventObject.callback;
        if (callback) {
            delete eventObject.callback;
            var errorMessage = "Event '" + eventObject.event + "' was aborted due to a bad connection";
            var error = new BadConnectionError(errorMessage, failureType);
            callback.call(eventObject, error, eventObject);
        }
        // Cleanup any pending response callback in the transport layer too.
        if (eventObject.cid) this.transport.cancelPendingResponse(eventObject.cid);
    }
};
SCClientSocket.prototype._onSCClose = function(code, data, openAbort) {
    var self = this;
    this.id = null;
    if (this.transport) this.transport.off();
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);
    this._suspendSubscriptions();
    this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect');
    // Try to reconnect
    // on server ping timeout (4000)
    // or on client pong timeout (4001)
    // or on close without status (1005)
    // or on handshake failure (4003)
    // or on handshake rejection (4008)
    // or on socket hung up (1006)
    if (this.options.autoReconnect) {
        if (code == 4000 || code == 4001 || code == 1005) // If there is a ping or pong timeout or socket closes without
        // status, don't wait before trying to reconnect - These could happen
        // if the client wakes up after a period of inactivity and in this case we
        // want to re-establish the connection as soon as possible.
        this._tryReconnect(0);
        else if (code != 1000 && code < 4500) this._tryReconnect();
    }
    if (openAbort) Emitter.prototype.emit.call(self, 'connectAbort', code, data);
    else Emitter.prototype.emit.call(self, 'disconnect', code, data);
    Emitter.prototype.emit.call(self, 'close', code, data);
    if (!SCClientSocket.ignoreStatuses[code]) {
        var closeMessage;
        if (data) closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;
        else closeMessage = 'Socket connection closed with status code ' + code;
        var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);
        this._onSCError(err);
    }
};
SCClientSocket.prototype._onSCEvent = function(event, data, res) {
    var handler = this._privateEventHandlerMap[event];
    if (handler) handler.call(this, data, res);
    else Emitter.prototype.emit.call(this, event, data, function() {
        res && res.callback.apply(res, arguments);
    });
};
SCClientSocket.prototype.decode = function(message) {
    return this.transport.decode(message);
};
SCClientSocket.prototype.encode = function(object) {
    return this.transport.encode(object);
};
SCClientSocket.prototype._flushEmitBuffer = function() {
    var currentNode = this._emitBuffer.head;
    var nextNode;
    while(currentNode){
        nextNode = currentNode.next;
        var eventObject = currentNode.data;
        currentNode.detach();
        this.transport.emitObject(eventObject);
        currentNode = nextNode;
    }
};
SCClientSocket.prototype._handleEventAckTimeout = function(eventObject, eventNode) {
    if (eventNode) eventNode.detach();
    delete eventObject.timeout;
    var callback = eventObject.callback;
    if (callback) {
        delete eventObject.callback;
        var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
        callback.call(eventObject, error, eventObject);
    }
    // Cleanup any pending response callback in the transport layer too.
    if (eventObject.cid) this.transport.cancelPendingResponse(eventObject.cid);
};
SCClientSocket.prototype._emit = function(event, data, callback) {
    var self = this;
    if (this.state == this.CLOSED) this.connect();
    var eventObject = {
        event: event,
        callback: callback
    };
    var eventNode = new LinkedList.Item();
    if (this.options.cloneData) eventObject.data = clone(data);
    else eventObject.data = data;
    eventNode.data = eventObject;
    eventObject.timeout = setTimeout(function() {
        self._handleEventAckTimeout(eventObject, eventNode);
    }, this.ackTimeout);
    this._emitBuffer.append(eventNode);
    if (this.state == this.OPEN) this._flushEmitBuffer();
};
SCClientSocket.prototype.send = function(data) {
    this.transport.send(data);
};
SCClientSocket.prototype.emit = function(event, data, callback) {
    if (this._localEvents[event] == null) this._emit(event, data, callback);
    else if (event == 'error') Emitter.prototype.emit.call(this, event, data);
    else {
        var error = new InvalidActionError('The "' + event + '" event is reserved and cannot be emitted on a client socket');
        this._onSCError(error);
    }
};
SCClientSocket.prototype.publish = function(channelName, data, callback) {
    var pubData = {
        channel: this._decorateChannelName(channelName),
        data: data
    };
    this.emit('#publish', pubData, callback);
};
SCClientSocket.prototype._triggerChannelSubscribe = function(channel, subscriptionOptions) {
    var channelName = channel.name;
    if (channel.state != channel.SUBSCRIBED) {
        var oldState = channel.state;
        channel.state = channel.SUBSCRIBED;
        var stateChangeData = {
            channel: channelName,
            oldState: oldState,
            newState: channel.state,
            subscriptionOptions: subscriptionOptions
        };
        channel.emit('subscribeStateChange', stateChangeData);
        channel.emit('subscribe', channelName, subscriptionOptions);
        Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
        Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);
    }
};
SCClientSocket.prototype._triggerChannelSubscribeFail = function(err, channel, subscriptionOptions) {
    var channelName = channel.name;
    var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;
    if (channel.state != channel.UNSUBSCRIBED && meetsAuthRequirements) {
        channel.state = channel.UNSUBSCRIBED;
        channel.emit('subscribeFail', err, channelName, subscriptionOptions);
        Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);
    }
};
// Cancel any pending subscribe callback
SCClientSocket.prototype._cancelPendingSubscribeCallback = function(channel) {
    if (channel._pendingSubscriptionCid != null) {
        this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);
        delete channel._pendingSubscriptionCid;
    }
};
SCClientSocket.prototype._decorateChannelName = function(channelName) {
    if (this.channelPrefix) channelName = this.channelPrefix + channelName;
    return channelName;
};
SCClientSocket.prototype._undecorateChannelName = function(decoratedChannelName) {
    if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) == 0) return decoratedChannelName.replace(this.channelPrefix, '');
    return decoratedChannelName;
};
SCClientSocket.prototype._trySubscribe = function(channel) {
    var self = this;
    var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;
    // We can only ever have one pending subscribe action at any given time on a channel
    if (this.state == this.OPEN && !this.preparingPendingSubscriptions && channel._pendingSubscriptionCid == null && meetsAuthRequirements) {
        var options = {
            noTimeout: true
        };
        var subscriptionOptions = {
            channel: this._decorateChannelName(channel.name)
        };
        if (channel.waitForAuth) {
            options.waitForAuth = true;
            subscriptionOptions.waitForAuth = options.waitForAuth;
        }
        if (channel.data) subscriptionOptions.data = channel.data;
        if (channel.batch) {
            options.batch = true;
            subscriptionOptions.batch = true;
        }
        channel._pendingSubscriptionCid = this.transport.emit('#subscribe', subscriptionOptions, options, function(err) {
            delete channel._pendingSubscriptionCid;
            if (err) self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);
            else self._triggerChannelSubscribe(channel, subscriptionOptions);
        });
        Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);
    }
};
SCClientSocket.prototype.subscribe = function(channelName, options) {
    var channel = this.channels[channelName];
    if (!channel) {
        channel = new SCChannel(channelName, this, options);
        this.channels[channelName] = channel;
    } else if (options) channel.setOptions(options);
    if (channel.state == channel.UNSUBSCRIBED) {
        channel.state = channel.PENDING;
        this._trySubscribe(channel);
    }
    return channel;
};
SCClientSocket.prototype._triggerChannelUnsubscribe = function(channel, newState) {
    var channelName = channel.name;
    var oldState = channel.state;
    if (newState) channel.state = newState;
    else channel.state = channel.UNSUBSCRIBED;
    this._cancelPendingSubscribeCallback(channel);
    if (oldState == channel.SUBSCRIBED) {
        var stateChangeData = {
            channel: channelName,
            oldState: oldState,
            newState: channel.state
        };
        channel.emit('subscribeStateChange', stateChangeData);
        channel.emit('unsubscribe', channelName);
        Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
        Emitter.prototype.emit.call(this, 'unsubscribe', channelName);
    }
};
SCClientSocket.prototype._tryUnsubscribe = function(channel) {
    var self = this;
    if (this.state == this.OPEN) {
        var options = {
            noTimeout: true
        };
        if (channel.batch) options.batch = true;
        // If there is a pending subscribe action, cancel the callback
        this._cancelPendingSubscribeCallback(channel);
        // This operation cannot fail because the TCP protocol guarantees delivery
        // so long as the connection remains open. If the connection closes,
        // the server will automatically unsubscribe the client and thus complete
        // the operation on the server side.
        var decoratedChannelName = this._decorateChannelName(channel.name);
        this.transport.emit('#unsubscribe', decoratedChannelName, options);
    }
};
SCClientSocket.prototype.unsubscribe = function(channelName) {
    var channel = this.channels[channelName];
    if (channel) {
        if (channel.state != channel.UNSUBSCRIBED) {
            this._triggerChannelUnsubscribe(channel);
            this._tryUnsubscribe(channel);
        }
    }
};
SCClientSocket.prototype.channel = function(channelName, options) {
    var currentChannel = this.channels[channelName];
    if (!currentChannel) {
        currentChannel = new SCChannel(channelName, this, options);
        this.channels[channelName] = currentChannel;
    }
    return currentChannel;
};
SCClientSocket.prototype.destroyChannel = function(channelName) {
    var channel = this.channels[channelName];
    if (channel) {
        channel.unwatch();
        channel.unsubscribe();
        delete this.channels[channelName];
    }
};
SCClientSocket.prototype.subscriptions = function(includePending) {
    var subs = [];
    var channel, includeChannel;
    for(var channelName in this.channels)if (this.channels.hasOwnProperty(channelName)) {
        channel = this.channels[channelName];
        if (includePending) includeChannel = channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
        else includeChannel = channel && channel.state == channel.SUBSCRIBED;
        if (includeChannel) subs.push(channelName);
    }
    return subs;
};
SCClientSocket.prototype.isSubscribed = function(channelName, includePending) {
    var channel = this.channels[channelName];
    if (includePending) return !!channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
    return !!channel && channel.state == channel.SUBSCRIBED;
};
SCClientSocket.prototype.processPendingSubscriptions = function() {
    var self = this;
    this.preparingPendingSubscriptions = false;
    var pendingChannels = [];
    for(var i in this.channels)if (this.channels.hasOwnProperty(i)) {
        var channel = this.channels[i];
        if (channel.state == channel.PENDING) pendingChannels.push(channel);
    }
    pendingChannels.sort(function(a, b) {
        var ap = a.priority || 0;
        var bp = b.priority || 0;
        if (ap > bp) return -1;
        if (ap < bp) return 1;
        return 0;
    });
    pendingChannels.forEach(function(channel) {
        self._trySubscribe(channel);
    });
};
SCClientSocket.prototype.watch = function(channelName, handler) {
    if (typeof handler != 'function') throw new InvalidArgumentsError('No handler function was provided');
    this._channelEmitter.on(channelName, handler);
};
SCClientSocket.prototype.unwatch = function(channelName, handler) {
    if (handler) this._channelEmitter.removeListener(channelName, handler);
    else this._channelEmitter.removeAllListeners(channelName);
};
SCClientSocket.prototype.watchers = function(channelName) {
    return this._channelEmitter.listeners(channelName);
};
module.exports = SCClientSocket;

},{"buffer":"bpNHw","component-emitter":"f4dye","sc-channel":"fn5QS","./response":"ggtzL","./auth":"4NFKG","sc-formatter":"1159u","./sctransport":"keQs3","querystring":"4WmOC","linked-list":"aBN9D","base-64":"ciaZB","clone":"xu6sN","sc-errors":"2Rc0C"}],"bpNHw":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var base64 = require('base64-js');
var ieee754 = require('ieee754');
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare1(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while((++i) < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset + --byteLength1];
    var mul = 1;
    while(byteLength1 > 0 && (mul *= 256))val += this[offset + --byteLength1] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while((++i) < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength1);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var i = byteLength1;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength1);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength1) - 1;
        checkInt(this, value, offset, byteLength1, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while((++i) < byteLength1 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength1;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength1) - 1;
        checkInt(this, value, offset, byteLength1, maxBytes, 0);
    }
    var i = byteLength1 - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while((--i) >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength1;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength1 - 1);
        checkInt(this, value, offset, byteLength1, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while((++i) < byteLength1 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength1;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength1 - 1);
        checkInt(this, value, offset, byteLength1, limit - 1, -limit);
    }
    var i = byteLength1 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while((--i) >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength1;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"2vMBM","ieee754":"lz1we"}],"2vMBM":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len1 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len1; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i1 = start; i1 < end; i1 += 3){
        tmp = (uint8[i1] << 16 & 16711680) + (uint8[i1 + 1] << 8 & 65280) + (uint8[i1 + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len1 = uint8.length;
    var extraBytes = len1 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i1 = 0, len2 = len1 - extraBytes; i1 < len2; i1 += maxChunkLength)parts.push(encodeChunk(uint8, i1, i1 + maxChunkLength > len2 ? len2 : i1 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len1 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len1 - 2] << 8) + uint8[len1 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"lz1we":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"f4dye":[function(require,module,exports) {
/**
 * Expose `Emitter`.
 */ if (typeof module !== 'undefined') module.exports = Emitter;
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */ function Emitter(obj) {
    if (obj) return mixin(obj);
}
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */ function mixin(obj) {
    for(var key in Emitter.prototype)obj[key] = Emitter.prototype[key];
    return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {
    };
    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
    return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.once = function(event, fn) {
    function on() {
        this.off(event, on);
        fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {
    };
    // all
    if (0 == arguments.length) {
        this._callbacks = {
        };
        return this;
    }
    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;
    // remove all handlers
    if (1 == arguments.length) {
        delete this._callbacks['$' + event];
        return this;
    }
    // remove specific handler
    var cb;
    for(var i = 0; i < callbacks.length; i++){
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);
            break;
        }
    }
    return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */ Emitter.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {
    };
    var args = [].slice.call(arguments, 1), callbacks = this._callbacks['$' + event];
    if (callbacks) {
        callbacks = callbacks.slice(0);
        for(var i = 0, len = callbacks.length; i < len; ++i)callbacks[i].apply(this, args);
    }
    return this;
};
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */ Emitter.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {
    };
    return this._callbacks['$' + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */ Emitter.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
};

},{}],"fn5QS":[function(require,module,exports) {
var Emitter = require('component-emitter');
var SCChannel = function(name, client, options) {
    var self = this;
    Emitter.call(this);
    this.PENDING = 'pending';
    this.SUBSCRIBED = 'subscribed';
    this.UNSUBSCRIBED = 'unsubscribed';
    this.name = name;
    this.state = this.UNSUBSCRIBED;
    this.client = client;
    this.options = options || {
    };
    this.setOptions(this.options);
};
SCChannel.prototype = Object.create(Emitter.prototype);
SCChannel.prototype.setOptions = function(options) {
    if (!options) options = {
    };
    this.waitForAuth = options.waitForAuth || false;
    this.batch = options.batch || false;
    if (options.data !== undefined) this.data = options.data;
};
SCChannel.prototype.getState = function() {
    return this.state;
};
SCChannel.prototype.subscribe = function(options) {
    this.client.subscribe(this.name, options);
};
SCChannel.prototype.unsubscribe = function() {
    this.client.unsubscribe(this.name);
};
SCChannel.prototype.isSubscribed = function(includePending) {
    return this.client.isSubscribed(this.name, includePending);
};
SCChannel.prototype.publish = function(data, callback) {
    this.client.publish(this.name, data, callback);
};
SCChannel.prototype.watch = function(handler) {
    this.client.watch(this.name, handler);
};
SCChannel.prototype.unwatch = function(handler) {
    this.client.unwatch(this.name, handler);
};
SCChannel.prototype.watchers = function() {
    return this.client.watchers(this.name);
};
SCChannel.prototype.destroy = function() {
    this.client.destroyChannel(this.name);
};
module.exports.SCChannel = SCChannel;

},{"component-emitter":"f4dye"}],"ggtzL":[function(require,module,exports) {
var scErrors = require('sc-errors');
var InvalidActionError = scErrors.InvalidActionError;
var Response1 = function(socket, id) {
    this.socket = socket;
    this.id = id;
    this.sent = false;
};
Response1.prototype._respond = function(responseData) {
    if (this.sent) throw new InvalidActionError('Response ' + this.id + ' has already been sent');
    else {
        this.sent = true;
        this.socket.send(this.socket.encode(responseData));
    }
};
Response1.prototype.end = function(data) {
    if (this.id) {
        var responseData = {
            rid: this.id
        };
        if (data !== undefined) responseData.data = data;
        this._respond(responseData);
    }
};
Response1.prototype.error = function(error, data) {
    if (this.id) {
        var err = scErrors.dehydrateError(error);
        var responseData = {
            rid: this.id,
            error: err
        };
        if (data !== undefined) responseData.data = data;
        this._respond(responseData);
    }
};
Response1.prototype.callback = function(error, data) {
    if (error) this.error(error, data);
    else this.end(data);
};
module.exports.Response = Response1;

},{"sc-errors":"2Rc0C"}],"2Rc0C":[function(require,module,exports) {
var decycle = require('./decycle');
var isStrict = function() {
    return !this;
}();
function AuthTokenExpiredError(message, expiry) {
    this.name = 'AuthTokenExpiredError';
    this.message = message;
    this.expiry = expiry;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
AuthTokenExpiredError.prototype = Object.create(Error.prototype);
function AuthTokenInvalidError(message) {
    this.name = 'AuthTokenInvalidError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
AuthTokenInvalidError.prototype = Object.create(Error.prototype);
function AuthTokenNotBeforeError(message, date) {
    this.name = 'AuthTokenNotBeforeError';
    this.message = message;
    this.date = date;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
AuthTokenNotBeforeError.prototype = Object.create(Error.prototype);
// For any other auth token error.
function AuthTokenError(message) {
    this.name = 'AuthTokenError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
AuthTokenError.prototype = Object.create(Error.prototype);
function SilentMiddlewareBlockedError(message, type) {
    this.name = 'SilentMiddlewareBlockedError';
    this.message = message;
    this.type = type;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
SilentMiddlewareBlockedError.prototype = Object.create(Error.prototype);
function InvalidActionError(message) {
    this.name = 'InvalidActionError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
InvalidActionError.prototype = Object.create(Error.prototype);
function InvalidArgumentsError(message) {
    this.name = 'InvalidArgumentsError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
InvalidArgumentsError.prototype = Object.create(Error.prototype);
function InvalidOptionsError(message) {
    this.name = 'InvalidOptionsError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
InvalidOptionsError.prototype = Object.create(Error.prototype);
function InvalidMessageError(message) {
    this.name = 'InvalidMessageError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
InvalidMessageError.prototype = Object.create(Error.prototype);
function SocketProtocolError(message, code) {
    this.name = 'SocketProtocolError';
    this.message = message;
    this.code = code;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
SocketProtocolError.prototype = Object.create(Error.prototype);
function ServerProtocolError(message) {
    this.name = 'ServerProtocolError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
ServerProtocolError.prototype = Object.create(Error.prototype);
function HTTPServerError(message) {
    this.name = 'HTTPServerError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
HTTPServerError.prototype = Object.create(Error.prototype);
function ResourceLimitError(message) {
    this.name = 'ResourceLimitError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
ResourceLimitError.prototype = Object.create(Error.prototype);
function TimeoutError(message) {
    this.name = 'TimeoutError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
TimeoutError.prototype = Object.create(Error.prototype);
function BadConnectionError(message, type) {
    this.name = 'BadConnectionError';
    this.message = message;
    this.type = type;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
BadConnectionError.prototype = Object.create(Error.prototype);
function BrokerError(message) {
    this.name = 'BrokerError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
BrokerError.prototype = Object.create(Error.prototype);
function ProcessExitError(message, code) {
    this.name = 'ProcessExitError';
    this.message = message;
    this.code = code;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
ProcessExitError.prototype = Object.create(Error.prototype);
function UnknownError(message) {
    this.name = 'UnknownError';
    this.message = message;
    if (Error.captureStackTrace && !isStrict) Error.captureStackTrace(this, arguments.callee);
    else this.stack = new Error().stack;
}
UnknownError.prototype = Object.create(Error.prototype);
// Expose all error types.
module.exports = {
    AuthTokenExpiredError: AuthTokenExpiredError,
    AuthTokenInvalidError: AuthTokenInvalidError,
    AuthTokenNotBeforeError: AuthTokenNotBeforeError,
    AuthTokenError: AuthTokenError,
    SilentMiddlewareBlockedError: SilentMiddlewareBlockedError,
    InvalidActionError: InvalidActionError,
    InvalidArgumentsError: InvalidArgumentsError,
    InvalidOptionsError: InvalidOptionsError,
    InvalidMessageError: InvalidMessageError,
    SocketProtocolError: SocketProtocolError,
    ServerProtocolError: ServerProtocolError,
    HTTPServerError: HTTPServerError,
    ResourceLimitError: ResourceLimitError,
    TimeoutError: TimeoutError,
    BadConnectionError: BadConnectionError,
    BrokerError: BrokerError,
    ProcessExitError: ProcessExitError,
    UnknownError: UnknownError
};
module.exports.socketProtocolErrorStatuses = {
    1001: 'Socket was disconnected',
    1002: 'A WebSocket protocol error was encountered',
    1003: 'Server terminated socket because it received invalid data',
    1005: 'Socket closed without status code',
    1006: 'Socket hung up',
    1007: 'Message format was incorrect',
    1008: 'Encountered a policy violation',
    1009: 'Message was too big to process',
    1010: 'Client ended the connection because the server did not comply with extension requirements',
    1011: 'Server encountered an unexpected fatal condition',
    4000: 'Server ping timed out',
    4001: 'Client pong timed out',
    4002: 'Server failed to sign auth token',
    4003: 'Failed to complete handshake',
    4004: 'Client failed to save auth token',
    4005: 'Did not receive #handshake from client before timeout',
    4006: 'Failed to bind socket to message broker',
    4007: 'Client connection establishment timed out',
    4008: 'Server rejected handshake from client'
};
module.exports.socketProtocolIgnoreStatuses = {
    1000: 'Socket closed normally',
    1001: 'Socket hung up'
};
// Properties related to error domains cannot be serialized.
var unserializableErrorProperties = {
    domain: 1,
    domainEmitter: 1,
    domainThrown: 1
};
// Convert an error into a JSON-compatible type which can later be hydrated
// back to its *original* form.
module.exports.dehydrateError = function dehydrateError(error, includeStackTrace) {
    var dehydratedError;
    if (error && typeof error === 'object') {
        dehydratedError = {
            message: error.message
        };
        if (includeStackTrace) dehydratedError.stack = error.stack;
        for(var i in error)if (!unserializableErrorProperties[i]) dehydratedError[i] = error[i];
    } else if (typeof error === 'function') dehydratedError = '[function ' + (error.name || 'anonymous') + ']';
    else dehydratedError = error;
    return decycle(dehydratedError);
};
// Convert a dehydrated error back to its *original* form.
module.exports.hydrateError = function hydrateError(error) {
    var hydratedError = null;
    if (error != null) {
        if (typeof error === 'object') {
            hydratedError = new Error(error.message);
            for(var i in error)if (error.hasOwnProperty(i)) hydratedError[i] = error[i];
        } else hydratedError = error;
    }
    return hydratedError;
};
module.exports.decycle = decycle;

},{"./decycle":"2FWlz"}],"2FWlz":[function(require,module,exports) {
// Based on https://github.com/dscape/cycle/blob/master/cycle.js
module.exports = function decycle(object) {
    // Make a deep copy of an object or array, assuring that there is at most
    // one instance of each object or array in the resulting structure. The
    // duplicate references (which might be forming cycles) are replaced with
    // an object of the form
    //      {$ref: PATH}
    // where the PATH is a JSONPath string that locates the first occurance.
    // So,
    //      var a = [];
    //      a[0] = a;
    //      return JSON.stringify(JSON.decycle(a));
    // produces the string '[{"$ref":"$"}]'.
    // JSONPath is used to locate the unique object. $ indicates the top level of
    // the object or array. [NUMBER] or [STRING] indicates a child member or
    // property.
    var objects = [], paths = []; // Keep the path to each unique object or array
    return (function derez(value, path) {
        // The derez recurses through the object, producing the deep copy.
        var i, name, nu; // The new object or array
        // typeof null === 'object', so go on if this value is really an object but not
        // one of the weird builtin objects.
        if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {
            // If the value is an object or array, look to see if we have already
            // encountered it. If so, return a $ref/path object. This is a hard way,
            // linear search that will get slower as the number of unique objects grows.
            for(i = 0; i < objects.length; i += 1){
                if (objects[i] === value) return {
                    $ref: paths[i]
                };
            }
            // Otherwise, accumulate the unique value and its path.
            objects.push(value);
            paths.push(path);
            // If it is an array, replicate the array.
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                nu = [];
                for(i = 0; i < value.length; i += 1)nu[i] = derez(value[i], path + '[' + i + ']');
            } else {
                // If it is an object, replicate the object.
                nu = {
                };
                for(name in value)if (Object.prototype.hasOwnProperty.call(value, name)) nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');
            }
            return nu;
        }
        return value;
    })(object, '$');
};

},{}],"4NFKG":[function(require,module,exports) {
var global = arguments[3];
var AuthEngine = function() {
    this._internalStorage = {
    };
    this.isLocalStorageEnabled = this._checkLocalStorageEnabled();
};
AuthEngine.prototype._checkLocalStorageEnabled = function() {
    var err;
    try {
        // Some browsers will throw an error here if localStorage is disabled.
        global.localStorage;
        // Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
        // throw QuotaExceededError. We're going to detect this and avoid hard to debug edge cases.
        global.localStorage.setItem('__scLocalStorageTest', 1);
        global.localStorage.removeItem('__scLocalStorageTest');
    } catch (e) {
        err = e;
    }
    return !err;
};
AuthEngine.prototype.saveToken = function(name, token, options, callback) {
    if (this.isLocalStorageEnabled && global.localStorage) global.localStorage.setItem(name, token);
    else this._internalStorage[name] = token;
    callback && callback(null, token);
};
AuthEngine.prototype.removeToken = function(name, callback) {
    var token;
    this.loadToken(name, function(err, authToken) {
        token = authToken;
    });
    if (this.isLocalStorageEnabled && global.localStorage) global.localStorage.removeItem(name);
    else delete this._internalStorage[name];
    callback && callback(null, token);
};
AuthEngine.prototype.loadToken = function(name, callback) {
    var token;
    if (this.isLocalStorageEnabled && global.localStorage) token = global.localStorage.getItem(name);
    else token = this._internalStorage[name] || null;
    callback(null, token);
};
module.exports.AuthEngine = AuthEngine;

},{}],"1159u":[function(require,module,exports) {
var global = arguments[3];
var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var validJSONStartRegex = /^[ \n\r\t]*[{\[]/;
var arrayBufferToBase64 = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer);
    var len = bytes.length;
    var base64 = '';
    for(var i = 0; i < len; i += 3){
        base64 += base64Chars[bytes[i] >> 2];
        base64 += base64Chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64 += base64Chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64 += base64Chars[bytes[i + 2] & 63];
    }
    if (len % 3 === 2) base64 = base64.substring(0, base64.length - 1) + '=';
    else if (len % 3 === 1) base64 = base64.substring(0, base64.length - 2) + '==';
    return base64;
};
var binaryToBase64Replacer = function(key, value) {
    if (global.ArrayBuffer && value instanceof global.ArrayBuffer) return {
        base64: true,
        data: arrayBufferToBase64(value)
    };
    else if (global.Buffer) {
        if (value instanceof global.Buffer) return {
            base64: true,
            data: value.toString('base64')
        };
        // Some versions of Node.js convert Buffers to Objects before they are passed to
        // the replacer function - Because of this, we need to rehydrate Buffers
        // before we can convert them to base64 strings.
        if (value && value.type === 'Buffer' && Array.isArray(value.data)) {
            var rehydratedBuffer;
            if (global.Buffer.from) rehydratedBuffer = global.Buffer.from(value.data);
            else rehydratedBuffer = new global.Buffer(value.data);
            return {
                base64: true,
                data: rehydratedBuffer.toString('base64')
            };
        }
    }
    return value;
};
// Decode the data which was transmitted over the wire to a JavaScript Object in a format which SC understands.
// See encode function below for more details.
module.exports.decode = function(input) {
    if (input == null) return null;
    // Leave ping or pong message as is
    if (input === '#1' || input === '#2') return input;
    var message = input.toString();
    // Performance optimization to detect invalid JSON packet sooner.
    if (!validJSONStartRegex.test(message)) return message;
    try {
        return JSON.parse(message);
    } catch (err) {
    }
    return message;
};
// Encode a raw JavaScript object (which is in the SC protocol format) into a format for
// transfering it over the wire. In this case, we just convert it into a simple JSON string.
// If you want to create your own custom codec, you can encode the object into any format
// (e.g. binary ArrayBuffer or string with any kind of compression) so long as your decode
// function is able to rehydrate that object back into its original JavaScript Object format
// (which adheres to the SC protocol).
// See https://github.com/SocketCluster/socketcluster/blob/master/socketcluster-protocol.md
// for details about the SC protocol.
module.exports.encode = function(object) {
    // Leave ping or pong message as is
    if (object === '#1' || object === '#2') return object;
    return JSON.stringify(object, binaryToBase64Replacer);
};

},{}],"keQs3":[function(require,module,exports) {
var global = arguments[3];
var Emitter = require('component-emitter');
var Response1 = require('./response').Response;
var querystring = require('querystring');
var WebSocket1;
var createWebSocket;
if (global.WebSocket) {
    WebSocket1 = global.WebSocket;
    createWebSocket = function(uri, options) {
        return new WebSocket1(uri);
    };
} else {
    WebSocket1 = require('ws');
    createWebSocket = function(uri, options) {
        return new WebSocket1(uri, null, options);
    };
}
var scErrors = require('sc-errors');
var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;
var SCTransport = function(authEngine, codecEngine, options) {
    var self = this;
    this.state = this.CLOSED;
    this.auth = authEngine;
    this.codec = codecEngine;
    this.options = options;
    this.connectTimeout = options.connectTimeout;
    this.pingTimeout = options.ackTimeout;
    this.pingTimeoutDisabled = !!options.pingTimeoutDisabled;
    this.callIdGenerator = options.callIdGenerator;
    this.authTokenName = options.authTokenName;
    this._pingTimeoutTicker = null;
    this._callbackMap = {
    };
    this._batchSendList = [];
    // Open the connection.
    this.state = this.CONNECTING;
    var uri = this.uri();
    var wsSocket = createWebSocket(uri, this.options);
    wsSocket.binaryType = this.options.binaryType;
    this.socket = wsSocket;
    wsSocket.onopen = function() {
        self._onOpen();
    };
    wsSocket.onclose = function(event) {
        var code;
        if (event.code == null) // This is to handle an edge case in React Native whereby
        // event.code is undefined when the mobile device is locked.
        // TODO: This is not perfect since this condition could also apply to
        // an abnormal close (no close control frame) which would be a 1006.
        code = 1005;
        else code = event.code;
        self._onClose(code, event.reason);
    };
    wsSocket.onmessage = function(message, flags) {
        self._onMessage(message.data);
    };
    wsSocket.onerror = function(error) {
        // The onclose event will be called automatically after the onerror event
        // if the socket is connected - Otherwise, if it's in the middle of
        // connecting, we want to close it manually with a 1006 - This is necessary
        // to prevent inconsistent behavior when running the client in Node.js
        // vs in a browser.
        if (self.state === self.CONNECTING) self._onClose(1006);
    };
    this._connectTimeoutRef = setTimeout(function() {
        self._onClose(4007);
        self.socket.close(4007);
    }, this.connectTimeout);
};
SCTransport.prototype = Object.create(Emitter.prototype);
SCTransport.CONNECTING = SCTransport.prototype.CONNECTING = 'connecting';
SCTransport.OPEN = SCTransport.prototype.OPEN = 'open';
SCTransport.CLOSED = SCTransport.prototype.CLOSED = 'closed';
SCTransport.prototype.uri = function() {
    var query = this.options.query || {
    };
    var schema = this.options.secure ? 'wss' : 'ws';
    if (this.options.timestampRequests) query[this.options.timestampParam] = new Date().getTime();
    query = querystring.encode(query);
    if (query.length) query = '?' + query;
    var host;
    if (this.options.host) host = this.options.host;
    else {
        var port = '';
        if (this.options.port && (schema == 'wss' && this.options.port != 443 || schema == 'ws' && this.options.port != 80)) port = ':' + this.options.port;
        host = this.options.hostname + port;
    }
    return schema + '://' + host + this.options.path + query;
};
SCTransport.prototype._onOpen = function() {
    var self = this;
    clearTimeout(this._connectTimeoutRef);
    this._resetPingTimeout();
    this._handshake(function(err, status) {
        if (err) {
            var statusCode;
            if (status && status.code) statusCode = status.code;
            else statusCode = 4003;
            self._onError(err);
            self._onClose(statusCode, err.toString());
            self.socket.close(statusCode);
        } else {
            self.state = self.OPEN;
            Emitter.prototype.emit.call(self, 'open', status);
            self._resetPingTimeout();
        }
    });
};
SCTransport.prototype._handshake = function(callback) {
    var self = this;
    this.auth.loadToken(this.authTokenName, function(err, token) {
        if (err) callback(err);
        else {
            // Don't wait for this.state to be 'open'.
            // The underlying WebSocket (this.socket) is already open.
            var options = {
                force: true
            };
            self.emit('#handshake', {
                authToken: token
            }, options, function(err1, status) {
                if (status) {
                    // Add the token which was used as part of authentication attempt
                    // to the status object.
                    status.authToken = token;
                    if (status.authError) status.authError = scErrors.hydrateError(status.authError);
                }
                callback(err1, status);
            });
        }
    });
};
SCTransport.prototype._abortAllPendingEventsDueToBadConnection = function(failureType) {
    for(var i in this._callbackMap)if (this._callbackMap.hasOwnProperty(i)) {
        var eventObject = this._callbackMap[i];
        delete this._callbackMap[i];
        clearTimeout(eventObject.timeout);
        delete eventObject.timeout;
        var errorMessage = "Event '" + eventObject.event + "' was aborted due to a bad connection";
        var badConnectionError = new BadConnectionError(errorMessage, failureType);
        var callback = eventObject.callback;
        delete eventObject.callback;
        callback.call(eventObject, badConnectionError, eventObject);
    }
};
SCTransport.prototype._onClose = function(code, data) {
    delete this.socket.onopen;
    delete this.socket.onclose;
    delete this.socket.onmessage;
    delete this.socket.onerror;
    clearTimeout(this._connectTimeoutRef);
    clearTimeout(this._pingTimeoutTicker);
    clearTimeout(this._batchTimeout);
    if (this.state == this.OPEN) {
        this.state = this.CLOSED;
        Emitter.prototype.emit.call(this, 'close', code, data);
        this._abortAllPendingEventsDueToBadConnection('disconnect');
    } else if (this.state == this.CONNECTING) {
        this.state = this.CLOSED;
        Emitter.prototype.emit.call(this, 'openAbort', code, data);
        this._abortAllPendingEventsDueToBadConnection('connectAbort');
    }
};
SCTransport.prototype._handleEventObject = function(obj, message) {
    if (obj && obj.event != null) {
        var response = new Response1(this, obj.cid);
        Emitter.prototype.emit.call(this, 'event', obj.event, obj.data, response);
    } else if (obj && obj.rid != null) {
        var eventObject = this._callbackMap[obj.rid];
        if (eventObject) {
            clearTimeout(eventObject.timeout);
            delete eventObject.timeout;
            delete this._callbackMap[obj.rid];
            if (eventObject.callback) {
                var rehydratedError = scErrors.hydrateError(obj.error);
                eventObject.callback(rehydratedError, obj.data);
            }
        }
    } else Emitter.prototype.emit.call(this, 'event', 'raw', message);
};
SCTransport.prototype._onMessage = function(message) {
    Emitter.prototype.emit.call(this, 'event', 'message', message);
    var obj = this.decode(message);
    // If ping
    if (obj == '#1') {
        this._resetPingTimeout();
        if (this.socket.readyState == this.socket.OPEN) this.sendObject('#2');
    } else if (Array.isArray(obj)) {
        var len = obj.length;
        for(var i = 0; i < len; i++)this._handleEventObject(obj[i], message);
    } else this._handleEventObject(obj, message);
};
SCTransport.prototype._onError = function(err) {
    Emitter.prototype.emit.call(this, 'error', err);
};
SCTransport.prototype._resetPingTimeout = function() {
    if (this.pingTimeoutDisabled) return;
    var self = this;
    var now = new Date().getTime();
    clearTimeout(this._pingTimeoutTicker);
    this._pingTimeoutTicker = setTimeout(function() {
        self._onClose(4000);
        self.socket.close(4000);
    }, this.pingTimeout);
};
SCTransport.prototype.getBytesReceived = function() {
    return this.socket.bytesReceived;
};
SCTransport.prototype.close = function(code, data) {
    code = code || 1000;
    if (this.state == this.OPEN) {
        var packet = {
            code: code,
            data: data
        };
        this.emit('#disconnect', packet);
        this._onClose(code, data);
        this.socket.close(code);
    } else if (this.state == this.CONNECTING) {
        this._onClose(code, data);
        this.socket.close(code);
    }
};
SCTransport.prototype.emitObject = function(eventObject, options) {
    var simpleEventObject = {
        event: eventObject.event,
        data: eventObject.data
    };
    if (eventObject.callback) {
        simpleEventObject.cid = eventObject.cid = this.callIdGenerator();
        this._callbackMap[eventObject.cid] = eventObject;
    }
    this.sendObject(simpleEventObject, options);
    return eventObject.cid || null;
};
SCTransport.prototype._handleEventAckTimeout = function(eventObject) {
    if (eventObject.cid) delete this._callbackMap[eventObject.cid];
    delete eventObject.timeout;
    var callback = eventObject.callback;
    if (callback) {
        delete eventObject.callback;
        var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
        callback.call(eventObject, error, eventObject);
    }
};
// The last two optional arguments (a and b) can be options and/or callback
SCTransport.prototype.emit = function(event, data, a, b) {
    var self = this;
    var callback, options;
    if (b) {
        options = a;
        callback = b;
    } else if (a instanceof Function) {
        options = {
        };
        callback = a;
    } else options = a;
    var eventObject = {
        event: event,
        data: data,
        callback: callback
    };
    if (callback && !options.noTimeout) eventObject.timeout = setTimeout(function() {
        self._handleEventAckTimeout(eventObject);
    }, this.options.ackTimeout);
    var cid = null;
    if (this.state == this.OPEN || options.force) cid = this.emitObject(eventObject, options);
    return cid;
};
SCTransport.prototype.cancelPendingResponse = function(cid) {
    delete this._callbackMap[cid];
};
SCTransport.prototype.decode = function(message) {
    return this.codec.decode(message);
};
SCTransport.prototype.encode = function(object) {
    return this.codec.encode(object);
};
SCTransport.prototype.send = function(data) {
    if (this.socket.readyState != this.socket.OPEN) this._onClose(1005);
    else this.socket.send(data);
};
SCTransport.prototype.serializeObject = function(object) {
    var str, formatError;
    try {
        str = this.encode(object);
    } catch (err) {
        formatError = err;
        this._onError(formatError);
    }
    if (!formatError) return str;
    return null;
};
SCTransport.prototype.sendObjectBatch = function(object) {
    var self = this;
    this._batchSendList.push(object);
    if (this._batchTimeout) return;
    this._batchTimeout = setTimeout(function() {
        delete self._batchTimeout;
        if (self._batchSendList.length) {
            var str = self.serializeObject(self._batchSendList);
            if (str != null) self.send(str);
            self._batchSendList = [];
        }
    }, this.options.pubSubBatchDuration || 0);
};
SCTransport.prototype.sendObjectSingle = function(object) {
    var str = this.serializeObject(object);
    if (str != null) this.send(str);
};
SCTransport.prototype.sendObject = function(object, options) {
    if (options && options.batch) this.sendObjectBatch(object);
    else this.sendObjectSingle(object);
};
module.exports.SCTransport = SCTransport;

},{"component-emitter":"f4dye","./response":"ggtzL","querystring":"4WmOC","ws":"7aWIS","sc-errors":"2Rc0C"}],"4WmOC":[function(require,module,exports) {
'use strict';
exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":"2yoyd","./encode":"cOVV4"}],"2yoyd":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {
    };
    if (typeof qs !== 'string' || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, '%20'), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = '';
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) obj[k] = v;
        else if (isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],"cOVV4":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var stringifyPrimitive = function(v) {
    switch(typeof v){
        case 'string':
            return v;
        case 'boolean':
            return v ? 'true' : 'false';
        case 'number':
            return isFinite(v) ? v : '';
        default:
            return '';
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) obj = undefined;
    if (typeof obj === 'object') return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};
function map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

},{}],"7aWIS":[function(require,module,exports) {
var global;
if (typeof WorkerGlobalScope !== 'undefined') global = self;
else global = typeof window != 'undefined' && window || (function() {
    return this;
})();
var WebSocket1 = global.WebSocket || global.MozWebSocket;
/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object} opts (optional)
 * @api public
 */ function ws(uri, protocols, opts) {
    var instance;
    if (protocols) instance = new WebSocket1(uri, protocols);
    else instance = new WebSocket1(uri);
    return instance;
}
if (WebSocket1) ws.prototype = WebSocket1.prototype;
module.exports = WebSocket1 ? ws : null;

},{}],"aBN9D":[function(require,module,exports) {
'use strict';
module.exports = require('./_source/linked-list.js');

},{"./_source/linked-list.js":"bHKCr"}],"bHKCr":[function(require,module,exports) {
'use strict';
/**
 * Constants.
 */ var errorMessage;
errorMessage = "An argument without append, prepend, or detach methods was given to `List";
/**
 * Creates a new List: A linked list is a bit like an Array, but
 * knows nothing about how many items are in it, and knows only about its
 * first (`head`) and last (`tail`) items. Each item (e.g. `head`, `tail`,
 * &c.) knows which item comes before or after it (its more like the
 * implementation of the DOM in JavaScript).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of List.
 */ function List() {
    if (arguments.length) return List.from(arguments);
}
var ListPrototype;
ListPrototype = List.prototype;
/**
 * Creates a new list from the arguments (each a list item) passed in.
 * @name List.of
 * @param {...ListItem} [items] - Zero or more items to attach.
 * @returns {list} - A new instance of List.
 */ List.of = function() {
    return List.from.call(this, arguments);
};
/**
 * Creates a new list from the given array-like object (each a list item)
 * passed in.
 * @name List.from
 * @param {ListItem[]} [items] - The items to append.
 * @returns {list} - A new instance of List.
 */ List.from = function(items) {
    var list = new this(), length, iterator, item;
    if (items && (length = items.length)) {
        iterator = -1;
        while((++iterator) < length){
            item = items[iterator];
            if (item !== null && item !== undefined) list.append(item);
        }
    }
    return list;
};
/**
 * List#head
 * Default to `null`.
 */ ListPrototype.head = null;
/**
 * List#tail
 * Default to `null`.
 */ ListPrototype.tail = null;
/**
 * Returns the list's items as an array. This does *not* detach the items.
 * @name List#toArray
 * @returns {ListItem[]} - An array of (still attached) ListItems.
 */ ListPrototype.toArray = function() {
    var item = this.head, result = [];
    while(item){
        result.push(item);
        item = item.next;
    }
    return result;
};
/**
 * Prepends the given item to the list: Item will be the new first item
 * (`head`).
 * @name List#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */ ListPrototype.prepend = function(item) {
    if (!item) return false;
    if (!item.append || !item.prepend || !item.detach) throw new Error(errorMessage + '#prepend`.');
    var self, head;
    // Cache self.
    self = this;
    // If self has a first item, defer prepend to the first items prepend
    // method, and return the result.
    head = self.head;
    if (head) return head.prepend(item);
    // ...otherwise, there is no `head` (or `tail`) item yet.
    // Detach the prependee.
    item.detach();
    // Set the prependees parent list to reference self.
    item.list = self;
    // Set self's first item to the prependee, and return the item.
    self.head = item;
    return item;
};
/**
 * Appends the given item to the list: Item will be the new last item (`tail`)
 * if the list had a first item, and its first item (`head`) otherwise.
 * @name List#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */ ListPrototype.append = function(item) {
    if (!item) return false;
    if (!item.append || !item.prepend || !item.detach) throw new Error(errorMessage + '#append`.');
    var self, head, tail;
    // Cache self.
    self = this;
    // If self has a last item, defer appending to the last items append
    // method, and return the result.
    tail = self.tail;
    if (tail) return tail.append(item);
    // If self has a first item, defer appending to the first items append
    // method, and return the result.
    head = self.head;
    if (head) return head.append(item);
    // ...otherwise, there is no `tail` or `head` item yet.
    // Detach the appendee.
    item.detach();
    // Set the appendees parent list to reference self.
    item.list = self;
    // Set self's first item to the appendee, and return the item.
    self.head = item;
    return item;
};
/**
 * Creates a new ListItem: A linked list item is a bit like DOM node:
 * It knows only about its "parent" (`list`), the item before it (`prev`),
 * and the item after it (`next`).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of ListItem.
 */ function ListItem() {
}
List.Item = ListItem;
var ListItemPrototype = ListItem.prototype;
ListItemPrototype.next = null;
ListItemPrototype.prev = null;
ListItemPrototype.list = null;
/**
 * Detaches the item operated on from its parent list.
 * @name ListItem#detach
 * @returns {ListItem} - The item operated on.
 */ ListItemPrototype.detach = function() {
    // Cache self, the parent list, and the previous and next items.
    var self = this, list = self.list, prev = self.prev, next = self.next;
    // If the item is already detached, return self.
    if (!list) return self;
    // If self is the last item in the parent list, link the lists last item
    // to the previous item.
    if (list.tail === self) list.tail = prev;
    // If self is the first item in the parent list, link the lists first item
    // to the next item.
    if (list.head === self) list.head = next;
    // If both the last and first items in the parent list are the same,
    // remove the link to the last item.
    if (list.tail === list.head) list.tail = null;
    // If a previous item exists, link its next item to selfs next item.
    if (prev) prev.next = next;
    // If a next item exists, link its previous item to selfs previous item.
    if (next) next.prev = prev;
    // Remove links from self to both the next and previous items, and to the
    // parent list.
    self.prev = self.next = self.list = null;
    // Return self.
    return self;
};
/**
 * Prepends the given item *before* the item operated on.
 * @name ListItem#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */ ListItemPrototype.prepend = function(item) {
    if (!item || !item.append || !item.prepend || !item.detach) throw new Error(errorMessage + 'Item#prepend`.');
    // Cache self, the parent list, and the previous item.
    var self = this, list = self.list, prev = self.prev;
    // If self is detached, return false.
    if (!list) return false;
    // Detach the prependee.
    item.detach();
    // If self has a previous item...
    if (prev) {
        // ...link the prependees previous item, to selfs previous item.
        item.prev = prev;
        // ...link the previous items next item, to self.
        prev.next = item;
    }
    // Set the prependees next item to self.
    item.next = self;
    // Set the prependees parent list to selfs parent list.
    item.list = list;
    // Set the previous item of self to the prependee.
    self.prev = item;
    // If self is the first item in the parent list, link the lists first item
    // to the prependee.
    if (self === list.head) list.head = item;
    // If the the parent list has no last item, link the lists last item to
    // self.
    if (!list.tail) list.tail = self;
    // Return the prependee.
    return item;
};
/**
 * Appends the given item *after* the item operated on.
 * @name ListItem#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */ ListItemPrototype.append = function(item) {
    // If item is falsey, return false.
    if (!item || !item.append || !item.prepend || !item.detach) throw new Error(errorMessage + 'Item#append`.');
    // Cache self, the parent list, and the next item.
    var self = this, list = self.list, next = self.next;
    // If self is detached, return false.
    if (!list) return false;
    // Detach the appendee.
    item.detach();
    // If self has a next item...
    if (next) {
        // ...link the appendees next item, to selfs next item.
        item.next = next;
        // ...link the next items previous item, to the appendee.
        next.prev = item;
    }
    // Set the appendees previous item to self.
    item.prev = self;
    // Set the appendees parent list to selfs parent list.
    item.list = list;
    // Set the next item of self to the appendee.
    self.next = item;
    // If the the parent list has no last item or if self is the parent lists
    // last item, link the lists last item to the appendee.
    if (self === list.tail || !list.tail) list.tail = item;
    // Return the appendee.
    return item;
};
/**
 * Expose `List`.
 */ module.exports = List;

},{}],"ciaZB":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    // Detect free variables `exports`.
    var freeExports = typeof exports == 'object' && exports;
    // Detect free variable `module`.
    var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
    // Detect free variable `global`, from Node.js or Browserified code, and use
    // it as `root`.
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) root = freeGlobal;
    /*--------------------------------------------------------------------------*/ var InvalidCharacterError = function(message) {
        this.message = message;
    };
    InvalidCharacterError.prototype = new Error;
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';
    var error = function(message) {
        // Note: the error messages used throughout this file match those used by
        // the native `atob`/`btoa` implementation in Chromium.
        throw new InvalidCharacterError(message);
    };
    var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    // http://whatwg.org/html/common-microsyntaxes.html#space-character
    var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;
    // `decode` is designed to be fully compatible with `atob` as described in the
    // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
    // The optimized base64-decoding algorithm used is based on @atk’s excellent
    // implementation. https://gist.github.com/atk/1020396
    var decode = function(input) {
        input = String(input).replace(REGEX_SPACE_CHARACTERS, '');
        var length = input.length;
        if (length % 4 == 0) {
            input = input.replace(/==?$/, '');
            length = input.length;
        }
        if (length % 4 == 1 || // http://whatwg.org/C#alphanumeric-ascii-characters
        /[^+a-zA-Z0-9/]/.test(input)) error('Invalid character: the string to be decoded is not correctly encoded.');
        var bitCounter = 0;
        var bitStorage;
        var buffer;
        var output = '';
        var position = -1;
        while((++position) < length){
            buffer = TABLE.indexOf(input.charAt(position));
            bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
            // Unless this is the first of a group of 4 characters…
            if ((bitCounter++) % 4) // …convert the first 8 bits to a single ASCII character.
            output += String.fromCharCode(255 & bitStorage >> (-2 * bitCounter & 6));
        }
        return output;
    };
    // `encode` is designed to be fully compatible with `btoa` as described in the
    // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
    var encode = function(input) {
        input = String(input);
        if (/[^\0-\xFF]/.test(input)) // Note: no need to special-case astral symbols here, as surrogates are
        // matched, and the input is supposed to only contain ASCII anyway.
        error("The string to be encoded contains characters outside of the Latin1 range.");
        var padding = input.length % 3;
        var output = '';
        var position = -1;
        var a;
        var b;
        var c;
        var d;
        var buffer;
        // Make sure any padding is handled outside of the loop.
        var length = input.length - padding;
        while((++position) < length){
            // Read three bytes, i.e. 24 bits.
            a = input.charCodeAt(position) << 16;
            b = input.charCodeAt(++position) << 8;
            c = input.charCodeAt(++position);
            buffer = a + b + c;
            // Turn the 24 bits into four chunks of 6 bits each, and append the
            // matching character for each of them to the output.
            output += TABLE.charAt(buffer >> 18 & 63) + TABLE.charAt(buffer >> 12 & 63) + TABLE.charAt(buffer >> 6 & 63) + TABLE.charAt(buffer & 63);
        }
        if (padding == 2) {
            a = input.charCodeAt(position) << 8;
            b = input.charCodeAt(++position);
            buffer = a + b;
            output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 63) + TABLE.charAt(buffer << 2 & 63) + '=';
        } else if (padding == 1) {
            buffer = input.charCodeAt(position);
            output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 63) + '==';
        }
        return output;
    };
    var base64 = {
        'encode': encode,
        'decode': decode,
        'version': '0.1.0'
    };
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) define(function() {
        return base64;
    });
    else if (freeExports && !freeExports.nodeType) {
        if (freeModule) freeModule.exports = base64;
        else for(var key in base64)base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
    } else root.base64 = base64;
})(this);

},{}],"xu6sN":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var clone = function() {
    function _instanceof(obj, type) {
        return type != null && obj instanceof type;
    }
    var nativeMap;
    try {
        nativeMap = Map;
    } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function() {
        };
    }
    var nativeSet;
    try {
        nativeSet = Set;
    } catch (_) {
        nativeSet = function() {
        };
    }
    var nativePromise;
    try {
        nativePromise = Promise;
    } catch (_) {
        nativePromise = function() {
        };
    }
    /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/ function clone1(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === 'object') {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
        }
        // maintain two arrays for circular references, where corresponding parents
        // and children have the same index
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != 'undefined';
        if (typeof circular == 'undefined') circular = true;
        if (typeof depth == 'undefined') depth = Infinity;
        // recurse this function so we don't reset allParents and allChildren
        function _clone(parent1, depth1) {
            // cloning null always returns null
            if (parent1 === null) return null;
            if (depth1 === 0) return parent1;
            var child;
            var proto;
            if (typeof parent1 != 'object') return parent1;
            if (_instanceof(parent1, nativeMap)) child = new nativeMap();
            else if (_instanceof(parent1, nativeSet)) child = new nativeSet();
            else if (_instanceof(parent1, nativePromise)) child = new nativePromise(function(resolve, reject) {
                parent1.then(function(value) {
                    resolve(_clone(value, depth1 - 1));
                }, function(err) {
                    reject(_clone(err, depth1 - 1));
                });
            });
            else if (clone1.__isArray(parent1)) child = [];
            else if (clone1.__isRegExp(parent1)) {
                child = new RegExp(parent1.source, __getRegExpFlags(parent1));
                if (parent1.lastIndex) child.lastIndex = parent1.lastIndex;
            } else if (clone1.__isDate(parent1)) child = new Date(parent1.getTime());
            else if (useBuffer && Buffer.isBuffer(parent1)) {
                child = new Buffer(parent1.length);
                parent1.copy(child);
                return child;
            } else if (_instanceof(parent1, Error)) child = Object.create(parent1);
            else if (typeof prototype == 'undefined') {
                proto = Object.getPrototypeOf(parent1);
                child = Object.create(proto);
            } else {
                child = Object.create(prototype);
                proto = prototype;
            }
            if (circular) {
                var index = allParents.indexOf(parent1);
                if (index != -1) return allChildren[index];
                allParents.push(parent1);
                allChildren.push(child);
            }
            if (_instanceof(parent1, nativeMap)) parent1.forEach(function(value, key) {
                var keyChild = _clone(key, depth1 - 1);
                var valueChild = _clone(value, depth1 - 1);
                child.set(keyChild, valueChild);
            });
            if (_instanceof(parent1, nativeSet)) parent1.forEach(function(value) {
                var entryChild = _clone(value, depth1 - 1);
                child.add(entryChild);
            });
            for(var i in parent1){
                var attrs;
                if (proto) attrs = Object.getOwnPropertyDescriptor(proto, i);
                if (attrs && attrs.set == null) continue;
                child[i] = _clone(parent1[i], depth1 - 1);
            }
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent1);
                for(var i = 0; i < symbols.length; i++){
                    // Don't need to worry about cloning a symbol because it is a primitive,
                    // like a number or string.
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent1, symbol);
                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) continue;
                    child[symbol] = _clone(parent1[symbol], depth1 - 1);
                    if (!descriptor.enumerable) Object.defineProperty(child, symbol, {
                        enumerable: false
                    });
                }
            }
            if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent1);
                for(var i = 0; i < allPropertyNames.length; i++){
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent1, propertyName);
                    if (descriptor && descriptor.enumerable) continue;
                    child[propertyName] = _clone(parent1[propertyName], depth1 - 1);
                    Object.defineProperty(child, propertyName, {
                        enumerable: false
                    });
                }
            }
            return child;
        }
        return _clone(parent, depth);
    }
    /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone1.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;
        var c = function() {
        };
        c.prototype = parent;
        return new c();
    };
    // private utility functions
    function __objToStr(o) {
        return Object.prototype.toString.call(o);
    }
    clone1.__objToStr = __objToStr;
    function __isDate(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }
    clone1.__isDate = __isDate;
    function __isArray(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }
    clone1.__isArray = __isArray;
    function __isRegExp(o) {
        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }
    clone1.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
        var flags = '';
        if (re.global) flags += 'g';
        if (re.ignoreCase) flags += 'i';
        if (re.multiline) flags += 'm';
        return flags;
    }
    clone1.__getRegExpFlags = __getRegExpFlags;
    return clone1;
}();
if (typeof module === 'object' && module.exports) module.exports = clone;

},{"buffer":"bpNHw"}],"jYjyg":[function(require,module,exports) {
var global = arguments[3];
var SCClientSocket = require('./scclientsocket');
var scErrors = require('sc-errors');
var uuid = require('uuid');
var InvalidArgumentsError = scErrors.InvalidArgumentsError;
var _clients = {
};
function getMultiplexId(options) {
    var protocolPrefix = options.secure ? 'https://' : 'http://';
    var queryString = '';
    if (options.query) {
        if (typeof options.query == 'string') queryString = options.query;
        else {
            var queryArray = [];
            var queryMap = options.query;
            for(var key in queryMap)if (queryMap.hasOwnProperty(key)) queryArray.push(key + '=' + queryMap[key]);
            if (queryArray.length) queryString = '?' + queryArray.join('&');
        }
    }
    var host;
    if (options.host) host = options.host;
    else host = options.hostname + ':' + options.port;
    return protocolPrefix + host + options.path + queryString;
}
function isUrlSecure() {
    return global.location && location.protocol == 'https:';
}
function getPort(options, isSecureDefault) {
    var isSecure = options.secure == null ? isSecureDefault : options.secure;
    return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);
}
function create(options) {
    var self = this;
    options = options || {
    };
    if (options.host && !options.host.match(/[^:]+:\d{2,5}/)) throw new InvalidArgumentsError("The host option should include both the hostname and the port number in the format \"hostname:port\"");
    if (options.host && options.hostname) throw new InvalidArgumentsError("The host option should already include the hostname and the port number in the format \"hostname:port\" - Because of this, you should never use host and hostname options together");
    if (options.host && options.port) throw new InvalidArgumentsError("The host option should already include the hostname and the port number in the format \"hostname:port\" - Because of this, you should never use host and port options together");
    var isSecureDefault = isUrlSecure();
    var opts = {
        port: getPort(options, isSecureDefault),
        hostname: global.location && location.hostname || 'localhost',
        path: '/socketcluster/',
        secure: isSecureDefault,
        autoConnect: true,
        autoReconnect: true,
        autoSubscribeOnConnect: true,
        connectTimeout: 20000,
        ackTimeout: 10000,
        timestampRequests: false,
        timestampParam: 't',
        authEngine: null,
        authTokenName: 'socketCluster.authToken',
        binaryType: 'arraybuffer',
        multiplex: true,
        pubSubBatchDuration: null,
        cloneData: false
    };
    for(var i in options)if (options.hasOwnProperty(i)) opts[i] = options[i];
    opts.clientMap = _clients;
    if (opts.multiplex === false) {
        opts.clientId = uuid.v4();
        var socket = new SCClientSocket(opts);
        _clients[opts.clientId] = socket;
        return socket;
    }
    opts.clientId = getMultiplexId(opts);
    if (_clients[opts.clientId]) {
        if (opts.autoConnect) _clients[opts.clientId].connect();
    } else _clients[opts.clientId] = new SCClientSocket(opts);
    return _clients[opts.clientId];
}
function destroy(socket) {
    socket.destroy();
}
module.exports = {
    create: create,
    destroy: destroy,
    clients: _clients
};

},{"./scclientsocket":"l80Am","sc-errors":"2Rc0C","uuid":"bOtRb"}],"bOtRb":[function(require,module,exports) {
var v1 = require('./v1');
var v4 = require('./v4');
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
module.exports = uuid;

},{"./v1":"fjqjx","./v4":"27jYk"}],"fjqjx":[function(require,module,exports) {
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;
var _clockseq;
// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;
// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {
    };
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
        ];
        if (clockseq == null) // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    // Time since last uuid creation (in msecs)
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) clockseq = clockseq + 1 & 16383;
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) nsecs = 0;
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
    // `time_low`
    var tl = ((msecs & 268435455) * 10000 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    // `time_mid`
    var tmh = msecs / 4294967296 * 10000 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 15 | 16; // include version
    b[i++] = tmh >>> 16 & 255;
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 128;
    // `clock_seq_low`
    b[i++] = clockseq & 255;
    // `node`
    for(var n = 0; n < 6; ++n)b[i + n] = node[n];
    return buf ? buf : bytesToUuid(b);
}
module.exports = v1;

},{"./lib/rng":"9kT2H","./lib/bytesToUuid":"kcgOP"}],"9kT2H":[function(require,module,exports) {
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && msCrypto.getRandomValues.bind(msCrypto);
if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
    module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
    };
} else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);
    module.exports = function mathRNG() {
        for(var i = 0, r; i < 16; i++){
            if ((i & 3) === 0) r = Math.random() * 4294967296;
            rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
    };
}

},{}],"kcgOP":[function(require,module,exports) {
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex[i] = (i + 256).toString(16).substr(1);
function bytesToUuid(buf, offset) {
    var i1 = offset || 0;
    var bth = byteToHex;
    return bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]] + '-' + bth[buf[i1++]] + bth[buf[i1++]] + '-' + bth[buf[i1++]] + bth[buf[i1++]] + '-' + bth[buf[i1++]] + bth[buf[i1++]] + '-' + bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]] + bth[buf[i1++]];
}
module.exports = bytesToUuid;

},{}],"27jYk":[function(require,module,exports) {
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');
function v4(options, buf, offset) {
    var i = buf && offset || 0;
    if (typeof options == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
    }
    options = options || {
    };
    var rnds = options.random || (options.rng || rng)();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    // Copy bytes to buffer, if provided
    if (buf) for(var ii = 0; ii < 16; ++ii)buf[i + ii] = rnds[ii];
    return buf || bytesToUuid(rnds);
}
module.exports = v4;

},{"./lib/rng":"9kT2H","./lib/bytesToUuid":"kcgOP"}],"9Vr47":[function(require,module,exports) {
'use strict';
/*
 * It only for Debug Remotely mode for Android
 * When __DEV__ === false, we can't use window.require('NativeModules')
 */ function getByRemoteConfig(hostname) {
    var remoteModuleConfig = typeof window !== 'undefined' && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;
    if (!Array.isArray(remoteModuleConfig) || hostname !== 'localhost' && hostname !== '127.0.0.1') return {
        hostname: hostname,
        passed: false
    };
    var result = hostname;
    var passed = false;
    remoteModuleConfig.some(function(config) {
        if (!config) return false;
        var name = config[0];
        var content = config[1];
        if ((name === 'AndroidConstants' || name === 'PlatformConstants') && content && content.ServerHost) {
            result = content.ServerHost.split(':')[0];
            passed = true;
            return true;
        }
        if (name === 'SourceCode' && content && content.scriptURL) {
            result = content.scriptURL.replace(/https?:\/\//, '').split(':')[0];
            passed = true;
            return true;
        }
        return false;
    });
    return {
        hostname: result,
        passed: passed
    };
}
function getByRNRequirePolyfill(hostname) {
    var originalWarn = console.warn;
    var NativeModules;
    var Constants;
    var SourceCode;
    if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function' || // RN >= 0.56
    // TODO: Get NativeModules for RN >= 0.56
    window.require.name === 'metroRequire') return hostname;
    console.warn = function() {
        if (arguments[0] && typeof arguments[0].indexOf == 'function' && arguments[0].indexOf("Requiring module 'NativeModules' by name") > -1) return;
        return originalWarn.apply(console, arguments);
    };
    try {
        NativeModules = window.require('NativeModules');
    } catch (e) {
    }
    console.warn = originalWarn;
    if (!NativeModules) return hostname;
    Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants;
    SourceCode = NativeModules.SourceCode;
    if (Constants && Constants.ServerHost) return Constants.ServerHost.split(':')[0];
    else if (SourceCode && SourceCode.scriptURL) return SourceCode.scriptURL.replace(/https?:\/\//, '').split(':')[0];
    return hostname;
}
/*
 * Get React Native server IP if hostname is `localhost`
 * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)
 */ module.exports = function(hostname) {
    // Check if it in React Native environment
    if (typeof __fbBatchedBridgeConfig !== 'object' || hostname !== 'localhost' && hostname !== '127.0.0.1') return hostname;
    var result = getByRemoteConfig(hostname);
    // Leave if get hostname by remote config successful
    if (result.passed) return result.hostname;
    // Otherwise, use RN's require polyfill
    return getByRNRequirePolyfill(hostname);
};

},{}],"5OfsR":[function(require,module,exports) {
'use strict';
exports.__esModule = true;
var defaultSocketOptions = exports.defaultSocketOptions = {
    secure: true,
    hostname: 'remotedev.io',
    port: 443,
    autoReconnect: true,
    autoReconnectOptions: {
        randomness: 60000
    }
};

},{}],"8mQPo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MapTreeLeaf$2", ()=>MapTreeLeaf$2
);
parcelHelpers.export(exports, "MapTreeLeaf$2$reflection", ()=>MapTreeLeaf$2$reflection
);
parcelHelpers.export(exports, "MapTreeLeaf$2_$ctor_5BDDA1", ()=>MapTreeLeaf$2_$ctor_5BDDA1
);
parcelHelpers.export(exports, "MapTreeLeaf$2__get_Key", ()=>MapTreeLeaf$2__get_Key
);
parcelHelpers.export(exports, "MapTreeLeaf$2__get_Value", ()=>MapTreeLeaf$2__get_Value
);
parcelHelpers.export(exports, "MapTreeNode$2", ()=>MapTreeNode$2
);
parcelHelpers.export(exports, "MapTreeNode$2$reflection", ()=>MapTreeNode$2$reflection
);
parcelHelpers.export(exports, "MapTreeNode$2_$ctor_499A11FD", ()=>MapTreeNode$2_$ctor_499A11FD
);
parcelHelpers.export(exports, "MapTreeNode$2__get_Left", ()=>MapTreeNode$2__get_Left
);
parcelHelpers.export(exports, "MapTreeNode$2__get_Right", ()=>MapTreeNode$2__get_Right
);
parcelHelpers.export(exports, "MapTreeNode$2__get_Height", ()=>MapTreeNode$2__get_Height
);
parcelHelpers.export(exports, "MapTreeModule_empty", ()=>MapTreeModule_empty
);
parcelHelpers.export(exports, "MapTreeModule_sizeAux", ()=>MapTreeModule_sizeAux
);
parcelHelpers.export(exports, "MapTreeModule_size", ()=>MapTreeModule_size
);
parcelHelpers.export(exports, "MapTreeModule_mk", ()=>MapTreeModule_mk
);
parcelHelpers.export(exports, "MapTreeModule_rebalance", ()=>MapTreeModule_rebalance
);
parcelHelpers.export(exports, "MapTreeModule_add", ()=>MapTreeModule_add
);
parcelHelpers.export(exports, "MapTreeModule_tryFind", ()=>MapTreeModule_tryFind
);
parcelHelpers.export(exports, "MapTreeModule_find", ()=>MapTreeModule_find
);
parcelHelpers.export(exports, "MapTreeModule_partition1", ()=>MapTreeModule_partition1
);
parcelHelpers.export(exports, "MapTreeModule_partitionAux", ()=>MapTreeModule_partitionAux
);
parcelHelpers.export(exports, "MapTreeModule_partition", ()=>MapTreeModule_partition
);
parcelHelpers.export(exports, "MapTreeModule_filter1", ()=>MapTreeModule_filter1
);
parcelHelpers.export(exports, "MapTreeModule_filterAux", ()=>MapTreeModule_filterAux
);
parcelHelpers.export(exports, "MapTreeModule_filter", ()=>MapTreeModule_filter
);
parcelHelpers.export(exports, "MapTreeModule_spliceOutSuccessor", ()=>MapTreeModule_spliceOutSuccessor
);
parcelHelpers.export(exports, "MapTreeModule_remove", ()=>MapTreeModule_remove
);
parcelHelpers.export(exports, "MapTreeModule_change", ()=>MapTreeModule_change
);
parcelHelpers.export(exports, "MapTreeModule_mem", ()=>MapTreeModule_mem
);
parcelHelpers.export(exports, "MapTreeModule_iterOpt", ()=>MapTreeModule_iterOpt
);
parcelHelpers.export(exports, "MapTreeModule_iter", ()=>MapTreeModule_iter
);
parcelHelpers.export(exports, "MapTreeModule_tryPickOpt", ()=>MapTreeModule_tryPickOpt
);
parcelHelpers.export(exports, "MapTreeModule_tryPick", ()=>MapTreeModule_tryPick
);
parcelHelpers.export(exports, "MapTreeModule_existsOpt", ()=>MapTreeModule_existsOpt
);
parcelHelpers.export(exports, "MapTreeModule_exists", ()=>MapTreeModule_exists
);
parcelHelpers.export(exports, "MapTreeModule_forallOpt", ()=>MapTreeModule_forallOpt
);
parcelHelpers.export(exports, "MapTreeModule_forall", ()=>MapTreeModule_forall
);
parcelHelpers.export(exports, "MapTreeModule_map", ()=>MapTreeModule_map
);
parcelHelpers.export(exports, "MapTreeModule_mapiOpt", ()=>MapTreeModule_mapiOpt
);
parcelHelpers.export(exports, "MapTreeModule_mapi", ()=>MapTreeModule_mapi
);
parcelHelpers.export(exports, "MapTreeModule_foldBackOpt", ()=>MapTreeModule_foldBackOpt
);
parcelHelpers.export(exports, "MapTreeModule_foldBack", ()=>MapTreeModule_foldBack
);
parcelHelpers.export(exports, "MapTreeModule_foldOpt", ()=>MapTreeModule_foldOpt
);
parcelHelpers.export(exports, "MapTreeModule_fold", ()=>MapTreeModule_fold
);
parcelHelpers.export(exports, "MapTreeModule_foldSectionOpt", ()=>MapTreeModule_foldSectionOpt
);
parcelHelpers.export(exports, "MapTreeModule_foldSection", ()=>MapTreeModule_foldSection
);
parcelHelpers.export(exports, "MapTreeModule_toList", ()=>MapTreeModule_toList
);
parcelHelpers.export(exports, "MapTreeModule_copyToArray", ()=>MapTreeModule_copyToArray
);
parcelHelpers.export(exports, "MapTreeModule_toArray", ()=>MapTreeModule_toArray
);
parcelHelpers.export(exports, "MapTreeModule_ofList", ()=>MapTreeModule_ofList
);
parcelHelpers.export(exports, "MapTreeModule_mkFromEnumerator", ()=>MapTreeModule_mkFromEnumerator
);
parcelHelpers.export(exports, "MapTreeModule_ofArray", ()=>MapTreeModule_ofArray
);
parcelHelpers.export(exports, "MapTreeModule_ofSeq", ()=>MapTreeModule_ofSeq
);
parcelHelpers.export(exports, "MapTreeModule_MapIterator$2", ()=>MapTreeModule_MapIterator$2
);
parcelHelpers.export(exports, "MapTreeModule_MapIterator$2$reflection", ()=>MapTreeModule_MapIterator$2$reflection
);
parcelHelpers.export(exports, "MapTreeModule_collapseLHS", ()=>MapTreeModule_collapseLHS
);
parcelHelpers.export(exports, "MapTreeModule_mkIterator", ()=>MapTreeModule_mkIterator
);
parcelHelpers.export(exports, "MapTreeModule_notStarted", ()=>MapTreeModule_notStarted
);
parcelHelpers.export(exports, "MapTreeModule_alreadyFinished", ()=>MapTreeModule_alreadyFinished
);
parcelHelpers.export(exports, "MapTreeModule_current", ()=>MapTreeModule_current
);
parcelHelpers.export(exports, "MapTreeModule_moveNext", ()=>MapTreeModule_moveNext
);
parcelHelpers.export(exports, "MapTreeModule_mkIEnumerator", ()=>MapTreeModule_mkIEnumerator
);
parcelHelpers.export(exports, "MapTreeModule_toSeq", ()=>MapTreeModule_toSeq
);
parcelHelpers.export(exports, "FSharpMap", ()=>FSharpMap
);
parcelHelpers.export(exports, "FSharpMap$reflection", ()=>FSharpMap$reflection
);
parcelHelpers.export(exports, "FSharpMap_$ctor", ()=>FSharpMap_$ctor
);
parcelHelpers.export(exports, "FSharpMap_get_Empty", ()=>FSharpMap_get_Empty
);
parcelHelpers.export(exports, "FSharpMap_Create", ()=>FSharpMap_Create
);
parcelHelpers.export(exports, "FSharpMap__get_Comparer", ()=>FSharpMap__get_Comparer
);
parcelHelpers.export(exports, "FSharpMap__get_Tree", ()=>FSharpMap__get_Tree
);
parcelHelpers.export(exports, "FSharpMap__Add", ()=>FSharpMap__Add
);
parcelHelpers.export(exports, "FSharpMap__Change", ()=>FSharpMap__Change
);
parcelHelpers.export(exports, "FSharpMap__get_IsEmpty", ()=>FSharpMap__get_IsEmpty
);
parcelHelpers.export(exports, "FSharpMap__get_Item", ()=>FSharpMap__get_Item
);
parcelHelpers.export(exports, "FSharpMap__TryPick", ()=>FSharpMap__TryPick
);
parcelHelpers.export(exports, "FSharpMap__Exists", ()=>FSharpMap__Exists
);
parcelHelpers.export(exports, "FSharpMap__Filter", ()=>FSharpMap__Filter
);
parcelHelpers.export(exports, "FSharpMap__ForAll", ()=>FSharpMap__ForAll
);
parcelHelpers.export(exports, "FSharpMap__Fold", ()=>FSharpMap__Fold
);
parcelHelpers.export(exports, "FSharpMap__FoldSection", ()=>FSharpMap__FoldSection
);
parcelHelpers.export(exports, "FSharpMap__Iterate", ()=>FSharpMap__Iterate
);
parcelHelpers.export(exports, "FSharpMap__MapRange", ()=>FSharpMap__MapRange
);
parcelHelpers.export(exports, "FSharpMap__Map", ()=>FSharpMap__Map
);
parcelHelpers.export(exports, "FSharpMap__Partition", ()=>FSharpMap__Partition
);
parcelHelpers.export(exports, "FSharpMap__get_Count", ()=>FSharpMap__get_Count
);
parcelHelpers.export(exports, "FSharpMap__ContainsKey", ()=>FSharpMap__ContainsKey
);
parcelHelpers.export(exports, "FSharpMap__Remove", ()=>FSharpMap__Remove
);
parcelHelpers.export(exports, "FSharpMap__TryGetValue", ()=>FSharpMap__TryGetValue
);
parcelHelpers.export(exports, "FSharpMap__TryFind", ()=>FSharpMap__TryFind
);
parcelHelpers.export(exports, "FSharpMap__ToList", ()=>FSharpMap__ToList
);
parcelHelpers.export(exports, "FSharpMap__ToArray", ()=>FSharpMap__ToArray
);
parcelHelpers.export(exports, "FSharpMap__ComputeHashCode", ()=>FSharpMap__ComputeHashCode
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "change", ()=>change
);
parcelHelpers.export(exports, "find", ()=>find
);
parcelHelpers.export(exports, "tryFind", ()=>tryFind
);
parcelHelpers.export(exports, "remove", ()=>remove
);
parcelHelpers.export(exports, "containsKey", ()=>containsKey
);
parcelHelpers.export(exports, "iterate", ()=>iterate
);
parcelHelpers.export(exports, "tryPick", ()=>tryPick
);
parcelHelpers.export(exports, "pick", ()=>pick
);
parcelHelpers.export(exports, "exists", ()=>exists
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "forAll", ()=>forAll
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "fold", ()=>fold
);
parcelHelpers.export(exports, "foldBack", ()=>foldBack
);
parcelHelpers.export(exports, "toSeq", ()=>toSeq
);
parcelHelpers.export(exports, "findKey", ()=>findKey
);
parcelHelpers.export(exports, "tryFindKey", ()=>tryFindKey
);
parcelHelpers.export(exports, "ofList", ()=>ofList
);
parcelHelpers.export(exports, "ofSeq", ()=>ofSeq
);
parcelHelpers.export(exports, "ofArray", ()=>ofArray
);
parcelHelpers.export(exports, "toList", ()=>toList
);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
parcelHelpers.export(exports, "empty", ()=>empty
);
parcelHelpers.export(exports, "count", ()=>count
);
var _reflectionJs = require("./Reflection.js");
var _optionJs = require("./Option.js");
var _listJs = require("./List.js");
var _arrayJs = require("./Array.js");
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
var _seqJs = require("./Seq.js");
var _stringJs = require("./String.js");
var _fsharpCoreJs = require("./FSharp.Core.js");
class MapTreeLeaf$2 {
    constructor(k2, v2){
        this.k = k2;
        this.v = v2;
    }
}
function MapTreeLeaf$2$reflection(gen0, gen1) {
    return _reflectionJs.class_type("Map.MapTreeLeaf`2", [
        gen0,
        gen1
    ], MapTreeLeaf$2);
}
_c = MapTreeLeaf$2$reflection;
function MapTreeLeaf$2_$ctor_5BDDA1(k1, v1) {
    return new MapTreeLeaf$2(k1, v1);
}
_c1 = MapTreeLeaf$2_$ctor_5BDDA1;
function MapTreeLeaf$2__get_Key(_) {
    return _.k;
}
_c2 = MapTreeLeaf$2__get_Key;
function MapTreeLeaf$2__get_Value(_) {
    return _.v;
}
_c3 = MapTreeLeaf$2__get_Value;
class MapTreeNode$2 extends MapTreeLeaf$2 {
    constructor(k1, v1, left, right, h){
        super(k1, v1);
        this.left = left;
        this.right = right;
        this.h = h | 0;
    }
}
function MapTreeNode$2$reflection(gen0, gen1) {
    return _reflectionJs.class_type("Map.MapTreeNode`2", [
        gen0,
        gen1
    ], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));
}
_c4 = MapTreeNode$2$reflection;
function MapTreeNode$2_$ctor_499A11FD(k2, v2, left1, right1, h1) {
    return new MapTreeNode$2(k2, v2, left1, right1, h1);
}
_c5 = MapTreeNode$2_$ctor_499A11FD;
function MapTreeNode$2__get_Left(_) {
    return _.left;
}
_c6 = MapTreeNode$2__get_Left;
function MapTreeNode$2__get_Right(_) {
    return _.right;
}
_c7 = MapTreeNode$2__get_Right;
function MapTreeNode$2__get_Height(_) {
    return _.h;
}
_c8 = MapTreeNode$2__get_Height;
function MapTreeModule_empty() {
    return void 0;
}
_c9 = MapTreeModule_empty;
function MapTreeModule_sizeAux(acc_mut, m_mut) {
    MapTreeModule_sizeAux: while(true){
        const acc = acc_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));
                m_mut = MapTreeNode$2__get_Right(m2);
                continue MapTreeModule_sizeAux;
            } else return acc + 1 | 0;
        } else return acc | 0;
        break;
    }
}
_c10 = MapTreeModule_sizeAux;
function MapTreeModule_size(x) {
    return MapTreeModule_sizeAux(0, x);
}
_c11 = MapTreeModule_size;
function MapTreeModule_mk(l, k2, v2, r) {
    let hl;
    const m = l;
    if (m != null) {
        const m2 = m;
        hl = m2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2) : 1;
    } else hl = 0;
    let hr;
    const m_1 = r;
    if (m_1 != null) {
        const m2_1 = m_1;
        hr = m2_1 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_1) : 1;
    } else hr = 0;
    const m_2 = (hl < hr ? hr : hl) | 0;
    if (m_2 === 0) return MapTreeLeaf$2_$ctor_5BDDA1(k2, v2);
    else return MapTreeNode$2_$ctor_499A11FD(k2, v2, l, r, m_2 + 1);
}
_c12 = MapTreeModule_mk;
function MapTreeModule_rebalance(t1, k2, v2, t2) {
    let m_2, m2_2, m_3, m2_3;
    let t1h;
    const m = t1;
    if (m != null) {
        const m2 = m;
        t1h = m2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2) : 1;
    } else t1h = 0;
    let t2h;
    const m_1 = t2;
    if (m_1 != null) {
        const m2_1 = m_1;
        t2h = m2_1 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_1) : 1;
    } else t2h = 0;
    if (t2h > t1h + 2) {
        const matchValue = _optionJs.value(t2);
        if (matchValue instanceof MapTreeNode$2) {
            if ((m_2 = MapTreeNode$2__get_Left(matchValue), m_2 != null ? (m2_2 = m_2, m2_2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_2) : 1) : 0) > t1h + 1) {
                const matchValue_1 = _optionJs.value(MapTreeNode$2__get_Left(matchValue));
                if (matchValue_1 instanceof MapTreeNode$2) return MapTreeModule_mk(MapTreeModule_mk(t1, k2, v2, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));
                else throw new Error("internal error: Map.rebalance");
            } else return MapTreeModule_mk(MapTreeModule_mk(t1, k2, v2, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));
        } else throw new Error("internal error: Map.rebalance");
    } else if (t1h > t2h + 2) {
        const matchValue_2 = _optionJs.value(t1);
        if (matchValue_2 instanceof MapTreeNode$2) {
            if ((m_3 = MapTreeNode$2__get_Right(matchValue_2), m_3 != null ? (m2_3 = m_3, m2_3 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_3) : 1) : 0) > t2h + 1) {
                const matchValue_3 = _optionJs.value(MapTreeNode$2__get_Right(matchValue_2));
                if (matchValue_3 instanceof MapTreeNode$2) return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k2, v2, t2));
                else throw new Error("internal error: Map.rebalance");
            } else return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k2, v2, t2));
        } else throw new Error("internal error: Map.rebalance");
    } else return MapTreeModule_mk(t1, k2, v2, t2);
}
_c13 = MapTreeModule_rebalance;
function MapTreeModule_add(comparer, k2, v2, m) {
    if (m != null) {
        const m2 = m;
        const c = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
        if (m2 instanceof MapTreeNode$2) {
            if (c < 0) return MapTreeModule_rebalance(MapTreeModule_add(comparer, k2, v2, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
            else if (c === 0) return MapTreeNode$2_$ctor_499A11FD(k2, v2, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));
            else return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k2, v2, MapTreeNode$2__get_Right(m2)));
        } else if (c < 0) return MapTreeNode$2_$ctor_499A11FD(k2, v2, MapTreeModule_empty(), m, 2);
        else if (c === 0) return MapTreeLeaf$2_$ctor_5BDDA1(k2, v2);
        else return MapTreeNode$2_$ctor_499A11FD(k2, v2, m, MapTreeModule_empty(), 2);
    } else return MapTreeLeaf$2_$ctor_5BDDA1(k2, v2);
}
_c14 = MapTreeModule_add;
function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {
    MapTreeModule_tryFind: while(true){
        const comparer = comparer_mut, k2 = k_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            const c = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
            if (c === 0) return _optionJs.some(MapTreeLeaf$2__get_Value(m2));
            else if (m2 instanceof MapTreeNode$2) {
                comparer_mut = comparer;
                k_mut = k2;
                m_mut = c < 0 ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2);
                continue MapTreeModule_tryFind;
            } else return void 0;
        } else return void 0;
        break;
    }
}
_c15 = MapTreeModule_tryFind;
function MapTreeModule_find(comparer, k2, m) {
    const matchValue = MapTreeModule_tryFind(comparer, k2, m);
    if (matchValue == null) throw new Error();
    else return _optionJs.value(matchValue);
}
_c16 = MapTreeModule_find;
function MapTreeModule_partition1(comparer, f, k2, v2, acc1, acc2) {
    if (f(k2, v2)) return [
        MapTreeModule_add(comparer, k2, v2, acc1),
        acc2
    ];
    else return [
        acc1,
        MapTreeModule_add(comparer, k2, v2, acc2)
    ];
}
_c17 = MapTreeModule_partition1;
function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {
    MapTreeModule_partitionAux: while(true){
        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;
        const acc = [
            acc_0,
            acc_1
        ];
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);
                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);
                comparer_mut = comparer;
                f_mut = f;
                m_mut = MapTreeNode$2__get_Left(m2);
                acc_0_mut = acc_3[0];
                acc_1_mut = acc_3[1];
                continue MapTreeModule_partitionAux;
            } else return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);
        } else return acc;
        break;
    }
}
_c18 = MapTreeModule_partitionAux;
function MapTreeModule_partition(comparer, f, m) {
    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());
}
_c19 = MapTreeModule_partition;
function MapTreeModule_filter1(comparer, f, k2, v2, acc) {
    if (f(k2, v2)) return MapTreeModule_add(comparer, k2, v2, acc);
    else return acc;
}
_c20 = MapTreeModule_filter1;
function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {
    MapTreeModule_filterAux: while(true){
        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);
                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);
                comparer_mut = comparer;
                f_mut = f;
                m_mut = MapTreeNode$2__get_Right(m2);
                acc_mut = acc_2;
                continue MapTreeModule_filterAux;
            } else return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);
        } else return acc;
        break;
    }
}
_c21 = MapTreeModule_filterAux;
function MapTreeModule_filter(comparer, f, m) {
    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());
}
_c22 = MapTreeModule_filter;
function MapTreeModule_spliceOutSuccessor(m) {
    if (m != null) {
        const m2 = m;
        if (m2 instanceof MapTreeNode$2) {
            if (MapTreeNode$2__get_Left(m2) == null) return [
                MapTreeLeaf$2__get_Key(m2),
                MapTreeLeaf$2__get_Value(m2),
                MapTreeNode$2__get_Right(m2)
            ];
            else {
                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));
                return [
                    patternInput[0],
                    patternInput[1],
                    MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))
                ];
            }
        } else return [
            MapTreeLeaf$2__get_Key(m2),
            MapTreeLeaf$2__get_Value(m2),
            MapTreeModule_empty()
        ];
    } else throw new Error("internal error: Map.spliceOutSuccessor");
}
_c23 = MapTreeModule_spliceOutSuccessor;
function MapTreeModule_remove(comparer, k2, m) {
    if (m != null) {
        const m2 = m;
        const c = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
        if (m2 instanceof MapTreeNode$2) {
            if (c < 0) return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k2, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
            else if (c === 0) {
                if (MapTreeNode$2__get_Left(m2) == null) return MapTreeNode$2__get_Right(m2);
                else if (MapTreeNode$2__get_Right(m2) == null) return MapTreeNode$2__get_Left(m2);
                else {
                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));
                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);
                }
            } else return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k2, MapTreeNode$2__get_Right(m2)));
        } else if (c === 0) return MapTreeModule_empty();
        else return m;
    } else return MapTreeModule_empty();
}
_c24 = MapTreeModule_remove;
function MapTreeModule_change(comparer, k2, u, m) {
    if (m != null) {
        const m2 = m;
        if (m2 instanceof MapTreeNode$2) {
            const c = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
            if (c < 0) return MapTreeModule_rebalance(MapTreeModule_change(comparer, k2, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
            else if (c === 0) {
                const matchValue_1 = u(_optionJs.some(MapTreeLeaf$2__get_Value(m2)));
                if (matchValue_1 != null) return MapTreeNode$2_$ctor_499A11FD(k2, _optionJs.value(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));
                else if (MapTreeNode$2__get_Left(m2) == null) return MapTreeNode$2__get_Right(m2);
                else if (MapTreeNode$2__get_Right(m2) == null) return MapTreeNode$2__get_Left(m2);
                else {
                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));
                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);
                }
            } else return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k2, u, MapTreeNode$2__get_Right(m2)));
        } else {
            const c_1 = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
            if (c_1 < 0) {
                const matchValue_2 = u(void 0);
                if (matchValue_2 != null) return MapTreeNode$2_$ctor_499A11FD(k2, _optionJs.value(matchValue_2), MapTreeModule_empty(), m, 2);
                else return m;
            } else if (c_1 === 0) {
                const matchValue_3 = u(_optionJs.some(MapTreeLeaf$2__get_Value(m2)));
                if (matchValue_3 != null) return MapTreeLeaf$2_$ctor_5BDDA1(k2, _optionJs.value(matchValue_3));
                else return MapTreeModule_empty();
            } else {
                const matchValue_4 = u(void 0);
                if (matchValue_4 != null) return MapTreeNode$2_$ctor_499A11FD(k2, _optionJs.value(matchValue_4), m, MapTreeModule_empty(), 2);
                else return m;
            }
        }
    } else {
        const matchValue = u(void 0);
        if (matchValue != null) return MapTreeLeaf$2_$ctor_5BDDA1(k2, _optionJs.value(matchValue));
        else return m;
    }
}
_c25 = MapTreeModule_change;
function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {
    MapTreeModule_mem: while(true){
        const comparer = comparer_mut, k2 = k_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            const c = comparer.Compare(k2, MapTreeLeaf$2__get_Key(m2)) | 0;
            if (m2 instanceof MapTreeNode$2) {
                if (c < 0) {
                    comparer_mut = comparer;
                    k_mut = k2;
                    m_mut = MapTreeNode$2__get_Left(m2);
                    continue MapTreeModule_mem;
                } else if (c === 0) return true;
                else {
                    comparer_mut = comparer;
                    k_mut = k2;
                    m_mut = MapTreeNode$2__get_Right(m2);
                    continue MapTreeModule_mem;
                }
            } else return c === 0;
        } else return false;
        break;
    }
}
_c26 = MapTreeModule_mem;
function MapTreeModule_iterOpt(f_mut, m_mut) {
    MapTreeModule_iterOpt: while(true){
        const f = f_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));
                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
                f_mut = f;
                m_mut = MapTreeNode$2__get_Right(m2);
                continue MapTreeModule_iterOpt;
            } else f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        }
        break;
    }
}
_c27 = MapTreeModule_iterOpt;
function MapTreeModule_iter(f, m) {
    MapTreeModule_iterOpt(f, m);
}
_c28 = MapTreeModule_iter;
function MapTreeModule_tryPickOpt(f_mut, m_mut) {
    MapTreeModule_tryPickOpt: while(true){
        const f = f_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));
                if (matchValue == null) {
                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
                    if (matchValue_1 == null) {
                        f_mut = f;
                        m_mut = MapTreeNode$2__get_Right(m2);
                        continue MapTreeModule_tryPickOpt;
                    } else return matchValue_1;
                } else return matchValue;
            } else return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        } else return void 0;
        break;
    }
}
_c29 = MapTreeModule_tryPickOpt;
function MapTreeModule_tryPick(f, m) {
    return MapTreeModule_tryPickOpt(f, m);
}
_c30 = MapTreeModule_tryPick;
function MapTreeModule_existsOpt(f_mut, m_mut) {
    MapTreeModule_existsOpt: while(true){
        const f = f_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) return true;
                else {
                    f_mut = f;
                    m_mut = MapTreeNode$2__get_Right(m2);
                    continue MapTreeModule_existsOpt;
                }
            } else return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        } else return false;
        break;
    }
}
_c31 = MapTreeModule_existsOpt;
function MapTreeModule_exists(f, m) {
    return MapTreeModule_existsOpt(f, m);
}
_c32 = MapTreeModule_exists;
function MapTreeModule_forallOpt(f_mut, m_mut) {
    MapTreeModule_forallOpt: while(true){
        const f = f_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) ? f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)) : false) {
                    f_mut = f;
                    m_mut = MapTreeNode$2__get_Right(m2);
                    continue MapTreeModule_forallOpt;
                } else return false;
            } else return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        } else return true;
        break;
    }
}
_c33 = MapTreeModule_forallOpt;
function MapTreeModule_forall(f, m) {
    return MapTreeModule_forallOpt(f, m);
}
_c34 = MapTreeModule_forall;
function MapTreeModule_map(f, m) {
    if (m != null) {
        const m2 = m;
        if (m2 instanceof MapTreeNode$2) {
            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));
            const v2 = f(MapTreeLeaf$2__get_Value(m2));
            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));
            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));
        } else return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));
    } else return MapTreeModule_empty();
}
_c35 = MapTreeModule_map;
function MapTreeModule_mapiOpt(f, m) {
    if (m != null) {
        const m2 = m;
        if (m2 instanceof MapTreeNode$2) {
            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));
            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));
            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));
        } else return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));
    } else return MapTreeModule_empty();
}
_c36 = MapTreeModule_mapiOpt;
function MapTreeModule_mapi(f, m) {
    return MapTreeModule_mapiOpt(f, m);
}
_c37 = MapTreeModule_mapi;
function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {
    MapTreeModule_foldBackOpt: while(true){
        const f = f_mut, m = m_mut, x = x_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);
                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);
                f_mut = f;
                m_mut = MapTreeNode$2__get_Left(m2);
                x_mut = x_2;
                continue MapTreeModule_foldBackOpt;
            } else return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);
        } else return x;
        break;
    }
}
_c38 = MapTreeModule_foldBackOpt;
function MapTreeModule_foldBack(f, m, x) {
    return MapTreeModule_foldBackOpt(f, m, x);
}
_c39 = MapTreeModule_foldBack;
function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {
    MapTreeModule_foldOpt: while(true){
        const f = f_mut, x = x_mut, m = m_mut;
        if (m != null) {
            const m2 = m;
            if (m2 instanceof MapTreeNode$2) {
                f_mut = f;
                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
                m_mut = MapTreeNode$2__get_Right(m2);
                continue MapTreeModule_foldOpt;
            } else return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        } else return x;
        break;
    }
}
_c40 = MapTreeModule_foldOpt;
function MapTreeModule_fold(f, x, m) {
    return MapTreeModule_foldOpt(f, x, m);
}
_c41 = MapTreeModule_fold;
function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {
    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut)=>{
        foldFromTo: while(true){
            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;
            if (m_1 != null) {
                const m2 = m_1;
                if (m2 instanceof MapTreeNode$2) {
                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;
                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;
                    const x_2 = cLoKey < 0 ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;
                    const x_3 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;
                    if (cKeyHi < 0) {
                        f_1_mut = f_1;
                        m_1_mut = MapTreeNode$2__get_Right(m2);
                        x_1_mut = x_3;
                        continue foldFromTo;
                    } else return x_3;
                } else if (comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0 ? comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0 : false) return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);
                else return x_1;
            } else return x_1;
            break;
        }
    };
    if (comparer.Compare(lo, hi) === 1) return x;
    else return foldFromTo(f, m, x);
}
_c42 = MapTreeModule_foldSectionOpt;
function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {
    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);
}
_c43 = MapTreeModule_foldSection;
function MapTreeModule_toList(m) {
    const loop = (m_1_mut, acc_mut)=>{
        loop: while(true){
            const m_1 = m_1_mut, acc = acc_mut;
            if (m_1 != null) {
                const m2 = m_1;
                if (m2 instanceof MapTreeNode$2) {
                    m_1_mut = MapTreeNode$2__get_Left(m2);
                    acc_mut = _listJs.cons([
                        MapTreeLeaf$2__get_Key(m2),
                        MapTreeLeaf$2__get_Value(m2)
                    ], loop(MapTreeNode$2__get_Right(m2), acc));
                    continue loop;
                } else return _listJs.cons([
                    MapTreeLeaf$2__get_Key(m2),
                    MapTreeLeaf$2__get_Value(m2)
                ], acc);
            } else return acc;
            break;
        }
    };
    return loop(m, _listJs.empty());
}
_c44 = MapTreeModule_toList;
function MapTreeModule_copyToArray(m, arr, i) {
    let j = i;
    MapTreeModule_iter((x, y)=>{
        arr[j] = [
            x,
            y
        ];
        j = j + 1 | 0;
    }, m);
}
_c45 = MapTreeModule_copyToArray;
function MapTreeModule_toArray(m) {
    const n = MapTreeModule_size(m) | 0;
    const res = _arrayJs.fill(new Array(n), 0, n, [
        null,
        null
    ]);
    MapTreeModule_copyToArray(m, res, 0);
    return res;
}
_c46 = MapTreeModule_toArray;
function MapTreeModule_ofList(comparer, l) {
    return _listJs.fold((acc, tupledArg)=>MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc)
    , MapTreeModule_empty(), l);
}
_c47 = MapTreeModule_ofList;
function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {
    MapTreeModule_mkFromEnumerator: while(true){
        const comparer = comparer_mut, acc = acc_mut, e = e_mut;
        if (e["System.Collections.IEnumerator.MoveNext"]()) {
            const patternInput = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
            comparer_mut = comparer;
            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);
            e_mut = e;
            continue MapTreeModule_mkFromEnumerator;
        } else return acc;
        break;
    }
}
_c48 = MapTreeModule_mkFromEnumerator;
function MapTreeModule_ofArray(comparer, arr) {
    let res = MapTreeModule_empty();
    for(let idx = 0; idx <= arr.length - 1; idx++){
        const forLoopVar = arr[idx];
        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);
    }
    return res;
}
_c49 = MapTreeModule_ofArray;
function MapTreeModule_ofSeq(comparer, c) {
    if (_utilJs.isArrayLike(c)) return MapTreeModule_ofArray(comparer, c);
    else if (c instanceof _listJs.FSharpList) return MapTreeModule_ofList(comparer, c);
    else {
        const ie = _utilJs.getEnumerator(c);
        try {
            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);
        } finally{
            ie.Dispose();
        }
    }
}
_c50 = MapTreeModule_ofSeq;
class MapTreeModule_MapIterator$2 extends _typesJs.Record {
    constructor(stack, started){
        super();
        this.stack = stack;
        this.started = started;
    }
}
function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {
    return _reflectionJs.record_type("Map.MapTreeModule.MapIterator`2", [
        gen0,
        gen1
    ], MapTreeModule_MapIterator$2, ()=>[
            [
                "stack",
                _reflectionJs.list_type(_reflectionJs.option_type(MapTreeLeaf$2$reflection(gen0, gen1)))
            ],
            [
                "started", _reflectionJs.bool_type]
        ]
    );
}
_c51 = MapTreeModule_MapIterator$2$reflection;
function MapTreeModule_collapseLHS(stack_mut) {
    MapTreeModule_collapseLHS: while(true){
        const stack1 = stack_mut;
        if (!_listJs.isEmpty(stack1)) {
            const rest = _listJs.tail(stack1);
            const m = _listJs.head(stack1);
            if (m != null) {
                const m2 = m;
                if (m2 instanceof MapTreeNode$2) {
                    stack_mut = _listJs.ofArrayWithTail([
                        MapTreeNode$2__get_Left(m2),
                        MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)),
                        MapTreeNode$2__get_Right(m2)
                    ], rest);
                    continue MapTreeModule_collapseLHS;
                } else return stack1;
            } else {
                stack_mut = rest;
                continue MapTreeModule_collapseLHS;
            }
        } else return _listJs.empty();
        break;
    }
}
_c52 = MapTreeModule_collapseLHS;
function MapTreeModule_mkIterator(m) {
    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(_listJs.singleton(m)), false);
}
_c53 = MapTreeModule_mkIterator;
function MapTreeModule_notStarted() {
    throw new Error("enumeration not started");
}
_c54 = MapTreeModule_notStarted;
function MapTreeModule_alreadyFinished() {
    throw new Error("enumeration already finished");
}
_c55 = MapTreeModule_alreadyFinished;
function MapTreeModule_current(i) {
    if (i.started) {
        const matchValue = i.stack;
        if (!_listJs.isEmpty(matchValue)) {
            if (_listJs.head(matchValue) != null) {
                const m = _listJs.head(matchValue);
                if (m instanceof MapTreeNode$2) throw new Error("Please report error: Map iterator, unexpected stack for current");
                else return [
                    MapTreeLeaf$2__get_Key(m),
                    MapTreeLeaf$2__get_Value(m)
                ];
            } else throw new Error("Please report error: Map iterator, unexpected stack for current");
        } else return MapTreeModule_alreadyFinished();
    } else return MapTreeModule_notStarted();
}
_c56 = MapTreeModule_current;
function MapTreeModule_moveNext(i) {
    if (i.started) {
        const matchValue = i.stack;
        if (!_listJs.isEmpty(matchValue)) {
            if (_listJs.head(matchValue) != null) {
                const m = _listJs.head(matchValue);
                if (m instanceof MapTreeNode$2) throw new Error("Please report error: Map iterator, unexpected stack for moveNext");
                else {
                    i.stack = MapTreeModule_collapseLHS(_listJs.tail(matchValue));
                    return !_listJs.isEmpty(i.stack);
                }
            } else throw new Error("Please report error: Map iterator, unexpected stack for moveNext");
        } else return false;
    } else {
        i.started = true;
        return !_listJs.isEmpty(i.stack);
    }
}
_c57 = MapTreeModule_moveNext;
function MapTreeModule_mkIEnumerator(m) {
    let i = MapTreeModule_mkIterator(m);
    return {
        ["System.Collections.Generic.IEnumerator`1.get_Current"] () {
            return MapTreeModule_current(i);
        },
        ["System.Collections.IEnumerator.get_Current"] () {
            return MapTreeModule_current(i);
        },
        ["System.Collections.IEnumerator.MoveNext"] () {
            return MapTreeModule_moveNext(i);
        },
        ["System.Collections.IEnumerator.Reset"] () {
            i = MapTreeModule_mkIterator(m);
        },
        Dispose () {
        }
    };
}
_c58 = MapTreeModule_mkIEnumerator;
function MapTreeModule_toSeq(s) {
    return _seqJs.unfold((en_1)=>{
        if (en_1["System.Collections.IEnumerator.MoveNext"]()) return [
            en_1["System.Collections.Generic.IEnumerator`1.get_Current"](),
            en_1
        ];
        else return void 0;
    }, MapTreeModule_mkIEnumerator(s));
}
_c59 = MapTreeModule_toSeq;
class FSharpMap {
    constructor(comparer, tree){
        this.comparer = comparer;
        this.tree = tree;
    }
    GetHashCode() {
        const this$ = this;
        return FSharpMap__ComputeHashCode(this$) | 0;
    }
    Equals(that) {
        const this$ = this;
        if (that instanceof FSharpMap) {
            const e1 = _utilJs.getEnumerator(this$);
            try {
                const e2 = _utilJs.getEnumerator(that);
                try {
                    const loop = ()=>{
                        const m1 = e1["System.Collections.IEnumerator.MoveNext"]();
                        if (m1 === e2["System.Collections.IEnumerator.MoveNext"]()) {
                            if (!m1) return true;
                            else {
                                const e1c = e1["System.Collections.Generic.IEnumerator`1.get_Current"]();
                                const e2c = e2["System.Collections.Generic.IEnumerator`1.get_Current"]();
                                if (_utilJs.equals(e1c[0], e2c[0]) ? _utilJs.equals(e1c[1], e2c[1]) : false) return loop();
                                else return false;
                            }
                        } else return false;
                    };
                    return loop();
                } finally{
                    e2.Dispose();
                }
            } finally{
                e1.Dispose();
            }
        } else return false;
    }
    toString() {
        const this$ = this;
        return "map [" + _stringJs.join("; ", _seqJs.map((kv)=>_stringJs.format("({0}, {1})", kv[0], kv[1])
        , this$)) + "]";
    }
    get [Symbol.toStringTag]() {
        return "FSharpMap";
    }
    toJSON(_key) {
        const this$ = this;
        return Array.from(this$);
    }
    GetEnumerator() {
        const __ = this;
        return MapTreeModule_mkIEnumerator(__.tree);
    }
    [Symbol.iterator]() {
        return _utilJs.toIterator(this.GetEnumerator());
    }
    ["System.Collections.IEnumerable.GetEnumerator"]() {
        const __ = this;
        return MapTreeModule_mkIEnumerator(__.tree);
    }
    CompareTo(obj) {
        const m = this;
        if (obj instanceof FSharpMap) return _seqJs.compareWith((kvp1, kvp2)=>{
            const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;
            return (c !== 0 ? c : _utilJs.compare(kvp1[1], kvp2[1])) | 0;
        }, m, obj) | 0;
        else throw new Error("not comparable\\nParameter name: obj");
    }
    ["System.Collections.Generic.ICollection`1.Add2B595"](x) {
        throw new Error("Map cannot be mutated");
    }
    ["System.Collections.Generic.ICollection`1.Clear"]() {
        throw new Error("Map cannot be mutated");
    }
    ["System.Collections.Generic.ICollection`1.Remove2B595"](x) {
        throw new Error("Map cannot be mutated");
    }
    ["System.Collections.Generic.ICollection`1.Contains2B595"](x) {
        const m = this;
        return FSharpMap__ContainsKey(m, x[0]) ? _utilJs.equals(FSharpMap__get_Item(m, x[0]), x[1]) : false;
    }
    ["System.Collections.Generic.ICollection`1.CopyToZ2E171D71"](arr, i) {
        const m = this;
        MapTreeModule_copyToArray(m.tree, arr, i);
    }
    ["System.Collections.Generic.ICollection`1.get_IsReadOnly"]() {
        return true;
    }
    ["System.Collections.Generic.ICollection`1.get_Count"]() {
        const m = this;
        return FSharpMap__get_Count(m) | 0;
    }
    ["System.Collections.Generic.IReadOnlyCollection`1.get_Count"]() {
        const m = this;
        return FSharpMap__get_Count(m) | 0;
    }
    get size() {
        const m = this;
        return FSharpMap__get_Count(m) | 0;
    }
    clear() {
        throw new Error("Map cannot be mutated");
    }
    delete(_arg1) {
        throw new Error("Map cannot be mutated");
    }
    entries() {
        const m = this;
        return _seqJs.map((p)=>[
                p[0],
                p[1]
            ]
        , m);
    }
    get(k) {
        const m = this;
        return FSharpMap__get_Item(m, k);
    }
    has(k) {
        const m = this;
        return FSharpMap__ContainsKey(m, k);
    }
    keys() {
        const m = this;
        return _seqJs.map((p)=>p[0]
        , m);
    }
    set(k, v) {
        const m = this;
        throw new Error("Map cannot be mutated");
    }
    values() {
        const m = this;
        return _seqJs.map((p)=>p[1]
        , m);
    }
    forEach(f, thisArg) {
        const m = this;
        _seqJs.iterate((p)=>{
            f(p[1], p[0], m);
        }, m);
    }
}
function FSharpMap$reflection(gen0, gen1) {
    return _reflectionJs.class_type("Map.FSharpMap", [
        gen0,
        gen1
    ], FSharpMap);
}
_c60 = FSharpMap$reflection;
function FSharpMap_$ctor(comparer1, tree1) {
    return new FSharpMap(comparer1, tree1);
}
_c61 = FSharpMap_$ctor;
(()=>{
    FSharpMap.empty = FSharpMap_$ctor(_fsharpCoreJs.LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());
})();
function FSharpMap_get_Empty() {
    return FSharpMap.empty;
}
_c62 = FSharpMap_get_Empty;
function FSharpMap_Create(ie) {
    const comparer1 = _fsharpCoreJs.LanguagePrimitives_FastGenericComparer();
    return FSharpMap_$ctor(comparer1, MapTreeModule_ofSeq(comparer1, ie));
}
_c63 = FSharpMap_Create;
function FSharpMap__get_Comparer(m) {
    return m.comparer;
}
_c64 = FSharpMap__get_Comparer;
function FSharpMap__get_Tree(m) {
    return m.tree;
}
_c65 = FSharpMap__get_Tree;
function FSharpMap__Add(m, key, value) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));
}
_c66 = FSharpMap__Add;
function FSharpMap__Change(m, key, f) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));
}
_c67 = FSharpMap__Change;
function FSharpMap__get_IsEmpty(m) {
    return m.tree == null;
}
_c68 = FSharpMap__get_IsEmpty;
function FSharpMap__get_Item(m, key) {
    return MapTreeModule_find(m.comparer, key, m.tree);
}
_c69 = FSharpMap__get_Item;
function FSharpMap__TryPick(m, f) {
    return MapTreeModule_tryPick(f, m.tree);
}
_c70 = FSharpMap__TryPick;
function FSharpMap__Exists(m, predicate) {
    return MapTreeModule_exists(predicate, m.tree);
}
_c71 = FSharpMap__Exists;
function FSharpMap__Filter(m, predicate) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));
}
_c72 = FSharpMap__Filter;
function FSharpMap__ForAll(m, predicate) {
    return MapTreeModule_forall(predicate, m.tree);
}
_c73 = FSharpMap__ForAll;
function FSharpMap__Fold(m, f, acc) {
    return MapTreeModule_foldBack(f, m.tree, acc);
}
_c74 = FSharpMap__Fold;
function FSharpMap__FoldSection(m, lo, hi, f, acc) {
    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);
}
_c75 = FSharpMap__FoldSection;
function FSharpMap__Iterate(m, f) {
    MapTreeModule_iter(f, m.tree);
}
_c76 = FSharpMap__Iterate;
function FSharpMap__MapRange(m, f) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));
}
_c77 = FSharpMap__MapRange;
function FSharpMap__Map(m, f) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));
}
_c78 = FSharpMap__Map;
function FSharpMap__Partition(m, predicate) {
    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);
    return [
        FSharpMap_$ctor(m.comparer, patternInput[0]),
        FSharpMap_$ctor(m.comparer, patternInput[1])
    ];
}
_c79 = FSharpMap__Partition;
function FSharpMap__get_Count(m) {
    return MapTreeModule_size(m.tree);
}
_c80 = FSharpMap__get_Count;
function FSharpMap__ContainsKey(m, key) {
    return MapTreeModule_mem(m.comparer, key, m.tree);
}
_c81 = FSharpMap__ContainsKey;
function FSharpMap__Remove(m, key) {
    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));
}
_c82 = FSharpMap__Remove;
function FSharpMap__TryGetValue(__, key, value) {
    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);
    if (matchValue == null) return false;
    else {
        const v3 = _optionJs.value(matchValue);
        value.contents = v3;
        return true;
    }
}
_c83 = FSharpMap__TryGetValue;
function FSharpMap__TryFind(m, key) {
    return MapTreeModule_tryFind(m.comparer, key, m.tree);
}
_c84 = FSharpMap__TryFind;
function FSharpMap__ToList(m) {
    return MapTreeModule_toList(m.tree);
}
_c85 = FSharpMap__ToList;
function FSharpMap__ToArray(m) {
    return MapTreeModule_toArray(m.tree);
}
_c86 = FSharpMap__ToArray;
function FSharpMap__ComputeHashCode(this$) {
    const combineHash = (x, y)=>(x << 1) + y + 631
    ;
    let res = 0;
    const enumerator = _utilJs.getEnumerator(this$);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const activePatternResult5329 = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            res = combineHash(res, _utilJs.structuralHash(activePatternResult5329[0])) | 0;
            res = combineHash(res, _utilJs.structuralHash(activePatternResult5329[1])) | 0;
        }
    } finally{
        enumerator.Dispose();
    }
    return res | 0;
}
_c87 = FSharpMap__ComputeHashCode;
function isEmpty(table) {
    return FSharpMap__get_IsEmpty(table);
}
function add(key, value, table) {
    return FSharpMap__Add(table, key, value);
}
function change(key, f, table) {
    return FSharpMap__Change(table, key, f);
}
function find(key, table) {
    return FSharpMap__get_Item(table, key);
}
function tryFind(key, table) {
    return FSharpMap__TryFind(table, key);
}
function remove(key, table) {
    return FSharpMap__Remove(table, key);
}
function containsKey(key, table) {
    return FSharpMap__ContainsKey(table, key);
}
function iterate(action, table) {
    FSharpMap__Iterate(table, action);
}
function tryPick(chooser, table) {
    return FSharpMap__TryPick(table, chooser);
}
function pick(chooser, table) {
    const matchValue = tryPick(chooser, table);
    if (matchValue != null) return _optionJs.value(matchValue);
    else throw new Error();
}
function exists(predicate, table) {
    return FSharpMap__Exists(table, predicate);
}
function filter(predicate, table) {
    return FSharpMap__Filter(table, predicate);
}
function partition(predicate, table) {
    return FSharpMap__Partition(table, predicate);
}
function forAll(predicate, table) {
    return FSharpMap__ForAll(table, predicate);
}
function map(mapping, table) {
    return FSharpMap__Map(table, mapping);
}
function fold(folder, state, table) {
    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));
}
function foldBack(folder, table, state) {
    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);
}
function toSeq(table) {
    return _seqJs.map((kvp)=>[
            kvp[0],
            kvp[1]
        ]
    , table);
}
function findKey(predicate, table) {
    return _seqJs.pick((kvp)=>{
        const k3 = kvp[0];
        if (predicate(k3, kvp[1])) return _optionJs.some(k3);
        else return void 0;
    }, table);
}
function tryFindKey(predicate, table) {
    return _seqJs.tryPick((kvp)=>{
        const k3 = kvp[0];
        if (predicate(k3, kvp[1])) return _optionJs.some(k3);
        else return void 0;
    }, table);
}
function ofList(elements) {
    return FSharpMap_Create(elements);
}
function ofSeq(elements) {
    return FSharpMap_Create(elements);
}
function ofArray(elements) {
    const comparer1 = _fsharpCoreJs.LanguagePrimitives_FastGenericComparer();
    return FSharpMap_$ctor(comparer1, MapTreeModule_ofArray(comparer1, elements));
}
function toList(table) {
    return FSharpMap__ToList(table);
}
function toArray(table) {
    return FSharpMap__ToArray(table);
}
function empty() {
    return FSharpMap_get_Empty();
}
function count(table) {
    return FSharpMap__get_Count(table);
}
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87;
$RefreshReg$(_c, "MapTreeLeaf$2$reflection");
$RefreshReg$(_c1, "MapTreeLeaf$2_$ctor_5BDDA1");
$RefreshReg$(_c2, "MapTreeLeaf$2__get_Key");
$RefreshReg$(_c3, "MapTreeLeaf$2__get_Value");
$RefreshReg$(_c4, "MapTreeNode$2$reflection");
$RefreshReg$(_c5, "MapTreeNode$2_$ctor_499A11FD");
$RefreshReg$(_c6, "MapTreeNode$2__get_Left");
$RefreshReg$(_c7, "MapTreeNode$2__get_Right");
$RefreshReg$(_c8, "MapTreeNode$2__get_Height");
$RefreshReg$(_c9, "MapTreeModule_empty");
$RefreshReg$(_c10, "MapTreeModule_sizeAux");
$RefreshReg$(_c11, "MapTreeModule_size");
$RefreshReg$(_c12, "MapTreeModule_mk");
$RefreshReg$(_c13, "MapTreeModule_rebalance");
$RefreshReg$(_c14, "MapTreeModule_add");
$RefreshReg$(_c15, "MapTreeModule_tryFind");
$RefreshReg$(_c16, "MapTreeModule_find");
$RefreshReg$(_c17, "MapTreeModule_partition1");
$RefreshReg$(_c18, "MapTreeModule_partitionAux");
$RefreshReg$(_c19, "MapTreeModule_partition");
$RefreshReg$(_c20, "MapTreeModule_filter1");
$RefreshReg$(_c21, "MapTreeModule_filterAux");
$RefreshReg$(_c22, "MapTreeModule_filter");
$RefreshReg$(_c23, "MapTreeModule_spliceOutSuccessor");
$RefreshReg$(_c24, "MapTreeModule_remove");
$RefreshReg$(_c25, "MapTreeModule_change");
$RefreshReg$(_c26, "MapTreeModule_mem");
$RefreshReg$(_c27, "MapTreeModule_iterOpt");
$RefreshReg$(_c28, "MapTreeModule_iter");
$RefreshReg$(_c29, "MapTreeModule_tryPickOpt");
$RefreshReg$(_c30, "MapTreeModule_tryPick");
$RefreshReg$(_c31, "MapTreeModule_existsOpt");
$RefreshReg$(_c32, "MapTreeModule_exists");
$RefreshReg$(_c33, "MapTreeModule_forallOpt");
$RefreshReg$(_c34, "MapTreeModule_forall");
$RefreshReg$(_c35, "MapTreeModule_map");
$RefreshReg$(_c36, "MapTreeModule_mapiOpt");
$RefreshReg$(_c37, "MapTreeModule_mapi");
$RefreshReg$(_c38, "MapTreeModule_foldBackOpt");
$RefreshReg$(_c39, "MapTreeModule_foldBack");
$RefreshReg$(_c40, "MapTreeModule_foldOpt");
$RefreshReg$(_c41, "MapTreeModule_fold");
$RefreshReg$(_c42, "MapTreeModule_foldSectionOpt");
$RefreshReg$(_c43, "MapTreeModule_foldSection");
$RefreshReg$(_c44, "MapTreeModule_toList");
$RefreshReg$(_c45, "MapTreeModule_copyToArray");
$RefreshReg$(_c46, "MapTreeModule_toArray");
$RefreshReg$(_c47, "MapTreeModule_ofList");
$RefreshReg$(_c48, "MapTreeModule_mkFromEnumerator");
$RefreshReg$(_c49, "MapTreeModule_ofArray");
$RefreshReg$(_c50, "MapTreeModule_ofSeq");
$RefreshReg$(_c51, "MapTreeModule_MapIterator$2$reflection");
$RefreshReg$(_c52, "MapTreeModule_collapseLHS");
$RefreshReg$(_c53, "MapTreeModule_mkIterator");
$RefreshReg$(_c54, "MapTreeModule_notStarted");
$RefreshReg$(_c55, "MapTreeModule_alreadyFinished");
$RefreshReg$(_c56, "MapTreeModule_current");
$RefreshReg$(_c57, "MapTreeModule_moveNext");
$RefreshReg$(_c58, "MapTreeModule_mkIEnumerator");
$RefreshReg$(_c59, "MapTreeModule_toSeq");
$RefreshReg$(_c60, "FSharpMap$reflection");
$RefreshReg$(_c61, "FSharpMap_$ctor");
$RefreshReg$(_c62, "FSharpMap_get_Empty");
$RefreshReg$(_c63, "FSharpMap_Create");
$RefreshReg$(_c64, "FSharpMap__get_Comparer");
$RefreshReg$(_c65, "FSharpMap__get_Tree");
$RefreshReg$(_c66, "FSharpMap__Add");
$RefreshReg$(_c67, "FSharpMap__Change");
$RefreshReg$(_c68, "FSharpMap__get_IsEmpty");
$RefreshReg$(_c69, "FSharpMap__get_Item");
$RefreshReg$(_c70, "FSharpMap__TryPick");
$RefreshReg$(_c71, "FSharpMap__Exists");
$RefreshReg$(_c72, "FSharpMap__Filter");
$RefreshReg$(_c73, "FSharpMap__ForAll");
$RefreshReg$(_c74, "FSharpMap__Fold");
$RefreshReg$(_c75, "FSharpMap__FoldSection");
$RefreshReg$(_c76, "FSharpMap__Iterate");
$RefreshReg$(_c77, "FSharpMap__MapRange");
$RefreshReg$(_c78, "FSharpMap__Map");
$RefreshReg$(_c79, "FSharpMap__Partition");
$RefreshReg$(_c80, "FSharpMap__get_Count");
$RefreshReg$(_c81, "FSharpMap__ContainsKey");
$RefreshReg$(_c82, "FSharpMap__Remove");
$RefreshReg$(_c83, "FSharpMap__TryGetValue");
$RefreshReg$(_c84, "FSharpMap__TryFind");
$RefreshReg$(_c85, "FSharpMap__ToList");
$RefreshReg$(_c86, "FSharpMap__ToArray");
$RefreshReg$(_c87, "FSharpMap__ComputeHashCode");

},{"./Reflection.js":"c0YT4","./Option.js":"gHWVf","./List.js":"3UB49","./Array.js":"dl8am","./Util.js":"e4VZ7","./Types.js":"7IOW0","./Seq.js":"app8U","./String.js":"baXBU","./FSharp.Core.js":"mbdRP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hMwl6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "guid", ()=>guid
);
parcelHelpers.export(exports, "decimal", ()=>decimal
);
parcelHelpers.export(exports, "nil", ()=>nil
);
parcelHelpers.export(exports, "object", ()=>object
);
parcelHelpers.export(exports, "list", ()=>list
);
parcelHelpers.export(exports, "seq", ()=>seq
);
parcelHelpers.export(exports, "dict", ()=>dict
);
parcelHelpers.export(exports, "bigint", ()=>bigint
);
parcelHelpers.export(exports, "datetimeOffset", ()=>datetimeOffset
);
parcelHelpers.export(exports, "timespan", ()=>timespan
);
parcelHelpers.export(exports, "sbyte", ()=>sbyte
);
parcelHelpers.export(exports, "byte", ()=>byte
);
parcelHelpers.export(exports, "int16", ()=>int16
);
parcelHelpers.export(exports, "uint16", ()=>uint16
);
parcelHelpers.export(exports, "int64", ()=>int64
);
parcelHelpers.export(exports, "uint64", ()=>uint64
);
parcelHelpers.export(exports, "unit", ()=>unit
);
parcelHelpers.export(exports, "tuple2", ()=>tuple2
);
parcelHelpers.export(exports, "tuple3", ()=>tuple3
);
parcelHelpers.export(exports, "tuple4", ()=>tuple4
);
parcelHelpers.export(exports, "tuple5", ()=>tuple5
);
parcelHelpers.export(exports, "tuple6", ()=>tuple6
);
parcelHelpers.export(exports, "tuple7", ()=>tuple7
);
parcelHelpers.export(exports, "tuple8", ()=>tuple8
);
parcelHelpers.export(exports, "Enum_byte", ()=>Enum_byte
);
parcelHelpers.export(exports, "Enum_sbyte", ()=>Enum_sbyte
);
parcelHelpers.export(exports, "Enum_int16", ()=>Enum_int16
);
parcelHelpers.export(exports, "Enum_uint16", ()=>Enum_uint16
);
parcelHelpers.export(exports, "Enum_int", ()=>Enum_int
);
parcelHelpers.export(exports, "Enum_uint32", ()=>Enum_uint32
);
parcelHelpers.export(exports, "datetime", ()=>datetime
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "option", ()=>option
);
parcelHelpers.export(exports, "Auto", ()=>Auto
);
parcelHelpers.export(exports, "Auto$reflection", ()=>Auto$reflection
);
parcelHelpers.export(exports, "Auto_generateBoxedEncoderCached_Z20B7B430", ()=>Auto_generateBoxedEncoderCached_Z20B7B430
);
parcelHelpers.export(exports, "Auto_generateBoxedEncoder_Z20B7B430", ()=>Auto_generateBoxedEncoder_Z20B7B430
);
parcelHelpers.export(exports, "encode", ()=>encode
);
var _decimalJs = require("../fable-library.3.2.10/Decimal.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _mapJs = require("../fable-library.3.2.10/Map.js");
var _bigIntJs = require("../fable-library.3.2.10/BigInt.js");
var _dateJs = require("../fable-library.3.2.10/Date.js");
var _timeSpanJs = require("../fable-library.3.2.10/TimeSpan.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
var _typesFsJs = require("./Types.fs.js");
var _seqJs = require("../fable-library.3.2.10/Seq.js");
var _stringJs = require("../fable-library.3.2.10/String.js");
function guid(value) {
    return value;
}
function decimal(value) {
    return _decimalJs.toString(value);
}
const nil = null;
function object(values) {
    const o = {
    };
    const enumerator = _utilJs.getEnumerator(values);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const forLoopVar = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            o[forLoopVar[0]] = forLoopVar[1];
        }
    } finally{
        enumerator.Dispose();
    }
    return o;
}
function list(values) {
    return Array.from(values);
}
function seq(values) {
    return Array.from(values);
}
function dict(values) {
    return object(_mapJs.toList(values));
}
function bigint(value) {
    return _bigIntJs.toString(value);
}
function datetimeOffset(value) {
    return _dateJs.toString(value, "O", {
    });
}
function timespan(value) {
    return _timeSpanJs.toString(value);
}
function sbyte(value) {
    return String(value);
}
function byte(value) {
    return String(value);
}
function int16(value) {
    return String(value);
}
function uint16(value) {
    return String(value);
}
function int64(value) {
    return String(value);
}
function uint64(value) {
    return String(value);
}
function unit() {
    return null;
}
function tuple2(enc1, enc2, v1, v2) {
    return [
        enc1(v1),
        enc2(v2)
    ];
}
function tuple3(enc1, enc2, enc3, v1, v2, v3) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3)
    ];
}
function tuple4(enc1, enc2, enc3, enc4, v1, v2, v3, v4) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3),
        enc4(v4)
    ];
}
function tuple5(enc1, enc2, enc3, enc4, enc5, v1, v2, v3, v4, v5) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3),
        enc4(v4),
        enc5(v5)
    ];
}
function tuple6(enc1, enc2, enc3, enc4, enc5, enc6, v1, v2, v3, v4, v5, v6) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3),
        enc4(v4),
        enc5(v5),
        enc6(v6)
    ];
}
function tuple7(enc1, enc2, enc3, enc4, enc5, enc6, enc7, v1, v2, v3, v4, v5, v6, v7) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3),
        enc4(v4),
        enc5(v5),
        enc6(v6),
        enc7(v7)
    ];
}
function tuple8(enc1, enc2, enc3, enc4, enc5, enc6, enc7, enc8, v1, v2, v3, v4, v5, v6, v7, v8) {
    return [
        enc1(v1),
        enc2(v2),
        enc3(v3),
        enc4(v4),
        enc5(v5),
        enc6(v6),
        enc7(v7),
        enc8(v8)
    ];
}
function Enum_byte(value) {
    return byte(value);
}
_c = Enum_byte;
function Enum_sbyte(value) {
    return sbyte(value);
}
_c1 = Enum_sbyte;
function Enum_int16(value) {
    return int16(value);
}
_c2 = Enum_int16;
function Enum_uint16(value) {
    return uint16(value);
}
_c3 = Enum_uint16;
function Enum_int(value) {
    return value;
}
_c4 = Enum_int;
function Enum_uint32(value) {
    return value;
}
_c5 = Enum_uint32;
function datetime(value) {
    return _dateJs.toString(value, "O", {
    });
}
function toString(space, value) {
    return JSON.stringify(value, _utilJs.uncurry(2, null), _optionJs.some(space));
}
function option(encoder) {
    return (arg)=>_optionJs.defaultArgWith(_optionJs.map(encoder, arg), ()=>nil
        )
    ;
}
function autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t) {
    const encoderRef = new _typesJs.FSharpRef(null);
    const extra_1 = _mapJs.add(_reflectionJs.fullName(t), encoderRef, extra);
    let encoder;
    if (_reflectionJs.isRecord(t, true)) {
        const setters = _arrayJs.map((fi)=>{
            const targetKey = _typesFsJs.Util_Casing_convert(caseStrategy, _reflectionJs.name(fi));
            const encode_1 = autoEncoder(extra_1, caseStrategy, skipNullField, fi[1]);
            return (source)=>(target)=>{
                    const value = _reflectionJs.getRecordField(source, fi);
                    if (!skipNullField ? true : skipNullField ? !(value == null) : false) target[targetKey] = encode_1(value);
                    return target;
                }
            ;
        }, _reflectionJs.getRecordElements(t, true));
        encoder = (source_1)=>_seqJs.fold(_utilJs.uncurry(2, _utilJs.mapCurriedArgs((target_1)=>(set$)=>set$(source_1, target_1)
            , [
                0,
                [
                    0,
                    2
                ]
            ])), {
            }, setters)
        ;
    } else if (_reflectionJs.isUnion(t, true)) encoder = (value_1)=>{
        const patternInput = _reflectionJs.getUnionFields(value_1, t, true);
        const info = patternInput[0];
        const fields = patternInput[1];
        const matchValue = fields.length | 0;
        if (matchValue === 0) return _reflectionJs.name(info);
        else {
            const len = matchValue | 0;
            const fieldTypes = _reflectionJs.getUnionCaseFields(info);
            const target_2 = _arrayJs.fill(new Array(len + 1), 0, len + 1, null);
            target_2[0] = _reflectionJs.name(info);
            for(let i = 1; i <= len; i++){
                const encode_2 = autoEncoder(extra_1, caseStrategy, skipNullField, fieldTypes[i - 1][1]);
                target_2[i] = encode_2(fields[i - 1]);
            }
            return target_2;
        }
    };
    else {
        let message;
        const arg10 = _reflectionJs.fullName(t);
        message = _stringJs.toText(_stringJs.printf("Cannot generate auto encoder for %s. Please pass an extra encoder."))(arg10);
        throw new Error(message);
    }
    encoderRef.contents = encoder;
    return encoder;
}
function autoEncoder(extra, caseStrategy, skipNullField, t) {
    const fullname = _reflectionJs.fullName(t);
    const matchValue = _mapJs.tryFind(fullname, extra);
    if (matchValue == null) {
        if (_reflectionJs.isArray(t)) {
            const encoder = autoEncoder(extra, caseStrategy, skipNullField, _reflectionJs.getElementType(t));
            return (value)=>seq(_seqJs.map(encoder, value))
            ;
        } else if (_reflectionJs.isEnum(t)) {
            const enumType = _reflectionJs.fullName(_reflectionJs.getEnumUnderlyingType(t));
            if (enumType === "System.SByte") return (value_1)=>sbyte(value_1)
            ;
            else if (enumType === "System.Byte") return (value_2)=>byte(value_2)
            ;
            else if (enumType === "System.Int16") return (value_3)=>int16(value_3)
            ;
            else if (enumType === "System.UInt16") return (value_4)=>uint16(value_4)
            ;
            else if (enumType === "System.Int32") return (value_5)=>value_5
            ;
            else if (enumType === "System.UInt32") return (value_7)=>value_7
            ;
            else {
                const arg10 = _reflectionJs.fullName(t);
                const clo2 = _stringJs.toFail(_stringJs.printf("Cannot generate auto encoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can\u0027t use one of these types, please pass an extra encoder.\n                    "))(arg10);
                return (arg20)=>clo2(arg20)
                ;
            }
        } else if (_reflectionJs.isGenericType(t)) {
            if (_reflectionJs.isTuple(t)) {
                const encoders = _arrayJs.map((t_2)=>autoEncoder(extra, caseStrategy, skipNullField, t_2)
                , _reflectionJs.getTupleElements(t));
                return (value_9)=>seq(_seqJs.mapIndexed((i, x)=>encoders[i](x)
                    , _reflectionJs.getTupleFields(value_9)))
                ;
            } else {
                const fullname_1 = _reflectionJs.fullName(_reflectionJs.getGenericTypeDefinition(t));
                if (fullname_1 === "Microsoft.FSharp.Core.FSharpOption`1[System.Object]") {
                    const encoder_2 = new _utilJs.Lazy(()=>option(autoEncoder(extra, caseStrategy, skipNullField, _reflectionJs.getGenerics(t)[0]))
                    );
                    return (value_10)=>{
                        if (value_10 == null) return nil;
                        else return encoder_2.Value(value_10);
                    };
                } else if (fullname_1 === "Microsoft.FSharp.Collections.FSharpList`1[System.Object]" ? true : fullname_1 === "Microsoft.FSharp.Collections.FSharpSet`1[System.Object]") {
                    const encoder_3 = autoEncoder(extra, caseStrategy, skipNullField, _reflectionJs.getGenerics(t)[0]);
                    return (value_11)=>seq(_seqJs.map(encoder_3, value_11))
                    ;
                } else if (fullname_1 === "Microsoft.FSharp.Collections.FSharpMap`2[System.Object,System.Object]") {
                    const keyType = _reflectionJs.getGenerics(t)[0];
                    const valueEncoder = autoEncoder(extra, caseStrategy, skipNullField, _reflectionJs.getGenerics(t)[1]);
                    if (_reflectionJs.fullName(keyType) === "System.String" ? true : _reflectionJs.fullName(keyType) === "System.Guid") return (value_12)=>_seqJs.fold((target, _arg1)=>{
                            const activePatternResult18476 = _arg1;
                            target[activePatternResult18476[0]] = valueEncoder(activePatternResult18476[1]);
                            return target;
                        }, {
                        }, value_12)
                    ;
                    else {
                        let keyEncoder;
                        const clo4 = autoEncoder(extra, caseStrategy, skipNullField, keyType);
                        keyEncoder = (arg40)=>clo4(arg40)
                        ;
                        return (value_13)=>seq(_seqJs.map((_arg2)=>{
                                const activePatternResult18480 = _arg2;
                                return [
                                    keyEncoder(activePatternResult18480[0]),
                                    valueEncoder(activePatternResult18480[1])
                                ];
                            }, value_13))
                        ;
                    }
                } else return autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t);
            }
        } else if (fullname === "System.Boolean") return (value_14)=>value_14
        ;
        else if (fullname === "Microsoft.FSharp.Core.Unit") return unit;
        else if (fullname === "System.String") return (value_16)=>value_16
        ;
        else if (fullname === "System.SByte") return (value_18)=>sbyte(value_18)
        ;
        else if (fullname === "System.Byte") return (value_19)=>byte(value_19)
        ;
        else if (fullname === "System.Int16") return (value_20)=>int16(value_20)
        ;
        else if (fullname === "System.UInt16") return (value_21)=>uint16(value_21)
        ;
        else if (fullname === "System.Int32") return (value_22)=>value_22
        ;
        else if (fullname === "System.UInt32") return (value_24)=>value_24
        ;
        else if (fullname === "System.Double") return (value_26)=>value_26
        ;
        else if (fullname === "System.Single") return (value_28)=>value_28
        ;
        else if (fullname === "System.DateTime") return (value_30)=>datetime(value_30)
        ;
        else if (fullname === "System.DateTimeOffset") return (value_31)=>datetimeOffset(value_31)
        ;
        else if (fullname === "System.TimeSpan") return (value_32)=>timespan(value_32)
        ;
        else if (fullname === "System.Guid") return (value_33)=>guid(value_33)
        ;
        else if (fullname === "System.Object") return (x_1)=>x_1
        ;
        else return autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t);
    } else {
        const encoderRef = matchValue;
        return (v)=>encoderRef.contents(v)
        ;
    }
}
function makeExtra(extra) {
    if (extra != null) return _mapJs.map((_arg2, tupledArg)=>new _typesJs.FSharpRef(tupledArg[0])
    , extra.Coders);
    else return _mapJs.empty();
}
class Auto {
    constructor(){
    }
}
function Auto$reflection() {
    return _reflectionJs.class_type("Thoth.Json.Encode.Auto", void 0, Auto);
}
_c6 = Auto$reflection;
function Auto_generateBoxedEncoderCached_Z20B7B430(t, caseStrategy, extra, skipNullField) {
    let y_1, y;
    const caseStrategy_1 = _optionJs.defaultArg(caseStrategy, new _typesFsJs.CaseStrategy(0));
    const skipNullField_1 = _optionJs.defaultArg(skipNullField, true);
    return _typesFsJs.Util_Cache$1__GetOrAdd_43981464(_typesFsJs.Util_CachedEncoders, (y_1 = (y = _reflectionJs.fullName(t), _typesJs.toString(caseStrategy_1) + y), _optionJs.defaultArg(_optionJs.map((e)=>e.Hash
    , extra), "") + y_1), ()=>autoEncoder(makeExtra(extra), caseStrategy_1, skipNullField_1, t)
    );
}
_c7 = Auto_generateBoxedEncoderCached_Z20B7B430;
function Auto_generateBoxedEncoder_Z20B7B430(t, caseStrategy, extra, skipNullField) {
    const caseStrategy_1 = _optionJs.defaultArg(caseStrategy, new _typesFsJs.CaseStrategy(0));
    const skipNullField_1 = _optionJs.defaultArg(skipNullField, true);
    return autoEncoder(makeExtra(extra), caseStrategy_1, skipNullField_1, t);
}
_c8 = Auto_generateBoxedEncoder_Z20B7B430;
function encode(space, value) {
    return toString(space, value);
}
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8;
$RefreshReg$(_c, "Enum_byte");
$RefreshReg$(_c1, "Enum_sbyte");
$RefreshReg$(_c2, "Enum_int16");
$RefreshReg$(_c3, "Enum_uint16");
$RefreshReg$(_c4, "Enum_int");
$RefreshReg$(_c5, "Enum_uint32");
$RefreshReg$(_c6, "Auto$reflection");
$RefreshReg$(_c7, "Auto_generateBoxedEncoderCached_Z20B7B430");
$RefreshReg$(_c8, "Auto_generateBoxedEncoder_Z20B7B430");

},{"../fable-library.3.2.10/Decimal.js":"dVl3F","../fable-library.3.2.10/Util.js":"e4VZ7","../fable-library.3.2.10/Map.js":"8mQPo","../fable-library.3.2.10/BigInt.js":"6rX6Q","../fable-library.3.2.10/Date.js":"bQWYH","../fable-library.3.2.10/TimeSpan.js":"gbfFx","../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Array.js":"dl8am","./Types.fs.js":"1K9qR","../fable-library.3.2.10/Seq.js":"app8U","../fable-library.3.2.10/String.js":"baXBU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gbfFx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>create
);
parcelHelpers.export(exports, "fromTicks", ()=>fromTicks
);
parcelHelpers.export(exports, "fromDays", ()=>fromDays
);
parcelHelpers.export(exports, "fromHours", ()=>fromHours
);
parcelHelpers.export(exports, "fromMinutes", ()=>fromMinutes
);
parcelHelpers.export(exports, "fromSeconds", ()=>fromSeconds
);
parcelHelpers.export(exports, "days", ()=>days
);
parcelHelpers.export(exports, "hours", ()=>hours
);
parcelHelpers.export(exports, "minutes", ()=>minutes
);
parcelHelpers.export(exports, "seconds", ()=>seconds
);
parcelHelpers.export(exports, "milliseconds", ()=>milliseconds
);
parcelHelpers.export(exports, "ticks", ()=>ticks
);
parcelHelpers.export(exports, "totalDays", ()=>totalDays
);
parcelHelpers.export(exports, "totalHours", ()=>totalHours
);
parcelHelpers.export(exports, "totalMinutes", ()=>totalMinutes
);
parcelHelpers.export(exports, "totalSeconds", ()=>totalSeconds
);
parcelHelpers.export(exports, "negate", ()=>negate
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "subtract", ()=>subtract
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "compareTo", ()=>compareTo
);
parcelHelpers.export(exports, "duration", ()=>duration
);
parcelHelpers.export(exports, "toString", ()=>toString
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
// tslint:disable:max-line-length
var _longJs = require("./Long.js");
var _utilJs = require("./Util.js");
// TimeSpan in runtime just becomes a number representing milliseconds
/**
 * Calls:
 * - `Math.ceil` if the `value` is **negative**
 * - `Math.floor` if the `value` is **positive**
 * @param value Value to round
 */ function signedRound(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
}
function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {
    switch(arguments.length){
        case 1:
            // ticks
            return fromTicks(arguments[0]);
        case 3:
            // h,m,s
            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;
            break;
        default:
            break;
    }
    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;
}
function fromTicks(ticks) {
    return _longJs.toNumber(_longJs.op_Division(ticks, 10000));
}
function fromDays(d) {
    return create(d, 0, 0, 0);
}
function fromHours(h) {
    return create(h, 0, 0);
}
function fromMinutes(m) {
    return create(0, m, 0);
}
function fromSeconds(s) {
    return create(0, 0, s);
}
function days(ts) {
    return signedRound(ts / 86400000);
}
function hours(ts) {
    return signedRound(ts % 86400000 / 3600000);
}
function minutes(ts) {
    return signedRound(ts % 3600000 / 60000);
}
function seconds(ts) {
    return signedRound(ts % 60000 / 1000);
}
function milliseconds(ts) {
    return signedRound(ts % 1000);
}
function ticks(ts) {
    return _longJs.op_Multiply(_longJs.fromNumber(ts), 10000);
}
function totalDays(ts) {
    return ts / 86400000;
}
function totalHours(ts) {
    return ts / 3600000;
}
function totalMinutes(ts) {
    return ts / 60000;
}
function totalSeconds(ts) {
    return ts / 1000;
}
function negate(ts) {
    return ts * -1;
}
function add(ts1, ts2) {
    return ts1 + ts2;
}
function subtract(ts1, ts2) {
    return ts1 - ts2;
}
const op_Addition = add;
const op_Subtraction = subtract;
const compare = _utilJs.comparePrimitives;
const compareTo = _utilJs.comparePrimitives;
function duration(x) {
    return Math.abs(x);
}
function toString(ts, format = "c", _provider) {
    if ([
        "c",
        "g",
        "G"
    ].indexOf(format) === -1) throw new Error("Custom formats are not supported");
    const d = Math.abs(days(ts));
    const h = Math.abs(hours(ts));
    const m = Math.abs(minutes(ts));
    const s = Math.abs(seconds(ts));
    const ms = Math.abs(milliseconds(ts));
    const sign = ts < 0 ? "-" : "";
    return `${sign}${d === 0 && (format === "c" || format === "g") ? "" : format === "c" ? d + "." : d + ":"}${format === "g" ? h : _utilJs.padWithZeros(h, 2)}:${_utilJs.padWithZeros(m, 2)}:${_utilJs.padWithZeros(s, 2)}${ms === 0 && (format === "c" || format === "g") ? "" : format === "g" ? "." + _utilJs.padWithZeros(ms, 3) : "." + _utilJs.padLeftAndRightWithZeros(ms, 3, 7)}`;
}
function parse(str) {
    const firstDot = str.search("\\.");
    const firstColon = str.search("\\:");
    if (firstDot === -1 && firstColon === -1) {
        const d = parseInt(str, 0);
        if (isNaN(d)) throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);
        else return create(d, 0, 0, 0, 0);
    }
    if (firstColon > 0) {
        // WIP: (-?)(((\d+)\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\d+)(:\d+(\.\d{1,7})?)?|\d+(?:(?!\.)))
        const r = /^(-?)((\d+)\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\.?(\d+)?$/.exec(str);
        if (r != null && r[4] != null && r[5] != null) {
            let d = 0;
            let ms = 0;
            let s = 0;
            const sign = r[1] != null && r[1] === "-" ? -1 : 1;
            const h = +r[4];
            const m = +r[5];
            if (r[3] != null) d = +r[3];
            if (r[7] != null) s = +r[7];
            if (r[8] != null) // Depending on the number of decimals passed, we need to adapt the numbers
            switch(r[8].length){
                case 1:
                    ms = +r[8] * 100;
                    break;
                case 2:
                    ms = +r[8] * 10;
                    break;
                case 3:
                    ms = +r[8];
                    break;
                case 4:
                    ms = +r[8] / 10;
                    break;
                case 5:
                    ms = +r[8] / 100;
                    break;
                case 6:
                    ms = +r[8] / 1000;
                    break;
                case 7:
                    ms = +r[8] / 10000;
                    break;
                default:
                    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);
            }
            return sign * create(d, h, m, s, ms);
        }
    }
    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);
}
function tryParse(v, defValue) {
    try {
        defValue.contents = parse(v);
        return true;
    } catch (_a) {
        return false;
    }
}

},{"./Long.js":"2dOzy","./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1K9qR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ErrorReason", ()=>ErrorReason
);
parcelHelpers.export(exports, "ErrorReason$reflection", ()=>ErrorReason$reflection
);
parcelHelpers.export(exports, "CaseStrategy", ()=>CaseStrategy
);
parcelHelpers.export(exports, "CaseStrategy$reflection", ()=>CaseStrategy$reflection
);
parcelHelpers.export(exports, "ExtraCoders", ()=>ExtraCoders
);
parcelHelpers.export(exports, "ExtraCoders$reflection", ()=>ExtraCoders$reflection
);
parcelHelpers.export(exports, "Util_Cache$1", ()=>Util_Cache$1
);
parcelHelpers.export(exports, "Util_Cache$1$reflection", ()=>Util_Cache$1$reflection
);
parcelHelpers.export(exports, "Util_Cache$1_$ctor", ()=>Util_Cache$1_$ctor
);
parcelHelpers.export(exports, "Util_Cache$1__GetOrAdd_43981464", ()=>Util_Cache$1__GetOrAdd_43981464
);
parcelHelpers.export(exports, "Util_CachedEncoders", ()=>Util_CachedEncoders
);
parcelHelpers.export(exports, "Util_CachedDecoders", ()=>Util_CachedDecoders
);
parcelHelpers.export(exports, "Util_Casing_lowerFirst", ()=>Util_Casing_lowerFirst
);
parcelHelpers.export(exports, "Util_Casing_convert", ()=>Util_Casing_convert
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _choiceJs = require("../fable-library.3.2.10/Choice.js");
var _mapUtilJs = require("../fable-library.3.2.10/MapUtil.js");
var _regExpJs = require("../fable-library.3.2.10/RegExp.js");
class ErrorReason extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "BadPrimitive",
            "BadPrimitiveExtra",
            "BadType",
            "BadField",
            "BadPath",
            "TooSmallArray",
            "FailMessage",
            "BadOneOf"
        ];
    }
}
function ErrorReason$reflection() {
    return _reflectionJs.union_type("Thoth.Json.ErrorReason", [], ErrorReason, ()=>[
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type]
            ],
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type],
                [
                    "Item3", _reflectionJs.string_type]
            ],
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type]
            ],
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type]
            ],
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type],
                [
                    "Item3", _reflectionJs.string_type]
            ],
            [
                [
                    "Item1", _reflectionJs.string_type],
                [
                    "Item2", _reflectionJs.obj_type]
            ],
            [
                [
                    "Item", _reflectionJs.string_type]
            ],
            [
                [
                    "Item",
                    _reflectionJs.list_type(_reflectionJs.string_type)
                ]
            ]
        ]
    );
}
_c = ErrorReason$reflection;
class CaseStrategy extends _typesJs.Union {
    constructor(tag1, ...fields1){
        super();
        this.tag = tag1 | 0;
        this.fields = fields1;
    }
    cases() {
        return [
            "PascalCase",
            "CamelCase",
            "SnakeCase"
        ];
    }
}
function CaseStrategy$reflection() {
    return _reflectionJs.union_type("Thoth.Json.CaseStrategy", [], CaseStrategy, ()=>[
            [],
            [],
            []
        ]
    );
}
_c1 = CaseStrategy$reflection;
class ExtraCoders extends _typesJs.Record {
    constructor(Hash, Coders){
        super();
        this.Hash = Hash;
        this.Coders = Coders;
    }
}
function ExtraCoders$reflection() {
    return _reflectionJs.record_type("Thoth.Json.ExtraCoders", [], ExtraCoders, ()=>[
            [
                "Hash", _reflectionJs.string_type],
            [
                "Coders",
                _reflectionJs.class_type("Microsoft.FSharp.Collections.FSharpMap`2", [_reflectionJs.string_type, _reflectionJs.tuple_type(_reflectionJs.lambda_type(_reflectionJs.obj_type, _reflectionJs.obj_type), _reflectionJs.lambda_type(_reflectionJs.string_type, _reflectionJs.lambda_type(_reflectionJs.obj_type, _reflectionJs.union_type("Microsoft.FSharp.Core.FSharpResult`2", [_reflectionJs.obj_type, _reflectionJs.tuple_type(_reflectionJs.string_type, ErrorReason$reflection())
                    ], _choiceJs.FSharpResult$2, ()=>[
                            [
                                [
                                    "ResultValue", _reflectionJs.obj_type]
                            ],
                            [
                                [
                                    "ErrorValue",
                                    _reflectionJs.tuple_type(_reflectionJs.string_type, ErrorReason$reflection())
                                ]
                            ]
                        ]
                    ))))
                ])
            ]
        ]
    );
}
_c2 = ExtraCoders$reflection;
class Util_Cache$1 {
    constructor(){
        this.cache = new Map([]);
    }
}
function Util_Cache$1$reflection(gen0) {
    return _reflectionJs.class_type("Thoth.Json.Util.Cache`1", [
        gen0
    ], Util_Cache$1);
}
_c3 = Util_Cache$1$reflection;
function Util_Cache$1_$ctor() {
    return new Util_Cache$1();
}
_c4 = Util_Cache$1_$ctor;
function Util_Cache$1__GetOrAdd_43981464(__, key, factory) {
    let matchValue;
    let outArg = null;
    matchValue = [
        _mapUtilJs.tryGetValue(__.cache, key, new _typesJs.FSharpRef(()=>outArg
        , (v)=>{
            outArg = v;
        })),
        outArg
    ];
    if (matchValue[0]) return matchValue[1];
    else {
        const x_1 = factory();
        _mapUtilJs.addToDict(__.cache, key, x_1);
        return x_1;
    }
}
_c5 = Util_Cache$1__GetOrAdd_43981464;
const Util_CachedEncoders = Util_Cache$1_$ctor();
const Util_CachedDecoders = Util_Cache$1_$ctor();
function Util_Casing_lowerFirst(str) {
    return str.slice(void 0, 1).toLowerCase() + str.slice(1, str.length);
}
_c6 = Util_Casing_lowerFirst;
function Util_Casing_convert(caseStrategy, fieldName) {
    switch(caseStrategy.tag){
        case 2:
            return _regExpJs.replace(Util_Casing_lowerFirst(fieldName), "[A-Z]", "_$0").toLowerCase();
        case 0:
            return fieldName;
        default:
            return Util_Casing_lowerFirst(fieldName);
    }
}
_c7 = Util_Casing_convert;
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;
$RefreshReg$(_c, "ErrorReason$reflection");
$RefreshReg$(_c1, "CaseStrategy$reflection");
$RefreshReg$(_c2, "ExtraCoders$reflection");
$RefreshReg$(_c3, "Util_Cache$1$reflection");
$RefreshReg$(_c4, "Util_Cache$1_$ctor");
$RefreshReg$(_c5, "Util_Cache$1__GetOrAdd_43981464");
$RefreshReg$(_c6, "Util_Casing_lowerFirst");
$RefreshReg$(_c7, "Util_Casing_convert");

},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Choice.js":"aEC7Y","../fable-library.3.2.10/MapUtil.js":"g6A37","../fable-library.3.2.10/RegExp.js":"1dET7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g6A37":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keyValueList", ()=>keyValueList
);
// TODO: Move these methods to Map and Set modules
parcelHelpers.export(exports, "containsValue", ()=>containsValue
);
parcelHelpers.export(exports, "tryGetValue", ()=>tryGetValue
);
parcelHelpers.export(exports, "addToSet", ()=>addToSet
);
parcelHelpers.export(exports, "addToDict", ()=>addToDict
);
parcelHelpers.export(exports, "getItemFromDict", ()=>getItemFromDict
);
var _utilJs = require("./Util.js");
var _typesJs = require("./Types.js");
const CaseRules = {
    None: 0,
    LowerFirst: 1,
    SnakeCase: 2,
    SnakeCaseAllCaps: 3,
    KebabCase: 4
};
function dashify(str, separator) {
    return str.replace(/[a-z]?[A-Z]/g, (m)=>m.length === 1 ? m.toLowerCase() : m.charAt(0) + separator + m.charAt(1).toLowerCase()
    );
}
function changeCase(str, caseRule) {
    switch(caseRule){
        case CaseRules.LowerFirst:
            return str.charAt(0).toLowerCase() + str.slice(1);
        case CaseRules.SnakeCase:
            return dashify(str, "_");
        case CaseRules.SnakeCaseAllCaps:
            return dashify(str, "_").toUpperCase();
        case CaseRules.KebabCase:
            return dashify(str, "-");
        case CaseRules.None:
        default:
            return str;
    }
}
function keyValueList(fields, caseRule = CaseRules.None) {
    const obj = {
    };
    const definedCaseRule = caseRule;
    function fail(kvPair) {
        throw new Error("Cannot infer key and value of " + String(kvPair));
    }
    function assign(key, caseRule1, value) {
        key = changeCase(key, caseRule1);
        obj[key] = value;
    }
    for (let kvPair of fields){
        let caseRule1 = CaseRules.None;
        if (kvPair == null) fail(kvPair);
        // Deflate unions and use the defined case rule
        if (kvPair instanceof _typesJs.Union) {
            const name = kvPair.cases()[kvPair.tag];
            kvPair = kvPair.fields.length === 0 ? name : [
                name
            ].concat(kvPair.fields);
            caseRule1 = definedCaseRule;
        }
        if (Array.isArray(kvPair)) switch(kvPair.length){
            case 0:
                fail(kvPair);
                break;
            case 1:
                assign(kvPair[0], caseRule1, true);
                break;
            case 2:
                const value = kvPair[1];
                assign(kvPair[0], caseRule1, value);
                break;
            default:
                assign(kvPair[0], caseRule1, kvPair.slice(1));
        }
        else if (typeof kvPair === "string") assign(kvPair, caseRule1, true);
        else fail(kvPair);
    }
    return obj;
}
function containsValue(v, map) {
    for (const kv of map){
        if (_utilJs.equals(v, kv[1])) return true;
    }
    return false;
}
function tryGetValue(map, key, defaultValue) {
    if (map.has(key)) {
        defaultValue.contents = map.get(key);
        return true;
    }
    return false;
}
function addToSet(v, set) {
    if (set.has(v)) return false;
    set.add(v);
    return true;
}
function addToDict(dict, k, v) {
    if (dict.has(k)) throw new Error("An item with the same key has already been added. Key: " + k);
    dict.set(k, v);
}
function getItemFromDict(map, key) {
    if (map.has(key)) return map.get(key);
    else throw new Error(`The given key '${key}' was not present in the dictionary.`);
}

},{"./Util.js":"e4VZ7","./Types.js":"7IOW0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cIuXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Helpers_isUndefined", ()=>Helpers_isUndefined
);
parcelHelpers.export(exports, "fromValue", ()=>fromValue
);
parcelHelpers.export(exports, "fromString", ()=>fromString
);
parcelHelpers.export(exports, "unsafeFromString", ()=>unsafeFromString
);
parcelHelpers.export(exports, "decodeValue", ()=>decodeValue
);
parcelHelpers.export(exports, "decodeString", ()=>decodeString
);
parcelHelpers.export(exports, "string", ()=>string
);
parcelHelpers.export(exports, "guid", ()=>guid
);
parcelHelpers.export(exports, "unit", ()=>unit
);
parcelHelpers.export(exports, "sbyte", ()=>sbyte
);
parcelHelpers.export(exports, "byte", ()=>byte
);
parcelHelpers.export(exports, "int16", ()=>int16
);
parcelHelpers.export(exports, "uint16", ()=>uint16
);
parcelHelpers.export(exports, "int", ()=>int
);
parcelHelpers.export(exports, "uint32", ()=>uint32
);
parcelHelpers.export(exports, "int64", ()=>int64
);
parcelHelpers.export(exports, "uint64", ()=>uint64
);
parcelHelpers.export(exports, "bigint", ()=>bigint
);
parcelHelpers.export(exports, "bool", ()=>bool
);
parcelHelpers.export(exports, "float", ()=>float
);
parcelHelpers.export(exports, "float32", ()=>float32
);
parcelHelpers.export(exports, "decimal", ()=>decimal
);
parcelHelpers.export(exports, "datetime", ()=>datetime
);
parcelHelpers.export(exports, "datetimeOffset", ()=>datetimeOffset
);
parcelHelpers.export(exports, "timespan", ()=>timespan
);
parcelHelpers.export(exports, "optional", ()=>optional
);
parcelHelpers.export(exports, "optionalAt", ()=>optionalAt
);
parcelHelpers.export(exports, "field", ()=>field
);
parcelHelpers.export(exports, "at", ()=>at
);
parcelHelpers.export(exports, "index", ()=>index
);
parcelHelpers.export(exports, "option", ()=>option
);
parcelHelpers.export(exports, "list", ()=>list
);
parcelHelpers.export(exports, "seq", ()=>seq
);
parcelHelpers.export(exports, "array", ()=>array
);
parcelHelpers.export(exports, "keys", ()=>keys
);
parcelHelpers.export(exports, "keyValuePairs", ()=>keyValuePairs
);
parcelHelpers.export(exports, "oneOf", ()=>oneOf
);
parcelHelpers.export(exports, "nil", ()=>nil
);
parcelHelpers.export(exports, "value", ()=>value
);
parcelHelpers.export(exports, "succeed", ()=>succeed
);
parcelHelpers.export(exports, "fail", ()=>fail
);
parcelHelpers.export(exports, "andThen", ()=>andThen
);
parcelHelpers.export(exports, "all", ()=>all
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "map2", ()=>map2
);
parcelHelpers.export(exports, "map3", ()=>map3
);
parcelHelpers.export(exports, "map4", ()=>map4
);
parcelHelpers.export(exports, "map5", ()=>map5
);
parcelHelpers.export(exports, "map6", ()=>map6
);
parcelHelpers.export(exports, "map7", ()=>map7
);
parcelHelpers.export(exports, "map8", ()=>map8
);
parcelHelpers.export(exports, "dict", ()=>dict
);
parcelHelpers.export(exports, "Getters$1", ()=>Getters$1
);
parcelHelpers.export(exports, "Getters$1$reflection", ()=>Getters$1$reflection
);
parcelHelpers.export(exports, "Getters$1_$ctor_4A51B60E", ()=>Getters$1_$ctor_4A51B60E
);
parcelHelpers.export(exports, "Getters$1__get_Errors", ()=>Getters$1__get_Errors
);
parcelHelpers.export(exports, "object", ()=>object
);
parcelHelpers.export(exports, "tuple2", ()=>tuple2
);
parcelHelpers.export(exports, "tuple3", ()=>tuple3
);
parcelHelpers.export(exports, "tuple4", ()=>tuple4
);
parcelHelpers.export(exports, "tuple5", ()=>tuple5
);
parcelHelpers.export(exports, "tuple6", ()=>tuple6
);
parcelHelpers.export(exports, "tuple7", ()=>tuple7
);
parcelHelpers.export(exports, "tuple8", ()=>tuple8
);
parcelHelpers.export(exports, "Auto", ()=>Auto
);
parcelHelpers.export(exports, "Auto$reflection", ()=>Auto$reflection
);
parcelHelpers.export(exports, "Auto_generateBoxedDecoderCached_79988AEF", ()=>Auto_generateBoxedDecoderCached_79988AEF
);
parcelHelpers.export(exports, "Auto_generateBoxedDecoder_79988AEF", ()=>Auto_generateBoxedDecoder_79988AEF
);
var _stringJs = require("../fable-library.3.2.10/String.js");
var _choiceJs = require("../fable-library.3.2.10/Choice.js");
var _typesFsJs = require("./Types.fs.js");
var _guidJs = require("../fable-library.3.2.10/Guid.js");
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _int32Js = require("../fable-library.3.2.10/Int32.js");
var _longJs = require("../fable-library.3.2.10/Long.js");
var _bigIntJs = require("../fable-library.3.2.10/BigInt.js");
var _decimalJs = require("../fable-library.3.2.10/Decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
var _dateJs = require("../fable-library.3.2.10/Date.js");
var _dateOffsetJs = require("../fable-library.3.2.10/DateOffset.js");
var _timeSpanJs = require("../fable-library.3.2.10/TimeSpan.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
var _listJs = require("../fable-library.3.2.10/List.js");
var _utilJs = require("../fable-library.3.2.10/Util.js");
var _arrayJs = require("../fable-library.3.2.10/Array.js");
var _seqJs = require("../fable-library.3.2.10/Seq.js");
var _mapJs = require("../fable-library.3.2.10/Map.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _setJs = require("../fable-library.3.2.10/Set.js");
function Helpers_isUndefined(o) {
    return typeof o === "undefined";
}
_c = Helpers_isUndefined;
function genericMsg(msg, value_1, newLine) {
    try {
        return "Expecting " + msg + " but instead got:" + (newLine ? "\n" : " ") + (JSON.stringify(value_1, null, 4) + '');
    } catch (matchValue) {
        return "Expecting " + msg + " but decoder failed. Couldn\u0027t report given value due to circular structure." + (newLine ? "\n" : " ");
    }
}
function errorToString(path, error) {
    const reason_1 = error.tag === 2 ? genericMsg(error.fields[0], error.fields[1], true) : error.tag === 1 ? genericMsg(error.fields[0], error.fields[1], false) + "\nReason: " + error.fields[2] : error.tag === 3 ? genericMsg(error.fields[0], error.fields[1], true) : error.tag === 4 ? genericMsg(error.fields[0], error.fields[1], true) + ("\nNode `" + error.fields[2] + "` is unkown.") : error.tag === 5 ? "Expecting " + error.fields[0] + ".\n" + (JSON.stringify(error.fields[1], null, 4) + '') : error.tag === 7 ? "The following errors were found:\n\n" + _stringJs.join("\n\n", error.fields[0]) : error.tag === 6 ? "The following `failure` occurred with the decoder: " + error.fields[0] : genericMsg(error.fields[0], error.fields[1], false);
    if (error.tag === 7) return reason_1;
    else return "Error at: `" + path + "`\n" + reason_1;
}
function fromValue(path, decoder, value_1) {
    const matchValue = decoder(path, value_1);
    if (matchValue.tag === 1) {
        const error = matchValue.fields[0];
        return new _choiceJs.FSharpResult$2(1, errorToString(error[0], error[1]));
    } else return new _choiceJs.FSharpResult$2(0, matchValue.fields[0]);
}
function fromString(decoder, value_1) {
    try {
        return fromValue("$", decoder, JSON.parse(value_1));
    } catch (matchValue) {
        if (matchValue instanceof SyntaxError) return new _choiceJs.FSharpResult$2(1, "Given an invalid JSON: " + matchValue.message);
        else throw matchValue;
    }
}
function unsafeFromString(decoder, value_1) {
    const matchValue = fromString(decoder, value_1);
    if (matchValue.tag === 1) throw new Error(matchValue.fields[0]);
    else return matchValue.fields[0];
}
function decodeValue(path, decoder) {
    const decoder_1 = decoder;
    return (value_1)=>fromValue(path, decoder_1, value_1)
    ;
}
function decodeString(decoder) {
    const decoder_1 = decoder;
    return (value_1)=>fromString(decoder_1, value_1)
    ;
}
function string(path, value_1) {
    if (typeof value_1 === "string") return new _choiceJs.FSharpResult$2(0, value_1);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a string", value_1)
    ]);
}
function guid(path, value_1) {
    if (typeof value_1 === "string") {
        let matchValue;
        let outArg = "00000000-0000-0000-0000-000000000000";
        matchValue = [
            _guidJs.tryParse(value_1, new _typesJs.FSharpRef(()=>outArg
            , (v)=>{
                outArg = v;
            })),
            outArg
        ];
        if (matchValue[0]) return new _choiceJs.FSharpResult$2(0, matchValue[1]);
        else return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a guid", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a guid", value_1)
    ]);
}
function unit(path, value_1) {
    if (value_1 == null) return new _choiceJs.FSharpResult$2(0, void 0);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "null", value_1)
    ]);
}
const sbyte = (path)=>(value_2)=>{
        const name_1 = "a sbyte";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (-128 <= value_4 ? value_4 <= 127 : false) ? new _choiceJs.FSharpResult$2(0, (value_4 + 128 & 255) - 128) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, false, 8, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v | 0;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const byte = (path)=>(value_2)=>{
        const name_1 = "a byte";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (0 <= value_4 ? value_4 <= 255 : false) ? new _choiceJs.FSharpResult$2(0, value_4 & 255) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, true, 8, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const int16 = (path)=>(value_2)=>{
        const name_1 = "an int16";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (-32768 <= value_4 ? value_4 <= 32767 : false) ? new _choiceJs.FSharpResult$2(0, (value_4 + 32768 & 65535) - 32768) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, false, 16, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v | 0;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const uint16 = (path)=>(value_2)=>{
        const name_1 = "an uint16";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (0 <= value_4 ? value_4 <= 65535 : false) ? new _choiceJs.FSharpResult$2(0, value_4 & 65535) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, true, 16, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const int = (path)=>(value_2)=>{
        const name_1 = "an int";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (-2147483648 <= value_4 ? value_4 <= 2147483647 : false) ? new _choiceJs.FSharpResult$2(0, ~~value_4) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, false, 32, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v | 0;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const uint32 = (path)=>(value_2)=>{
        const name_1 = "an uint32";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (0 <= value_4 ? value_4 <= 4294967295 : false) ? new _choiceJs.FSharpResult$2(0, value_4 >>> 0) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = 0;
            matchValue = [
                _int32Js.tryParse(value_3, 511, true, 32, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const int64 = (path)=>(value_2)=>{
        const name_1 = "an int64";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (_longJs.toNumber(_longJs.fromBits(0, 2147483648, false)) <= value_4 ? value_4 <= _longJs.toNumber(_longJs.fromBits(4294967295, 2147483647, false)) : false) ? new _choiceJs.FSharpResult$2(0, _longJs.fromNumber(value_4, false)) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = _longJs.fromInt(0);
            matchValue = [
                _longJs.tryParse(value_3, 511, false, 64, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
const uint64 = (path)=>(value_2)=>{
        const name_1 = "an uint64";
        const path_1 = path;
        const value_3 = value_2;
        if (typeof value_3 === "number") {
            const value_4 = value_3;
            return isFinite(value_4) && Math.floor(value_4) === value_4 ? (_longJs.toNumber(_longJs.fromBits(0, 0, true)) <= value_4 ? value_4 <= _longJs.toNumber(_longJs.fromBits(4294967295, 4294967295, true)) : false) ? new _choiceJs.FSharpResult$2(0, _longJs.fromNumber(value_4, true)) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value was either too large or too small for " + name_1)
            ]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(1, name_1, value_4, "Value is not an integral value")
            ]);
        } else if (typeof value_3 === "string") {
            let matchValue;
            let outArg = _longJs.fromInt(0);
            matchValue = [
                _longJs.tryParse(value_3, 511, true, 64, new _typesJs.FSharpRef(()=>outArg
                , (v)=>{
                    outArg = v;
                })),
                outArg
            ];
            return matchValue[0] ? new _choiceJs.FSharpResult$2(0, matchValue[1]) : new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, name_1, value_3)
            ]);
        } else return new _choiceJs.FSharpResult$2(1, [
            path_1,
            new _typesFsJs.ErrorReason(0, name_1, value_3)
        ]);
    }
;
function bigint(path, value_1) {
    if (typeof value_1 === "number") return new _choiceJs.FSharpResult$2(0, _bigIntJs.fromInt32(value_1));
    else if (typeof value_1 === "string") try {
        return new _choiceJs.FSharpResult$2(0, _bigIntJs.parse(value_1));
    } catch (matchValue) {
        return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a bigint", value_1)
        ]);
    }
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a bigint", value_1)
    ]);
}
function bool(path, value_1) {
    if (typeof value_1 === "boolean") return new _choiceJs.FSharpResult$2(0, value_1);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a boolean", value_1)
    ]);
}
function float(path, value_1) {
    if (typeof value_1 === "number") return new _choiceJs.FSharpResult$2(0, value_1);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a float", value_1)
    ]);
}
function float32(path, value_1) {
    if (typeof value_1 === "number") return new _choiceJs.FSharpResult$2(0, value_1);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a float32", value_1)
    ]);
}
function decimal(path, value_1) {
    if (typeof value_1 === "number") return new _choiceJs.FSharpResult$2(0, new _decimalJsDefault.default(value_1));
    else if (typeof value_1 === "string") {
        let matchValue;
        let outArg = new _decimalJsDefault.default(0);
        matchValue = [
            _decimalJs.tryParse(value_1, new _typesJs.FSharpRef(()=>outArg
            , (v)=>{
                outArg = v;
            })),
            outArg
        ];
        if (matchValue[0]) return new _choiceJs.FSharpResult$2(0, matchValue[1]);
        else return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a decimal", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a decimal", value_1)
    ]);
}
function datetime(path, value_1) {
    if (typeof value_1 === "string") {
        let matchValue;
        let outArg = _dateJs.minValue();
        matchValue = [
            _dateJs.tryParse(value_1, new _typesJs.FSharpRef(()=>outArg
            , (v)=>{
                outArg = v;
            })),
            outArg
        ];
        if (matchValue[0]) return new _choiceJs.FSharpResult$2(0, _dateJs.toUniversalTime(matchValue[1]));
        else return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a datetime", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a datetime", value_1)
    ]);
}
function datetimeOffset(path, value_1) {
    if (typeof value_1 === "string") {
        let matchValue;
        let outArg = _dateOffsetJs.minValue();
        matchValue = [
            _dateOffsetJs.tryParse(value_1, new _typesJs.FSharpRef(()=>outArg
            , (v)=>{
                outArg = v;
            })),
            outArg
        ];
        if (matchValue[0]) return new _choiceJs.FSharpResult$2(0, matchValue[1]);
        else return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a datetimeoffset", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a datetime", value_1)
    ]);
}
function timespan(path, value_1) {
    if (typeof value_1 === "string") {
        let matchValue;
        let outArg = 0;
        matchValue = [
            _timeSpanJs.tryParse(value_1, new _typesJs.FSharpRef(()=>outArg
            , (v)=>{
                outArg = v;
            })),
            outArg
        ];
        if (matchValue[0]) return new _choiceJs.FSharpResult$2(0, matchValue[1]);
        else return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(0, "a timespan", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a timespan", value_1)
    ]);
}
function decodeMaybeNull(path, decoder, value_1) {
    const matchValue = decoder(path, value_1);
    if (matchValue.tag === 1) {
        if (value_1 == null) return new _choiceJs.FSharpResult$2(0, void 0);
        else if (matchValue.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
        else throw new Error("Match failure");
    } else return new _choiceJs.FSharpResult$2(0, _optionJs.some(matchValue.fields[0]));
}
function optional(fieldName, decoder, path, value_1) {
    if (value_1 === null ? false : Object.getPrototypeOf(value_1 || false) === Object.prototype) {
        const fieldValue = value_1[fieldName];
        if (Helpers_isUndefined(fieldValue)) return new _choiceJs.FSharpResult$2(0, void 0);
        else return decodeMaybeNull(path + "." + fieldName, decoder, fieldValue);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(2, "an object", value_1)
    ]);
}
function badPathError(fieldNames, currentPath, value_1) {
    return new _choiceJs.FSharpResult$2(1, [
        _optionJs.defaultArg(currentPath, _stringJs.join(".", _listJs.cons("$", fieldNames))),
        new _typesFsJs.ErrorReason(4, "an object with path `" + _stringJs.join(".", fieldNames) + "`", value_1, _optionJs.defaultArg(_listJs.tryLast(fieldNames), ""))
    ]);
}
function optionalAt(fieldNames, decoder, firstPath, firstValue) {
    const _arg1 = _listJs.fold(_utilJs.uncurry(2, (tupledArg)=>{
        const curPath = tupledArg[0];
        const curValue = tupledArg[1];
        const res = tupledArg[2];
        return (field_1)=>res == null ? curValue == null ? [
                curPath,
                curValue,
                new _choiceJs.FSharpResult$2(0, void 0)
            ] : (curValue === null ? false : Object.getPrototypeOf(curValue || false) === Object.prototype) ? [
                curPath + "." + field_1,
                curValue[field_1],
                void 0
            ] : [
                curPath,
                curValue,
                new _choiceJs.FSharpResult$2(1, [
                    curPath,
                    new _typesFsJs.ErrorReason(2, "an object", curValue)
                ])
            ] : [
                curPath,
                curValue,
                res
            ]
        ;
    }), [
        firstPath,
        firstValue,
        void 0
    ], fieldNames);
    if (_arg1[2] == null) {
        const lastValue = _arg1[1];
        if (Helpers_isUndefined(lastValue)) return new _choiceJs.FSharpResult$2(0, void 0);
        else return decodeMaybeNull(_arg1[0], decoder, lastValue);
    } else return _arg1[2];
}
function field(fieldName, decoder, path, value_1) {
    if (value_1 === null ? false : Object.getPrototypeOf(value_1 || false) === Object.prototype) {
        const fieldValue = value_1[fieldName];
        if (Helpers_isUndefined(fieldValue)) return new _choiceJs.FSharpResult$2(1, [
            path,
            new _typesFsJs.ErrorReason(3, "an object with a field named `" + fieldName + "`", value_1)
        ]);
        else return decoder(path + "." + fieldName, fieldValue);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(2, "an object", value_1)
    ]);
}
function at(fieldNames, decoder, firstPath, firstValue) {
    const _arg1 = _listJs.fold(_utilJs.uncurry(2, (tupledArg)=>{
        const curPath = tupledArg[0];
        const curValue = tupledArg[1];
        const res = tupledArg[2];
        return (field_1)=>{
            if (res == null) {
                if (curValue == null) return [
                    curPath,
                    curValue,
                    badPathError(fieldNames, curPath, firstValue)
                ];
                else if (curValue === null ? false : Object.getPrototypeOf(curValue || false) === Object.prototype) {
                    const curValue_1 = curValue[field_1];
                    return Helpers_isUndefined(curValue_1) ? [
                        curPath,
                        curValue_1,
                        badPathError(fieldNames, void 0, firstValue)
                    ] : [
                        curPath + "." + field_1,
                        curValue_1,
                        void 0
                    ];
                } else return [
                    curPath,
                    curValue,
                    new _choiceJs.FSharpResult$2(1, [
                        curPath,
                        new _typesFsJs.ErrorReason(2, "an object", curValue)
                    ])
                ];
            } else return [
                curPath,
                curValue,
                res
            ];
        };
    }), [
        firstPath,
        firstValue,
        void 0
    ], fieldNames);
    if (_arg1[2] == null) return decoder(_arg1[0], _arg1[1]);
    else return _arg1[2];
}
function index(requestedIndex, decoder, path, value_1) {
    let copyOfStruct;
    const currentPath = path + ".[" + _utilJs.int32ToString(requestedIndex) + "]";
    if (Array.isArray(value_1)) {
        const vArray = value_1;
        if (requestedIndex < vArray.length) return decoder(currentPath, vArray[requestedIndex]);
        else return new _choiceJs.FSharpResult$2(1, [
            currentPath,
            new _typesFsJs.ErrorReason(5, "a longer array. Need index `" + _utilJs.int32ToString(requestedIndex) + "` but there are only `" + (copyOfStruct = vArray.length, _utilJs.int32ToString(copyOfStruct)) + "` entries", value_1)
        ]);
    } else return new _choiceJs.FSharpResult$2(1, [
        currentPath,
        new _typesFsJs.ErrorReason(0, "an array", value_1)
    ]);
}
function option(decoder, path, value_1) {
    if (value_1 == null) return new _choiceJs.FSharpResult$2(0, void 0);
    else return _choiceJs.Result_Map((arg0)=>_optionJs.some(arg0)
    , decoder(path, value_1));
}
function list(decoder, path, value_1) {
    if (Array.isArray(value_1)) {
        let i = -1;
        return _choiceJs.Result_Map((list_1)=>_listJs.reverse(list_1)
        , _arrayJs.fold((acc, value_2)=>{
            i = i + 1 | 0;
            if (acc.tag === 0) {
                const matchValue = decoder(path + ".[" + _utilJs.int32ToString(i) + "]", value_2);
                if (matchValue.tag === 0) return new _choiceJs.FSharpResult$2(0, _listJs.cons(matchValue.fields[0], acc.fields[0]));
                else return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
            } else return acc;
        }, new _choiceJs.FSharpResult$2(0, _listJs.empty()), value_1));
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a list", value_1)
    ]);
}
function seq(decoder, path, value_1) {
    if (Array.isArray(value_1)) {
        let i = -1;
        return _choiceJs.Result_Map((source)=>_seqJs.reverse(source)
        , _arrayJs.fold((acc, value_2)=>{
            i = i + 1 | 0;
            if (acc.tag === 0) {
                const matchValue = decoder(path + ".[" + _utilJs.int32ToString(i) + "]", value_2);
                if (matchValue.tag === 0) return new _choiceJs.FSharpResult$2(0, _seqJs.append([
                    matchValue.fields[0]
                ], acc.fields[0]));
                else return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
            } else return acc;
        }, new _choiceJs.FSharpResult$2(0, []), value_1));
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "a seq", value_1)
    ]);
}
function array(decoder, path, value_1) {
    if (Array.isArray(value_1)) {
        let i = -1;
        const tokens = value_1;
        return _arrayJs.fold((acc, value_2)=>{
            i = i + 1 | 0;
            if (acc.tag === 0) {
                const acc_1 = acc.fields[0];
                const matchValue = decoder(path + ".[" + _utilJs.int32ToString(i) + "]", value_2);
                if (matchValue.tag === 0) {
                    acc_1[i] = matchValue.fields[0];
                    return new _choiceJs.FSharpResult$2(0, acc_1);
                } else return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
            } else return acc;
        }, new _choiceJs.FSharpResult$2(0, _arrayJs.fill(new Array(tokens.length), 0, tokens.length, null)), tokens);
    } else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "an array", value_1)
    ]);
}
function keys(path, value_1) {
    if (value_1 === null ? false : Object.getPrototypeOf(value_1 || false) === Object.prototype) return new _choiceJs.FSharpResult$2(0, _listJs.ofSeq(Object.keys(value_1)));
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "an object", value_1)
    ]);
}
function keyValuePairs(decoder, path, value_1) {
    const matchValue = keys(path, value_1);
    if (matchValue.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
    else return _choiceJs.Result_Map((list_2)=>_listJs.reverse(list_2)
    , _listJs.fold((acc, prop)=>{
        if (acc.tag === 0) {
            const matchValue_1 = decoder(path, value_1[prop]);
            if (matchValue_1.tag === 0) return new _choiceJs.FSharpResult$2(0, _listJs.cons([
                prop,
                matchValue_1.fields[0]
            ], acc.fields[0]));
            else return new _choiceJs.FSharpResult$2(1, matchValue_1.fields[0]);
        } else return acc;
    }, new _choiceJs.FSharpResult$2(0, _listJs.empty()), matchValue.fields[0]));
}
function oneOf(decoders, path, value_1) {
    const runner = (decoders_1_mut, errors_mut)=>{
        runner: while(true){
            const decoders_1 = decoders_1_mut, errors = errors_mut;
            if (_listJs.isEmpty(decoders_1)) return new _choiceJs.FSharpResult$2(1, [
                path,
                new _typesFsJs.ErrorReason(7, errors)
            ]);
            else {
                const matchValue = fromValue(path, _utilJs.uncurry(2, _listJs.head(decoders_1)), value_1);
                if (matchValue.tag === 1) {
                    decoders_1_mut = _listJs.tail(decoders_1);
                    errors_mut = _listJs.append(errors, _listJs.singleton(matchValue.fields[0]));
                    continue runner;
                } else return new _choiceJs.FSharpResult$2(0, matchValue.fields[0]);
            }
            break;
        }
    };
    return runner(decoders, _listJs.empty());
}
function nil(output, path, value_1) {
    if (value_1 == null) return new _choiceJs.FSharpResult$2(0, output);
    else return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(0, "null", value_1)
    ]);
}
function value(_arg1, v) {
    return new _choiceJs.FSharpResult$2(0, v);
}
function succeed(output, _arg2, _arg1) {
    return new _choiceJs.FSharpResult$2(0, output);
}
function fail(msg, path, _arg1) {
    return new _choiceJs.FSharpResult$2(1, [
        path,
        new _typesFsJs.ErrorReason(6, msg)
    ]);
}
function andThen(cb, decoder, path, value_1) {
    const matchValue = decoder(path, value_1);
    if (matchValue.tag === 0) return cb(matchValue.fields[0], path, value_1);
    else return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
}
function all(decoders, path, value_1) {
    const runner = (decoders_1_mut, values_mut)=>{
        runner: while(true){
            const decoders_1 = decoders_1_mut, values = values_mut;
            if (_listJs.isEmpty(decoders_1)) return new _choiceJs.FSharpResult$2(0, values);
            else {
                const matchValue = _listJs.head(decoders_1)(path)(value_1);
                if (matchValue.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
                else {
                    decoders_1_mut = _listJs.tail(decoders_1);
                    values_mut = _listJs.append(values, _listJs.singleton(matchValue.fields[0]));
                    continue runner;
                }
            }
            break;
        }
    };
    return runner(decoders, _listJs.empty());
}
function map(ctor, d1, path, value_1) {
    const matchValue = d1(path, value_1);
    if (matchValue.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
    else return new _choiceJs.FSharpResult$2(0, ctor(matchValue.fields[0]));
}
function map2(ctor, d1, d2, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0]));
    }
}
function map3(ctor, d1, d2, d3, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0]));
        }
    }
}
function map4(ctor, d1, d2, d3, d4, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1),
        d4(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else {
                const copyOfStruct_3 = matchValue[3];
                if (copyOfStruct_3.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_3.fields[0]);
                else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0]));
            }
        }
    }
}
function map5(ctor, d1, d2, d3, d4, d5, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1),
        d4(path, value_1),
        d5(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else {
                const copyOfStruct_3 = matchValue[3];
                if (copyOfStruct_3.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_3.fields[0]);
                else {
                    const copyOfStruct_4 = matchValue[4];
                    if (copyOfStruct_4.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_4.fields[0]);
                    else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0]));
                }
            }
        }
    }
}
function map6(ctor, d1, d2, d3, d4, d5, d6, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1),
        d4(path, value_1),
        d5(path, value_1),
        d6(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else {
                const copyOfStruct_3 = matchValue[3];
                if (copyOfStruct_3.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_3.fields[0]);
                else {
                    const copyOfStruct_4 = matchValue[4];
                    if (copyOfStruct_4.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_4.fields[0]);
                    else {
                        const copyOfStruct_5 = matchValue[5];
                        if (copyOfStruct_5.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_5.fields[0]);
                        else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0]));
                    }
                }
            }
        }
    }
}
function map7(ctor, d1, d2, d3, d4, d5, d6, d7, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1),
        d4(path, value_1),
        d5(path, value_1),
        d6(path, value_1),
        d7(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else {
                const copyOfStruct_3 = matchValue[3];
                if (copyOfStruct_3.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_3.fields[0]);
                else {
                    const copyOfStruct_4 = matchValue[4];
                    if (copyOfStruct_4.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_4.fields[0]);
                    else {
                        const copyOfStruct_5 = matchValue[5];
                        if (copyOfStruct_5.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_5.fields[0]);
                        else {
                            const copyOfStruct_6 = matchValue[6];
                            if (copyOfStruct_6.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_6.fields[0]);
                            else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0], copyOfStruct_6.fields[0]));
                        }
                    }
                }
            }
        }
    }
}
function map8(ctor, d1, d2, d3, d4, d5, d6, d7, d8, path, value_1) {
    const matchValue = [
        d1(path, value_1),
        d2(path, value_1),
        d3(path, value_1),
        d4(path, value_1),
        d5(path, value_1),
        d6(path, value_1),
        d7(path, value_1),
        d8(path, value_1)
    ];
    const copyOfStruct = matchValue[0];
    if (copyOfStruct.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct.fields[0]);
    else {
        const copyOfStruct_1 = matchValue[1];
        if (copyOfStruct_1.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_1.fields[0]);
        else {
            const copyOfStruct_2 = matchValue[2];
            if (copyOfStruct_2.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_2.fields[0]);
            else {
                const copyOfStruct_3 = matchValue[3];
                if (copyOfStruct_3.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_3.fields[0]);
                else {
                    const copyOfStruct_4 = matchValue[4];
                    if (copyOfStruct_4.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_4.fields[0]);
                    else {
                        const copyOfStruct_5 = matchValue[5];
                        if (copyOfStruct_5.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_5.fields[0]);
                        else {
                            const copyOfStruct_6 = matchValue[6];
                            if (copyOfStruct_6.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_6.fields[0]);
                            else {
                                const copyOfStruct_7 = matchValue[7];
                                if (copyOfStruct_7.tag === 1) return new _choiceJs.FSharpResult$2(1, copyOfStruct_7.fields[0]);
                                else return new _choiceJs.FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0], copyOfStruct_6.fields[0], copyOfStruct_7.fields[0]));
                            }
                        }
                    }
                }
            }
        }
    }
}
function dict(decoder) {
    let d1;
    const decoder_1 = decoder;
    d1 = (path)=>(value_1)=>keyValuePairs(decoder_1, path, value_1)
    ;
    return (path_1)=>(value_2)=>map((elements)=>_mapJs.ofList(elements)
            , _utilJs.uncurry(2, d1), path_1, value_2)
    ;
}
function unwrapWith(errors, path, decoder, value_1) {
    const matchValue = decoder(path, value_1);
    if (matchValue.tag === 1) {
        errors.push(matchValue.fields[0]);
        return null;
    } else return matchValue.fields[0];
}
class Getters$1 {
    constructor(path, v){
        let _this, _this_1;
        this.errors = [];
        this.required = (_this = this, {
            Field (fieldName, decoder) {
                return unwrapWith(_this.errors, path, (path_1, value_1)=>field(fieldName, decoder, path_1, value_1)
                , v);
            },
            At (fieldNames, decoder_2) {
                return unwrapWith(_this.errors, path, (firstPath, firstValue)=>at(fieldNames, decoder_2, firstPath, firstValue)
                , v);
            },
            Raw (decoder_4) {
                return unwrapWith(_this.errors, path, decoder_4, v);
            }
        });
        this.optional = (_this_1 = this, {
            Field (fieldName_1, decoder_5) {
                return unwrapWith(_this_1.errors, path, (path_2, value_2)=>optional(fieldName_1, decoder_5, path_2, value_2)
                , v);
            },
            At (fieldNames_1, decoder_7) {
                return unwrapWith(_this_1.errors, path, (firstPath_1, firstValue_1)=>optionalAt(fieldNames_1, decoder_7, firstPath_1, firstValue_1)
                , v);
            },
            Raw (decoder_9) {
                const matchValue = decoder_9(path, v);
                if (matchValue.tag === 1) {
                    const reason = matchValue.fields[0][1];
                    const error = matchValue.fields[0];
                    let pattern_matching_result, v_2;
                    switch(reason.tag){
                        case 1:
                            pattern_matching_result = 0;
                            v_2 = reason.fields[1];
                            break;
                        case 2:
                            pattern_matching_result = 0;
                            v_2 = reason.fields[1];
                            break;
                        case 3:
                        case 4:
                            pattern_matching_result = 1;
                            break;
                        case 5:
                        case 6:
                        case 7:
                            pattern_matching_result = 2;
                            break;
                        default:
                            pattern_matching_result = 0;
                            v_2 = reason.fields[1];
                    }
                    switch(pattern_matching_result){
                        case 0:
                            if (v_2 == null) return void 0;
                            else {
                                _this_1.errors.push(error);
                                return null;
                            }
                        case 1:
                            return void 0;
                        case 2:
                            _this_1.errors.push(error);
                            return null;
                    }
                } else return _optionJs.some(matchValue.fields[0]);
            }
        });
    }
    get Required() {
        const __ = this;
        return __.required;
    }
    get Optional() {
        const __ = this;
        return __.optional;
    }
}
function Getters$1$reflection(gen0) {
    return _reflectionJs.class_type("Thoth.Json.Decode.Getters`1", [
        gen0
    ], Getters$1);
}
_c1 = Getters$1$reflection;
function Getters$1_$ctor_4A51B60E(path1, v1) {
    return new Getters$1(path1, v1);
}
_c2 = Getters$1_$ctor_4A51B60E;
function Getters$1__get_Errors(__) {
    return _seqJs.toList(__.errors);
}
_c3 = Getters$1__get_Errors;
function object(builder, path1, v1) {
    const getters = Getters$1_$ctor_4A51B60E(path1, v1);
    const result = builder(getters);
    const matchValue = Getters$1__get_Errors(getters);
    if (!_listJs.isEmpty(matchValue)) {
        const errors = matchValue;
        if (_listJs.length(errors) > 1) return new _choiceJs.FSharpResult$2(1, [
            path1,
            new _typesFsJs.ErrorReason(7, _listJs.map((tupledArg)=>errorToString(tupledArg[0], tupledArg[1])
            , errors))
        ]);
        else return new _choiceJs.FSharpResult$2(1, _listJs.head(matchValue));
    } else return new _choiceJs.FSharpResult$2(0, result);
}
function tuple2(decoder1, decoder2) {
    let decoder_3;
    const decoder = decoder1;
    decoder_3 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_3)=>(value_4)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_2;
                const decoder_1 = decoder2;
                decoder_2 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_2)=>(value_3)=>andThen((v2, arg10$0040, arg20$0040)=>succeed([
                                v1,
                                v2
                            ], arg10$0040, arg20$0040)
                        , _utilJs.uncurry(2, decoder_2), path_2, value_3)
                ;
            }), _utilJs.uncurry(2, decoder_3), path_3, value_4)
    ;
}
function tuple3(decoder1, decoder2, decoder3) {
    let decoder_5;
    const decoder = decoder1;
    decoder_5 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_5)=>(value_6)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_4;
                const decoder_1 = decoder2;
                decoder_4 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_4)=>(value_5)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_3;
                            const decoder_2 = decoder3;
                            decoder_3 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_3)=>(value_4)=>andThen((v3, arg10$0040, arg20$0040)=>succeed([
                                            v1,
                                            v2,
                                            v3
                                        ], arg10$0040, arg20$0040)
                                    , _utilJs.uncurry(2, decoder_3), path_3, value_4)
                            ;
                        }), _utilJs.uncurry(2, decoder_4), path_4, value_5)
                ;
            }), _utilJs.uncurry(2, decoder_5), path_5, value_6)
    ;
}
function tuple4(decoder1, decoder2, decoder3, decoder4) {
    let decoder_7;
    const decoder = decoder1;
    decoder_7 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_7)=>(value_8)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_6;
                const decoder_1 = decoder2;
                decoder_6 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_6)=>(value_7)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_5;
                            const decoder_2 = decoder3;
                            decoder_5 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_5)=>(value_6)=>andThen(_utilJs.uncurry(3, (v3)=>{
                                        let decoder_4;
                                        const decoder_3 = decoder4;
                                        decoder_4 = (path_3)=>(value_4)=>index(3, decoder_3, path_3, value_4)
                                        ;
                                        return (path_4)=>(value_5)=>andThen((v4, arg10$0040, arg20$0040)=>succeed([
                                                        v1,
                                                        v2,
                                                        v3,
                                                        v4
                                                    ], arg10$0040, arg20$0040)
                                                , _utilJs.uncurry(2, decoder_4), path_4, value_5)
                                        ;
                                    }), _utilJs.uncurry(2, decoder_5), path_5, value_6)
                            ;
                        }), _utilJs.uncurry(2, decoder_6), path_6, value_7)
                ;
            }), _utilJs.uncurry(2, decoder_7), path_7, value_8)
    ;
}
function tuple5(decoder1, decoder2, decoder3, decoder4, decoder5) {
    let decoder_9;
    const decoder = decoder1;
    decoder_9 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_9)=>(value_10)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_8;
                const decoder_1 = decoder2;
                decoder_8 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_8)=>(value_9)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_7;
                            const decoder_2 = decoder3;
                            decoder_7 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_7)=>(value_8)=>andThen(_utilJs.uncurry(3, (v3)=>{
                                        let decoder_6;
                                        const decoder_3 = decoder4;
                                        decoder_6 = (path_3)=>(value_4)=>index(3, decoder_3, path_3, value_4)
                                        ;
                                        return (path_6)=>(value_7)=>andThen(_utilJs.uncurry(3, (v4)=>{
                                                    let decoder_5;
                                                    const decoder_4 = decoder5;
                                                    decoder_5 = (path_4)=>(value_5)=>index(4, decoder_4, path_4, value_5)
                                                    ;
                                                    return (path_5)=>(value_6)=>andThen((v5, arg10$0040, arg20$0040)=>succeed([
                                                                    v1,
                                                                    v2,
                                                                    v3,
                                                                    v4,
                                                                    v5
                                                                ], arg10$0040, arg20$0040)
                                                            , _utilJs.uncurry(2, decoder_5), path_5, value_6)
                                                    ;
                                                }), _utilJs.uncurry(2, decoder_6), path_6, value_7)
                                        ;
                                    }), _utilJs.uncurry(2, decoder_7), path_7, value_8)
                            ;
                        }), _utilJs.uncurry(2, decoder_8), path_8, value_9)
                ;
            }), _utilJs.uncurry(2, decoder_9), path_9, value_10)
    ;
}
function tuple6(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {
    let decoder_11;
    const decoder = decoder1;
    decoder_11 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_11)=>(value_12)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_10;
                const decoder_1 = decoder2;
                decoder_10 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_10)=>(value_11)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_9;
                            const decoder_2 = decoder3;
                            decoder_9 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_9)=>(value_10)=>andThen(_utilJs.uncurry(3, (v3)=>{
                                        let decoder_8;
                                        const decoder_3 = decoder4;
                                        decoder_8 = (path_3)=>(value_4)=>index(3, decoder_3, path_3, value_4)
                                        ;
                                        return (path_8)=>(value_9)=>andThen(_utilJs.uncurry(3, (v4)=>{
                                                    let decoder_7;
                                                    const decoder_4 = decoder5;
                                                    decoder_7 = (path_4)=>(value_5)=>index(4, decoder_4, path_4, value_5)
                                                    ;
                                                    return (path_7)=>(value_8)=>andThen(_utilJs.uncurry(3, (v5)=>{
                                                                let decoder_6;
                                                                const decoder_5 = decoder6;
                                                                decoder_6 = (path_5)=>(value_6)=>index(5, decoder_5, path_5, value_6)
                                                                ;
                                                                return (path_6)=>(value_7)=>andThen((v6, arg10$0040, arg20$0040)=>succeed([
                                                                                v1,
                                                                                v2,
                                                                                v3,
                                                                                v4,
                                                                                v5,
                                                                                v6
                                                                            ], arg10$0040, arg20$0040)
                                                                        , _utilJs.uncurry(2, decoder_6), path_6, value_7)
                                                                ;
                                                            }), _utilJs.uncurry(2, decoder_7), path_7, value_8)
                                                    ;
                                                }), _utilJs.uncurry(2, decoder_8), path_8, value_9)
                                        ;
                                    }), _utilJs.uncurry(2, decoder_9), path_9, value_10)
                            ;
                        }), _utilJs.uncurry(2, decoder_10), path_10, value_11)
                ;
            }), _utilJs.uncurry(2, decoder_11), path_11, value_12)
    ;
}
function tuple7(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7) {
    let decoder_13;
    const decoder = decoder1;
    decoder_13 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_13)=>(value_14)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_12;
                const decoder_1 = decoder2;
                decoder_12 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_12)=>(value_13)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_11;
                            const decoder_2 = decoder3;
                            decoder_11 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_11)=>(value_12)=>andThen(_utilJs.uncurry(3, (v3)=>{
                                        let decoder_10;
                                        const decoder_3 = decoder4;
                                        decoder_10 = (path_3)=>(value_4)=>index(3, decoder_3, path_3, value_4)
                                        ;
                                        return (path_10)=>(value_11)=>andThen(_utilJs.uncurry(3, (v4)=>{
                                                    let decoder_9;
                                                    const decoder_4 = decoder5;
                                                    decoder_9 = (path_4)=>(value_5)=>index(4, decoder_4, path_4, value_5)
                                                    ;
                                                    return (path_9)=>(value_10)=>andThen(_utilJs.uncurry(3, (v5)=>{
                                                                let decoder_8;
                                                                const decoder_5 = decoder6;
                                                                decoder_8 = (path_5)=>(value_6)=>index(5, decoder_5, path_5, value_6)
                                                                ;
                                                                return (path_8)=>(value_9)=>andThen(_utilJs.uncurry(3, (v6)=>{
                                                                            let decoder_7;
                                                                            const decoder_6 = decoder7;
                                                                            decoder_7 = (path_6)=>(value_7)=>index(6, decoder_6, path_6, value_7)
                                                                            ;
                                                                            return (path_7)=>(value_8)=>andThen((v7, arg10$0040, arg20$0040)=>succeed([
                                                                                            v1,
                                                                                            v2,
                                                                                            v3,
                                                                                            v4,
                                                                                            v5,
                                                                                            v6,
                                                                                            v7
                                                                                        ], arg10$0040, arg20$0040)
                                                                                    , _utilJs.uncurry(2, decoder_7), path_7, value_8)
                                                                            ;
                                                                        }), _utilJs.uncurry(2, decoder_8), path_8, value_9)
                                                                ;
                                                            }), _utilJs.uncurry(2, decoder_9), path_9, value_10)
                                                    ;
                                                }), _utilJs.uncurry(2, decoder_10), path_10, value_11)
                                        ;
                                    }), _utilJs.uncurry(2, decoder_11), path_11, value_12)
                            ;
                        }), _utilJs.uncurry(2, decoder_12), path_12, value_13)
                ;
            }), _utilJs.uncurry(2, decoder_13), path_13, value_14)
    ;
}
function tuple8(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7, decoder8) {
    let decoder_15;
    const decoder = decoder1;
    decoder_15 = (path1)=>(value_1)=>index(0, decoder, path1, value_1)
    ;
    return (path_15)=>(value_16)=>andThen(_utilJs.uncurry(3, (v1)=>{
                let decoder_14;
                const decoder_1 = decoder2;
                decoder_14 = (path_1)=>(value_2)=>index(1, decoder_1, path_1, value_2)
                ;
                return (path_14)=>(value_15)=>andThen(_utilJs.uncurry(3, (v2)=>{
                            let decoder_13;
                            const decoder_2 = decoder3;
                            decoder_13 = (path_2)=>(value_3)=>index(2, decoder_2, path_2, value_3)
                            ;
                            return (path_13)=>(value_14)=>andThen(_utilJs.uncurry(3, (v3)=>{
                                        let decoder_12;
                                        const decoder_3 = decoder4;
                                        decoder_12 = (path_3)=>(value_4)=>index(3, decoder_3, path_3, value_4)
                                        ;
                                        return (path_12)=>(value_13)=>andThen(_utilJs.uncurry(3, (v4)=>{
                                                    let decoder_11;
                                                    const decoder_4 = decoder5;
                                                    decoder_11 = (path_4)=>(value_5)=>index(4, decoder_4, path_4, value_5)
                                                    ;
                                                    return (path_11)=>(value_12)=>andThen(_utilJs.uncurry(3, (v5)=>{
                                                                let decoder_10;
                                                                const decoder_5 = decoder6;
                                                                decoder_10 = (path_5)=>(value_6)=>index(5, decoder_5, path_5, value_6)
                                                                ;
                                                                return (path_10)=>(value_11)=>andThen(_utilJs.uncurry(3, (v6)=>{
                                                                            let decoder_9;
                                                                            const decoder_6 = decoder7;
                                                                            decoder_9 = (path_6)=>(value_7)=>index(6, decoder_6, path_6, value_7)
                                                                            ;
                                                                            return (path_9)=>(value_10)=>andThen(_utilJs.uncurry(3, (v7)=>{
                                                                                        let decoder_8;
                                                                                        const decoder_7 = decoder8;
                                                                                        decoder_8 = (path_7)=>(value_8)=>index(7, decoder_7, path_7, value_8)
                                                                                        ;
                                                                                        return (path_8)=>(value_9)=>andThen((v8, arg10$0040, arg20$0040)=>succeed([
                                                                                                        v1,
                                                                                                        v2,
                                                                                                        v3,
                                                                                                        v4,
                                                                                                        v5,
                                                                                                        v6,
                                                                                                        v7,
                                                                                                        v8
                                                                                                    ], arg10$0040, arg20$0040)
                                                                                                , _utilJs.uncurry(2, decoder_8), path_8, value_9)
                                                                                        ;
                                                                                    }), _utilJs.uncurry(2, decoder_9), path_9, value_10)
                                                                            ;
                                                                        }), _utilJs.uncurry(2, decoder_10), path_10, value_11)
                                                                ;
                                                            }), _utilJs.uncurry(2, decoder_11), path_11, value_12)
                                                    ;
                                                }), _utilJs.uncurry(2, decoder_12), path_12, value_13)
                                        ;
                                    }), _utilJs.uncurry(2, decoder_13), path_13, value_14)
                            ;
                        }), _utilJs.uncurry(2, decoder_14), path_14, value_15)
                ;
            }), _utilJs.uncurry(2, decoder_15), path_15, value_16)
    ;
}
function toMap(xs) {
    return _mapJs.ofSeq(xs);
}
function toSet(xs) {
    return _setJs.ofSeq(xs, {
        Compare: (x, y)=>_utilJs.compare(x, y)
    });
}
function autoObject(decoderInfos, path1, value_1) {
    if (!(value_1 === null ? false : Object.getPrototypeOf(value_1 || false) === Object.prototype)) return new _choiceJs.FSharpResult$2(1, [
        path1,
        new _typesFsJs.ErrorReason(0, "an object", value_1)
    ]);
    else return _arrayJs.foldBack(_utilJs.uncurry(2, (tupledArg)=>{
        const name = tupledArg[0];
        return (acc)=>acc.tag === 0 ? _choiceJs.Result_Map((v1)=>_listJs.cons(v1, acc.fields[0])
            , tupledArg[1](path1 + "." + name)(value_1[name])) : acc
        ;
    }), decoderInfos, new _choiceJs.FSharpResult$2(0, _listJs.empty()));
}
function autoObject2(keyDecoder, valueDecoder, path1, value_1) {
    if (!(value_1 === null ? false : Object.getPrototypeOf(value_1 || false) === Object.prototype)) return new _choiceJs.FSharpResult$2(1, [
        path1,
        new _typesFsJs.ErrorReason(0, "an object", value_1)
    ]);
    else return _seqJs.fold((acc, name)=>{
        if (acc.tag === 0) {
            const matchValue = keyDecoder(path1, name);
            if (matchValue.tag === 0) {
                const _arg1 = valueDecoder(path1 + "." + name, value_1[name]);
                if (_arg1.tag === 0) return new _choiceJs.FSharpResult$2(0, _listJs.cons([
                    matchValue.fields[0],
                    _arg1.fields[0]
                ], acc.fields[0]));
                else return new _choiceJs.FSharpResult$2(1, _arg1.fields[0]);
            } else return new _choiceJs.FSharpResult$2(1, matchValue.fields[0]);
        } else return acc;
    }, new _choiceJs.FSharpResult$2(0, _listJs.empty()), Object.keys(value_1));
}
function mixedArray(msg, decoders, path1, values) {
    let arg30, arg10;
    if (decoders.length !== values.length) return new _choiceJs.FSharpResult$2(1, [
        path1,
        new _typesFsJs.ErrorReason(6, (arg30 = values.length | 0, (arg10 = decoders.length | 0, _stringJs.toText(_stringJs.printf("Expected %i %s but got %i"))(arg10)(msg)(arg30))))
    ]);
    else return _arrayJs.foldBack2(_utilJs.uncurry(3, _utilJs.mapCurriedArgs((value_1)=>(decoder)=>(acc)=>acc.tag === 0 ? _choiceJs.Result_Map((v1)=>_listJs.cons(v1, acc.fields[0])
                , decoder(path1, value_1)) : acc
    , [
        0,
        [
            0,
            2
        ],
        0
    ])), values, decoders, new _choiceJs.FSharpResult$2(0, _listJs.empty()));
}
function makeUnion(extra, caseStrategy, t, name, path1, values) {
    const uci = _arrayJs.tryFind((x)=>_reflectionJs.name(x) === name
    , _reflectionJs.getUnionCases(t, true));
    if (uci != null) {
        const uci_1 = uci;
        if (values.length === 0) return new _choiceJs.FSharpResult$2(0, _reflectionJs.makeUnion(uci_1, [], true));
        else return _choiceJs.Result_Map((values_1)=>_reflectionJs.makeUnion(uci_1, _listJs.toArray(values_1), true)
        , mixedArray("union fields", _arrayJs.map((fi)=>autoDecoder(extra, caseStrategy, false, fi[1])
        , _reflectionJs.getUnionCaseFields(uci_1)), path1, values));
    } else return new _choiceJs.FSharpResult$2(1, [
        path1,
        new _typesFsJs.ErrorReason(6, "Cannot find case " + name + " in " + _reflectionJs.fullName(t))
    ]);
}
function autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t) {
    const decoderRef = new _typesJs.FSharpRef(null);
    const extra_1 = _mapJs.add(_reflectionJs.fullName(t), decoderRef, extra);
    let decoder;
    if (_reflectionJs.isRecord(t, true)) {
        const decoders = _arrayJs.map((fi)=>[
                _typesFsJs.Util_Casing_convert(caseStrategy, _reflectionJs.name(fi)),
                autoDecoder(extra_1, caseStrategy, false, fi[1])
            ]
        , _reflectionJs.getRecordElements(t, true));
        decoder = (path1)=>(value_1)=>_choiceJs.Result_Map((xs)=>_reflectionJs.makeRecord(t, _listJs.toArray(xs), true)
                , autoObject(decoders, path1, value_1))
        ;
    } else if (_reflectionJs.isUnion(t, true)) decoder = (path_1)=>(value_2)=>{
            if (typeof value_2 === "string") return makeUnion(extra_1, caseStrategy, t, value_2, path_1, []);
            else if (Array.isArray(value_2)) {
                const values = value_2;
                return makeUnion(extra_1, caseStrategy, t, values[0], path_1, values.slice(1, values.length));
            } else return new _choiceJs.FSharpResult$2(1, [
                path_1,
                new _typesFsJs.ErrorReason(0, "a string or array", value_2)
            ]);
        }
    ;
    else if (isOptional) decoder = (path_2)=>(value_3)=>new _choiceJs.FSharpResult$2(1, [
                path_2,
                new _typesFsJs.ErrorReason(2, "an extra coder for " + _reflectionJs.fullName(t), value_3)
            ])
    ;
    else {
        let message;
        const arg10 = _reflectionJs.fullName(t);
        message = _stringJs.toText(_stringJs.printf("Cannot generate auto decoder for %s. Please pass an extra decoder."))(arg10);
        throw new Error(message);
    }
    decoderRef.contents = decoder;
    return decoder;
}
function autoDecoder(extra, caseStrategy, isOptional, t) {
    let decoder_15;
    const fullname = _reflectionJs.fullName(t);
    const matchValue = _mapJs.tryFind(fullname, extra);
    if (matchValue == null) {
        if (_reflectionJs.isArray(t)) {
            const decoder = autoDecoder(extra, caseStrategy, false, _reflectionJs.getElementType(t));
            return (path_1)=>(value_2)=>array(_utilJs.uncurry(2, decoder), path_1, value_2)
            ;
        } else if (_reflectionJs.isEnum(t)) {
            const enumType = _reflectionJs.fullName(_reflectionJs.getEnumUnderlyingType(t));
            if (enumType === "System.SByte") return (path_2)=>(value_4)=>{
                    const t_2 = t;
                    const path_3 = path_2;
                    const value_5 = value_4;
                    const matchValue_1 = sbyte(path_3)(value_5);
                    if (matchValue_1.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_1.fields[0]);
                    else {
                        const enumValue = matchValue_1.fields[0];
                        return _seqJs.contains(enumValue, _reflectionJs.getEnumValues(t_2), {
                            Equals: (x, y)=>x === y
                            ,
                            GetHashCode: (x)=>_utilJs.numberHash(x)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_2, enumValue.toString())) : new _choiceJs.FSharpResult$2(1, [
                            path_3,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_2), value_5, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else if (enumType === "System.Byte") return (path_4)=>(value_7)=>{
                    const t_3 = t;
                    const path_5 = path_4;
                    const value_8 = value_7;
                    const matchValue_2 = byte(path_5)(value_8);
                    if (matchValue_2.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_2.fields[0]);
                    else {
                        const enumValue_1 = matchValue_2.fields[0];
                        return _seqJs.contains(enumValue_1, _reflectionJs.getEnumValues(t_3), {
                            Equals: (x_1, y_1)=>x_1 === y_1
                            ,
                            GetHashCode: (x_1)=>_utilJs.numberHash(x_1)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_3, enumValue_1.toString())) : new _choiceJs.FSharpResult$2(1, [
                            path_5,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_3), value_8, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else if (enumType === "System.Int16") return (path_6)=>(value_10)=>{
                    const t_4 = t;
                    const path_7 = path_6;
                    const value_11 = value_10;
                    const matchValue_3 = int16(path_7)(value_11);
                    if (matchValue_3.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_3.fields[0]);
                    else {
                        const enumValue_2 = matchValue_3.fields[0];
                        return _seqJs.contains(enumValue_2, _reflectionJs.getEnumValues(t_4), {
                            Equals: (x_2, y_2)=>x_2 === y_2
                            ,
                            GetHashCode: (x_2)=>_utilJs.numberHash(x_2)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_4, _utilJs.int16ToString(enumValue_2))) : new _choiceJs.FSharpResult$2(1, [
                            path_7,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_4), value_11, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else if (enumType === "System.UInt16") return (path_8)=>(value_13)=>{
                    const t_5 = t;
                    const path_9 = path_8;
                    const value_14 = value_13;
                    const matchValue_4 = uint16(path_9)(value_14);
                    if (matchValue_4.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_4.fields[0]);
                    else {
                        const enumValue_3 = matchValue_4.fields[0];
                        return _seqJs.contains(enumValue_3, _reflectionJs.getEnumValues(t_5), {
                            Equals: (x_3, y_3)=>x_3 === y_3
                            ,
                            GetHashCode: (x_3)=>_utilJs.numberHash(x_3)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_5, enumValue_3.toString())) : new _choiceJs.FSharpResult$2(1, [
                            path_9,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_5), value_14, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else if (enumType === "System.Int32") return (path_10)=>(value_16)=>{
                    const t_6 = t;
                    const path_11 = path_10;
                    const value_17 = value_16;
                    const matchValue_5 = int(path_11)(value_17);
                    if (matchValue_5.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_5.fields[0]);
                    else {
                        const enumValue_4 = matchValue_5.fields[0];
                        return _seqJs.contains(enumValue_4, _reflectionJs.getEnumValues(t_6), {
                            Equals: (x_4, y_4)=>x_4 === y_4
                            ,
                            GetHashCode: (x_4)=>_utilJs.numberHash(x_4)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_6, _utilJs.int32ToString(enumValue_4))) : new _choiceJs.FSharpResult$2(1, [
                            path_11,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_6), value_17, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else if (enumType === "System.UInt32") return (path_12)=>(value_19)=>{
                    const t_7 = t;
                    const path_13 = path_12;
                    const value_20 = value_19;
                    const matchValue_6 = uint32(path_13)(value_20);
                    if (matchValue_6.tag === 1) return new _choiceJs.FSharpResult$2(1, matchValue_6.fields[0]);
                    else {
                        const enumValue_5 = matchValue_6.fields[0];
                        return _seqJs.contains(enumValue_5, _reflectionJs.getEnumValues(t_7), {
                            Equals: (x_5, y_5)=>x_5 === y_5
                            ,
                            GetHashCode: (x_5)=>_utilJs.numberHash(x_5)
                        }) ? new _choiceJs.FSharpResult$2(0, _reflectionJs.parseEnum(t_7, enumValue_5.toString())) : new _choiceJs.FSharpResult$2(1, [
                            path_13,
                            new _typesFsJs.ErrorReason(1, _reflectionJs.fullName(t_7), value_20, "Unkown value provided for the enum")
                        ]);
                    }
                }
            ;
            else {
                const arg10 = _reflectionJs.fullName(t);
                const clo2 = _stringJs.toFail(_stringJs.printf("Cannot generate auto decoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can\u0027t use one of these types, please pass an extra decoder.\n                    "))(arg10);
                return (arg20)=>{
                    const clo3 = clo2(arg20);
                    return (arg30)=>clo3(arg30)
                    ;
                };
            }
        } else if (_reflectionJs.isGenericType(t)) {
            if (_reflectionJs.isTuple(t)) {
                const decoders = _arrayJs.map((t_8)=>autoDecoder(extra, caseStrategy, false, t_8)
                , _reflectionJs.getTupleElements(t));
                return (path_14)=>(value_21)=>Array.isArray(value_21) ? _choiceJs.Result_Map((xs)=>_reflectionJs.makeTuple(_listJs.toArray(xs), t)
                        , mixedArray("tuple elements", decoders, path_14, value_21)) : new _choiceJs.FSharpResult$2(1, [
                            path_14,
                            new _typesFsJs.ErrorReason(0, "an array", value_21)
                        ])
                ;
            } else {
                const fullname_1 = _reflectionJs.fullName(_reflectionJs.getGenericTypeDefinition(t));
                if (fullname_1 === "Microsoft.FSharp.Core.FSharpOption`1[System.Object]") {
                    const decoder_13 = autoDecoder(extra, caseStrategy, true, _reflectionJs.getGenerics(t)[0]);
                    return (path_15)=>(value_22)=>option(_utilJs.uncurry(2, decoder_13), path_15, value_22)
                    ;
                } else if (fullname_1 === "Microsoft.FSharp.Collections.FSharpList`1[System.Object]") {
                    const decoder_14 = autoDecoder(extra, caseStrategy, false, _reflectionJs.getGenerics(t)[0]);
                    return (path_16)=>(value_23)=>list(_utilJs.uncurry(2, decoder_14), path_16, value_23)
                    ;
                } else if (fullname_1 === "Microsoft.FSharp.Collections.FSharpMap`2[System.Object,System.Object]") {
                    const keyDecoder = autoDecoder(extra, caseStrategy, false, _reflectionJs.getGenerics(t)[0]);
                    const valueDecoder = autoDecoder(extra, caseStrategy, false, _reflectionJs.getGenerics(t)[1]);
                    let d1;
                    const decoders_1 = _listJs.ofArray([
                        (path_17)=>(value_24)=>autoObject2(_utilJs.uncurry(2, keyDecoder), _utilJs.uncurry(2, valueDecoder), path_17, value_24)
                        ,
                        (decoder_15 = tuple2(_utilJs.uncurry(2, keyDecoder), _utilJs.uncurry(2, valueDecoder)), (path_18)=>(value_25)=>list(_utilJs.uncurry(2, decoder_15), path_18, value_25)
                        )
                    ]);
                    d1 = (path_19)=>(value_26)=>oneOf(decoders_1, path_19, value_26)
                    ;
                    return (path_20)=>(value_28)=>map((ar)=>toMap(ar)
                            , _utilJs.uncurry(2, d1), path_20, value_28)
                    ;
                } else if (fullname_1 === "Microsoft.FSharp.Collections.FSharpSet`1[System.Object]") {
                    const decoder_16 = autoDecoder(extra, caseStrategy, false, _reflectionJs.getGenerics(t)[0]);
                    return (path_21)=>(value_29)=>{
                            const matchValue_7 = array(_utilJs.uncurry(2, decoder_16), path_21, value_29);
                            return matchValue_7.tag === 0 ? new _choiceJs.FSharpResult$2(0, toSet(matchValue_7.fields[0])) : new _choiceJs.FSharpResult$2(1, matchValue_7.fields[0]);
                        }
                    ;
                } else return autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t);
            }
        } else if (fullname === "System.Boolean") return (path_22)=>(value_31)=>bool(path_22, value_31)
        ;
        else if (fullname === "Microsoft.FSharp.Core.Unit") return (path_23)=>(value_32)=>unit(path_23, value_32)
        ;
        else if (fullname === "System.String") return (path_24)=>(value_33)=>string(path_24, value_33)
        ;
        else if (fullname === "System.SByte") return sbyte;
        else if (fullname === "System.Byte") return byte;
        else if (fullname === "System.Int16") return int16;
        else if (fullname === "System.UInt16") return uint16;
        else if (fullname === "System.Int32") return int;
        else if (fullname === "System.UInt32") return uint32;
        else if (fullname === "System.Double") return (path_25)=>(value_34)=>float(path_25, value_34)
        ;
        else if (fullname === "System.Single") return (path_26)=>(value_35)=>float32(path_26, value_35)
        ;
        else if (fullname === "System.DateTime") return (path_27)=>(value_36)=>datetime(path_27, value_36)
        ;
        else if (fullname === "System.DateTimeOffset") return (path_28)=>(value_37)=>datetimeOffset(path_28, value_37)
        ;
        else if (fullname === "System.TimeSpan") return (path_29)=>(value_38)=>timespan(path_29, value_38)
        ;
        else if (fullname === "System.Guid") return (path_30)=>(value_39)=>guid(path_30, value_39)
        ;
        else if (fullname === "System.Object") return (_arg1_6)=>(v1)=>new _choiceJs.FSharpResult$2(0, v1)
        ;
        else return autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t);
    } else {
        const decoderRef = matchValue;
        return (path1)=>(value_1)=>decoderRef.contents(path1)(value_1)
        ;
    }
}
function makeExtra(extra) {
    if (extra != null) return _mapJs.map((_arg2, tupledArg)=>new _typesJs.FSharpRef(tupledArg[1])
    , extra.Coders);
    else return _mapJs.empty();
}
class Auto {
    constructor(){
    }
}
function Auto$reflection() {
    return _reflectionJs.class_type("Thoth.Json.Decode.Auto", void 0, Auto);
}
_c4 = Auto$reflection;
function Auto_generateBoxedDecoderCached_79988AEF(t, caseStrategy, extra) {
    let y_1, y;
    const caseStrategy_1 = _optionJs.defaultArg(caseStrategy, new _typesFsJs.CaseStrategy(0));
    return _typesFsJs.Util_Cache$1__GetOrAdd_43981464(_typesFsJs.Util_CachedDecoders, (y_1 = (y = _reflectionJs.fullName(t), _typesJs.toString(caseStrategy_1) + y), _optionJs.defaultArg(_optionJs.map((e)=>e.Hash
    , extra), "") + y_1), ()=>autoDecoder(makeExtra(extra), caseStrategy_1, false, t)
    );
}
_c5 = Auto_generateBoxedDecoderCached_79988AEF;
function Auto_generateBoxedDecoder_79988AEF(t, caseStrategy, extra) {
    const caseStrategy_1 = _optionJs.defaultArg(caseStrategy, new _typesFsJs.CaseStrategy(0));
    return autoDecoder(makeExtra(extra), caseStrategy_1, false, t);
}
_c6 = Auto_generateBoxedDecoder_79988AEF;
var _c, _c1, _c2, _c3, _c4, _c5, _c6;
$RefreshReg$(_c, "Helpers_isUndefined");
$RefreshReg$(_c1, "Getters$1$reflection");
$RefreshReg$(_c2, "Getters$1_$ctor_4A51B60E");
$RefreshReg$(_c3, "Getters$1__get_Errors");
$RefreshReg$(_c4, "Auto$reflection");
$RefreshReg$(_c5, "Auto_generateBoxedDecoderCached_79988AEF");
$RefreshReg$(_c6, "Auto_generateBoxedDecoder_79988AEF");

},{"../fable-library.3.2.10/String.js":"baXBU","../fable-library.3.2.10/Choice.js":"aEC7Y","./Types.fs.js":"1K9qR","../fable-library.3.2.10/Guid.js":"29AE1","../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Int32.js":"bPtbl","../fable-library.3.2.10/Long.js":"2dOzy","../fable-library.3.2.10/BigInt.js":"6rX6Q","../fable-library.3.2.10/Decimal.js":"dVl3F","../fable-library.3.2.10/Date.js":"bQWYH","../fable-library.3.2.10/DateOffset.js":"7nv3K","../fable-library.3.2.10/TimeSpan.js":"gbfFx","../fable-library.3.2.10/Option.js":"gHWVf","../fable-library.3.2.10/List.js":"3UB49","../fable-library.3.2.10/Util.js":"e4VZ7","../fable-library.3.2.10/Array.js":"dl8am","../fable-library.3.2.10/Seq.js":"app8U","../fable-library.3.2.10/Map.js":"8mQPo","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Set.js":"jcBY4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7nv3K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromDate", ()=>fromDate
);
parcelHelpers.export(exports, "fromTicks", ()=>fromTicks
);
parcelHelpers.export(exports, "getUtcTicks", ()=>getUtcTicks
);
parcelHelpers.export(exports, "minValue", ()=>minValue
);
parcelHelpers.export(exports, "maxValue", ()=>maxValue
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "tryParse", ()=>tryParse
);
parcelHelpers.export(exports, "create", ()=>create
);
parcelHelpers.export(exports, "now", ()=>now
);
parcelHelpers.export(exports, "utcNow", ()=>utcNow
);
parcelHelpers.export(exports, "toUniversalTime", ()=>toUniversalTime
);
parcelHelpers.export(exports, "toLocalTime", ()=>toLocalTime
);
parcelHelpers.export(exports, "timeOfDay", ()=>timeOfDay
);
parcelHelpers.export(exports, "date", ()=>date
);
parcelHelpers.export(exports, "day", ()=>day
);
parcelHelpers.export(exports, "hour", ()=>hour
);
parcelHelpers.export(exports, "millisecond", ()=>millisecond
);
parcelHelpers.export(exports, "minute", ()=>minute
);
parcelHelpers.export(exports, "month", ()=>month
);
parcelHelpers.export(exports, "second", ()=>second
);
parcelHelpers.export(exports, "year", ()=>year
);
parcelHelpers.export(exports, "dayOfWeek", ()=>dayOfWeek
);
parcelHelpers.export(exports, "dayOfYear", ()=>dayOfYear
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "addDays", ()=>addDays
);
parcelHelpers.export(exports, "addHours", ()=>addHours
);
parcelHelpers.export(exports, "addMinutes", ()=>addMinutes
);
parcelHelpers.export(exports, "addSeconds", ()=>addSeconds
);
parcelHelpers.export(exports, "addMilliseconds", ()=>addMilliseconds
);
parcelHelpers.export(exports, "addYears", ()=>addYears
);
parcelHelpers.export(exports, "addMonths", ()=>addMonths
);
parcelHelpers.export(exports, "subtract", ()=>subtract
);
parcelHelpers.export(exports, "equals", ()=>equals
);
parcelHelpers.export(exports, "equalsExact", ()=>equalsExact
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "compareTo", ()=>compareTo
);
parcelHelpers.export(exports, "op_Addition", ()=>op_Addition
);
parcelHelpers.export(exports, "op_Subtraction", ()=>op_Subtraction
);
parcelHelpers.export(exports, "toOffset", ()=>toOffset
);
/**
 * DateTimeOffset functions.
 *
 * Note: DateOffset instances are always DateObjects in local
 * timezone (because JS dates are all kinds of messed up).
 * A local date returns UTC epoc when `.getTime()` is called.
 *
 * However, this means that in order to construct an UTC date
 * from a DateOffset with offset of +5 hours, you first need
 * to subtract those 5 hours, than add the "local" offset.
 * As said, all kinds of messed up.
 *
 * Basically; invariant: date.getTime() always return UTC time.
 */ var _dateJs = require("./Date.js");
var _longJs = require("./Long.js");
var _utilJs = require("./Util.js");
function DateTimeOffset(value, offset) {
    checkOffsetInRange(offset);
    const d = new Date(value);
    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;
    return d;
}
exports.default = DateTimeOffset;
_c = DateTimeOffset;
function checkOffsetInRange(offset) {
    if (offset != null && offset !== 0) {
        if (offset % 60000 !== 0) throw new Error("Offset must be specified in whole minutes.");
        if (Math.abs(offset / 3600000) > 14) throw new Error("Offset must be within plus or minus 14 hours.");
    }
}
function fromDate(date, offset) {
    let offset2 = 0;
    switch(date.kind){
        case 1 /* UTC */ :
            if (offset != null && offset !== 0) throw new Error("The UTC Offset for Utc DateTime instances must be 0.");
            offset2 = 0;
            break;
        case 2 /* Local */ :
            offset2 = date.getTimezoneOffset() * -60000;
            if (offset != null && offset !== offset2) throw new Error("The UTC Offset of the local dateTime parameter does not match the offset argument.");
            break;
        case 0 /* Unspecified */ :
        default:
            if (offset == null) offset2 = date.getTimezoneOffset() * -60000;
            else offset2 = offset;
            break;
    }
    return DateTimeOffset(date.getTime(), offset2);
}
function fromTicks(ticks, offset) {
    ticks = _longJs.fromValue(ticks);
    const epoc = _longJs.ticksToUnixEpochMilliseconds(ticks) - offset;
    return DateTimeOffset(epoc, offset);
}
function getUtcTicks(date) {
    return _longJs.unixEpochMillisecondsToTicks(date.getTime(), 0);
}
function minValue() {
    // This is "0001-01-01T00:00:00.000Z", actual JS min value is -8640000000000000
    return DateTimeOffset(-62135596800000, 0);
}
function maxValue() {
    // This is "9999-12-31T23:59:59.999Z", actual JS max value is 8640000000000000
    return DateTimeOffset(253402300799999, 0);
}
function parse(str) {
    const date = _dateJs.parseRaw(str);
    const offsetMatch = _dateJs.offsetRegex.exec(str);
    const offset = offsetMatch == null ? date.getTimezoneOffset() * -60000 : offsetMatch[0] === "Z" ? 0 : parseInt(offsetMatch[1], 10) * 3600000 + parseInt(offsetMatch[2], 10) * 60000;
    return DateTimeOffset(date.getTime(), offset);
}
function tryParse(v, defValue) {
    try {
        defValue.contents = parse(v);
        return true;
    } catch (_err) {
        return false;
    }
}
function create(year, month, day, h, m, s, ms, offset) {
    if (offset == null) {
        offset = ms;
        ms = 0;
    }
    checkOffsetInRange(offset);
    let date;
    if (offset === 0) {
        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));
        if (year <= 99) date.setFullYear(year, month - 1, day);
    } else {
        const str = _utilJs.padWithZeros(year, 4) + "-" + _utilJs.padWithZeros(month, 2) + "-" + _utilJs.padWithZeros(day, 2) + "T" + _utilJs.padWithZeros(h, 2) + ":" + _utilJs.padWithZeros(m, 2) + ":" + _utilJs.padWithZeros(s, 2) + "." + _utilJs.padWithZeros(ms, 3) + _dateJs.dateOffsetToString(offset);
        date = new Date(str);
    }
    const dateValue = date.getTime();
    if (isNaN(dateValue)) throw new Error("The parameters describe an unrepresentable Date");
    return DateTimeOffset(dateValue, offset);
}
function now() {
    const date = new Date();
    const offset = date.getTimezoneOffset() * -60000;
    return DateTimeOffset(date.getTime(), offset);
}
function utcNow() {
    const date = now();
    return DateTimeOffset(date.getTime(), 0);
}
function toUniversalTime(date) {
    return DateTimeOffset(date.getTime(), 0);
}
function toLocalTime(date) {
    return DateTimeOffset(date.getTime(), date.getTimezoneOffset() * -60000);
}
function timeOfDay(d) {
    var _a;
    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));
    return d2.getUTCHours() * 3600000 + d2.getUTCMinutes() * 60000 + d2.getUTCSeconds() * 1000 + d2.getUTCMilliseconds();
}
function date(d) {
    var _a;
    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));
    return _dateJs.create(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);
}
function day(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDate();
}
function hour(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCHours();
}
function millisecond(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMilliseconds();
}
function minute(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMinutes();
}
function month(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMonth() + 1;
}
function second(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCSeconds();
}
function year(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCFullYear();
}
function dayOfWeek(d) {
    var _a;
    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDay();
}
function dayOfYear(d) {
    var _a;
    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));
    const _year = d2.getUTCFullYear();
    const _month = d2.getUTCMonth() + 1;
    let _day = d2.getUTCDate();
    for(let i = 1; i < _month; i++)_day += _dateJs.daysInMonth(_year, i);
    return _day;
}
function add(d, ts) {
    var _a;
    return DateTimeOffset(d.getTime() + ts, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addDays(d, v) {
    var _a;
    return DateTimeOffset(d.getTime() + v * 86400000, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addHours(d, v) {
    var _a;
    return DateTimeOffset(d.getTime() + v * 3600000, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addMinutes(d, v) {
    var _a;
    return DateTimeOffset(d.getTime() + v * 60000, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addSeconds(d, v) {
    var _a;
    return DateTimeOffset(d.getTime() + v * 1000, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addMilliseconds(d, v) {
    var _a;
    return DateTimeOffset(d.getTime() + v, (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addYears(d, v) {
    var _a;
    const newMonth = d.getUTCMonth() + 1;
    const newYear = d.getUTCFullYear() + v;
    const _daysInMonth = _dateJs.daysInMonth(newYear, newMonth);
    const newDay = Math.min(_daysInMonth, d.getUTCDate());
    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), (_a = d.offset) !== null && _a !== void 0 ? _a : 0);
}
function addMonths(d, v) {
    var _a, _b;
    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));
    let newMonth = d2.getUTCMonth() + 1 + v;
    let newMonth_ = 0;
    let yearOffset = 0;
    if (newMonth > 12) {
        newMonth_ = newMonth % 12;
        yearOffset = Math.floor(newMonth / 12);
        newMonth = newMonth_;
    } else if (newMonth < 1) {
        newMonth_ = 12 + newMonth % 12;
        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);
        newMonth = newMonth_;
    }
    const newYear = d2.getUTCFullYear() + yearOffset;
    const _daysInMonth = _dateJs.daysInMonth(newYear, newMonth);
    const newDay = Math.min(_daysInMonth, d2.getUTCDate());
    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), (_b = d.offset) !== null && _b !== void 0 ? _b : 0);
}
function subtract(d, that) {
    var _a;
    return typeof that === "number" ? DateTimeOffset(d.getTime() - that, (_a = d.offset) !== null && _a !== void 0 ? _a : 0) : d.getTime() - that.getTime();
}
function equals(d1, d2) {
    return d1.getTime() === d2.getTime();
}
function equalsExact(d1, d2) {
    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;
}
function compare(d1, d2) {
    return _utilJs.compareDates(d1, d2);
}
const compareTo = compare;
function op_Addition(x, y) {
    return add(x, y);
}
function op_Subtraction(x, y) {
    return subtract(x, y);
}
function toOffset(d, offset) {
    return DateTimeOffset(d.getTime(), offset);
}
var _c;
$RefreshReg$(_c, "DateTimeOffset");

},{"./Date.js":"bQWYH","./Long.js":"2dOzy","./Util.js":"e4VZ7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jcBY4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetTreeLeaf$1", ()=>SetTreeLeaf$1
);
parcelHelpers.export(exports, "SetTreeLeaf$1$reflection", ()=>SetTreeLeaf$1$reflection
);
parcelHelpers.export(exports, "SetTreeLeaf$1_$ctor_2B595", ()=>SetTreeLeaf$1_$ctor_2B595
);
parcelHelpers.export(exports, "SetTreeLeaf$1__get_Key", ()=>SetTreeLeaf$1__get_Key
);
parcelHelpers.export(exports, "SetTreeNode$1", ()=>SetTreeNode$1
);
parcelHelpers.export(exports, "SetTreeNode$1$reflection", ()=>SetTreeNode$1$reflection
);
parcelHelpers.export(exports, "SetTreeNode$1_$ctor_Z6E7BE5F7", ()=>SetTreeNode$1_$ctor_Z6E7BE5F7
);
parcelHelpers.export(exports, "SetTreeNode$1__get_Left", ()=>SetTreeNode$1__get_Left
);
parcelHelpers.export(exports, "SetTreeNode$1__get_Right", ()=>SetTreeNode$1__get_Right
);
parcelHelpers.export(exports, "SetTreeNode$1__get_Height", ()=>SetTreeNode$1__get_Height
);
parcelHelpers.export(exports, "SetTreeModule_empty", ()=>SetTreeModule_empty
);
parcelHelpers.export(exports, "SetTreeModule_countAux", ()=>SetTreeModule_countAux
);
parcelHelpers.export(exports, "SetTreeModule_count", ()=>SetTreeModule_count
);
parcelHelpers.export(exports, "SetTreeModule_mk", ()=>SetTreeModule_mk
);
parcelHelpers.export(exports, "SetTreeModule_rebalance", ()=>SetTreeModule_rebalance
);
parcelHelpers.export(exports, "SetTreeModule_add", ()=>SetTreeModule_add
);
parcelHelpers.export(exports, "SetTreeModule_balance", ()=>SetTreeModule_balance
);
parcelHelpers.export(exports, "SetTreeModule_split", ()=>SetTreeModule_split
);
parcelHelpers.export(exports, "SetTreeModule_spliceOutSuccessor", ()=>SetTreeModule_spliceOutSuccessor
);
parcelHelpers.export(exports, "SetTreeModule_remove", ()=>SetTreeModule_remove
);
parcelHelpers.export(exports, "SetTreeModule_mem", ()=>SetTreeModule_mem
);
parcelHelpers.export(exports, "SetTreeModule_iter", ()=>SetTreeModule_iter
);
parcelHelpers.export(exports, "SetTreeModule_foldBackOpt", ()=>SetTreeModule_foldBackOpt
);
parcelHelpers.export(exports, "SetTreeModule_foldBack", ()=>SetTreeModule_foldBack
);
parcelHelpers.export(exports, "SetTreeModule_foldOpt", ()=>SetTreeModule_foldOpt
);
parcelHelpers.export(exports, "SetTreeModule_fold", ()=>SetTreeModule_fold
);
parcelHelpers.export(exports, "SetTreeModule_forall", ()=>SetTreeModule_forall
);
parcelHelpers.export(exports, "SetTreeModule_exists", ()=>SetTreeModule_exists
);
parcelHelpers.export(exports, "SetTreeModule_subset", ()=>SetTreeModule_subset
);
parcelHelpers.export(exports, "SetTreeModule_properSubset", ()=>SetTreeModule_properSubset
);
parcelHelpers.export(exports, "SetTreeModule_filterAux", ()=>SetTreeModule_filterAux
);
parcelHelpers.export(exports, "SetTreeModule_filter", ()=>SetTreeModule_filter
);
parcelHelpers.export(exports, "SetTreeModule_diffAux", ()=>SetTreeModule_diffAux
);
parcelHelpers.export(exports, "SetTreeModule_diff", ()=>SetTreeModule_diff
);
parcelHelpers.export(exports, "SetTreeModule_union", ()=>SetTreeModule_union
);
parcelHelpers.export(exports, "SetTreeModule_intersectionAux", ()=>SetTreeModule_intersectionAux
);
parcelHelpers.export(exports, "SetTreeModule_intersection", ()=>SetTreeModule_intersection
);
parcelHelpers.export(exports, "SetTreeModule_partition1", ()=>SetTreeModule_partition1
);
parcelHelpers.export(exports, "SetTreeModule_partitionAux", ()=>SetTreeModule_partitionAux
);
parcelHelpers.export(exports, "SetTreeModule_partition", ()=>SetTreeModule_partition
);
parcelHelpers.export(exports, "SetTreeModule_minimumElementAux", ()=>SetTreeModule_minimumElementAux
);
parcelHelpers.export(exports, "SetTreeModule_minimumElementOpt", ()=>SetTreeModule_minimumElementOpt
);
parcelHelpers.export(exports, "SetTreeModule_maximumElementAux", ()=>SetTreeModule_maximumElementAux
);
parcelHelpers.export(exports, "SetTreeModule_maximumElementOpt", ()=>SetTreeModule_maximumElementOpt
);
parcelHelpers.export(exports, "SetTreeModule_minimumElement", ()=>SetTreeModule_minimumElement
);
parcelHelpers.export(exports, "SetTreeModule_maximumElement", ()=>SetTreeModule_maximumElement
);
parcelHelpers.export(exports, "SetTreeModule_SetIterator$1", ()=>SetTreeModule_SetIterator$1
);
parcelHelpers.export(exports, "SetTreeModule_SetIterator$1$reflection", ()=>SetTreeModule_SetIterator$1$reflection
);
parcelHelpers.export(exports, "SetTreeModule_collapseLHS", ()=>SetTreeModule_collapseLHS
);
parcelHelpers.export(exports, "SetTreeModule_mkIterator", ()=>SetTreeModule_mkIterator
);
parcelHelpers.export(exports, "SetTreeModule_notStarted", ()=>SetTreeModule_notStarted
);
parcelHelpers.export(exports, "SetTreeModule_alreadyFinished", ()=>SetTreeModule_alreadyFinished
);
parcelHelpers.export(exports, "SetTreeModule_current", ()=>SetTreeModule_current
);
parcelHelpers.export(exports, "SetTreeModule_moveNext", ()=>SetTreeModule_moveNext
);
parcelHelpers.export(exports, "SetTreeModule_mkIEnumerator", ()=>SetTreeModule_mkIEnumerator
);
parcelHelpers.export(exports, "SetTreeModule_compareStacks", ()=>SetTreeModule_compareStacks
);
parcelHelpers.export(exports, "SetTreeModule_compare", ()=>SetTreeModule_compare
);
parcelHelpers.export(exports, "SetTreeModule_choose", ()=>SetTreeModule_choose
);
parcelHelpers.export(exports, "SetTreeModule_toList", ()=>SetTreeModule_toList
);
parcelHelpers.export(exports, "SetTreeModule_copyToArray", ()=>SetTreeModule_copyToArray
);
parcelHelpers.export(exports, "SetTreeModule_toArray", ()=>SetTreeModule_toArray
);
parcelHelpers.export(exports, "SetTreeModule_mkFromEnumerator", ()=>SetTreeModule_mkFromEnumerator
);
parcelHelpers.export(exports, "SetTreeModule_ofArray", ()=>SetTreeModule_ofArray
);
parcelHelpers.export(exports, "SetTreeModule_ofList", ()=>SetTreeModule_ofList
);
parcelHelpers.export(exports, "SetTreeModule_ofSeq", ()=>SetTreeModule_ofSeq
);
parcelHelpers.export(exports, "FSharpSet", ()=>FSharpSet
);
parcelHelpers.export(exports, "FSharpSet$reflection", ()=>FSharpSet$reflection
);
parcelHelpers.export(exports, "FSharpSet_$ctor", ()=>FSharpSet_$ctor
);
parcelHelpers.export(exports, "FSharpSet__get_Comparer", ()=>FSharpSet__get_Comparer
);
parcelHelpers.export(exports, "FSharpSet__get_Tree", ()=>FSharpSet__get_Tree
);
parcelHelpers.export(exports, "FSharpSet_Empty", ()=>FSharpSet_Empty
);
parcelHelpers.export(exports, "FSharpSet__Add", ()=>FSharpSet__Add
);
parcelHelpers.export(exports, "FSharpSet__Remove", ()=>FSharpSet__Remove
);
parcelHelpers.export(exports, "FSharpSet__get_Count", ()=>FSharpSet__get_Count
);
parcelHelpers.export(exports, "FSharpSet__Contains", ()=>FSharpSet__Contains
);
parcelHelpers.export(exports, "FSharpSet__Iterate", ()=>FSharpSet__Iterate
);
parcelHelpers.export(exports, "FSharpSet__Fold", ()=>FSharpSet__Fold
);
parcelHelpers.export(exports, "FSharpSet__get_IsEmpty", ()=>FSharpSet__get_IsEmpty
);
parcelHelpers.export(exports, "FSharpSet__Partition", ()=>FSharpSet__Partition
);
parcelHelpers.export(exports, "FSharpSet__Filter", ()=>FSharpSet__Filter
);
parcelHelpers.export(exports, "FSharpSet__Map", ()=>FSharpSet__Map
);
parcelHelpers.export(exports, "FSharpSet__Exists", ()=>FSharpSet__Exists
);
parcelHelpers.export(exports, "FSharpSet__ForAll", ()=>FSharpSet__ForAll
);
parcelHelpers.export(exports, "FSharpSet_op_Subtraction", ()=>FSharpSet_op_Subtraction
);
parcelHelpers.export(exports, "FSharpSet_op_Addition", ()=>FSharpSet_op_Addition
);
parcelHelpers.export(exports, "FSharpSet_Intersection", ()=>FSharpSet_Intersection
);
parcelHelpers.export(exports, "FSharpSet_IntersectionMany", ()=>FSharpSet_IntersectionMany
);
parcelHelpers.export(exports, "FSharpSet_Equality", ()=>FSharpSet_Equality
);
parcelHelpers.export(exports, "FSharpSet_Compare", ()=>FSharpSet_Compare
);
parcelHelpers.export(exports, "FSharpSet__get_Choose", ()=>FSharpSet__get_Choose
);
parcelHelpers.export(exports, "FSharpSet__get_MinimumElement", ()=>FSharpSet__get_MinimumElement
);
parcelHelpers.export(exports, "FSharpSet__get_MaximumElement", ()=>FSharpSet__get_MaximumElement
);
parcelHelpers.export(exports, "FSharpSet__IsSubsetOf", ()=>FSharpSet__IsSubsetOf
);
parcelHelpers.export(exports, "FSharpSet__IsSupersetOf", ()=>FSharpSet__IsSupersetOf
);
parcelHelpers.export(exports, "FSharpSet__IsProperSubsetOf", ()=>FSharpSet__IsProperSubsetOf
);
parcelHelpers.export(exports, "FSharpSet__IsProperSupersetOf", ()=>FSharpSet__IsProperSupersetOf
);
parcelHelpers.export(exports, "FSharpSet__ToList", ()=>FSharpSet__ToList
);
parcelHelpers.export(exports, "FSharpSet__ToArray", ()=>FSharpSet__ToArray
);
parcelHelpers.export(exports, "FSharpSet__ComputeHashCode", ()=>FSharpSet__ComputeHashCode
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "singleton", ()=>singleton
);
parcelHelpers.export(exports, "remove", ()=>remove
);
parcelHelpers.export(exports, "union", ()=>union
);
parcelHelpers.export(exports, "unionMany", ()=>unionMany
);
parcelHelpers.export(exports, "intersect", ()=>intersect
);
parcelHelpers.export(exports, "intersectMany", ()=>intersectMany
);
parcelHelpers.export(exports, "iterate", ()=>iterate
);
parcelHelpers.export(exports, "empty", ()=>empty
);
parcelHelpers.export(exports, "forAll", ()=>forAll
);
parcelHelpers.export(exports, "exists", ()=>exists
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "partition", ()=>partition
);
parcelHelpers.export(exports, "fold", ()=>fold
);
parcelHelpers.export(exports, "foldBack", ()=>foldBack
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "count", ()=>count
);
parcelHelpers.export(exports, "ofList", ()=>ofList
);
parcelHelpers.export(exports, "ofArray", ()=>ofArray
);
parcelHelpers.export(exports, "toList", ()=>toList
);
parcelHelpers.export(exports, "toArray", ()=>toArray
);
parcelHelpers.export(exports, "toSeq", ()=>toSeq
);
parcelHelpers.export(exports, "ofSeq", ()=>ofSeq
);
parcelHelpers.export(exports, "difference", ()=>difference
);
parcelHelpers.export(exports, "isSubset", ()=>isSubset
);
parcelHelpers.export(exports, "isSuperset", ()=>isSuperset
);
parcelHelpers.export(exports, "isProperSubset", ()=>isProperSubset
);
parcelHelpers.export(exports, "isProperSuperset", ()=>isProperSuperset
);
parcelHelpers.export(exports, "minElement", ()=>minElement
);
parcelHelpers.export(exports, "maxElement", ()=>maxElement
);
parcelHelpers.export(exports, "unionWith", ()=>unionWith
);
parcelHelpers.export(exports, "intersectWith", ()=>intersectWith
);
parcelHelpers.export(exports, "exceptWith", ()=>exceptWith
);
parcelHelpers.export(exports, "isSubsetOf", ()=>isSubsetOf
);
parcelHelpers.export(exports, "isSupersetOf", ()=>isSupersetOf
);
parcelHelpers.export(exports, "isProperSubsetOf", ()=>isProperSubsetOf
);
parcelHelpers.export(exports, "isProperSupersetOf", ()=>isProperSupersetOf
);
var _reflectionJs = require("./Reflection.js");
var _optionJs = require("./Option.js");
var _typesJs = require("./Types.js");
var _listJs = require("./List.js");
var _arrayJs = require("./Array.js");
var _utilJs = require("./Util.js");
var _stringJs = require("./String.js");
var _seqJs = require("./Seq.js");
class SetTreeLeaf$1 {
    constructor(k1){
        this.k = k1;
    }
}
function SetTreeLeaf$1$reflection(gen0) {
    return _reflectionJs.class_type("Set.SetTreeLeaf`1", [
        gen0
    ], SetTreeLeaf$1);
}
_c = SetTreeLeaf$1$reflection;
function SetTreeLeaf$1_$ctor_2B595(k1) {
    return new SetTreeLeaf$1(k1);
}
_c1 = SetTreeLeaf$1_$ctor_2B595;
function SetTreeLeaf$1__get_Key(_) {
    return _.k;
}
_c2 = SetTreeLeaf$1__get_Key;
class SetTreeNode$1 extends SetTreeLeaf$1 {
    constructor(v, left, right, h){
        super(v);
        this.left = left;
        this.right = right;
        this.h = h | 0;
    }
}
function SetTreeNode$1$reflection(gen0) {
    return _reflectionJs.class_type("Set.SetTreeNode`1", [
        gen0
    ], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));
}
_c3 = SetTreeNode$1$reflection;
function SetTreeNode$1_$ctor_Z6E7BE5F7(v1, left1, right1, h1) {
    return new SetTreeNode$1(v1, left1, right1, h1);
}
_c4 = SetTreeNode$1_$ctor_Z6E7BE5F7;
function SetTreeNode$1__get_Left(_) {
    return _.left;
}
_c5 = SetTreeNode$1__get_Left;
function SetTreeNode$1__get_Right(_) {
    return _.right;
}
_c6 = SetTreeNode$1__get_Right;
function SetTreeNode$1__get_Height(_) {
    return _.h;
}
_c7 = SetTreeNode$1__get_Height;
function SetTreeModule_empty() {
    return void 0;
}
_c8 = SetTreeModule_empty;
function SetTreeModule_countAux(t_mut, acc_mut) {
    SetTreeModule_countAux: while(true){
        const t = t_mut, acc = acc_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                t_mut = SetTreeNode$1__get_Left(t2);
                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);
                continue SetTreeModule_countAux;
            } else return acc + 1 | 0;
        } else return acc | 0;
        break;
    }
}
_c9 = SetTreeModule_countAux;
function SetTreeModule_count(s) {
    return SetTreeModule_countAux(s, 0);
}
_c10 = SetTreeModule_count;
function SetTreeModule_mk(l, k1, r) {
    let hl;
    const t = l;
    if (t != null) {
        const t2 = t;
        hl = t2 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2) : 1;
    } else hl = 0;
    let hr;
    const t_1 = r;
    if (t_1 != null) {
        const t2_1 = t_1;
        hr = t2_1 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_1) : 1;
    } else hr = 0;
    const m = (hl < hr ? hr : hl) | 0;
    if (m === 0) return SetTreeLeaf$1_$ctor_2B595(k1);
    else return SetTreeNode$1_$ctor_Z6E7BE5F7(k1, l, r, m + 1);
}
_c11 = SetTreeModule_mk;
function SetTreeModule_rebalance(t1, v1, t2) {
    let t_2, t2_3, t_3, t2_4;
    let t1h;
    const t = t1;
    if (t != null) {
        const t2_1 = t;
        t1h = t2_1 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_1) : 1;
    } else t1h = 0;
    let t2h;
    const t_1 = t2;
    if (t_1 != null) {
        const t2_2 = t_1;
        t2h = t2_2 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_2) : 1;
    } else t2h = 0;
    if (t2h > t1h + 2) {
        const matchValue = _optionJs.value(t2);
        if (matchValue instanceof SetTreeNode$1) {
            if ((t_2 = SetTreeNode$1__get_Left(matchValue), t_2 != null ? (t2_3 = t_2, t2_3 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_3) : 1) : 0) > t1h + 1) {
                const matchValue_1 = _optionJs.value(SetTreeNode$1__get_Left(matchValue));
                if (matchValue_1 instanceof SetTreeNode$1) return SetTreeModule_mk(SetTreeModule_mk(t1, v1, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));
                else throw new Error("internal error: Set.rebalance");
            } else return SetTreeModule_mk(SetTreeModule_mk(t1, v1, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));
        } else throw new Error("internal error: Set.rebalance");
    } else if (t1h > t2h + 2) {
        const matchValue_2 = _optionJs.value(t1);
        if (matchValue_2 instanceof SetTreeNode$1) {
            if ((t_3 = SetTreeNode$1__get_Right(matchValue_2), t_3 != null ? (t2_4 = t_3, t2_4 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_4) : 1) : 0) > t2h + 1) {
                const matchValue_3 = _optionJs.value(SetTreeNode$1__get_Right(matchValue_2));
                if (matchValue_3 instanceof SetTreeNode$1) return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v1, t2));
                else throw new Error("internal error: Set.rebalance");
            } else return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v1, t2));
        } else throw new Error("internal error: Set.rebalance");
    } else return SetTreeModule_mk(t1, v1, t2);
}
_c12 = SetTreeModule_rebalance;
function SetTreeModule_add(comparer, k1, t) {
    if (t != null) {
        const t2 = t;
        const c = comparer.Compare(k1, SetTreeLeaf$1__get_Key(t2)) | 0;
        if (t2 instanceof SetTreeNode$1) {
            if (c < 0) return SetTreeModule_rebalance(SetTreeModule_add(comparer, k1, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));
            else if (c === 0) return t;
            else return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k1, SetTreeNode$1__get_Right(t2)));
        } else {
            const c_1 = comparer.Compare(k1, SetTreeLeaf$1__get_Key(t2)) | 0;
            if (c_1 < 0) return SetTreeNode$1_$ctor_Z6E7BE5F7(k1, SetTreeModule_empty(), t, 2);
            else if (c_1 === 0) return t;
            else return SetTreeNode$1_$ctor_Z6E7BE5F7(k1, t, SetTreeModule_empty(), 2);
        }
    } else return SetTreeLeaf$1_$ctor_2B595(k1);
}
_c13 = SetTreeModule_add;
function SetTreeModule_balance(comparer, t1, k1, t2) {
    if (t1 != null) {
        const t1$0027 = t1;
        if (t2 != null) {
            const t2$0027 = t2;
            if (t1$0027 instanceof SetTreeNode$1) {
                if (t2$0027 instanceof SetTreeNode$1) {
                    if (SetTreeNode$1__get_Height(t1$0027) + 2 < SetTreeNode$1__get_Height(t2$0027)) return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k1, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));
                    else if (SetTreeNode$1__get_Height(t2$0027) + 2 < SetTreeNode$1__get_Height(t1$0027)) return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k1, t2));
                    else return SetTreeModule_mk(t1, k1, t2);
                } else return SetTreeModule_add(comparer, k1, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));
            } else return SetTreeModule_add(comparer, k1, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));
        } else return SetTreeModule_add(comparer, k1, t1);
    } else return SetTreeModule_add(comparer, k1, t2);
}
_c14 = SetTreeModule_balance;
function SetTreeModule_split(comparer, pivot, t) {
    if (t != null) {
        const t2 = t;
        if (t2 instanceof SetTreeNode$1) {
            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;
            if (c < 0) {
                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));
                return [
                    patternInput[0],
                    patternInput[1],
                    SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))
                ];
            } else if (c === 0) return [
                SetTreeNode$1__get_Left(t2),
                true,
                SetTreeNode$1__get_Right(t2)
            ];
            else {
                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));
                return [
                    SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]),
                    patternInput_1[1],
                    patternInput_1[2]
                ];
            }
        } else {
            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;
            if (c_1 < 0) return [
                t,
                false,
                SetTreeModule_empty()
            ];
            else if (c_1 === 0) return [
                SetTreeModule_empty(),
                true,
                SetTreeModule_empty()
            ];
            else return [
                SetTreeModule_empty(),
                false,
                t
            ];
        }
    } else return [
        SetTreeModule_empty(),
        false,
        SetTreeModule_empty()
    ];
}
_c15 = SetTreeModule_split;
function SetTreeModule_spliceOutSuccessor(t) {
    if (t != null) {
        const t2 = t;
        if (t2 instanceof SetTreeNode$1) {
            if (SetTreeNode$1__get_Left(t2) == null) return [
                SetTreeLeaf$1__get_Key(t2),
                SetTreeNode$1__get_Right(t2)
            ];
            else {
                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));
                return [
                    patternInput[0],
                    SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))
                ];
            }
        } else return [
            SetTreeLeaf$1__get_Key(t2),
            SetTreeModule_empty()
        ];
    } else throw new Error("internal error: Set.spliceOutSuccessor");
}
_c16 = SetTreeModule_spliceOutSuccessor;
function SetTreeModule_remove(comparer, k1, t) {
    if (t != null) {
        const t2 = t;
        const c = comparer.Compare(k1, SetTreeLeaf$1__get_Key(t2)) | 0;
        if (t2 instanceof SetTreeNode$1) {
            if (c < 0) return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k1, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));
            else if (c === 0) {
                if (SetTreeNode$1__get_Left(t2) == null) return SetTreeNode$1__get_Right(t2);
                else if (SetTreeNode$1__get_Right(t2) == null) return SetTreeNode$1__get_Left(t2);
                else {
                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));
                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);
                }
            } else return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k1, SetTreeNode$1__get_Right(t2)));
        } else if (c === 0) return SetTreeModule_empty();
        else return t;
    } else return t;
}
_c17 = SetTreeModule_remove;
function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {
    SetTreeModule_mem: while(true){
        const comparer = comparer_mut, k1 = k_mut, t = t_mut;
        if (t != null) {
            const t2 = t;
            const c = comparer.Compare(k1, SetTreeLeaf$1__get_Key(t2)) | 0;
            if (t2 instanceof SetTreeNode$1) {
                if (c < 0) {
                    comparer_mut = comparer;
                    k_mut = k1;
                    t_mut = SetTreeNode$1__get_Left(t2);
                    continue SetTreeModule_mem;
                } else if (c === 0) return true;
                else {
                    comparer_mut = comparer;
                    k_mut = k1;
                    t_mut = SetTreeNode$1__get_Right(t2);
                    continue SetTreeModule_mem;
                }
            } else return c === 0;
        } else return false;
        break;
    }
}
_c18 = SetTreeModule_mem;
function SetTreeModule_iter(f_mut, t_mut) {
    SetTreeModule_iter: while(true){
        const f = f_mut, t = t_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));
                f(SetTreeLeaf$1__get_Key(t2));
                f_mut = f;
                t_mut = SetTreeNode$1__get_Right(t2);
                continue SetTreeModule_iter;
            } else f(SetTreeLeaf$1__get_Key(t2));
        }
        break;
    }
}
_c19 = SetTreeModule_iter;
function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {
    SetTreeModule_foldBackOpt: while(true){
        const f = f_mut, t = t_mut, x = x_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                f_mut = f;
                t_mut = SetTreeNode$1__get_Left(t2);
                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));
                continue SetTreeModule_foldBackOpt;
            } else return f(SetTreeLeaf$1__get_Key(t2), x);
        } else return x;
        break;
    }
}
_c20 = SetTreeModule_foldBackOpt;
function SetTreeModule_foldBack(f, m, x) {
    return SetTreeModule_foldBackOpt(f, m, x);
}
_c21 = SetTreeModule_foldBack;
function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {
    SetTreeModule_foldOpt: while(true){
        const f = f_mut, x = x_mut, t = t_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                f_mut = f;
                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));
                t_mut = SetTreeNode$1__get_Right(t2);
                continue SetTreeModule_foldOpt;
            } else return f(x, SetTreeLeaf$1__get_Key(t2));
        } else return x;
        break;
    }
}
_c22 = SetTreeModule_foldOpt;
function SetTreeModule_fold(f, x, m) {
    return SetTreeModule_foldOpt(f, x, m);
}
_c23 = SetTreeModule_fold;
function SetTreeModule_forall(f_mut, t_mut) {
    SetTreeModule_forall: while(true){
        const f = f_mut, t = t_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                if (f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2)) : false) {
                    f_mut = f;
                    t_mut = SetTreeNode$1__get_Right(t2);
                    continue SetTreeModule_forall;
                } else return false;
            } else return f(SetTreeLeaf$1__get_Key(t2));
        } else return true;
        break;
    }
}
_c24 = SetTreeModule_forall;
function SetTreeModule_exists(f_mut, t_mut) {
    SetTreeModule_exists: while(true){
        const f = f_mut, t = t_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) return true;
                else {
                    f_mut = f;
                    t_mut = SetTreeNode$1__get_Right(t2);
                    continue SetTreeModule_exists;
                }
            } else return f(SetTreeLeaf$1__get_Key(t2));
        } else return false;
        break;
    }
}
_c25 = SetTreeModule_exists;
function SetTreeModule_subset(comparer, a, b) {
    return SetTreeModule_forall((x)=>SetTreeModule_mem(comparer, x, b)
    , a);
}
_c26 = SetTreeModule_subset;
function SetTreeModule_properSubset(comparer, a, b) {
    if (SetTreeModule_forall((x)=>SetTreeModule_mem(comparer, x, b)
    , a)) return SetTreeModule_exists((x_1)=>!SetTreeModule_mem(comparer, x_1, a)
    , b);
    else return false;
}
_c27 = SetTreeModule_properSubset;
function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {
    SetTreeModule_filterAux: while(true){
        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;
                comparer_mut = comparer;
                f_mut = f;
                t_mut = SetTreeNode$1__get_Left(t2);
                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);
                continue SetTreeModule_filterAux;
            } else if (f(SetTreeLeaf$1__get_Key(t2))) return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);
            else return acc;
        } else return acc;
        break;
    }
}
_c28 = SetTreeModule_filterAux;
function SetTreeModule_filter(comparer, f, s) {
    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());
}
_c29 = SetTreeModule_filter;
function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {
    SetTreeModule_diffAux: while(true){
        const comparer = comparer_mut, t = t_mut, acc = acc_mut;
        if (acc == null) return acc;
        else if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                comparer_mut = comparer;
                t_mut = SetTreeNode$1__get_Left(t2);
                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));
                continue SetTreeModule_diffAux;
            } else return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);
        } else return acc;
        break;
    }
}
_c30 = SetTreeModule_diffAux;
function SetTreeModule_diff(comparer, a, b) {
    return SetTreeModule_diffAux(comparer, b, a);
}
_c31 = SetTreeModule_diff;
function SetTreeModule_union(comparer, t1, t2) {
    if (t1 != null) {
        const t1$0027 = t1;
        if (t2 != null) {
            const t2$0027 = t2;
            if (t1$0027 instanceof SetTreeNode$1) {
                if (t2$0027 instanceof SetTreeNode$1) {
                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {
                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);
                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));
                    } else {
                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);
                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));
                    }
                } else return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);
            } else return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);
        } else return t1;
    } else return t2;
}
_c32 = SetTreeModule_union;
function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {
    SetTreeModule_intersectionAux: while(true){
        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);
                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;
                comparer_mut = comparer;
                b_mut = b;
                t_mut = SetTreeNode$1__get_Left(t2);
                acc_mut = acc_2;
                continue SetTreeModule_intersectionAux;
            } else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);
            else return acc;
        } else return acc;
        break;
    }
}
_c33 = SetTreeModule_intersectionAux;
function SetTreeModule_intersection(comparer, a, b) {
    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());
}
_c34 = SetTreeModule_intersection;
function SetTreeModule_partition1(comparer, f, k1, acc1, acc2) {
    if (f(k1)) return [
        SetTreeModule_add(comparer, k1, acc1),
        acc2
    ];
    else return [
        acc1,
        SetTreeModule_add(comparer, k1, acc2)
    ];
}
_c35 = SetTreeModule_partition1;
function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {
    SetTreeModule_partitionAux: while(true){
        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;
        const acc = [
            acc_0,
            acc_1
        ];
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);
                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);
                comparer_mut = comparer;
                f_mut = f;
                t_mut = SetTreeNode$1__get_Left(t2);
                acc_0_mut = acc_3[0];
                acc_1_mut = acc_3[1];
                continue SetTreeModule_partitionAux;
            } else return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);
        } else return acc;
        break;
    }
}
_c36 = SetTreeModule_partitionAux;
function SetTreeModule_partition(comparer, f, s) {
    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());
}
_c37 = SetTreeModule_partition;
function SetTreeModule_minimumElementAux(t_mut, n_mut) {
    SetTreeModule_minimumElementAux: while(true){
        const t = t_mut, n = n_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                t_mut = SetTreeNode$1__get_Left(t2);
                n_mut = SetTreeLeaf$1__get_Key(t2);
                continue SetTreeModule_minimumElementAux;
            } else return SetTreeLeaf$1__get_Key(t2);
        } else return n;
        break;
    }
}
_c38 = SetTreeModule_minimumElementAux;
function SetTreeModule_minimumElementOpt(t) {
    if (t != null) {
        const t2 = t;
        if (t2 instanceof SetTreeNode$1) return _optionJs.some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));
        else return _optionJs.some(SetTreeLeaf$1__get_Key(t2));
    } else return void 0;
}
_c39 = SetTreeModule_minimumElementOpt;
function SetTreeModule_maximumElementAux(t_mut, n_mut) {
    SetTreeModule_maximumElementAux: while(true){
        const t = t_mut, n = n_mut;
        if (t != null) {
            const t2 = t;
            if (t2 instanceof SetTreeNode$1) {
                t_mut = SetTreeNode$1__get_Right(t2);
                n_mut = SetTreeLeaf$1__get_Key(t2);
                continue SetTreeModule_maximumElementAux;
            } else return SetTreeLeaf$1__get_Key(t2);
        } else return n;
        break;
    }
}
_c40 = SetTreeModule_maximumElementAux;
function SetTreeModule_maximumElementOpt(t) {
    if (t != null) {
        const t2 = t;
        if (t2 instanceof SetTreeNode$1) return _optionJs.some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));
        else return _optionJs.some(SetTreeLeaf$1__get_Key(t2));
    } else return void 0;
}
_c41 = SetTreeModule_maximumElementOpt;
function SetTreeModule_minimumElement(s) {
    const matchValue = SetTreeModule_minimumElementOpt(s);
    if (matchValue == null) throw new Error("Set contains no elements");
    else return _optionJs.value(matchValue);
}
_c42 = SetTreeModule_minimumElement;
function SetTreeModule_maximumElement(s) {
    const matchValue = SetTreeModule_maximumElementOpt(s);
    if (matchValue == null) throw new Error("Set contains no elements");
    else return _optionJs.value(matchValue);
}
_c43 = SetTreeModule_maximumElement;
class SetTreeModule_SetIterator$1 extends _typesJs.Record {
    constructor(stack, started){
        super();
        this.stack = stack;
        this.started = started;
    }
}
function SetTreeModule_SetIterator$1$reflection(gen0) {
    return _reflectionJs.record_type("Set.SetTreeModule.SetIterator`1", [
        gen0
    ], SetTreeModule_SetIterator$1, ()=>[
            [
                "stack",
                _reflectionJs.list_type(_reflectionJs.option_type(SetTreeLeaf$1$reflection(gen0)))
            ],
            [
                "started", _reflectionJs.bool_type]
        ]
    );
}
_c44 = SetTreeModule_SetIterator$1$reflection;
function SetTreeModule_collapseLHS(stack_mut) {
    SetTreeModule_collapseLHS: while(true){
        const stack1 = stack_mut;
        if (!_listJs.isEmpty(stack1)) {
            const x = _listJs.head(stack1);
            const rest = _listJs.tail(stack1);
            if (x != null) {
                const x2 = x;
                if (x2 instanceof SetTreeNode$1) {
                    stack_mut = _listJs.ofArrayWithTail([
                        SetTreeNode$1__get_Left(x2),
                        SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)),
                        SetTreeNode$1__get_Right(x2)
                    ], rest);
                    continue SetTreeModule_collapseLHS;
                } else return stack1;
            } else {
                stack_mut = rest;
                continue SetTreeModule_collapseLHS;
            }
        } else return _listJs.empty();
        break;
    }
}
_c45 = SetTreeModule_collapseLHS;
function SetTreeModule_mkIterator(s) {
    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(_listJs.singleton(s)), false);
}
_c46 = SetTreeModule_mkIterator;
function SetTreeModule_notStarted() {
    throw new Error("Enumeration not started");
}
_c47 = SetTreeModule_notStarted;
function SetTreeModule_alreadyFinished() {
    throw new Error("Enumeration already started");
}
_c48 = SetTreeModule_alreadyFinished;
function SetTreeModule_current(i) {
    if (i.started) {
        const matchValue = i.stack;
        if (_listJs.isEmpty(matchValue)) return SetTreeModule_alreadyFinished();
        else if (_listJs.head(matchValue) != null) {
            const t = _listJs.head(matchValue);
            return SetTreeLeaf$1__get_Key(t);
        } else throw new Error("Please report error: Set iterator, unexpected stack for current");
    } else return SetTreeModule_notStarted();
}
_c49 = SetTreeModule_current;
function SetTreeModule_moveNext(i) {
    if (i.started) {
        const matchValue = i.stack;
        if (!_listJs.isEmpty(matchValue)) {
            if (_listJs.head(matchValue) != null) {
                const t = _listJs.head(matchValue);
                if (t instanceof SetTreeNode$1) throw new Error("Please report error: Set iterator, unexpected stack for moveNext");
                else {
                    i.stack = SetTreeModule_collapseLHS(_listJs.tail(matchValue));
                    return !_listJs.isEmpty(i.stack);
                }
            } else throw new Error("Please report error: Set iterator, unexpected stack for moveNext");
        } else return false;
    } else {
        i.started = true;
        return !_listJs.isEmpty(i.stack);
    }
}
_c50 = SetTreeModule_moveNext;
function SetTreeModule_mkIEnumerator(s) {
    let i = SetTreeModule_mkIterator(s);
    return {
        ["System.Collections.Generic.IEnumerator`1.get_Current"] () {
            return SetTreeModule_current(i);
        },
        ["System.Collections.IEnumerator.get_Current"] () {
            return SetTreeModule_current(i);
        },
        ["System.Collections.IEnumerator.MoveNext"] () {
            return SetTreeModule_moveNext(i);
        },
        ["System.Collections.IEnumerator.Reset"] () {
            i = SetTreeModule_mkIterator(s);
        },
        Dispose () {
        }
    };
}
_c51 = SetTreeModule_mkIEnumerator;
function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {
    SetTreeModule_compareStacks: while(true){
        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;
        const matchValue = [
            l1,
            l2
        ];
        if (!_listJs.isEmpty(matchValue[0])) {
            if (!_listJs.isEmpty(matchValue[1])) {
                if (_listJs.head(matchValue[1]) != null) {
                    if (_listJs.head(matchValue[0]) != null) {
                        const x1_3 = _listJs.head(matchValue[0]);
                        const x2_3 = _listJs.head(matchValue[1]);
                        if (x1_3 instanceof SetTreeNode$1) {
                            if (SetTreeNode$1__get_Left(x1_3) == null) {
                                if (x2_3 instanceof SetTreeNode$1) {
                                    if (SetTreeNode$1__get_Left(x2_3) == null) {
                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;
                                        if (c !== 0) return c | 0;
                                        else {
                                            comparer_mut = comparer;
                                            l1_mut = _listJs.cons(SetTreeNode$1__get_Right(x1_3), _listJs.tail(matchValue[0]));
                                            l2_mut = _listJs.cons(SetTreeNode$1__get_Right(x2_3), _listJs.tail(matchValue[1]));
                                            continue SetTreeModule_compareStacks;
                                        }
                                    } else {
                                        const matchValue_3 = [
                                            l1,
                                            l2
                                        ];
                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;
                                        if (!_listJs.isEmpty(matchValue_3[0])) {
                                            if (_listJs.head(matchValue_3[0]) != null) {
                                                pattern_matching_result = 0;
                                                t1_6 = _listJs.tail(matchValue_3[0]);
                                                x1_4 = _listJs.head(matchValue_3[0]);
                                            } else if (!_listJs.isEmpty(matchValue_3[1])) {
                                                if (_listJs.head(matchValue_3[1]) != null) {
                                                    pattern_matching_result = 1;
                                                    t2_6 = _listJs.tail(matchValue_3[1]);
                                                    x2_4 = _listJs.head(matchValue_3[1]);
                                                } else pattern_matching_result = 2;
                                            } else pattern_matching_result = 2;
                                        } else if (!_listJs.isEmpty(matchValue_3[1])) {
                                            if (_listJs.head(matchValue_3[1]) != null) {
                                                pattern_matching_result = 1;
                                                t2_6 = _listJs.tail(matchValue_3[1]);
                                                x2_4 = _listJs.head(matchValue_3[1]);
                                            } else pattern_matching_result = 2;
                                        } else pattern_matching_result = 2;
                                        switch(pattern_matching_result){
                                            case 0:
                                                if (x1_4 instanceof SetTreeNode$1) {
                                                    comparer_mut = comparer;
                                                    l1_mut = _listJs.ofArrayWithTail([
                                                        SetTreeNode$1__get_Left(x1_4),
                                                        SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)
                                                    ], t1_6);
                                                    l2_mut = l2;
                                                    continue SetTreeModule_compareStacks;
                                                } else {
                                                    comparer_mut = comparer;
                                                    l1_mut = _listJs.ofArrayWithTail([
                                                        SetTreeModule_empty(),
                                                        SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))
                                                    ], t1_6);
                                                    l2_mut = l2;
                                                    continue SetTreeModule_compareStacks;
                                                }
                                            case 1:
                                                if (x2_4 instanceof SetTreeNode$1) {
                                                    comparer_mut = comparer;
                                                    l1_mut = l1;
                                                    l2_mut = _listJs.ofArrayWithTail([
                                                        SetTreeNode$1__get_Left(x2_4),
                                                        SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)
                                                    ], t2_6);
                                                    continue SetTreeModule_compareStacks;
                                                } else {
                                                    comparer_mut = comparer;
                                                    l1_mut = l1;
                                                    l2_mut = _listJs.ofArrayWithTail([
                                                        SetTreeModule_empty(),
                                                        SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))
                                                    ], t2_6);
                                                    continue SetTreeModule_compareStacks;
                                                }
                                            case 2:
                                                throw new Error("unexpected state in SetTree.compareStacks");
                                        }
                                    }
                                } else {
                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;
                                    if (c_1 !== 0) return c_1 | 0;
                                    else {
                                        comparer_mut = comparer;
                                        l1_mut = _listJs.cons(SetTreeNode$1__get_Right(x1_3), _listJs.tail(matchValue[0]));
                                        l2_mut = _listJs.cons(SetTreeModule_empty(), _listJs.tail(matchValue[1]));
                                        continue SetTreeModule_compareStacks;
                                    }
                                }
                            } else {
                                const matchValue_4 = [
                                    l1,
                                    l2
                                ];
                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;
                                if (!_listJs.isEmpty(matchValue_4[0])) {
                                    if (_listJs.head(matchValue_4[0]) != null) {
                                        pattern_matching_result_1 = 0;
                                        t1_7 = _listJs.tail(matchValue_4[0]);
                                        x1_5 = _listJs.head(matchValue_4[0]);
                                    } else if (!_listJs.isEmpty(matchValue_4[1])) {
                                        if (_listJs.head(matchValue_4[1]) != null) {
                                            pattern_matching_result_1 = 1;
                                            t2_7 = _listJs.tail(matchValue_4[1]);
                                            x2_5 = _listJs.head(matchValue_4[1]);
                                        } else pattern_matching_result_1 = 2;
                                    } else pattern_matching_result_1 = 2;
                                } else if (!_listJs.isEmpty(matchValue_4[1])) {
                                    if (_listJs.head(matchValue_4[1]) != null) {
                                        pattern_matching_result_1 = 1;
                                        t2_7 = _listJs.tail(matchValue_4[1]);
                                        x2_5 = _listJs.head(matchValue_4[1]);
                                    } else pattern_matching_result_1 = 2;
                                } else pattern_matching_result_1 = 2;
                                switch(pattern_matching_result_1){
                                    case 0:
                                        if (x1_5 instanceof SetTreeNode$1) {
                                            comparer_mut = comparer;
                                            l1_mut = _listJs.ofArrayWithTail([
                                                SetTreeNode$1__get_Left(x1_5),
                                                SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)
                                            ], t1_7);
                                            l2_mut = l2;
                                            continue SetTreeModule_compareStacks;
                                        } else {
                                            comparer_mut = comparer;
                                            l1_mut = _listJs.ofArrayWithTail([
                                                SetTreeModule_empty(),
                                                SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))
                                            ], t1_7);
                                            l2_mut = l2;
                                            continue SetTreeModule_compareStacks;
                                        }
                                    case 1:
                                        if (x2_5 instanceof SetTreeNode$1) {
                                            comparer_mut = comparer;
                                            l1_mut = l1;
                                            l2_mut = _listJs.ofArrayWithTail([
                                                SetTreeNode$1__get_Left(x2_5),
                                                SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)
                                            ], t2_7);
                                            continue SetTreeModule_compareStacks;
                                        } else {
                                            comparer_mut = comparer;
                                            l1_mut = l1;
                                            l2_mut = _listJs.ofArrayWithTail([
                                                SetTreeModule_empty(),
                                                SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))
                                            ], t2_7);
                                            continue SetTreeModule_compareStacks;
                                        }
                                    case 2:
                                        throw new Error("unexpected state in SetTree.compareStacks");
                                }
                            }
                        } else if (x2_3 instanceof SetTreeNode$1) {
                            if (SetTreeNode$1__get_Left(x2_3) == null) {
                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;
                                if (c_2 !== 0) return c_2 | 0;
                                else {
                                    comparer_mut = comparer;
                                    l1_mut = _listJs.cons(SetTreeModule_empty(), _listJs.tail(matchValue[0]));
                                    l2_mut = _listJs.cons(SetTreeNode$1__get_Right(x2_3), _listJs.tail(matchValue[1]));
                                    continue SetTreeModule_compareStacks;
                                }
                            } else {
                                const matchValue_5 = [
                                    l1,
                                    l2
                                ];
                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;
                                if (!_listJs.isEmpty(matchValue_5[0])) {
                                    if (_listJs.head(matchValue_5[0]) != null) {
                                        pattern_matching_result_2 = 0;
                                        t1_8 = _listJs.tail(matchValue_5[0]);
                                        x1_6 = _listJs.head(matchValue_5[0]);
                                    } else if (!_listJs.isEmpty(matchValue_5[1])) {
                                        if (_listJs.head(matchValue_5[1]) != null) {
                                            pattern_matching_result_2 = 1;
                                            t2_8 = _listJs.tail(matchValue_5[1]);
                                            x2_6 = _listJs.head(matchValue_5[1]);
                                        } else pattern_matching_result_2 = 2;
                                    } else pattern_matching_result_2 = 2;
                                } else if (!_listJs.isEmpty(matchValue_5[1])) {
                                    if (_listJs.head(matchValue_5[1]) != null) {
                                        pattern_matching_result_2 = 1;
                                        t2_8 = _listJs.tail(matchValue_5[1]);
                                        x2_6 = _listJs.head(matchValue_5[1]);
                                    } else pattern_matching_result_2 = 2;
                                } else pattern_matching_result_2 = 2;
                                switch(pattern_matching_result_2){
                                    case 0:
                                        if (x1_6 instanceof SetTreeNode$1) {
                                            comparer_mut = comparer;
                                            l1_mut = _listJs.ofArrayWithTail([
                                                SetTreeNode$1__get_Left(x1_6),
                                                SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)
                                            ], t1_8);
                                            l2_mut = l2;
                                            continue SetTreeModule_compareStacks;
                                        } else {
                                            comparer_mut = comparer;
                                            l1_mut = _listJs.ofArrayWithTail([
                                                SetTreeModule_empty(),
                                                SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))
                                            ], t1_8);
                                            l2_mut = l2;
                                            continue SetTreeModule_compareStacks;
                                        }
                                    case 1:
                                        if (x2_6 instanceof SetTreeNode$1) {
                                            comparer_mut = comparer;
                                            l1_mut = l1;
                                            l2_mut = _listJs.ofArrayWithTail([
                                                SetTreeNode$1__get_Left(x2_6),
                                                SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)
                                            ], t2_8);
                                            continue SetTreeModule_compareStacks;
                                        } else {
                                            comparer_mut = comparer;
                                            l1_mut = l1;
                                            l2_mut = _listJs.ofArrayWithTail([
                                                SetTreeModule_empty(),
                                                SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))
                                            ], t2_8);
                                            continue SetTreeModule_compareStacks;
                                        }
                                    case 2:
                                        throw new Error("unexpected state in SetTree.compareStacks");
                                }
                            }
                        } else {
                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;
                            if (c_3 !== 0) return c_3 | 0;
                            else {
                                comparer_mut = comparer;
                                l1_mut = _listJs.tail(matchValue[0]);
                                l2_mut = _listJs.tail(matchValue[1]);
                                continue SetTreeModule_compareStacks;
                            }
                        }
                    } else {
                        const x2 = _listJs.head(matchValue[1]);
                        const matchValue_1 = [
                            l1,
                            l2
                        ];
                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;
                        if (!_listJs.isEmpty(matchValue_1[0])) {
                            if (_listJs.head(matchValue_1[0]) != null) {
                                pattern_matching_result_3 = 0;
                                t1_2 = _listJs.tail(matchValue_1[0]);
                                x1 = _listJs.head(matchValue_1[0]);
                            } else if (!_listJs.isEmpty(matchValue_1[1])) {
                                if (_listJs.head(matchValue_1[1]) != null) {
                                    pattern_matching_result_3 = 1;
                                    t2_2 = _listJs.tail(matchValue_1[1]);
                                    x2_1 = _listJs.head(matchValue_1[1]);
                                } else pattern_matching_result_3 = 2;
                            } else pattern_matching_result_3 = 2;
                        } else if (!_listJs.isEmpty(matchValue_1[1])) {
                            if (_listJs.head(matchValue_1[1]) != null) {
                                pattern_matching_result_3 = 1;
                                t2_2 = _listJs.tail(matchValue_1[1]);
                                x2_1 = _listJs.head(matchValue_1[1]);
                            } else pattern_matching_result_3 = 2;
                        } else pattern_matching_result_3 = 2;
                        switch(pattern_matching_result_3){
                            case 0:
                                if (x1 instanceof SetTreeNode$1) {
                                    comparer_mut = comparer;
                                    l1_mut = _listJs.ofArrayWithTail([
                                        SetTreeNode$1__get_Left(x1),
                                        SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)
                                    ], t1_2);
                                    l2_mut = l2;
                                    continue SetTreeModule_compareStacks;
                                } else {
                                    comparer_mut = comparer;
                                    l1_mut = _listJs.ofArrayWithTail([
                                        SetTreeModule_empty(),
                                        SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))
                                    ], t1_2);
                                    l2_mut = l2;
                                    continue SetTreeModule_compareStacks;
                                }
                            case 1:
                                if (x2_1 instanceof SetTreeNode$1) {
                                    comparer_mut = comparer;
                                    l1_mut = l1;
                                    l2_mut = _listJs.ofArrayWithTail([
                                        SetTreeNode$1__get_Left(x2_1),
                                        SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)
                                    ], t2_2);
                                    continue SetTreeModule_compareStacks;
                                } else {
                                    comparer_mut = comparer;
                                    l1_mut = l1;
                                    l2_mut = _listJs.ofArrayWithTail([
                                        SetTreeModule_empty(),
                                        SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))
                                    ], t2_2);
                                    continue SetTreeModule_compareStacks;
                                }
                            case 2:
                                throw new Error("unexpected state in SetTree.compareStacks");
                        }
                    }
                } else if (_listJs.head(matchValue[0]) != null) {
                    const x1_1 = _listJs.head(matchValue[0]);
                    const matchValue_2 = [
                        l1,
                        l2
                    ];
                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;
                    if (!_listJs.isEmpty(matchValue_2[0])) {
                        if (_listJs.head(matchValue_2[0]) != null) {
                            pattern_matching_result_4 = 0;
                            t1_4 = _listJs.tail(matchValue_2[0]);
                            x1_2 = _listJs.head(matchValue_2[0]);
                        } else if (!_listJs.isEmpty(matchValue_2[1])) {
                            if (_listJs.head(matchValue_2[1]) != null) {
                                pattern_matching_result_4 = 1;
                                t2_4 = _listJs.tail(matchValue_2[1]);
                                x2_2 = _listJs.head(matchValue_2[1]);
                            } else pattern_matching_result_4 = 2;
                        } else pattern_matching_result_4 = 2;
                    } else if (!_listJs.isEmpty(matchValue_2[1])) {
                        if (_listJs.head(matchValue_2[1]) != null) {
                            pattern_matching_result_4 = 1;
                            t2_4 = _listJs.tail(matchValue_2[1]);
                            x2_2 = _listJs.head(matchValue_2[1]);
                        } else pattern_matching_result_4 = 2;
                    } else pattern_matching_result_4 = 2;
                    switch(pattern_matching_result_4){
                        case 0:
                            if (x1_2 instanceof SetTreeNode$1) {
                                comparer_mut = comparer;
                                l1_mut = _listJs.ofArrayWithTail([
                                    SetTreeNode$1__get_Left(x1_2),
                                    SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)
                                ], t1_4);
                                l2_mut = l2;
                                continue SetTreeModule_compareStacks;
                            } else {
                                comparer_mut = comparer;
                                l1_mut = _listJs.ofArrayWithTail([
                                    SetTreeModule_empty(),
                                    SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))
                                ], t1_4);
                                l2_mut = l2;
                                continue SetTreeModule_compareStacks;
                            }
                        case 1:
                            if (x2_2 instanceof SetTreeNode$1) {
                                comparer_mut = comparer;
                                l1_mut = l1;
                                l2_mut = _listJs.ofArrayWithTail([
                                    SetTreeNode$1__get_Left(x2_2),
                                    SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)
                                ], t2_4);
                                continue SetTreeModule_compareStacks;
                            } else {
                                comparer_mut = comparer;
                                l1_mut = l1;
                                l2_mut = _listJs.ofArrayWithTail([
                                    SetTreeModule_empty(),
                                    SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))
                                ], t2_4);
                                continue SetTreeModule_compareStacks;
                            }
                        case 2:
                            throw new Error("unexpected state in SetTree.compareStacks");
                    }
                } else {
                    comparer_mut = comparer;
                    l1_mut = _listJs.tail(matchValue[0]);
                    l2_mut = _listJs.tail(matchValue[1]);
                    continue SetTreeModule_compareStacks;
                }
            } else return 1;
        } else if (_listJs.isEmpty(matchValue[1])) return 0;
        else return -1;
        break;
    }
}
_c52 = SetTreeModule_compareStacks;
function SetTreeModule_compare(comparer, t1, t2) {
    if (t1 == null) {
        if (t2 == null) return 0;
        else return -1;
    } else if (t2 == null) return 1;
    else return SetTreeModule_compareStacks(comparer, _listJs.singleton(t1), _listJs.singleton(t2)) | 0;
}
_c53 = SetTreeModule_compare;
function SetTreeModule_choose(s) {
    return SetTreeModule_minimumElement(s);
}
_c54 = SetTreeModule_choose;
function SetTreeModule_toList(t) {
    const loop = (t$0027_mut, acc_mut)=>{
        loop: while(true){
            const t$0027 = t$0027_mut, acc = acc_mut;
            if (t$0027 != null) {
                const t2 = t$0027;
                if (t2 instanceof SetTreeNode$1) {
                    t$0027_mut = SetTreeNode$1__get_Left(t2);
                    acc_mut = _listJs.cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));
                    continue loop;
                } else return _listJs.cons(SetTreeLeaf$1__get_Key(t2), acc);
            } else return acc;
            break;
        }
    };
    return loop(t, _listJs.empty());
}
_c55 = SetTreeModule_toList;
function SetTreeModule_copyToArray(s, arr, i) {
    let j = i;
    SetTreeModule_iter((x)=>{
        arr[j] = x;
        j = j + 1 | 0;
    }, s);
}
_c56 = SetTreeModule_copyToArray;
function SetTreeModule_toArray(s) {
    const n = SetTreeModule_count(s) | 0;
    const res = _arrayJs.fill(new Array(n), 0, n, null);
    SetTreeModule_copyToArray(s, res, 0);
    return res;
}
_c57 = SetTreeModule_toArray;
function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {
    SetTreeModule_mkFromEnumerator: while(true){
        const comparer = comparer_mut, acc = acc_mut, e = e_mut;
        if (e["System.Collections.IEnumerator.MoveNext"]()) {
            comparer_mut = comparer;
            acc_mut = SetTreeModule_add(comparer, e["System.Collections.Generic.IEnumerator`1.get_Current"](), acc);
            e_mut = e;
            continue SetTreeModule_mkFromEnumerator;
        } else return acc;
        break;
    }
}
_c58 = SetTreeModule_mkFromEnumerator;
function SetTreeModule_ofArray(comparer, l) {
    return _arrayJs.fold((acc, k1)=>SetTreeModule_add(comparer, k1, acc)
    , SetTreeModule_empty(), l);
}
_c59 = SetTreeModule_ofArray;
function SetTreeModule_ofList(comparer, l) {
    return _listJs.fold((acc, k1)=>SetTreeModule_add(comparer, k1, acc)
    , SetTreeModule_empty(), l);
}
_c60 = SetTreeModule_ofList;
function SetTreeModule_ofSeq(comparer, c) {
    if (_utilJs.isArrayLike(c)) return SetTreeModule_ofArray(comparer, c);
    else if (c instanceof _listJs.FSharpList) return SetTreeModule_ofList(comparer, c);
    else {
        const ie = _utilJs.getEnumerator(c);
        try {
            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);
        } finally{
            ie.Dispose();
        }
    }
}
_c61 = SetTreeModule_ofSeq;
class FSharpSet {
    constructor(comparer, tree){
        this.comparer = comparer;
        this.tree = tree;
    }
    GetHashCode() {
        const this$ = this;
        return FSharpSet__ComputeHashCode(this$) | 0;
    }
    Equals(that) {
        const this$ = this;
        return that instanceof FSharpSet ? SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0 : false;
    }
    toString() {
        const this$ = this;
        return "set [" + _stringJs.join("; ", _seqJs.map((x)=>{
            let copyOfStruct = x;
            return _typesJs.toString(copyOfStruct);
        }, this$)) + "]";
    }
    get [Symbol.toStringTag]() {
        return "FSharpSet";
    }
    toJSON(_key) {
        const this$ = this;
        return Array.from(this$);
    }
    CompareTo(that) {
        const s = this;
        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;
    }
    ["System.Collections.Generic.ICollection`1.Add2B595"](x) {
        throw new Error("ReadOnlyCollection");
    }
    ["System.Collections.Generic.ICollection`1.Clear"]() {
        throw new Error("ReadOnlyCollection");
    }
    ["System.Collections.Generic.ICollection`1.Remove2B595"](x) {
        throw new Error("ReadOnlyCollection");
    }
    ["System.Collections.Generic.ICollection`1.Contains2B595"](x) {
        const s = this;
        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));
    }
    ["System.Collections.Generic.ICollection`1.CopyToZ2E171D71"](arr, i) {
        const s = this;
        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);
    }
    ["System.Collections.Generic.ICollection`1.get_IsReadOnly"]() {
        return true;
    }
    ["System.Collections.Generic.ICollection`1.get_Count"]() {
        const s = this;
        return FSharpSet__get_Count(s) | 0;
    }
    ["System.Collections.Generic.IReadOnlyCollection`1.get_Count"]() {
        const s = this;
        return FSharpSet__get_Count(s) | 0;
    }
    GetEnumerator() {
        const s = this;
        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));
    }
    [Symbol.iterator]() {
        return _utilJs.toIterator(this.GetEnumerator());
    }
    ["System.Collections.IEnumerable.GetEnumerator"]() {
        const s = this;
        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));
    }
    get size() {
        const s = this;
        return FSharpSet__get_Count(s) | 0;
    }
    add(k) {
        const s = this;
        throw new Error("Set cannot be mutated");
    }
    clear() {
        throw new Error("Set cannot be mutated");
    }
    delete(k) {
        throw new Error("Set cannot be mutated");
    }
    has(k) {
        const s = this;
        return FSharpSet__Contains(s, k);
    }
    keys() {
        const s = this;
        return _seqJs.map((x)=>x
        , s);
    }
    values() {
        const s = this;
        return _seqJs.map((x)=>x
        , s);
    }
    entries() {
        const s = this;
        return _seqJs.map((v1)=>[
                v1,
                v1
            ]
        , s);
    }
    forEach(f, thisArg) {
        const s = this;
        _seqJs.iterate((x)=>{
            f(x, x, s);
        }, s);
    }
}
function FSharpSet$reflection(gen0) {
    return _reflectionJs.class_type("Set.FSharpSet", [
        gen0
    ], FSharpSet);
}
_c62 = FSharpSet$reflection;
function FSharpSet_$ctor(comparer1, tree1) {
    return new FSharpSet(comparer1, tree1);
}
_c63 = FSharpSet_$ctor;
function FSharpSet__get_Comparer(set$) {
    return set$.comparer;
}
_c64 = FSharpSet__get_Comparer;
function FSharpSet__get_Tree(set$) {
    return set$.tree;
}
_c65 = FSharpSet__get_Tree;
function FSharpSet_Empty(comparer1) {
    return FSharpSet_$ctor(comparer1, SetTreeModule_empty());
}
_c66 = FSharpSet_Empty;
function FSharpSet__Add(s, value) {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));
}
_c67 = FSharpSet__Add;
function FSharpSet__Remove(s, value) {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));
}
_c68 = FSharpSet__Remove;
function FSharpSet__get_Count(s) {
    return SetTreeModule_count(FSharpSet__get_Tree(s));
}
_c69 = FSharpSet__get_Count;
function FSharpSet__Contains(s, value) {
    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));
}
_c70 = FSharpSet__Contains;
function FSharpSet__Iterate(s, x) {
    SetTreeModule_iter(x, FSharpSet__get_Tree(s));
}
_c71 = FSharpSet__Iterate;
function FSharpSet__Fold(s, f, z) {
    const f_1 = f;
    return SetTreeModule_fold((x, z_1)=>f_1(z_1, x)
    , z, FSharpSet__get_Tree(s));
}
_c72 = FSharpSet__Fold;
function FSharpSet__get_IsEmpty(s) {
    return FSharpSet__get_Tree(s) == null;
}
_c73 = FSharpSet__get_IsEmpty;
function FSharpSet__Partition(s, f) {
    if (FSharpSet__get_Tree(s) == null) return [
        s,
        s
    ];
    else {
        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));
        return [
            FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]),
            FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])
        ];
    }
}
_c74 = FSharpSet__Partition;
function FSharpSet__Filter(s, f) {
    if (FSharpSet__get_Tree(s) == null) return s;
    else return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));
}
_c75 = FSharpSet__Filter;
function FSharpSet__Map(s, f, comparer1) {
    return FSharpSet_$ctor(comparer1, SetTreeModule_fold((acc, k2)=>SetTreeModule_add(comparer1, f(k2), acc)
    , SetTreeModule_empty(), FSharpSet__get_Tree(s)));
}
_c76 = FSharpSet__Map;
function FSharpSet__Exists(s, f) {
    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));
}
_c77 = FSharpSet__Exists;
function FSharpSet__ForAll(s, f) {
    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));
}
_c78 = FSharpSet__ForAll;
function FSharpSet_op_Subtraction(set1, set2) {
    if (FSharpSet__get_Tree(set1) == null) return set1;
    else if (FSharpSet__get_Tree(set2) == null) return set1;
    else return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));
}
_c79 = FSharpSet_op_Subtraction;
function FSharpSet_op_Addition(set1, set2) {
    if (FSharpSet__get_Tree(set2) == null) return set1;
    else if (FSharpSet__get_Tree(set1) == null) return set2;
    else return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));
}
_c80 = FSharpSet_op_Addition;
function FSharpSet_Intersection(a, b) {
    if (FSharpSet__get_Tree(b) == null) return b;
    else if (FSharpSet__get_Tree(a) == null) return a;
    else return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));
}
_c81 = FSharpSet_Intersection;
function FSharpSet_IntersectionMany(sets) {
    return _seqJs.reduce((s1, s2)=>FSharpSet_Intersection(s1, s2)
    , sets);
}
_c82 = FSharpSet_IntersectionMany;
function FSharpSet_Equality(a, b) {
    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;
}
_c83 = FSharpSet_Equality;
function FSharpSet_Compare(a, b) {
    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));
}
_c84 = FSharpSet_Compare;
function FSharpSet__get_Choose(x) {
    return SetTreeModule_choose(FSharpSet__get_Tree(x));
}
_c85 = FSharpSet__get_Choose;
function FSharpSet__get_MinimumElement(x) {
    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));
}
_c86 = FSharpSet__get_MinimumElement;
function FSharpSet__get_MaximumElement(x) {
    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));
}
_c87 = FSharpSet__get_MaximumElement;
function FSharpSet__IsSubsetOf(x, otherSet) {
    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));
}
_c88 = FSharpSet__IsSubsetOf;
function FSharpSet__IsSupersetOf(x, otherSet) {
    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));
}
_c89 = FSharpSet__IsSupersetOf;
function FSharpSet__IsProperSubsetOf(x, otherSet) {
    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));
}
_c90 = FSharpSet__IsProperSubsetOf;
function FSharpSet__IsProperSupersetOf(x, otherSet) {
    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));
}
_c91 = FSharpSet__IsProperSupersetOf;
function FSharpSet__ToList(x) {
    return SetTreeModule_toList(FSharpSet__get_Tree(x));
}
_c92 = FSharpSet__ToList;
function FSharpSet__ToArray(x) {
    return SetTreeModule_toArray(FSharpSet__get_Tree(x));
}
_c93 = FSharpSet__ToArray;
function FSharpSet__ComputeHashCode(this$) {
    let y;
    let res = 0;
    const enumerator = _utilJs.getEnumerator(this$);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const x_1 = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            res = (y = _utilJs.structuralHash(x_1) | 0, (res << 1) + y + 631) | 0;
        }
    } finally{
        enumerator.Dispose();
    }
    return Math.abs(res) | 0;
}
_c94 = FSharpSet__ComputeHashCode;
function isEmpty(set$) {
    return FSharpSet__get_IsEmpty(set$);
}
function contains(element, set$) {
    return FSharpSet__Contains(set$, element);
}
function add(value, set$) {
    return FSharpSet__Add(set$, value);
}
function singleton(value, comparer1) {
    return FSharpSet__Add(FSharpSet_Empty(comparer1), value);
}
function remove(value, set$) {
    return FSharpSet__Remove(set$, value);
}
function union(set1, set2) {
    return FSharpSet_op_Addition(set1, set2);
}
function unionMany(sets, comparer1) {
    return _seqJs.fold((s1, s2)=>FSharpSet_op_Addition(s1, s2)
    , FSharpSet_Empty(comparer1), sets);
}
function intersect(set1, set2) {
    return FSharpSet_Intersection(set1, set2);
}
function intersectMany(sets) {
    return FSharpSet_IntersectionMany(sets);
}
function iterate(action, set$) {
    FSharpSet__Iterate(set$, action);
}
function empty(comparer1) {
    return FSharpSet_Empty(comparer1);
}
function forAll(predicate, set$) {
    return FSharpSet__ForAll(set$, predicate);
}
function exists(predicate, set$) {
    return FSharpSet__Exists(set$, predicate);
}
function filter(predicate, set$) {
    return FSharpSet__Filter(set$, predicate);
}
function partition(predicate, set$) {
    return FSharpSet__Partition(set$, predicate);
}
function fold(folder, state, set$) {
    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));
}
function foldBack(folder, set$, state) {
    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);
}
function map(mapping, set$, comparer1) {
    return FSharpSet__Map(set$, mapping, comparer1);
}
function count(set$) {
    return FSharpSet__get_Count(set$);
}
function ofList(elements, comparer1) {
    return FSharpSet_$ctor(comparer1, SetTreeModule_ofSeq(comparer1, elements));
}
function ofArray(array, comparer1) {
    return FSharpSet_$ctor(comparer1, SetTreeModule_ofArray(comparer1, array));
}
function toList(set$) {
    return FSharpSet__ToList(set$);
}
function toArray(set$) {
    return FSharpSet__ToArray(set$);
}
function toSeq(set$) {
    return _seqJs.map((x)=>x
    , set$);
}
function ofSeq(elements, comparer1) {
    return FSharpSet_$ctor(comparer1, SetTreeModule_ofSeq(comparer1, elements));
}
function difference(set1, set2) {
    return FSharpSet_op_Subtraction(set1, set2);
}
function isSubset(set1, set2) {
    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));
}
function isSuperset(set1, set2) {
    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));
}
function isProperSubset(set1, set2) {
    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));
}
function isProperSuperset(set1, set2) {
    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));
}
function minElement(set$) {
    return FSharpSet__get_MinimumElement(set$);
}
function maxElement(set$) {
    return FSharpSet__get_MaximumElement(set$);
}
function unionWith(s1, s2) {
    return _seqJs.fold((acc, x)=>acc.add(x)
    , s1, s2);
}
function intersectWith(s1, s2, comparer1) {
    const s2_1 = ofSeq(s2, comparer1);
    const enumerator = _utilJs.getEnumerator(s1.keys());
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]()){
            const x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
            if (!FSharpSet__Contains(s2_1, x)) s1.delete(x);
        }
    } finally{
        enumerator.Dispose();
    }
}
function exceptWith(s1, s2) {
    const enumerator = _utilJs.getEnumerator(s2);
    try {
        while(enumerator["System.Collections.IEnumerator.MoveNext"]())s1.delete(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());
    } finally{
        enumerator.Dispose();
    }
}
function isSubsetOf(s1, s2, comparer1) {
    return isSubset(ofSeq(s1.values(), comparer1), ofSeq(s2, comparer1));
}
function isSupersetOf(s1, s2, comparer1) {
    return isSuperset(ofSeq(s1.values(), comparer1), ofSeq(s2, comparer1));
}
function isProperSubsetOf(s1, s2, comparer1) {
    return isProperSubset(ofSeq(s1.values(), comparer1), ofSeq(s2, comparer1));
}
function isProperSupersetOf(s1, s2, comparer1) {
    return isProperSuperset(ofSeq(s1.values(), comparer1), ofSeq(s2, comparer1));
}
var _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94;
$RefreshReg$(_c, "SetTreeLeaf$1$reflection");
$RefreshReg$(_c1, "SetTreeLeaf$1_$ctor_2B595");
$RefreshReg$(_c2, "SetTreeLeaf$1__get_Key");
$RefreshReg$(_c3, "SetTreeNode$1$reflection");
$RefreshReg$(_c4, "SetTreeNode$1_$ctor_Z6E7BE5F7");
$RefreshReg$(_c5, "SetTreeNode$1__get_Left");
$RefreshReg$(_c6, "SetTreeNode$1__get_Right");
$RefreshReg$(_c7, "SetTreeNode$1__get_Height");
$RefreshReg$(_c8, "SetTreeModule_empty");
$RefreshReg$(_c9, "SetTreeModule_countAux");
$RefreshReg$(_c10, "SetTreeModule_count");
$RefreshReg$(_c11, "SetTreeModule_mk");
$RefreshReg$(_c12, "SetTreeModule_rebalance");
$RefreshReg$(_c13, "SetTreeModule_add");
$RefreshReg$(_c14, "SetTreeModule_balance");
$RefreshReg$(_c15, "SetTreeModule_split");
$RefreshReg$(_c16, "SetTreeModule_spliceOutSuccessor");
$RefreshReg$(_c17, "SetTreeModule_remove");
$RefreshReg$(_c18, "SetTreeModule_mem");
$RefreshReg$(_c19, "SetTreeModule_iter");
$RefreshReg$(_c20, "SetTreeModule_foldBackOpt");
$RefreshReg$(_c21, "SetTreeModule_foldBack");
$RefreshReg$(_c22, "SetTreeModule_foldOpt");
$RefreshReg$(_c23, "SetTreeModule_fold");
$RefreshReg$(_c24, "SetTreeModule_forall");
$RefreshReg$(_c25, "SetTreeModule_exists");
$RefreshReg$(_c26, "SetTreeModule_subset");
$RefreshReg$(_c27, "SetTreeModule_properSubset");
$RefreshReg$(_c28, "SetTreeModule_filterAux");
$RefreshReg$(_c29, "SetTreeModule_filter");
$RefreshReg$(_c30, "SetTreeModule_diffAux");
$RefreshReg$(_c31, "SetTreeModule_diff");
$RefreshReg$(_c32, "SetTreeModule_union");
$RefreshReg$(_c33, "SetTreeModule_intersectionAux");
$RefreshReg$(_c34, "SetTreeModule_intersection");
$RefreshReg$(_c35, "SetTreeModule_partition1");
$RefreshReg$(_c36, "SetTreeModule_partitionAux");
$RefreshReg$(_c37, "SetTreeModule_partition");
$RefreshReg$(_c38, "SetTreeModule_minimumElementAux");
$RefreshReg$(_c39, "SetTreeModule_minimumElementOpt");
$RefreshReg$(_c40, "SetTreeModule_maximumElementAux");
$RefreshReg$(_c41, "SetTreeModule_maximumElementOpt");
$RefreshReg$(_c42, "SetTreeModule_minimumElement");
$RefreshReg$(_c43, "SetTreeModule_maximumElement");
$RefreshReg$(_c44, "SetTreeModule_SetIterator$1$reflection");
$RefreshReg$(_c45, "SetTreeModule_collapseLHS");
$RefreshReg$(_c46, "SetTreeModule_mkIterator");
$RefreshReg$(_c47, "SetTreeModule_notStarted");
$RefreshReg$(_c48, "SetTreeModule_alreadyFinished");
$RefreshReg$(_c49, "SetTreeModule_current");
$RefreshReg$(_c50, "SetTreeModule_moveNext");
$RefreshReg$(_c51, "SetTreeModule_mkIEnumerator");
$RefreshReg$(_c52, "SetTreeModule_compareStacks");
$RefreshReg$(_c53, "SetTreeModule_compare");
$RefreshReg$(_c54, "SetTreeModule_choose");
$RefreshReg$(_c55, "SetTreeModule_toList");
$RefreshReg$(_c56, "SetTreeModule_copyToArray");
$RefreshReg$(_c57, "SetTreeModule_toArray");
$RefreshReg$(_c58, "SetTreeModule_mkFromEnumerator");
$RefreshReg$(_c59, "SetTreeModule_ofArray");
$RefreshReg$(_c60, "SetTreeModule_ofList");
$RefreshReg$(_c61, "SetTreeModule_ofSeq");
$RefreshReg$(_c62, "FSharpSet$reflection");
$RefreshReg$(_c63, "FSharpSet_$ctor");
$RefreshReg$(_c64, "FSharpSet__get_Comparer");
$RefreshReg$(_c65, "FSharpSet__get_Tree");
$RefreshReg$(_c66, "FSharpSet_Empty");
$RefreshReg$(_c67, "FSharpSet__Add");
$RefreshReg$(_c68, "FSharpSet__Remove");
$RefreshReg$(_c69, "FSharpSet__get_Count");
$RefreshReg$(_c70, "FSharpSet__Contains");
$RefreshReg$(_c71, "FSharpSet__Iterate");
$RefreshReg$(_c72, "FSharpSet__Fold");
$RefreshReg$(_c73, "FSharpSet__get_IsEmpty");
$RefreshReg$(_c74, "FSharpSet__Partition");
$RefreshReg$(_c75, "FSharpSet__Filter");
$RefreshReg$(_c76, "FSharpSet__Map");
$RefreshReg$(_c77, "FSharpSet__Exists");
$RefreshReg$(_c78, "FSharpSet__ForAll");
$RefreshReg$(_c79, "FSharpSet_op_Subtraction");
$RefreshReg$(_c80, "FSharpSet_op_Addition");
$RefreshReg$(_c81, "FSharpSet_Intersection");
$RefreshReg$(_c82, "FSharpSet_IntersectionMany");
$RefreshReg$(_c83, "FSharpSet_Equality");
$RefreshReg$(_c84, "FSharpSet_Compare");
$RefreshReg$(_c85, "FSharpSet__get_Choose");
$RefreshReg$(_c86, "FSharpSet__get_MinimumElement");
$RefreshReg$(_c87, "FSharpSet__get_MaximumElement");
$RefreshReg$(_c88, "FSharpSet__IsSubsetOf");
$RefreshReg$(_c89, "FSharpSet__IsSupersetOf");
$RefreshReg$(_c90, "FSharpSet__IsProperSubsetOf");
$RefreshReg$(_c91, "FSharpSet__IsProperSupersetOf");
$RefreshReg$(_c92, "FSharpSet__ToList");
$RefreshReg$(_c93, "FSharpSet__ToArray");
$RefreshReg$(_c94, "FSharpSet__ComputeHashCode");

},{"./Reflection.js":"c0YT4","./Option.js":"gHWVf","./Types.js":"7IOW0","./List.js":"3UB49","./Array.js":"dl8am","./Util.js":"e4VZ7","./String.js":"baXBU","./Seq.js":"app8U","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4rlC6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "empty", ()=>empty
);
var _mapJs = require("../fable-library.3.2.10/Map.js");
var _typesFsJs = require("./Types.fs.js");
const empty = new _typesFsJs.ExtraCoders("", _mapJs.empty());

},{"../fable-library.3.2.10/Map.js":"8mQPo","./Types.fs.js":"1K9qR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jEftg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Options$1", ()=>Options$1
);
parcelHelpers.export(exports, "Options$1$reflection", ()=>Options$1$reflection
);
parcelHelpers.export(exports, "Action", ()=>Action
);
parcelHelpers.export(exports, "Action$reflection", ()=>Action$reflection
);
parcelHelpers.export(exports, "LiftedState", ()=>LiftedState
);
parcelHelpers.export(exports, "LiftedState$reflection", ()=>LiftedState$reflection
);
parcelHelpers.export(exports, "Payload", ()=>Payload
);
parcelHelpers.export(exports, "Payload$reflection", ()=>Payload$reflection
);
parcelHelpers.export(exports, "Msg", ()=>Msg
);
parcelHelpers.export(exports, "Msg$reflection", ()=>Msg$reflection
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
class Options$1 extends _typesJs.Record {
    constructor(remote, port, hostname, secure, getActionType){
        super();
        this.remote = remote;
        this.port = port | 0;
        this.hostname = hostname;
        this.secure = secure;
        this.getActionType = getActionType;
    }
}
function Options$1$reflection(gen0) {
    return _reflectionJs.record_type("Fable.Import.RemoteDev.Options`1", [
        gen0
    ], Options$1, ()=>[
            [
                "remote", _reflectionJs.bool_type],
            [
                "port", _reflectionJs.int32_type],
            [
                "hostname", _reflectionJs.string_type],
            [
                "secure", _reflectionJs.bool_type],
            [
                "getActionType",
                _reflectionJs.option_type(_reflectionJs.lambda_type(gen0, _reflectionJs.obj_type))
            ]
        ]
    );
}
_c = Options$1$reflection;
class Action extends _typesJs.Record {
    constructor(type, fields){
        super();
        this.type = type;
        this.fields = fields;
    }
}
function Action$reflection() {
    return _reflectionJs.record_type("Fable.Import.RemoteDev.Action", [], Action, ()=>[
            [
                "type", _reflectionJs.string_type],
            [
                "fields",
                _reflectionJs.array_type(_reflectionJs.obj_type)
            ]
        ]
    );
}
_c1 = Action$reflection;
class LiftedState extends _typesJs.Record {
    constructor(actionsById, computedStates, currentStateIndex, nextActionId){
        super();
        this.actionsById = actionsById;
        this.computedStates = computedStates;
        this.currentStateIndex = currentStateIndex | 0;
        this.nextActionId = nextActionId | 0;
    }
}
function LiftedState$reflection() {
    return _reflectionJs.record_type("Fable.Import.RemoteDev.LiftedState", [], LiftedState, ()=>[
            [
                "actionsById",
                _reflectionJs.array_type(Action$reflection())
            ],
            [
                "computedStates",
                _reflectionJs.array_type(_reflectionJs.obj_type)
            ],
            [
                "currentStateIndex", _reflectionJs.int32_type],
            [
                "nextActionId", _reflectionJs.int32_type]
        ]
    );
}
_c2 = LiftedState$reflection;
class Payload extends _typesJs.Record {
    constructor(nextLiftedState, type1){
        super();
        this.nextLiftedState = nextLiftedState;
        this.type = type1;
    }
}
function Payload$reflection() {
    return _reflectionJs.record_type("Fable.Import.RemoteDev.Payload", [], Payload, ()=>[
            [
                "nextLiftedState",
                LiftedState$reflection()
            ],
            [
                "type", _reflectionJs.string_type]
        ]
    );
}
_c3 = Payload$reflection;
class Msg extends _typesJs.Record {
    constructor(state, action, type2, payload){
        super();
        this.state = state;
        this.action = action;
        this.type = type2;
        this.payload = payload;
    }
}
function Msg$reflection() {
    return _reflectionJs.record_type("Fable.Import.RemoteDev.Msg", [], Msg, ()=>[
            [
                "state", _reflectionJs.string_type],
            [
                "action", _reflectionJs.obj_type],
            [
                "type", _reflectionJs.string_type],
            [
                "payload",
                Payload$reflection()
            ]
        ]
    );
}
_c4 = Msg$reflection;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "Options$1$reflection");
$RefreshReg$(_c1, "Action$reflection");
$RefreshReg$(_c2, "LiftedState$reflection");
$RefreshReg$(_c3, "Payload$reflection");
$RefreshReg$(_c4, "Msg$reflection");

},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3nIsZ":[function(require,module,exports) {
module.exports = JSON.parse("{\"de\":{\"translation\":{\"About\":\"Über uns\",\"LandingHeader\":\"Willkommen auf der Landing Page\",\"SectionOne\":\"Dies ist Abschnitt 1\"}},\"en\":{\"translation\":{\"About\":\"About\",\"LandingHeader\":\"Welcome to the Landing Page\",\"SectionOne\":\"This is section 1\"}}}");

},{}],"jOrcr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Internal_Platform", ()=>Internal_Platform
);
parcelHelpers.export(exports, "Internal_Platform$reflection", ()=>Internal_Platform$reflection
);
parcelHelpers.export(exports, "Internal_platform", ()=>Internal_platform
);
parcelHelpers.export(exports, "Internal_tryRestoreState", ()=>Internal_tryRestoreState
);
parcelHelpers.export(exports, "Internal_saveState", ()=>Internal_saveState
);
parcelHelpers.export(exports, "Msg$1", ()=>Msg$1
);
parcelHelpers.export(exports, "Msg$1$reflection", ()=>Msg$1$reflection
);
parcelHelpers.export(exports, "Model$1", ()=>Model$1
);
parcelHelpers.export(exports, "Model$1$reflection", ()=>Model$1$reflection
);
var _typesJs = require("../fable-library.3.2.10/Types.js");
var _reflectionJs = require("../fable-library.3.2.10/Reflection.js");
var _optionJs = require("../fable-library.3.2.10/Option.js");
class Internal_Platform extends _typesJs.Union {
    constructor(tag, ...fields){
        super();
        this.tag = tag | 0;
        this.fields = fields;
    }
    cases() {
        return [
            "Browser",
            "ReactNative"
        ];
    }
}
function Internal_Platform$reflection() {
    return _reflectionJs.union_type("Elmish.HMR.Program.Internal.Platform", [], Internal_Platform, ()=>[
            [],
            []
        ]
    );
}
_c = Internal_Platform$reflection;
const Internal_platform = window.navigator.product === "ReactNative" ? new Internal_Platform(1) : new Internal_Platform(0);
function Internal_tryRestoreState(hot) {
    if (Internal_platform.tag === 0) {
        const data = hot.data;
        if (!(data == null) ? !(data.hmrState == null) : false) return _optionJs.some(data.hmrState);
        else return void 0;
    } else {
        const hmrState = window.react_native_elmish_hmr_state;
        if (!(hmrState == null)) return _optionJs.some(hmrState);
        else return void 0;
    }
}
_c1 = Internal_tryRestoreState;
function Internal_saveState(data, hmrState) {
    if (Internal_platform.tag === 0) data.hmrState = hmrState;
    else window.react_native_elmish_hmr_state = hmrState;
}
_c2 = Internal_saveState;
class Msg$1 extends _typesJs.Union {
    constructor(tag1, ...fields1){
        super();
        this.tag = tag1 | 0;
        this.fields = fields1;
    }
    cases() {
        return [
            "UserMsg",
            "Stop"
        ];
    }
}
function Msg$1$reflection(gen0) {
    return _reflectionJs.union_type("Elmish.HMR.Program.Msg`1", [
        gen0
    ], Msg$1, ()=>[
            [
                [
                    "Item",
                    gen0
                ]
            ],
            []
        ]
    );
}
_c3 = Msg$1$reflection;
class Model$1 extends _typesJs.Union {
    constructor(tag2, ...fields2){
        super();
        this.tag = tag2 | 0;
        this.fields = fields2;
    }
    cases() {
        return [
            "Inactive",
            "Active"
        ];
    }
}
function Model$1$reflection(gen0) {
    return _reflectionJs.union_type("Elmish.HMR.Program.Model`1", [
        gen0
    ], Model$1, ()=>[
            [],
            [
                [
                    "Item",
                    gen0
                ]
            ]
        ]
    );
}
_c4 = Model$1$reflection;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "Internal_Platform$reflection");
$RefreshReg$(_c1, "Internal_tryRestoreState");
$RefreshReg$(_c2, "Internal_saveState");
$RefreshReg$(_c3, "Msg$1$reflection");
$RefreshReg$(_c4, "Model$1$reflection");

},{"../fable-library.3.2.10/Types.js":"7IOW0","../fable-library.3.2.10/Reflection.js":"c0YT4","../fable-library.3.2.10/Option.js":"gHWVf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}]},["2rAXy","gqUfj","b1CQh"], "b1CQh", "parcelRequire94c2")

//# sourceMappingURL=index.e483791a.js.map
